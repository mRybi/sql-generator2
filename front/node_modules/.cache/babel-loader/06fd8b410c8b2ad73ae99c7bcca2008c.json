{"ast":null,"code":"import _classCallCheck from \"/home/dell/Dokumenty/sql-gen2/sql-gen2/sql-generator2/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/dell/Dokumenty/sql-gen2/sql-gen2/sql-generator2/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/dell/Dokumenty/sql-gen2/sql-gen2/sql-generator2/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/dell/Dokumenty/sql-gen2/sql-gen2/sql-generator2/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _get from \"/home/dell/Dokumenty/sql-gen2/sql-gen2/sql-generator2/node_modules/@babel/runtime/helpers/esm/get\";\nimport _inherits from \"/home/dell/Dokumenty/sql-gen2/sql-gen2/sql-generator2/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport { NodeModel, Toolkit } from \"storm-react-diagrams\";\nimport * as _ from \"lodash\";\nimport { Port } from \"./Port\";\nexport var Node =\n/*#__PURE__*/\nfunction (_NodeModel) {\n  _inherits(Node, _NodeModel);\n\n  function Node(type) {\n    var _this;\n\n    var name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"Untitled\";\n    var color = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"rgb(0,192,255)\";\n\n    _classCallCheck(this, Node);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Node).call(this, type));\n    _this.name = void 0;\n    _this.color = void 0;\n    _this.ports = void 0;\n    _this.selectedRelation = void 0;\n    _this.name = name;\n    _this.color = color;\n    _this.ports = {};\n    return _this;\n  }\n\n  _createClass(Node, [{\n    key: \"addInPort\",\n    value: function addInPort(isAutoincremented, isNotNull, isUnique, isPrimaryKey, isForeignKey, label, selectedRelation, diagramEngine, propertyType) {\n      this.selectedRelation = selectedRelation;\n      return this.addPort(new Port(isNotNull, isAutoincremented, isUnique, isPrimaryKey, isForeignKey, true, Toolkit.UID(), label, selectedRelation, diagramEngine, propertyType));\n    }\n  }, {\n    key: \"updatePorts\",\n    value: function updatePorts(selectedRelation) {\n      var ports = this.getInPorts();\n      ports.forEach(function (p) {\n        return p.updatePortRelation(selectedRelation);\n      });\n    }\n  }, {\n    key: \"deSerialize\",\n    value: function deSerialize(object, engine) {\n      _get(_getPrototypeOf(Node.prototype), \"deSerialize\", this).call(this, object, engine);\n\n      this.name = object.name;\n      this.color = object.color;\n    }\n  }, {\n    key: \"serialize\",\n    value: function serialize() {\n      return _.merge(_get(_getPrototypeOf(Node.prototype), \"serialize\", this).call(this), {\n        name: this.name,\n        color: this.color\n      });\n    }\n  }, {\n    key: \"getInPorts\",\n    value: function getInPorts() {\n      return _.filter(this.ports, function (portModel) {\n        return portModel.in;\n      });\n    }\n  }, {\n    key: \"getOutPorts\",\n    value: function getOutPorts() {\n      return _.filter(this.ports, function (portModel) {\n        return !portModel.in;\n      });\n    }\n  }]);\n\n  return Node;\n}(NodeModel);","map":{"version":3,"sources":["/home/dell/Dokumenty/sql-gen2/sql-gen2/sql-generator2/src/components/models/Node.ts"],"names":["NodeModel","Toolkit","_","Port","Node","type","name","color","ports","selectedRelation","isAutoincremented","isNotNull","isUnique","isPrimaryKey","isForeignKey","label","diagramEngine","propertyType","addPort","UID","getInPorts","forEach","p","updatePortRelation","object","engine","merge","filter","portModel","in"],"mappings":";;;;;;AAAA,SAASA,SAAT,EAAsCC,OAAtC,QAAkF,sBAAlF;AACA,OAAO,KAAKC,CAAZ,MAAmB,QAAnB;AACA,SAASC,IAAT,QAAqB,QAArB;AAIA,WAAaC,IAAb;AAAA;AAAA;AAAA;;AAOC,gBAAYC,IAAZ,EAAuF;AAAA;;AAAA,QAA7DC,IAA6D,uEAA9C,UAA8C;AAAA,QAAlCC,KAAkC,uEAAlB,gBAAkB;;AAAA;;AACtF,8EAAMF,IAAN;AADsF,UALpFC,IAKoF;AAAA,UAJvFC,KAIuF;AAAA,UAHvFC,KAGuF;AAAA,UAFvFC,gBAEuF;AAEtF,UAAKH,IAAL,GAAYA,IAAZ;AACA,UAAKC,KAAL,GAAaA,KAAb;AACA,UAAKC,KAAL,GAAa,EAAb;AAJsF;AAKtF;;AAZF;AAAA;AAAA,8BAcWE,iBAdX,EAcuCC,SAdvC,EAc2DC,QAd3D,EAc8EC,YAd9E,EAcqGC,YAdrG,EAc4HC,KAd5H,EAc2IN,gBAd3I,EAc2KO,aAd3K,EAcyMC,YAdzM,EAc6O;AAC3O,WAAKR,gBAAL,GAAuBA,gBAAvB;AACA,aAAO,KAAKS,OAAL,CAAa,IAAIf,IAAJ,CAASQ,SAAT,EAAoBD,iBAApB,EAAuCE,QAAvC,EAAiDC,YAAjD,EAA8DC,YAA9D,EAA2E,IAA3E,EAAiFb,OAAO,CAACkB,GAAR,EAAjF,EAAgGJ,KAAhG,EAAuGN,gBAAvG,EAAyHO,aAAzH,EAAyIC,YAAzI,CAAb,CAAP;AACA;AAjBF;AAAA;AAAA,gCAmBaR,gBAnBb,EAmB6C;AAC3C,UAAID,KAAK,GAAG,KAAKY,UAAL,EAAZ;AACAZ,MAAAA,KAAK,CAACa,OAAN,CAAc,UAAAC,CAAC;AAAA,eAAIA,CAAC,CAACC,kBAAF,CAAqBd,gBAArB,CAAJ;AAAA,OAAf;AACA;AAtBF;AAAA;AAAA,gCAwBae,MAxBb,EAwB0BC,MAxB1B,EAwBiD;AAC/C,4EAAkBD,MAAlB,EAA0BC,MAA1B;;AACA,WAAKnB,IAAL,GAAYkB,MAAM,CAAClB,IAAnB;AACA,WAAKC,KAAL,GAAaiB,MAAM,CAACjB,KAApB;AACA;AA5BF;AAAA;AAAA,gCA8Ba;AACX,aAAOL,CAAC,CAACwB,KAAF,sEAA2B;AACjCpB,QAAAA,IAAI,EAAE,KAAKA,IADsB;AAEjCC,QAAAA,KAAK,EAAE,KAAKA;AAFqB,OAA3B,CAAP;AAIA;AAnCF;AAAA;AAAA,iCAqCsB;AACpB,aAAOL,CAAC,CAACyB,MAAF,CAAS,KAAKnB,KAAd,EAAqB,UAAAoB,SAAS,EAAI;AACxC,eAAOA,SAAS,CAACC,EAAjB;AACA,OAFM,CAAP;AAGA;AAzCF;AAAA;AAAA,kCA2CuB;AACrB,aAAO3B,CAAC,CAACyB,MAAF,CAAS,KAAKnB,KAAd,EAAqB,UAAAoB,SAAS,EAAI;AACxC,eAAO,CAACA,SAAS,CAACC,EAAlB;AACA,OAFM,CAAP;AAGA;AA/CF;;AAAA;AAAA,EAA0B7B,SAA1B","sourcesContent":["import { NodeModel, DefaultPortModel, Toolkit, DiagramEngine, DiagramModel } from \"storm-react-diagrams\";\nimport * as _ from \"lodash\";\nimport { Port } from \"./Port\";\nimport { PropertyType } from \"./PropertyType\";\nimport { RelationType } from \"../../AppView\";\n\nexport class Node extends NodeModel{\n\n    name: string;\n\tcolor: string;\n\tports: { [s: string]: Port };\n\tselectedRelation: RelationType;\n\n\tconstructor(type: string, name: string = \"Untitled\", color: string = \"rgb(0,192,255)\") {\n\t\tsuper(type);\n\t\tthis.name = name;\n\t\tthis.color = color;\n\t\tthis.ports = {};\n\t}\n\n\taddInPort(isAutoincremented: boolean, isNotNull: boolean, isUnique: boolean, isPrimaryKey: boolean, isForeignKey: boolean, label: string, selectedRelation: RelationType, diagramEngine: DiagramEngine, propertyType?: PropertyType ): Port {\n\t\tthis.selectedRelation= selectedRelation;\n\t\treturn this.addPort(new Port(isNotNull, isAutoincremented, isUnique, isPrimaryKey,isForeignKey,true, Toolkit.UID(), label, selectedRelation, diagramEngine,  propertyType));\n\t}\n\n\tupdatePorts(selectedRelation: RelationType) {\n\t\tlet ports = this.getInPorts();\n\t\tports.forEach(p => p.updatePortRelation(selectedRelation));\n\t}\n\n\tdeSerialize(object: any, engine: DiagramEngine) {\n\t\tsuper.deSerialize(object, engine);\n\t\tthis.name = object.name;\n\t\tthis.color = object.color;\n\t}\n\n\tserialize() {\n\t\treturn _.merge(super.serialize(), {\n\t\t\tname: this.name,\n\t\t\tcolor: this.color\n\t\t});\n\t}\n\n\tgetInPorts(): Port[] {\n\t\treturn _.filter(this.ports, portModel => {\n\t\t\treturn portModel.in;\n\t\t});\n\t}\n\n\tgetOutPorts(): Port[] {\n\t\treturn _.filter(this.ports, portModel => {\n\t\t\treturn !portModel.in;\n\t\t});\n\t}\n}"]},"metadata":{},"sourceType":"module"}