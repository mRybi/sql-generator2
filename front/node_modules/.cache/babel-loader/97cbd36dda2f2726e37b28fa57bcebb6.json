{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\n\nvar _Formatter = require(\"../core/Formatter\");\n\nvar _Formatter2 = _interopRequireDefault(_Formatter);\n\nvar _Tokenizer = require(\"../core/Tokenizer\");\n\nvar _Tokenizer2 = _interopRequireDefault(_Tokenizer);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nvar reservedWords = [\"ALL\", \"ALTER\", \"ANALYZE\", \"AND\", \"ANY\", \"ARRAY\", \"AS\", \"ASC\", \"BEGIN\", \"BETWEEN\", \"BINARY\", \"BOOLEAN\", \"BREAK\", \"BUCKET\", \"BUILD\", \"BY\", \"CALL\", \"CASE\", \"CAST\", \"CLUSTER\", \"COLLATE\", \"COLLECTION\", \"COMMIT\", \"CONNECT\", \"CONTINUE\", \"CORRELATE\", \"COVER\", \"CREATE\", \"DATABASE\", \"DATASET\", \"DATASTORE\", \"DECLARE\", \"DECREMENT\", \"DELETE\", \"DERIVED\", \"DESC\", \"DESCRIBE\", \"DISTINCT\", \"DO\", \"DROP\", \"EACH\", \"ELEMENT\", \"ELSE\", \"END\", \"EVERY\", \"EXCEPT\", \"EXCLUDE\", \"EXECUTE\", \"EXISTS\", \"EXPLAIN\", \"FALSE\", \"FETCH\", \"FIRST\", \"FLATTEN\", \"FOR\", \"FORCE\", \"FROM\", \"FUNCTION\", \"GRANT\", \"GROUP\", \"GSI\", \"HAVING\", \"IF\", \"IGNORE\", \"ILIKE\", \"IN\", \"INCLUDE\", \"INCREMENT\", \"INDEX\", \"INFER\", \"INLINE\", \"INNER\", \"INSERT\", \"INTERSECT\", \"INTO\", \"IS\", \"JOIN\", \"KEY\", \"KEYS\", \"KEYSPACE\", \"KNOWN\", \"LAST\", \"LEFT\", \"LET\", \"LETTING\", \"LIKE\", \"LIMIT\", \"LSM\", \"MAP\", \"MAPPING\", \"MATCHED\", \"MATERIALIZED\", \"MERGE\", \"MINUS\", \"MISSING\", \"NAMESPACE\", \"NEST\", \"NOT\", \"NULL\", \"NUMBER\", \"OBJECT\", \"OFFSET\", \"ON\", \"OPTION\", \"OR\", \"ORDER\", \"OUTER\", \"OVER\", \"PARSE\", \"PARTITION\", \"PASSWORD\", \"PATH\", \"POOL\", \"PREPARE\", \"PRIMARY\", \"PRIVATE\", \"PRIVILEGE\", \"PROCEDURE\", \"PUBLIC\", \"RAW\", \"REALM\", \"REDUCE\", \"RENAME\", \"RETURN\", \"RETURNING\", \"REVOKE\", \"RIGHT\", \"ROLE\", \"ROLLBACK\", \"SATISFIES\", \"SCHEMA\", \"SELECT\", \"SELF\", \"SEMI\", \"SET\", \"SHOW\", \"SOME\", \"START\", \"STATISTICS\", \"STRING\", \"SYSTEM\", \"THEN\", \"TO\", \"TRANSACTION\", \"TRIGGER\", \"TRUE\", \"TRUNCATE\", \"UNDER\", \"UNION\", \"UNIQUE\", \"UNKNOWN\", \"UNNEST\", \"UNSET\", \"UPDATE\", \"UPSERT\", \"USE\", \"USER\", \"USING\", \"VALIDATE\", \"VALUE\", \"VALUED\", \"VALUES\", \"VIA\", \"VIEW\", \"WHEN\", \"WHERE\", \"WHILE\", \"WITH\", \"WITHIN\", \"WORK\", \"XOR\"];\nvar reservedToplevelWords = [\"DELETE FROM\", \"EXCEPT ALL\", \"EXCEPT\", \"EXPLAIN DELETE FROM\", \"EXPLAIN UPDATE\", \"EXPLAIN UPSERT\", \"FROM\", \"GROUP BY\", \"HAVING\", \"INFER\", \"INSERT INTO\", \"INTERSECT ALL\", \"INTERSECT\", \"LET\", \"LIMIT\", \"MERGE\", \"NEST\", \"ORDER BY\", \"PREPARE\", \"SELECT\", \"SET CURRENT SCHEMA\", \"SET SCHEMA\", \"SET\", \"UNION ALL\", \"UNION\", \"UNNEST\", \"UPDATE\", \"UPSERT\", \"USE KEYS\", \"VALUES\", \"WHERE\"];\nvar reservedNewlineWords = [\"AND\", \"INNER JOIN\", \"JOIN\", \"LEFT JOIN\", \"LEFT OUTER JOIN\", \"OR\", \"OUTER JOIN\", \"RIGHT JOIN\", \"RIGHT OUTER JOIN\", \"XOR\"];\nvar tokenizer = void 0;\n\nvar N1qlFormatter = function () {\n  /**\n   * @param {Object} cfg Different set of configurations\n   */\n  function N1qlFormatter(cfg) {\n    _classCallCheck(this, N1qlFormatter);\n\n    this.cfg = cfg;\n  }\n  /**\n   * Format the whitespace in a N1QL string to make it easier to read\n   *\n   * @param {String} query The N1QL string\n   * @return {String} formatted string\n   */\n\n\n  N1qlFormatter.prototype.format = function format(query) {\n    if (!tokenizer) {\n      tokenizer = new _Tokenizer2[\"default\"]({\n        reservedWords: reservedWords,\n        reservedToplevelWords: reservedToplevelWords,\n        reservedNewlineWords: reservedNewlineWords,\n        stringTypes: [\"\\\"\\\"\", \"''\", \"``\"],\n        openParens: [\"(\", \"[\", \"{\"],\n        closeParens: [\")\", \"]\", \"}\"],\n        namedPlaceholderTypes: [\"$\"],\n        lineCommentTypes: [\"#\", \"--\"]\n      });\n    }\n\n    return new _Formatter2[\"default\"](this.cfg, tokenizer).format(query);\n  };\n\n  return N1qlFormatter;\n}();\n\nexports[\"default\"] = N1qlFormatter;\nmodule.exports = exports[\"default\"];","map":null,"metadata":{},"sourceType":"script"}