{"ast":null,"code":"import _classCallCheck from \"/home/dell/Dokumenty/sql-gen2/sql-gen2/sql-generator2/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/dell/Dokumenty/sql-gen2/sql-gen2/sql-generator2/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/dell/Dokumenty/sql-gen2/sql-gen2/sql-generator2/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/dell/Dokumenty/sql-gen2/sql-gen2/sql-generator2/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _get from \"/home/dell/Dokumenty/sql-gen2/sql-gen2/sql-generator2/node_modules/@babel/runtime/helpers/esm/get\";\nimport _inherits from \"/home/dell/Dokumenty/sql-gen2/sql-gen2/sql-generator2/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport * as _ from \"lodash\";\nimport { PortModel } from \"storm-react-diagrams\";\nimport { Link } from \"./Link\";\nimport { PropertyType } from \"./PropertyType\";\nimport { Node } from \"./Node\";\nimport { RelationType } from \"../../App2\";\nexport var Port =\n/*#__PURE__*/\nfunction (_PortModel) {\n  _inherits(Port, _PortModel);\n\n  function Port(isPrimaryKey, isForeignKey, isInput, name) {\n    var _this;\n\n    var label = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;\n    var selectedRelation = arguments.length > 5 ? arguments[5] : undefined;\n    var diagramModel = arguments.length > 6 ? arguments[6] : undefined;\n    var propertyType = arguments.length > 7 ? arguments[7] : undefined;\n    var id = arguments.length > 8 ? arguments[8] : undefined;\n\n    _classCallCheck(this, Port);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Port).call(this, name, \"with_prop\", id));\n    _this.in = void 0;\n    _this.label = void 0;\n    _this.propertyType = void 0;\n    _this.isPrimaryKey = void 0;\n    _this.isForeignKey = void 0;\n    _this.links = void 0;\n    _this.iterator = 1;\n    _this.firstM2M = 1;\n    _this.selectedRelation = void 0;\n    _this.diagramModel = void 0;\n    _this.in = isInput;\n    _this.label = label || name;\n    _this.links = {};\n    _this.propertyType = propertyType;\n    _this.isForeignKey = isForeignKey;\n    _this.isPrimaryKey = isPrimaryKey;\n    _this.selectedRelation = selectedRelation;\n    _this.diagramModel = diagramModel;\n    return _this;\n  }\n\n  _createClass(Port, [{\n    key: \"updatePortRelation\",\n    value: function updatePortRelation(selectedRelation) {\n      this.selectedRelation = selectedRelation;\n    }\n  }, {\n    key: \"deSerialize\",\n    value: function deSerialize(object, engine) {\n      _get(_getPrototypeOf(Port.prototype), \"deSerialize\", this).call(this, object, engine);\n\n      this.in = object.in;\n      this.label = object.label;\n    }\n  }, {\n    key: \"serialize\",\n    value: function serialize() {\n      return _.merge(_get(_getPrototypeOf(Port.prototype), \"serialize\", this).call(this), {\n        in: this.in,\n        label: this.label,\n        propertyType: PropertyType[this.propertyType],\n        isForeignKey: this.isForeignKey,\n        isPrimaryKey: this.isPrimaryKey\n      });\n    }\n  }, {\n    key: \"link\",\n    value: function link(nodeToLink) {\n      //dalczego  przypina do zlego portu?\n      var thisPortNode = this.getNode();\n      var ports = nodeToLink.getInPorts();\n      var isThereAlreadyThatPort = ports.filter(function (p) {\n        return p.label === \"\".concat(thisPortNode.name, \"Id\");\n      }).length;\n\n      if (isThereAlreadyThatPort === 0) {\n        if (this.selectedRelation === RelationType.M2M) {\n          var link = this.createLinkModel();\n\n          if (link !== null) {\n            link.setSourcePort(this);\n            var portLinks = this.getLinks();\n            var xd = Object.keys(portLinks).filter(function (l) {\n              return portLinks[l].getTargetPort() === _ports.filter(function (p) {\n                return p.label === 'Id';\n              })[0];\n            });\n            this.diagramModel.removeLink(xd[0]);\n            var newPort = nodeToLink.addInPort(false, true, \"\".concat(thisPortNode.name, \"Id\"), this.selectedRelation, this.diagramModel, PropertyType.INT);\n\n            var _ports = nodeToLink.getInPorts();\n\n            link.setTargetPort(newPort); // link.setTargetPort(ports.filter(p => p.label === 'Id')[0]);\n\n            this.selectedRelation = RelationType.none;\n            return link;\n          }\n        } else {\n          var _link = this.createLinkModel();\n\n          if (_link !== null) {\n            _link.setSourcePort(this);\n\n            var _newPort = nodeToLink.addInPort(false, true, \"\".concat(thisPortNode.name, \"Id\"), this.selectedRelation, this.diagramModel, PropertyType.INT);\n\n            console.log('source port', _newPort);\n\n            _link.setTargetPort(_newPort);\n\n            this.diagramModel.addLink(_link);\n            this.selectedRelation = RelationType.none;\n          }\n        }\n      }\n\n      this.selectedRelation = RelationType.none;\n      return null;\n    }\n  }, {\n    key: \"createM2MNode\",\n    value: function createM2MNode(port1Name, port2Name) {\n      var nodes = this.diagramModel.getNodes();\n      var isAlredy = Object.keys(nodes).filter(function (x) {\n        return nodes[x].name.slice(3) === \"\".concat(port1Name.slice(3, 8), \"Has\").concat(port2Name);\n      });\n\n      if (isAlredy.length === 0) {\n        var relationNode = new Node('table', \"rl_\".concat(port1Name, \"Has\").concat(port2Name));\n        relationNode.addInPort(true, false, \"Id\", this.selectedRelation, this.diagramModel, PropertyType.INT);\n        relationNode.addInPort(false, true, \"\".concat(port1Name, \"Id\"), this.selectedRelation, this.diagramModel, PropertyType.INT);\n        relationNode.addInPort(false, true, \"\".concat(port2Name, \"Id\"), this.selectedRelation, this.diagramModel, PropertyType.INT);\n        return relationNode;\n      }\n\n      return null;\n    }\n  }, {\n    key: \"addRelationLink\",\n    value: function addRelationLink(node1, relationtNode, node2, port) {\n      var portLinks = this.getLinks();\n      var link = Object.keys(portLinks).filter(function (l) {\n        return portLinks[l].getTargetPort() === port;\n      });\n      this.diagramModel.removeLink(link[0]);\n      var link1 = this.createLinkModel();\n      var link2 = this.createLinkModel();\n\n      if (!link1 || !link2) {} else {\n        link1.setSourcePort(node1.getInPorts().filter(function (p) {\n          return p.label === 'Id';\n        })[0]);\n        link1.setTargetPort(relationtNode.getInPorts().filter(function (p) {\n          return p.label === 'Id';\n        })[0]);\n        link2.setSourcePort(relationtNode.getInPorts().filter(function (p) {\n          return p.label === 'Id';\n        })[0]);\n        link2.setTargetPort(node2.getInPorts().filter(function (p) {\n          return p.label === 'Id';\n        })[0]);\n        this.diagramModel.addAll(relationtNode, link1, link2);\n        this.selectedRelation = RelationType.none;\n      }\n\n      this.selectedRelation = RelationType.none;\n    }\n  }, {\n    key: \"canLinkToPort\",\n    value: function canLinkToPort(port) {\n      if (this.selectedRelation === RelationType.none) {\n        return true;\n      } else if (port instanceof Port) {\n        if (this.selectedRelation !== RelationType.M2M && (this.isPrimaryKey && port.isPrimaryKey || this.isPrimaryKey && port.isForeignKey || this.isForeignKey && port.isPrimaryKey)) {\n          var nodeToLink = port.getNode();\n          this.link(nodeToLink);\n        } else if (this.selectedRelation === RelationType.M2M && this.iterator === 1) {\n          if (this.firstM2M === 1) {\n            var _nodeToLink = port.getNode();\n\n            var relNode = this.createM2MNode(this.getNode().name, _nodeToLink.name);\n\n            if (relNode !== null) {\n              this.addRelationLink(this.getNode(), relNode, port.getNode(), port);\n              var app = this.diagramModel.getNodes();\n              Object.keys(app).forEach(function (x) {\n                return app[x].updatePorts(RelationType.none);\n              });\n            } else {\n              var _app = this.diagramModel.getNodes();\n\n              Object.keys(_app).forEach(function (x) {\n                return _app[x].updatePorts(RelationType.none);\n              });\n              this.selectedRelation = RelationType.none;\n              this.firstM2M = 0;\n              this.iterator = 0;\n            }\n          }\n\n          return false;\n        }\n\n        return false;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"createLinkModel\",\n    value: function createLinkModel() {\n      var link = _get(_getPrototypeOf(Port.prototype), \"createLinkModel\", this).call(this);\n\n      if (this.selectedRelation === RelationType.O2O) {\n        return new Link(\"default\", RelationType.O2O);\n      } else if (this.selectedRelation === RelationType.O2M) {\n        return new Link(\"default\", RelationType.O2M);\n      } else if (this.selectedRelation === RelationType.M2M) {\n        return new Link(\"default\", RelationType.M2M);\n      } else {\n        return null;\n      }\n    }\n  }]);\n\n  return Port;\n}(PortModel);","map":{"version":3,"sources":["/home/dell/Dokumenty/sql-gen2/sql-gen2/sql-generator2/src/components/models/Port.ts"],"names":["_","PortModel","Link","PropertyType","Node","RelationType","Port","isPrimaryKey","isForeignKey","isInput","name","label","selectedRelation","diagramModel","propertyType","id","in","links","iterator","firstM2M","object","engine","merge","nodeToLink","thisPortNode","getNode","ports","getInPorts","isThereAlreadyThatPort","filter","p","length","M2M","link","createLinkModel","setSourcePort","portLinks","getLinks","xd","Object","keys","l","getTargetPort","removeLink","newPort","addInPort","INT","setTargetPort","none","console","log","addLink","port1Name","port2Name","nodes","getNodes","isAlredy","x","slice","relationNode","node1","relationtNode","node2","port","link1","link2","addAll","relNode","createM2MNode","addRelationLink","app","forEach","updatePorts","O2O","O2M"],"mappings":"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","sourcesContent":["import * as _ from \"lodash\";\nimport { PortModel, DiagramEngine, LinkModel, DefaultLinkModel, NodeModel, DiagramModel } from \"storm-react-diagrams\";\nimport { Link } from \"./Link\";\nimport { PropertyType } from \"./PropertyType\";\nimport { Node } from \"./Node\";\nimport { RelationType } from \"../../App2\";\n\nexport class Port extends PortModel {\n\n\tin: boolean;\n\tlabel: string;\n\tpropertyType: PropertyType;\n\tisPrimaryKey: boolean;\n\tisForeignKey: boolean;\n\tlinks: { [id: string]: Link };\n\titerator: number = 1;\n\tfirstM2M: number = 1;\n\tselectedRelation: RelationType;\n\tdiagramModel: DiagramModel;\n\n\tconstructor(isPrimaryKey: boolean, isForeignKey: boolean, isInput: boolean, name: string, label: string = null, selectedRelation: RelationType, diagramModel?: DiagramModel, propertyType?: PropertyType, id?: string) {\n\t\tsuper(name, \"with_prop\", id);\n\t\tthis.in = isInput;\n\t\tthis.label = label || name;\n\t\tthis.links = {};\n\t\tthis.propertyType = propertyType;\n\t\tthis.isForeignKey = isForeignKey;\n\t\tthis.isPrimaryKey = isPrimaryKey;\n\t\tthis.selectedRelation = selectedRelation;\n\t\tthis.diagramModel = diagramModel;\n\n\t}\n\n\tupdatePortRelation(selectedRelation: RelationType) {\n\t\tthis.selectedRelation = selectedRelation;\n\t}\n\n\tdeSerialize(object: any, engine: DiagramEngine) {\n\t\tsuper.deSerialize(object, engine);\n\t\tthis.in = object.in;\n\t\tthis.label = object.label;\n\t}\n\n\tserialize() {\n\t\treturn _.merge(super.serialize(), {\n\t\t\tin: this.in,\n\t\t\tlabel: this.label,\n\t\t\tpropertyType: PropertyType[this.propertyType],\n\t\t\tisForeignKey: this.isForeignKey,\n\t\t\tisPrimaryKey: this.isPrimaryKey\n\t\t});\n\t}\n\n\n\n\tlink(nodeToLink: Node): LinkModel {\n\t\t//dalczego  przypina do zlego portu?\n\n\t\tlet thisPortNode = this.getNode() as Node;\n\t\tlet ports = nodeToLink.getInPorts();\n\t\tlet isThereAlreadyThatPort = ports.filter(p => p.label === `${thisPortNode.name}Id`).length;\n\t\tif (isThereAlreadyThatPort === 0) {\n\t\t\tif (this.selectedRelation === RelationType.M2M) {\n\t\t\t\tlet link = this.createLinkModel();\n\t\t\t\tif (link !== null) {\n\t\t\t\t\tlink.setSourcePort(this);\n\t\t\t\t\tlet portLinks = this.getLinks() as { [s: string]: Link };\n\n\t\t\t\t\tlet xd = Object.keys(portLinks).filter(l => portLinks[l].getTargetPort() === ports.filter(p => p.label === 'Id')[0]);\n\t\t\t\t\tthis.diagramModel.removeLink(xd[0]);\n\n\t\t\t\t\tlet newPort = nodeToLink.addInPort(false, true, `${thisPortNode.name}Id`, this.selectedRelation, this.diagramModel, PropertyType.INT);\n\n\t\t\t\t\tlet ports = nodeToLink.getInPorts();\n\t\t\t\t\tlink.setTargetPort(newPort);\n\t\t\t\t\t// link.setTargetPort(ports.filter(p => p.label === 'Id')[0]);\n\t\t\t\t\tthis.selectedRelation = RelationType.none;\n\n\t\t\t\t\treturn link;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tlet link = this.createLinkModel();\n\t\t\t\tif (link !== null) {\n\t\t\t\tlink.setSourcePort(this)\n\t\t\t\tlet newPort = nodeToLink.addInPort(false, true, `${thisPortNode.name}Id`, this.selectedRelation, this.diagramModel, PropertyType.INT);\n\t\t\t\tconsole.log('source port', newPort);\n\t\t\t\tlink.setTargetPort(newPort);\n\t\t\t\t\n\t\t\t\tthis.diagramModel.addLink(link);\n\t\t\t\tthis.selectedRelation = RelationType.none;\n\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tthis.selectedRelation = RelationType.none;\n\n\t\treturn null;\n\t}\n\n\tcreateM2MNode(port1Name: string, port2Name: string) {\n\t\tlet nodes = this.diagramModel.getNodes() as { [s: string]: Node };\n\t\tlet isAlredy = Object.keys(nodes).filter(x => nodes[x].name.slice(3) === `${port1Name.slice(3, 8)}Has${port2Name}`);\n\n\n\t\tif (isAlredy.length === 0) {\n\t\t\tlet relationNode = new Node('table', `rl_${port1Name}Has${port2Name}`);\n\t\t\trelationNode.addInPort(true, false, `Id`, this.selectedRelation, this.diagramModel, PropertyType.INT)\n\t\t\trelationNode.addInPort(false, true, `${port1Name}Id`, this.selectedRelation, this.diagramModel, PropertyType.INT)\n\t\t\trelationNode.addInPort(false, true, `${port2Name}Id`, this.selectedRelation, this.diagramModel, PropertyType.INT)\n\t\t\treturn relationNode;\n\t\t}\n\n\t\treturn null;\n\t}\n\n\taddRelationLink(node1: Node, relationtNode: Node, node2: Node, port: Port) {\n\t\tlet portLinks = this.getLinks() as { [s: string]: Link };\n\n\t\tlet link = Object.keys(portLinks).filter(l => portLinks[l].getTargetPort() === port);\n\n\n\t\tthis.diagramModel.removeLink(link[0])\n\n\n\t\tlet link1 = this.createLinkModel();\n\t\tlet link2 = this.createLinkModel();\n\t\tif (!link1 || !link2) {\n\t\t} else {\n\t\t\tlink1.setSourcePort(node1.getInPorts().filter(p => p.label === 'Id')[0])\n\t\t\tlink1.setTargetPort(relationtNode.getInPorts().filter(p => p.label === 'Id')[0])\n\t\t\tlink2.setSourcePort(relationtNode.getInPorts().filter(p => p.label === 'Id')[0])\n\t\t\tlink2.setTargetPort(node2.getInPorts().filter(p => p.label === 'Id')[0])\n\t\t\tthis.diagramModel.addAll(relationtNode, link1, link2);\n\t\t\tthis.selectedRelation = RelationType.none;\n\t\t}\n\t\tthis.selectedRelation = RelationType.none;\n\n\n\t}\n\n\tcanLinkToPort(port: PortModel): boolean {\n\t\tif (this.selectedRelation === RelationType.none) {\n\t\t\treturn true;\n\t\t} else\n\t\t\tif (port instanceof Port) {\n\n\t\t\t\tif (this.selectedRelation !== RelationType.M2M && (this.isPrimaryKey && port.isPrimaryKey || this.isPrimaryKey && port.isForeignKey || this.isForeignKey && port.isPrimaryKey)) {\n\t\t\t\t\tlet nodeToLink = port.getNode() as Node;\n\t\t\t\t\tthis.link(nodeToLink);\n\t\t\t\t}\n\t\t\t\telse if (this.selectedRelation === RelationType.M2M && this.iterator === 1) {\n\t\t\t\t\tif (this.firstM2M === 1) {\n\t\t\t\t\t\tlet nodeToLink = port.getNode() as Node;\n\t\t\t\t\t\tlet relNode = this.createM2MNode((this.getNode() as Node).name, nodeToLink.name);\n\t\t\t\t\t\tif (relNode !== null) {\n\t\t\t\t\t\t\tthis.addRelationLink(this.getNode() as Node, relNode, port.getNode() as Node, port);\n\t\t\t\t\t\t\tlet app = this.diagramModel.getNodes() as { [s: string]: Node };\n\t\t\t\t\t\t\tObject.keys(app).forEach(x => app[x].updatePorts(RelationType.none));\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tlet app = this.diagramModel.getNodes() as { [s: string]: Node };\n\t\t\t\t\t\t\tObject.keys(app).forEach(x => app[x].updatePorts(RelationType.none));\n\n\t\t\t\t\t\t\tthis.selectedRelation = RelationType.none;\n\t\t\t\t\t\t\tthis.firstM2M = 0;\n\t\t\t\t\t\t\tthis.iterator = 0\n\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\treturn false;\n\n\n\t}\n\n\tcreateLinkModel(): LinkModel {\n\t\tlet link = super.createLinkModel();\n\t\tif (this.selectedRelation === RelationType.O2O) {\n\t\t\treturn new Link(\"default\", RelationType.O2O);\n\t\t} else if (this.selectedRelation === RelationType.O2M) {\n\t\t\treturn new Link(\"default\", RelationType.O2M);\n\t\t} else if (this.selectedRelation === RelationType.M2M) {\n\t\t\treturn new Link(\"default\", RelationType.M2M);\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\n\t}\n}"]},"metadata":{},"sourceType":"module"}