{"ast":null,"code":"import _classCallCheck from \"/home/dell/Dokumenty/sql-gen2/sql-gen2/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/dell/Dokumenty/sql-gen2/sql-gen2/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/dell/Dokumenty/sql-gen2/sql-gen2/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/dell/Dokumenty/sql-gen2/sql-gen2/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/dell/Dokumenty/sql-gen2/sql-gen2/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/dell/Dokumenty/sql-gen2/sql-gen2/src/App.tsx\";\nimport React, { Component } from 'react';\nimport * as SRD from 'storm-react-diagrams';\nimport './App.css';\nimport { TrayItemWidget } from './components/dragAndDrop/TrayItemWidget';\nimport { TrayWidget } from './components/dragAndDrop/TrayWidget';\n\nrequire(\"storm-react-diagrams/dist/style.min.css\");\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, App);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(App)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.makeDiagram = function () {\n      // 1) setup the diagram engine\n      var engine = new SRD.DiagramEngine();\n      engine.installDefaultFactories(); // 2) setup the diagram model\n\n      var model = new SRD.DiagramModel(); // 3) create a default node\n\n      var node1 = new SRD.DefaultNodeModel(\"Node 1\", \"rgb(0,192,255)\");\n      var port1 = node1.addOutPort(\"Out\");\n      node1.setPosition(100, 100); // 4) create another default node\n\n      var node2 = new SRD.DefaultNodeModel(\"Node 2\", \"rgb(192,255,0)\");\n      var port2 = node2.addInPort(\"In\");\n      node2.setPosition(400, 100); // 5) link the ports\n\n      var link1 = port1.link(port2); // 6) add the models to the root graph\n\n      model.addAll(node1, node2, link1); // 7) load model into engine\n\n      engine.setDiagramModel(model);\n      return React.createElement(SRD.DiagramWidget, {\n        className: \"diagram srd-demo-canvas\",\n        diagramEngine: engine,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37\n        },\n        __self: this\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42\n        },\n        __self: this\n      }, React.createElement(TrayWidget, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43\n        },\n        __self: this\n      }, React.createElement(TrayItemWidget, {\n        model: {\n          type: \"in\"\n        },\n        name: \"In Node\",\n        color: \"rgb(192,255,0)\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      }), React.createElement(TrayItemWidget, {\n        model: {\n          type: \"out\"\n        },\n        name: \"Out Node\",\n        color: \"rgb(0,192,255)\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45\n        },\n        __self: this\n      })), this.makeDiagram());\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/home/dell/Dokumenty/sql-gen2/sql-gen2/src/App.tsx"],"names":["React","Component","SRD","TrayItemWidget","TrayWidget","require","App","makeDiagram","engine","DiagramEngine","installDefaultFactories","model","DiagramModel","node1","DefaultNodeModel","port1","addOutPort","setPosition","node2","port2","addInPort","link1","link","addAll","setDiagramModel","type"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,KAAKC,GAAZ,MAAqB,sBAArB;AAEA,OAAO,WAAP;AACA,SAASC,cAAT,QAA+B,yCAA/B;AACA,SAASC,UAAT,QAA2B,qCAA3B;;AACAC,OAAO,CAAC,yCAAD,CAAP;;IAEMC,G;;;;;;;;;;;;;;;;;;UAEJC,W,GAAc,YAAmB;AAC7B;AACA,UAAIC,MAAM,GAAG,IAAIN,GAAG,CAACO,aAAR,EAAb;AACAD,MAAAA,MAAM,CAACE,uBAAP,GAH6B,CAK7B;;AACA,UAAIC,KAAK,GAAG,IAAIT,GAAG,CAACU,YAAR,EAAZ,CAN6B,CAO7B;;AACA,UAAIC,KAAK,GAAG,IAAIX,GAAG,CAACY,gBAAR,CAAyB,QAAzB,EAAmC,gBAAnC,CAAZ;AACA,UAAIC,KAAK,GAAGF,KAAK,CAACG,UAAN,CAAiB,KAAjB,CAAZ;AACAH,MAAAA,KAAK,CAACI,WAAN,CAAkB,GAAlB,EAAuB,GAAvB,EAV6B,CAY7B;;AACA,UAAIC,KAAK,GAAG,IAAIhB,GAAG,CAACY,gBAAR,CAAyB,QAAzB,EAAmC,gBAAnC,CAAZ;AACA,UAAIK,KAAK,GAAGD,KAAK,CAACE,SAAN,CAAgB,IAAhB,CAAZ;AACAF,MAAAA,KAAK,CAACD,WAAN,CAAkB,GAAlB,EAAuB,GAAvB,EAf6B,CAiB7B;;AACA,UAAII,KAAK,GAAGN,KAAK,CAACO,IAAN,CAAWH,KAAX,CAAZ,CAlB6B,CAoB7B;;AACAR,MAAAA,KAAK,CAACY,MAAN,CAAaV,KAAb,EAAoBK,KAApB,EAA2BG,KAA3B,EArB6B,CAuB7B;;AACAb,MAAAA,MAAM,CAACgB,eAAP,CAAuBb,KAAvB;AAEA,aAAO,oBAAC,GAAD,CAAK,aAAL;AAAmB,QAAA,SAAS,EAAC,yBAA7B;AAAuD,QAAA,aAAa,EAAEH,MAAtE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AACH,K;;;;;;;6BAEQ;AACP,aACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,cAAD;AAAgB,QAAA,KAAK,EAAE;AAAEiB,UAAAA,IAAI,EAAE;AAAR,SAAvB;AAAuC,QAAA,IAAI,EAAC,SAA5C;AAAsD,QAAA,KAAK,EAAC,gBAA5D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,EAEI,oBAAC,cAAD;AAAgB,QAAA,KAAK,EAAE;AAAEA,UAAAA,IAAI,EAAE;AAAR,SAAvB;AAAwC,QAAA,IAAI,EAAC,UAA7C;AAAwD,QAAA,KAAK,EAAC,gBAA9D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFJ,CADF,EAKG,KAAKlB,WAAL,EALH,CADF;AAUD;;;;EA1CeN,S;;AA6ClB,eAAeK,GAAf","sourcesContent":["import React, { Component } from 'react';\nimport * as SRD from 'storm-react-diagrams';\nimport logo from './logo.svg';\nimport './App.css';\nimport { TrayItemWidget } from './components/dragAndDrop/TrayItemWidget';\nimport { TrayWidget } from './components/dragAndDrop/TrayWidget';\nrequire(\"storm-react-diagrams/dist/style.min.css\");\n\nclass App extends Component {\n\n  makeDiagram = (): JSX.Element => {\n      // 1) setup the diagram engine\n      var engine = new SRD.DiagramEngine();\n      engine.installDefaultFactories();\n  \n      // 2) setup the diagram model\n      var model = new SRD.DiagramModel();\n      // 3) create a default node\n      var node1 = new SRD.DefaultNodeModel(\"Node 1\", \"rgb(0,192,255)\");\n      let port1 = node1.addOutPort(\"Out\");\n      node1.setPosition(100, 100);\n  \n      // 4) create another default node\n      var node2 = new SRD.DefaultNodeModel(\"Node 2\", \"rgb(192,255,0)\");\n      let port2 = node2.addInPort(\"In\");\n      node2.setPosition(400, 100);\n  \n      // 5) link the ports\n      let link1 = port1.link(port2);\n  \n      // 6) add the models to the root graph\n      model.addAll(node1, node2, link1);\n  \n      // 7) load model into engine\n      engine.setDiagramModel(model);\n\n      return <SRD.DiagramWidget className=\"diagram srd-demo-canvas\" diagramEngine={engine}/>\n  }\n\n  render() {\n    return (\n      <div>\n        <TrayWidget>\n            <TrayItemWidget model={{ type: \"in\" }} name=\"In Node\" color=\"rgb(192,255,0)\" />\n            <TrayItemWidget model={{ type: \"out\" }} name=\"Out Node\" color=\"rgb(0,192,255)\" />\n        </TrayWidget>\n        {this.makeDiagram()}\n      </div>\n    )\n    \n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}