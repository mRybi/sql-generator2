{"ast":null,"code":"import _classCallCheck from \"/home/dell/Dokumenty/sql-gen2/sql-gen2/sql-generator2/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/dell/Dokumenty/sql-gen2/sql-gen2/sql-generator2/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/dell/Dokumenty/sql-gen2/sql-gen2/sql-generator2/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/dell/Dokumenty/sql-gen2/sql-gen2/sql-generator2/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _get from \"/home/dell/Dokumenty/sql-gen2/sql-gen2/sql-generator2/node_modules/@babel/runtime/helpers/esm/get\";\nimport _inherits from \"/home/dell/Dokumenty/sql-gen2/sql-gen2/sql-generator2/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport * as _ from \"lodash\";\nimport { PortModel } from \"storm-react-diagrams\";\nimport { Link } from \"./Link\";\nimport { PropertyType } from \"./PropertyType\";\nimport { RelationType } from \"../../App2\";\nexport var Port =\n/*#__PURE__*/\nfunction (_PortModel) {\n  _inherits(Port, _PortModel);\n\n  function Port(isPrimaryKey, isForeignKey, isInput, name) {\n    var _this;\n\n    var label = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;\n    var selectedRelation = arguments.length > 5 ? arguments[5] : undefined;\n    var propertyType = arguments.length > 6 ? arguments[6] : undefined;\n    var id = arguments.length > 7 ? arguments[7] : undefined;\n\n    _classCallCheck(this, Port);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Port).call(this, name, \"with_prop\", id));\n    _this.activeModel = void 0;\n    _this.in = void 0;\n    _this.label = void 0;\n    _this.propertyType = void 0;\n    _this.isPrimaryKey = void 0;\n    _this.isForeignKey = void 0;\n    _this.links = void 0;\n    _this.iterator = 1;\n    _this.selectedRelation = void 0;\n    _this.in = isInput;\n    _this.label = label || name;\n    _this.links = {};\n    _this.propertyType = propertyType;\n    _this.isForeignKey = isForeignKey;\n    _this.isPrimaryKey = isPrimaryKey;\n    _this.selectedRelation = selectedRelation;\n    return _this;\n  }\n\n  _createClass(Port, [{\n    key: \"deSerialize\",\n    value: function deSerialize(object, engine) {\n      _get(_getPrototypeOf(Port.prototype), \"deSerialize\", this).call(this, object, engine);\n\n      this.in = object.in;\n      this.label = object.label;\n    }\n  }, {\n    key: \"serialize\",\n    value: function serialize() {\n      return _.merge(_get(_getPrototypeOf(Port.prototype), \"serialize\", this).call(this), {\n        in: this.in,\n        label: this.label,\n        propertyType: PropertyType[this.propertyType],\n        isForeignKey: this.isForeignKey,\n        isPrimaryKey: this.isPrimaryKey\n      });\n    } // link(port: PortModel): LinkModel {\n    // \tlet link = this.createLinkModel();\n    // \tlink.setSourcePort(this);\n    // \tlink.setTargetPort(port);\n    // \treturn link;\n    // }\n\n  }, {\n    key: \"link\",\n    value: function link(nodeToLink) {\n      //dalczego  przypina do zlego portu?\n      console.log('nodeToLink', nodeToLink);\n      var thisPortNode = this.getNode();\n      var ports = nodeToLink.getInPorts();\n      var isThereAlreadyThatPort = ports.filter(function (p) {\n        return p.label === \"\".concat(thisPortNode.name, \"Id\");\n      }).length;\n\n      if (isThereAlreadyThatPort === 0) {\n        if (this.selectedRelation === RelationType.M2M) {\n          // let diagram = thisPortNode.getParent();\n          console.log('activeModel', this.activeModel); // let relationNode = new Node('table', `rl_${thisPortNode.name}Has${nodeToLink.name}`);\n          // diagram.addNode(relationNode);\n        } else {\n          var link = this.createLinkModel();\n          var newPort = nodeToLink.addInPort(false, true, \"\".concat(thisPortNode.name, \"Id\"), this.selectedRelation, PropertyType.INT);\n          console.log('newPort', newPort);\n          link.setSourcePort(this);\n          link.setTargetPort(newPort);\n          console.log('NEWLINK', link);\n          return link;\n        }\n      }\n\n      console.log('NULL');\n      return null;\n    }\n  }, {\n    key: \"canLinkToPort\",\n    value: function canLinkToPort(port) {\n      //logika czy mozna polaczyc\n      if (port instanceof Port) {\n        if (this.iterator === 1 && (this.isPrimaryKey && port.isForeignKey || this.isForeignKey && port.isPrimaryKey)) {\n          var nodeToLink = port.getNode();\n          this.link(nodeToLink);\n          this.iterator = 0;\n        } else if (this.isPrimaryKey && port.isPrimaryKey) {\n          var _nodeToLink = port.getNode();\n\n          this.link(_nodeToLink);\n          this.iterator = 0;\n        } // return (this.isPrimaryKey && port.isForeignKey || this.isForeignKey && port.isPrimaryKey) ? true : false\n\n\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"createLinkModel\",\n    value: function createLinkModel() {\n      var link = _get(_getPrototypeOf(Port.prototype), \"createLinkModel\", this).call(this);\n\n      if (this.selectedRelation === RelationType.O2O) {\n        return new Link(\"default\", RelationType.O2O);\n      } else if (this.selectedRelation === RelationType.O2M) {\n        return new Link(\"default\", RelationType.O2M);\n      } else {\n        return new Link(\"default\", RelationType.M2M);\n      }\n    }\n  }]);\n\n  return Port;\n}(PortModel);","map":{"version":3,"sources":["/home/dell/Dokumenty/sql-gen2/sql-gen2/sql-generator2/src/components/models/Port.ts"],"names":["_","PortModel","Link","PropertyType","RelationType","Port","isPrimaryKey","isForeignKey","isInput","name","label","selectedRelation","propertyType","id","activeModel","in","links","iterator","object","engine","merge","nodeToLink","console","log","thisPortNode","getNode","ports","getInPorts","isThereAlreadyThatPort","filter","p","length","M2M","link","createLinkModel","newPort","addInPort","INT","setSourcePort","setTargetPort","port","O2O","O2M"],"mappings":";;;;;;AAAA,OAAO,KAAKA,CAAZ,MAAmB,QAAnB;AACA,SAASC,SAAT,QAAiF,sBAAjF;AACA,SAASC,IAAT,QAAqB,QAArB;AACA,SAASC,YAAT,QAA6B,gBAA7B;AAEA,SAASC,YAAT,QAA6B,YAA7B;AAGA,WAAaC,IAAb;AAAA;AAAA;AAAA;;AAWC,gBAAYC,YAAZ,EAAmCC,YAAnC,EAA0DC,OAA1D,EAA4EC,IAA5E,EAA0L;AAAA;;AAAA,QAAhGC,KAAgG,uEAAhF,IAAgF;AAAA,QAA1EC,gBAA0E;AAAA,QAA1CC,YAA0C;AAAA,QAAbC,EAAa;;AAAA;;AACzL,8EAAMJ,IAAN,EAAY,WAAZ,EAAyBI,EAAzB;AADyL,UAV1LC,WAU0L;AAAA,UAT1LC,EAS0L;AAAA,UARvLL,KAQuL;AAAA,UAP1LE,YAO0L;AAAA,UAN1LN,YAM0L;AAAA,UAL1LC,YAK0L;AAAA,UAJ1LS,KAI0L;AAAA,UAH1LC,QAG0L,GAHvK,CAGuK;AAAA,UAF1LN,gBAE0L;AAEzL,UAAKI,EAAL,GAAUP,OAAV;AACM,UAAKE,KAAL,GAAaA,KAAK,IAAID,IAAtB;AACA,UAAKO,KAAL,GAAa,EAAb;AACN,UAAKJ,YAAL,GAAoBA,YAApB;AACA,UAAKL,YAAL,GAAoBA,YAApB;AACA,UAAKD,YAAL,GAAoBA,YAApB;AACA,UAAKK,gBAAL,GAAwBA,gBAAxB;AARyL;AASzL;;AApBF;AAAA;AAAA,gCAsBaO,MAtBb,EAsB0BC,MAtB1B,EAsBiD;AAC/C,4EAAkBD,MAAlB,EAA0BC,MAA1B;;AACA,WAAKJ,EAAL,GAAUG,MAAM,CAACH,EAAjB;AACA,WAAKL,KAAL,GAAaQ,MAAM,CAACR,KAApB;AACA;AA1BF;AAAA;AAAA,gCA4Ba;AACX,aAAOV,CAAC,CAACoB,KAAF,sEAA2B;AACjCL,QAAAA,EAAE,EAAE,KAAKA,EADwB;AAExBL,QAAAA,KAAK,EAAE,KAAKA,KAFY;AAGjCE,QAAAA,YAAY,EAAET,YAAY,CAAC,KAAKS,YAAN,CAHO;AAIjCL,QAAAA,YAAY,EAAE,KAAKA,YAJc;AAKjCD,QAAAA,YAAY,EAAE,KAAKA;AALc,OAA3B,CAAP;AAOA,KApCF,CAsCC;AACA;AAEA;AACA;AACA;AACA;;AA5CD;AAAA;AAAA,yBA8CMe,UA9CN,EA8CmC;AACnC;AAECC,MAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BF,UAA1B;AAEA,UAAIG,YAAY,GAAG,KAAKC,OAAL,EAAnB;AACA,UAAIC,KAAK,GAAGL,UAAU,CAACM,UAAX,EAAZ;AACA,UAAIC,sBAAsB,GAAGF,KAAK,CAACG,MAAN,CAAa,UAAAC,CAAC;AAAA,eAAIA,CAAC,CAACpB,KAAF,eAAec,YAAY,CAACf,IAA5B,OAAJ;AAAA,OAAd,EAAwDsB,MAArF;;AACA,UAAGH,sBAAsB,KAAK,CAA9B,EAAiC;AAChC,YAAG,KAAKjB,gBAAL,KAA0BP,YAAY,CAAC4B,GAA1C,EAA+C;AAC9C;AACAV,UAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA0B,KAAKT,WAA/B,EAF8C,CAG9C;AACA;AACA,SALD,MAKO;AACN,cAAImB,IAAI,GAAG,KAAKC,eAAL,EAAX;AAEA,cAAIC,OAAO,GAAGd,UAAU,CAACe,SAAX,CAAqB,KAArB,EAA4B,IAA5B,YAAqCZ,YAAY,CAACf,IAAlD,SAA4D,KAAKE,gBAAjE,EAAmFR,YAAY,CAACkC,GAAhG,CAAd;AACAf,UAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBY,OAAvB;AAEAF,UAAAA,IAAI,CAACK,aAAL,CAAmB,IAAnB;AACAL,UAAAA,IAAI,CAACM,aAAL,CAAmBJ,OAAnB;AACAb,UAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBU,IAAvB;AACA,iBAAOA,IAAP;AACA;AACD;;AACDX,MAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AACA,aAAO,IAAP;AACC;AA1EF;AAAA;AAAA,kCA4EeiB,IA5Ef,EA4EyC;AACvC;AACA,UAAIA,IAAI,YAAYnC,IAApB,EAA0B;AACzB,YAAG,KAAKY,QAAL,KAAkB,CAAlB,KAAwB,KAAKX,YAAL,IAAqBkC,IAAI,CAACjC,YAA1B,IAA0C,KAAKA,YAAL,IAAqBiC,IAAI,CAAClC,YAA5F,CAAH,EAA8G;AAC7G,cAAIe,UAAU,GAAGmB,IAAI,CAACf,OAAL,EAAjB;AACA,eAAKQ,IAAL,CAAUZ,UAAV;AACA,eAAKJ,QAAL,GAAgB,CAAhB;AACA,SAJD,MAIO,IAAG,KAAKX,YAAL,IAAqBkC,IAAI,CAAClC,YAA7B,EAA0C;AAChD,cAAIe,WAAU,GAAGmB,IAAI,CAACf,OAAL,EAAjB;;AACA,eAAKQ,IAAL,CAAUZ,WAAV;AACA,eAAKJ,QAAL,GAAgB,CAAhB;AACA,SATwB,CAUzB;;;AACA,eAAO,IAAP;AACA;;AACD,aAAO,KAAP;AAGA;AA9FF;AAAA;AAAA,sCAgG8B;AAC5B,UAAIgB,IAAI,4EAAR;;AACA,UAAI,KAAKtB,gBAAL,KAA0BP,YAAY,CAACqC,GAA3C,EAAgD;AAC/C,eAAO,IAAIvC,IAAJ,CAAS,SAAT,EAAoBE,YAAY,CAACqC,GAAjC,CAAP;AACA,OAFD,MAEO,IAAI,KAAK9B,gBAAL,KAA0BP,YAAY,CAACsC,GAA3C,EAAgD;AACtD,eAAO,IAAIxC,IAAJ,CAAS,SAAT,EAAoBE,YAAY,CAACsC,GAAjC,CAAP;AACA,OAFM,MAEA;AACN,eAAO,IAAIxC,IAAJ,CAAS,SAAT,EAAoBE,YAAY,CAAC4B,GAAjC,CAAP;AACA;AAED;AA1GF;;AAAA;AAAA,EAA0B/B,SAA1B","sourcesContent":["import * as _ from \"lodash\";\nimport { PortModel, DiagramEngine, LinkModel, DefaultLinkModel, NodeModel } from \"storm-react-diagrams\";\nimport { Link } from \"./Link\";\nimport { PropertyType } from \"./PropertyType\";\nimport { Node } from \"./Node\";\nimport { RelationType } from \"../../App2\";\nimport { Application } from \"../dragAndDrop/Application\";\n\nexport class Port extends PortModel {\n\tactiveModel: Application;\n\tin: boolean;\n    label: string;\n\tpropertyType: PropertyType;\n\tisPrimaryKey: boolean;\n\tisForeignKey: boolean;\n\tlinks: { [id: string]: Link };\n\titerator: number = 1;\n\tselectedRelation: RelationType;\n\n\tconstructor(isPrimaryKey: boolean, isForeignKey: boolean, isInput: boolean, name: string, label: string = null, selectedRelation: RelationType, propertyType?: PropertyType, id?: string) {\n\t\tsuper(name, \"with_prop\", id);\n\t\tthis.in = isInput;\n        this.label = label || name;\n        this.links = {};\n\t\tthis.propertyType = propertyType;\n\t\tthis.isForeignKey = isForeignKey;\n\t\tthis.isPrimaryKey = isPrimaryKey;\n\t\tthis.selectedRelation = selectedRelation;\n\t}\n\n\tdeSerialize(object: any, engine: DiagramEngine) {\n\t\tsuper.deSerialize(object, engine);\n\t\tthis.in = object.in;\n\t\tthis.label = object.label;\n\t}\n\n\tserialize() {\n\t\treturn _.merge(super.serialize(), {\n\t\t\tin: this.in,\n            label: this.label,\n\t\t\tpropertyType: PropertyType[this.propertyType],\n\t\t\tisForeignKey: this.isForeignKey,\n\t\t\tisPrimaryKey: this.isPrimaryKey\n\t\t});\n\t}\n\n\t// link(port: PortModel): LinkModel {\n\t// \tlet link = this.createLinkModel();\n\n\t// \tlink.setSourcePort(this);\n\t// \tlink.setTargetPort(port);\n\t// \treturn link;\n\t// }\n\n\tlink(nodeToLink: Node): LinkModel {\n//dalczego  przypina do zlego portu?\n\n\tconsole.log('nodeToLink', nodeToLink);\n\n\tlet thisPortNode = this.getNode() as Node;\n\tlet ports = nodeToLink.getInPorts();\n\tlet isThereAlreadyThatPort = ports.filter(p => p.label === `${thisPortNode.name}Id`).length;\n\tif(isThereAlreadyThatPort === 0) {\n\t\tif(this.selectedRelation === RelationType.M2M) {\n\t\t\t// let diagram = thisPortNode.getParent();\n\t\t\tconsole.log('activeModel',this.activeModel);\n\t\t\t// let relationNode = new Node('table', `rl_${thisPortNode.name}Has${nodeToLink.name}`);\n\t\t\t// diagram.addNode(relationNode);\n\t\t} else {\n\t\t\tlet link = this.createLinkModel();\n\t\t\t\n\t\t\tlet newPort = nodeToLink.addInPort(false, true, `${thisPortNode.name}Id`, this.selectedRelation, PropertyType.INT);\n\t\t\tconsole.log('newPort', newPort);\n\t\n\t\t\tlink.setSourcePort(this);\n\t\t\tlink.setTargetPort(newPort);\n\t\t\tconsole.log('NEWLINK', link);\n\t\t\treturn link;\n\t\t}\n\t}\n\tconsole.log('NULL');\n\treturn null;\n\t}\n\n\tcanLinkToPort(port: PortModel): boolean {\n\t\t//logika czy mozna polaczyc\n\t\tif (port instanceof Port) {\n\t\t\tif(this.iterator === 1 && (this.isPrimaryKey && port.isForeignKey || this.isForeignKey && port.isPrimaryKey)) {\t\t\n\t\t\t\tlet nodeToLink = port.getNode() as Node;\n\t\t\t\tthis.link(nodeToLink);\n\t\t\t\tthis.iterator = 0;\n\t\t\t} else if(this.isPrimaryKey && port.isPrimaryKey){\t\t\n\t\t\t\tlet nodeToLink = port.getNode() as Node;\n\t\t\t\tthis.link(nodeToLink);\n\t\t\t\tthis.iterator = 0;\n\t\t\t}\n\t\t\t// return (this.isPrimaryKey && port.isForeignKey || this.isForeignKey && port.isPrimaryKey) ? true : false\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t\t\n\t\t\n\t}\n\n\tcreateLinkModel(): LinkModel {\n\t\tlet link = super.createLinkModel();\n\t\tif (this.selectedRelation === RelationType.O2O) {\n\t\t\treturn new Link(\"default\", RelationType.O2O);\n\t\t} else if (this.selectedRelation === RelationType.O2M) {\n\t\t\treturn new Link(\"default\", RelationType.O2M);\n\t\t} else {\n\t\t\treturn new Link(\"default\", RelationType.M2M);\n\t\t}\n\t\t\n\t}\n}"]},"metadata":{},"sourceType":"module"}