{"ast":null,"code":"import _classCallCheck from \"/home/dell/Dokumenty/sql-gen2/sql-gen2/sql-generator2/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/dell/Dokumenty/sql-gen2/sql-gen2/sql-generator2/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/dell/Dokumenty/sql-gen2/sql-gen2/sql-generator2/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/dell/Dokumenty/sql-gen2/sql-gen2/sql-generator2/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/dell/Dokumenty/sql-gen2/sql-gen2/sql-generator2/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/dell/Dokumenty/sql-gen2/sql-gen2/sql-generator2/src/App2.tsx\";\nimport * as React from \"react\";\nimport * as _ from \"lodash\";\nimport { DiagramWidget } from \"storm-react-diagrams\";\nimport { TrayItemWidget } from \"./components/dragAndDrop/TrayItemWidget\";\nimport { TrayWidget } from \"./components/dragAndDrop/TrayWidget\";\nimport './dragAndDrop.scss';\n\nrequire(\"storm-react-diagrams/dist/style.min.css\");\n\nimport './App.css';\nimport { NodeInfo } from \"./components/nodeInfo/NodeInfo\";\nimport { Node } from \"./components/models/Node\";\nimport { PropertyType } from \"./components/models/PropertyType\";\nexport var App2 =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(App2, _React$Component);\n\n  function App2(props) {\n    _classCallCheck(this, App2);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(App2).call(this, props));\n  }\n\n  _createClass(App2, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      this.setState({\n        selectedNode: null\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this = this;\n\n      return React.createElement(\"div\", {\n        className: \"body\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"header\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39\n        },\n        __self: this\n      }, \"Create diagrams\")), React.createElement(\"div\", {\n        className: \"content\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41\n        },\n        __self: this\n      }, React.createElement(TrayWidget, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42\n        },\n        __self: this\n      }, React.createElement(TrayItemWidget, {\n        model: {\n          type: \"table\"\n        },\n        name: \"Node\",\n        color: \"rgb(0,192,255)\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43\n        },\n        __self: this\n      }), React.createElement(TrayItemWidget, {\n        model: {\n          type: \"label\"\n        },\n        name: \"Label\",\n        color: \"rgb(192,255,0)\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        style: {\n          borderColor: \"rgb(255,0,0)\",\n          marginTop: \"100px\"\n        },\n        className: \"tray-item\",\n        onClick: function onClick() {\n          console.log(JSON.stringify(_this.props.app.getActiveDiagram().serializeDiagram(), null, 2));\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      }, \"Serialize Graph\")), React.createElement(\"div\", {\n        className: \"diagram-layer\",\n        onDrop: function onDrop(event) {\n          var data = JSON.parse(event.dataTransfer.getData(\"storm-diagram-node\"));\n\n          var nodesCount = _.keys(_this.props.app.getDiagramEngine().getDiagramModel().getNodes()).length;\n\n          var node = null;\n\n          if (data.type === \"table\") {\n            node = new Node(\"table\", \"Node \" + (nodesCount + 1), \"rgb(0,192,255)\");\n            node.addInPort(\"Id\", PropertyType.INT);\n            node.addInPort(\"Name\", PropertyType.NVARCHAR);\n          } else {\n            node = new Node(\"label\", \"Label \", \"rgb(192,255,0)\");\n          }\n\n          var points = _this.props.app.getDiagramEngine().getRelativeMousePoint(event);\n\n          node.x = points.x;\n          node.y = points.y;\n\n          _this.props.app.getDiagramEngine().getDiagramModel().addNode(node);\n\n          _this.forceUpdate();\n        },\n        onDragOver: function onDragOver(event) {\n          event.preventDefault();\n        },\n        onDoubleClick: function onDoubleClick(event) {\n          event.preventDefault();\n\n          _this.setState({\n            selectedNode: _this.props.app.getDiagramEngine().getDiagramModel().getSelectedItems()[0],\n            diagramModel: _this.props.app.getDiagramEngine().getDiagramModel(),\n            selectedLink: _this.props.app.getDiagramEngine().getDiagramModel().getSelectedItems()[1]\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        },\n        __self: this\n      }, React.createElement(DiagramWidget, {\n        className: \"srd-demo-canvas\",\n        diagramEngine: this.props.app.getDiagramEngine(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        },\n        __self: this\n      })), this.state.selectedNode != null ? React.createElement(NodeInfo, {\n        selectedLink: this.state.selectedLink,\n        selectedItem: this.state.selectedNode,\n        diagramModel: this.state.diagramModel,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      }) : null));\n    }\n  }]);\n\n  return App2;\n}(React.Component);","map":{"version":3,"sources":["/home/dell/Dokumenty/sql-gen2/sql-gen2/sql-generator2/src/App2.tsx"],"names":["React","_","DiagramWidget","TrayItemWidget","TrayWidget","require","NodeInfo","Node","PropertyType","App2","props","setState","selectedNode","type","borderColor","marginTop","console","log","JSON","stringify","app","getActiveDiagram","serializeDiagram","event","data","parse","dataTransfer","getData","nodesCount","keys","getDiagramEngine","getDiagramModel","getNodes","length","node","addInPort","INT","NVARCHAR","points","getRelativeMousePoint","x","y","addNode","forceUpdate","preventDefault","getSelectedItems","diagramModel","selectedLink","state","Component"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport * as _ from \"lodash\";\nimport { DefaultNodeModel, DiagramWidget, BaseEntityType, BaseEntity, BaseModelListener, BaseModel, DiagramModel, DefaultLinkModel } from \"storm-react-diagrams\";\nimport { TrayItemWidget } from \"./components/dragAndDrop/TrayItemWidget\";\nimport { TrayWidget } from \"./components/dragAndDrop/TrayWidget\";\nimport { Application } from \"./components/dragAndDrop/Application\";\nimport './dragAndDrop.scss';\nrequire(\"storm-react-diagrams/dist/style.min.css\");\nimport './App.css';\nimport { NodeInfo } from \"./components/nodeInfo/NodeInfo\";\nimport { Node } from \"./components/models/Node\";\nimport { Link } from \"./components/models/Link\";\nimport { PropertyType } from \"./components/models/PropertyType\";\n\nexport interface BodyWidgetProps {\n\tapp: Application;\n}\n\nexport interface BodyWidgetState {\n\t// selectedNode: BaseModel<BaseEntity, BaseModelListener>[]; //DefaultNodeModel\n\tselectedNode: Node;\n\tdiagramModel: DiagramModel;\n\tselectedLink: Link\n}\n\nexport class App2 extends React.Component<BodyWidgetProps, BodyWidgetState> {\n\tconstructor(props: BodyWidgetProps) {\n\t\tsuper(props);\n\t}\n\n\tcomponentWillMount(){\n\t\tthis.setState({selectedNode: null})\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"body\">\n\t\t\t\t<div className=\"header\">\n\t\t\t\t\t<div className=\"title\">Create diagrams</div>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"content\">\n\t\t\t\t\t<TrayWidget>\n\t\t\t\t\t\t<TrayItemWidget model={{ type: \"table\" }} name=\"Node\" color=\"rgb(0,192,255)\" />\n\t\t\t\t\t\t<TrayItemWidget model={{ type: \"label\" }} name=\"Label\" color=\"rgb(192,255,0)\" />\n\n\t\t\t\t\t\t<div\n\t\t\t\t\t\t\tstyle={{ borderColor: \"rgb(255,0,0)\", marginTop: \"100px\"}}\n\t\t\t\t\t\t\tclassName=\"tray-item\"\n\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\tconsole.log(JSON.stringify(this.props.app.getActiveDiagram().serializeDiagram(), null, 2));\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tSerialize Graph\n\t\t\t\t\t\t</div>\n\t\t\t\n\t\t\t\t\t</TrayWidget>\n\t\t\t\t\t<div\n\t\t\t\t\t\tclassName=\"diagram-layer\"\n\t\t\t\t\t\tonDrop={event => {\n\t\t\t\t\t\t\tvar data = JSON.parse(event.dataTransfer.getData(\"storm-diagram-node\"));\n\t\t\t\t\t\t\tvar nodesCount = _.keys(\n\t\t\t\t\t\t\t\tthis.props.app\n\t\t\t\t\t\t\t\t\t.getDiagramEngine()\n\t\t\t\t\t\t\t\t\t.getDiagramModel()\n\t\t\t\t\t\t\t\t\t.getNodes()\n\t\t\t\t\t\t\t).length;\n\n\t\t\t\t\t\t\tvar node = null;\n\t\t\t\t\t\t\tif (data.type === \"table\") {\n\t\t\t\t\t\t\t\tnode = new Node(\"table\",\"Node \" + (nodesCount + 1), \"rgb(0,192,255)\");\n\t\t\t\t\t\t\t\tnode.addInPort(\"Id\", PropertyType.INT);\n\t\t\t\t\t\t\t\tnode.addInPort(\"Name\", PropertyType.NVARCHAR);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tnode = new Node(\"label\",\"Label \", \"rgb(192,255,0)\");\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tvar points = this.props.app.getDiagramEngine().getRelativeMousePoint(event);\n\t\t\t\t\t\t\tnode.x = points.x;\n\t\t\t\t\t\t\tnode.y = points.y;\n\t\t\t\t\t\t\tthis.props.app\n\t\t\t\t\t\t\t\t.getDiagramEngine()\n\t\t\t\t\t\t\t\t.getDiagramModel()\n\t\t\t\t\t\t\t\t.addNode(node);\n\t\t\t\t\t\t\tthis.forceUpdate();\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tonDragOver={event => {\n\t\t\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\t\t}}\n\n\t\t\t\t\t\tonDoubleClick={event => {\n\t\t\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tthis.setState({\n\t\t\t\t\t\t\t\tselectedNode: this.props.app\n\t\t\t\t\t\t\t\t.getDiagramEngine()\n\t\t\t\t\t\t\t\t.getDiagramModel()\n\t\t\t\t\t\t\t\t.getSelectedItems()[0] as Node,\n\t\t\t\t\t\t\t\tdiagramModel: this.props.app.getDiagramEngine().getDiagramModel(),\n\t\t\t\t\t\t\t\tselectedLink: this.props.app\n\t\t\t\t\t\t\t\t.getDiagramEngine()\n\t\t\t\t\t\t\t\t.getDiagramModel()\n\t\t\t\t\t\t\t\t.getSelectedItems()[1] as Link,\n\t\t\t\t\t\t\t});\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t}}\n\t\t\t\t\t>\n\t\t\t\t\t\t<DiagramWidget className=\"srd-demo-canvas\" diagramEngine={this.props.app.getDiagramEngine()} />\n\n\t\t\t\t\t</div>\n\t\t\t\t\t{ this.state.selectedNode != null ? <NodeInfo selectedLink={this.state.selectedLink} selectedItem={this.state.selectedNode} diagramModel={this.state.diagramModel} /> : null}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}"]},"metadata":{},"sourceType":"module"}