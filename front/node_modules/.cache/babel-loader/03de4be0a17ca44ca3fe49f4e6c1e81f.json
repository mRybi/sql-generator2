{"ast":null,"code":"import _createClass from \"/home/dell/Dokumenty/sql-gen2/sql-gen2/sql-generator2/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/dell/Dokumenty/sql-gen2/sql-gen2/sql-generator2/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/dell/Dokumenty/sql-gen2/sql-gen2/sql-generator2/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/dell/Dokumenty/sql-gen2/sql-gen2/sql-generator2/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _classCallCheck from \"/home/dell/Dokumenty/sql-gen2/sql-gen2/sql-generator2/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nvar _jsxFileName = \"/home/dell/Dokumenty/sql-gen2/sql-gen2/sql-generator2/src/components/nodeInfo/NodeInfo.tsx\";\nimport './nodeItems.scss';\nimport * as React from \"react\";\nimport { NodeProperty } from './nodeProperty/NodeProperty';\n\nvar OwnProps = function OwnProps() {\n  _classCallCheck(this, OwnProps);\n\n  this.selectedItem = void 0;\n};\n\nvar State = function State() {\n  _classCallCheck(this, State);\n\n  this.updatedItem = void 0;\n  this.name = void 0;\n  this.showInput = void 0;\n  this.portState = void 0;\n  this.newPortName = void 0;\n  this.portToRemove = void 0;\n  this.portLabelToRemove = void 0;\n};\n\nexport var NodeInfo =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(NodeInfo, _React$Component);\n\n  function NodeInfo(props) {\n    _classCallCheck(this, NodeInfo);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(NodeInfo).call(this, props));\n  }\n\n  _createClass(NodeInfo, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      this.setState({\n        updatedItem: this.props.selectedItem,\n        name: this.props.selectedItem.name,\n        showInput: false,\n        portState: 'out',\n        newPortName: 'out',\n        portToRemove: null,\n        portLabelToRemove: null\n      });\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps) {\n      console.log('both', this.props, nextProps);\n\n      if (nextProps != this.props) {\n        this.setState({\n          updatedItem: nextProps.selectedItem,\n          name: nextProps.selectedItem.name\n        });\n        this.forceUpdate();\n      }\n    }\n  }, {\n    key: \"changeName1\",\n    value: function changeName1(newValue) {\n      var updatedItem = this.state.updatedItem;\n      updatedItem.name = newValue;\n      this.setState({\n        updatedItem: updatedItem\n      });\n    }\n  }, {\n    key: \"addPort\",\n    value: function addPort() {\n      if (this.state.portState == 'out') {\n        this.state.updatedItem.addOutPort(this.state.newPortName);\n      } else {\n        this.state.updatedItem.addInPort(this.state.newPortName);\n      }\n    }\n  }, {\n    key: \"switchViewUpdateValue\",\n    value: function switchViewUpdateValue() {\n      this.addPort();\n      this.setState({\n        showInput: false\n      });\n    }\n  }, {\n    key: \"handleChange\",\n    value: function handleChange(event) {\n      event.persist();\n      this.setState({\n        newPortName: event.target.value\n      });\n    }\n  }, {\n    key: \"handleChangePort\",\n    value: function handleChangePort(event) {\n      event.persist();\n      this.setState({\n        portState: event.target.value\n      });\n    }\n  }, {\n    key: \"removePort\",\n    value: function removePort() {\n      var portToDelete = this.state.updatedItem.getPort(this.state.portToRemove);\n      this.state.updatedItem.removePort(portToDelete);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this = this;\n\n      var allPorts = this.state.updatedItem.ports;\n      console.log(allPorts);\n      var aaa = Object.values(allPorts).map(function (value) {\n        return value.label;\n      });\n      console.log(aaa);\n      var portsIds = Object.keys(allPorts).map(function (key) {\n        return key;\n      });\n\n      var makeItem = function makeItem(x) {\n        return React.createElement(\"option\", {\n          key: x,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 108\n          },\n          __self: this\n        }, x);\n      };\n\n      console.log('selected node', this.props.selectedItem);\n      if (this.state.updatedItem == null) return 'Loading...';\n      return React.createElement(\"div\", {\n        className: \"trayBottom\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        },\n        __self: this\n      }, React.createElement(\"select\", {\n        onClick: function onClick(e) {\n          return _this.selectPort(e);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115\n        },\n        __self: this\n      }, aaa.map(makeItem)), React.createElement(\"button\", {\n        onClick: function onClick() {\n          return _this.removePort();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116\n        },\n        __self: this\n      }, \"Delete port\"), React.createElement(NodeProperty, {\n        value: this.state.name,\n        acceptChangeProperty: this.changeName1.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        onDoubleClick: function onDoubleClick() {\n          return _this.showInput();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      }, this.state.showInput ? React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        className: \"tray-bottom-item\",\n        type: \"text\",\n        onChange: this.handleChange.bind(this),\n        value: this.state.newPortName,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122\n        },\n        __self: this\n      }), React.createElement(\"input\", {\n        className: \"tray-bottom-item\",\n        type: \"text\",\n        onChange: this.handleChangePort.bind(this),\n        value: this.state.portState,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        className: \"tray-bottom-item\",\n        onClick: this.switchViewUpdateValue.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124\n        },\n        __self: this\n      }, \"Add Port\")) : React.createElement(\"h1\", {\n        className: \"tray-bottom-item\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      }, 'AddPort')));\n    }\n  }, {\n    key: \"selectPort\",\n    value: function selectPort(e) {\n      e.persist();\n      console.log('select port', e);\n      var ports = this.state.updatedItem.ports;\n      var x = Object.values(ports).map(function (value) {\n        return value.label = e._targetInst.child.key;\n      });\n      console.log(x);\n      this.setState({\n        portLabelToRemove: e._targetInst.child.key,\n        portToRemove: x[0]\n      });\n    }\n  }, {\n    key: \"showInput\",\n    value: function showInput() {\n      var xd = this.state.updatedItem;\n      xd.color = 'rgb(0,0,0)';\n      this.setState({\n        showInput: true,\n        updatedItem: xd\n      });\n    }\n  }]);\n\n  return NodeInfo;\n}(React.Component);","map":{"version":3,"sources":["/home/dell/Dokumenty/sql-gen2/sql-gen2/sql-generator2/src/components/nodeInfo/NodeInfo.tsx"],"names":["React","NodeProperty","OwnProps","selectedItem","State","updatedItem","name","showInput","portState","newPortName","portToRemove","portLabelToRemove","NodeInfo","props","setState","nextProps","console","log","forceUpdate","newValue","state","addOutPort","addInPort","addPort","event","persist","target","value","portToDelete","getPort","removePort","allPorts","ports","aaa","Object","values","map","label","portsIds","keys","key","makeItem","x","e","selectPort","changeName1","bind","handleChange","handleChangePort","switchViewUpdateValue","_targetInst","child","xd","color","Component"],"mappings":"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","sourcesContent":["import './nodeItems.scss';\nimport * as React from \"react\";\nimport { DefaultNodeModel, DefaultPortModel, PortModel } from 'storm-react-diagrams';\nimport { NodeProperty } from './nodeProperty/NodeProperty';\nimport { number } from 'prop-types';\n\nclass OwnProps {\n    selectedItem: DefaultNodeModel\n}\n\nclass State {\n    updatedItem: DefaultNodeModel\n    name: string;\n    showInput: boolean;\n    portState: string;\n    newPortName: string;\n    portToRemove: string;\n    portLabelToRemove: string;\n}\n\ntype Props = OwnProps;\n\nexport class NodeInfo extends React.Component<Props, State> {\n    constructor(props: Props) {\n        super(props);\n    }\n\n    componentWillMount() {\n        this.setState({\n            updatedItem: this.props.selectedItem,\n            name: this.props.selectedItem.name,\n            showInput: false,\n            portState: 'out',\n            newPortName: 'out',\n            portToRemove: null,\n            portLabelToRemove: null\n        })\n    }\n\n    componentWillReceiveProps(nextProps: Props) {\n        console.log('both', this.props, nextProps);\n        if (nextProps != this.props) {\n            this.setState({\n                updatedItem: nextProps.selectedItem,\n                name: nextProps.selectedItem.name\n            })\n            this.forceUpdate();\n        }\n    }\n\n    changeName1(newValue: string): void {\n        let updatedItem: DefaultNodeModel = this.state.updatedItem;\n        updatedItem.name = newValue;\n        this.setState({ updatedItem: updatedItem });\n    }\n\n    addPort(): void {\n        if (this.state.portState == 'out') {\n            this.state.updatedItem.addOutPort(this.state.newPortName);\n        } else {\n            this.state.updatedItem.addInPort(this.state.newPortName);\n        }\n    }\n\n    switchViewUpdateValue(): void {\n        this.addPort(); \n        this.setState({ showInput: false });\n    }\n\n    handleChange(event: React.ChangeEvent<HTMLInputElement>) {\n        event.persist()\n\n        this.setState({ newPortName: event.target.value });\n    }\n\n    handleChangePort(event: React.ChangeEvent<HTMLInputElement>) {\n        event.persist()\n\n        this.setState({ portState: event.target.value });\n    }\n\n    \n\n    removePort() {\n        let portToDelete: PortModel = this.state.updatedItem.getPort(this.state.portToRemove);\n        \n        this.state.updatedItem.removePort(portToDelete);\n    }\n\n    render() {\n        let allPorts: {[S: string]: DefaultPortModel} = this.state.updatedItem.ports;\n        console.log(allPorts);\n\n\n\n        let aaa = Object.values(allPorts).map(value => {\n            return value.label;\n        });\n\n        console.log(aaa);\n\n\n        \n        let portsIds = Object.keys(allPorts).map((key) => {\n            return key\n        });\n        let makeItem = function(x: any) {\n            return <option key={x}>{x}</option>;\n        }\n      \n        console.log('selected node', this.props.selectedItem)\n        if (this.state.updatedItem == null) return 'Loading...'\n        return (\n            <div className=\"trayBottom\">\n            <select onClick={(e) => this.selectPort(e)}>{aaa.map(makeItem)}</select>\n            <button onClick={() => this.removePort()}>Delete port</button>\n            \n                <NodeProperty value={this.state.name} acceptChangeProperty={this.changeName1.bind(this)} />\n                <div onDoubleClick={() => this.showInput()}>\n                    {this.state.showInput ?\n                        <div>\n                            <input className=\"tray-bottom-item\" type=\"text\" onChange={this.handleChange.bind(this)} value={this.state.newPortName}></input>\n                            <input className=\"tray-bottom-item\" type=\"text\" onChange={this.handleChangePort.bind(this)} value={this.state.portState}></input>\n                            <button className=\"tray-bottom-item\" onClick={this.switchViewUpdateValue.bind(this)}>Add Port</button>\n                        </div> : <h1 className=\"tray-bottom-item\">{'AddPort'}</h1>}\n                </div> \n                {/* <div onDoubleClick={() => this.showInput()}>\n                    {this.state.showInput ?\n                        <div>\n                            <input className=\"tray-bottom-item\" type=\"text\" onChange={this.handleChange.bind(this)} value={this.state.newPortName}></input>\n                            <input className=\"tray-bottom-item\" type=\"text\" onChange={this.handleChangePort.bind(this)} value={this.state.portState}></input>\n                            <button className=\"tray-bottom-item\" onClick={this.switchViewUpdateValue.bind(this)}>Add Port</button>\n                        </div> : null}\n                </div>  */}\n\n            </div>\n\n\n        );\n    }\n    selectPort(e: any): void {\n        e.persist()\n        console.log('select port', e);\n        let ports: {[S: string]: DefaultPortModel} = this.state.updatedItem.ports;\n        let x = Object.values(ports).map( value => {\n            return value.label = e._targetInst.child.key\n        })\n        console.log(x);\n\n        this.setState({\n            portLabelToRemove: e._targetInst.child.key,\n            portToRemove: x[0] as string\n        });\n    }\n\n    showInput(): void {\n        let xd = this.state.updatedItem;\n        xd.color = 'rgb(0,0,0)'\n        this.setState({\n            showInput: true,\n            updatedItem: xd\n        })\n    }\n\n\n}"]},"metadata":{},"sourceType":"module"}