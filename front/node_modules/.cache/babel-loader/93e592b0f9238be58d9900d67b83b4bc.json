{"ast":null,"code":"import _createClass from \"/home/dell/Dokumenty/sql-gen2/sql-gen2/sql-generator2/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/dell/Dokumenty/sql-gen2/sql-gen2/sql-generator2/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/dell/Dokumenty/sql-gen2/sql-gen2/sql-generator2/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/dell/Dokumenty/sql-gen2/sql-gen2/sql-generator2/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _classCallCheck from \"/home/dell/Dokumenty/sql-gen2/sql-gen2/sql-generator2/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nvar _jsxFileName = \"/home/dell/Dokumenty/sql-gen2/sql-gen2/sql-generator2/src/components/nodeInfo/NodeInfo.tsx\";\nimport './nodeItems.scss';\nimport * as React from \"react\";\nimport { NodeProperty } from './nodeProperty/NodeProperty';\nimport { PropertyType } from '../models/PropertyType';\n\nvar OwnProps = function OwnProps() {\n  _classCallCheck(this, OwnProps);\n\n  this.selectedItem = void 0;\n  this.diagramEngine = void 0;\n  this.selectedLink = void 0;\n  this.selectedRelation = void 0;\n};\n\nvar State = function State() {\n  _classCallCheck(this, State);\n\n  this.updatedItem = void 0;\n  this.name = void 0;\n  this.showInput = void 0;\n  this.showInputDelete = void 0;\n  this.showInputColor = void 0;\n  this.portState = void 0;\n  this.newPortType = void 0;\n  this.newPortName = void 0;\n  this.newPortIsPK = void 0;\n  this.newPortIsFK = void 0;\n  this.portToRemove = void 0;\n  this.portLabelToRemove = void 0;\n  this.color = void 0;\n};\n\nexport var NodeInfo =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(NodeInfo, _React$Component);\n\n  function NodeInfo(props) {\n    _classCallCheck(this, NodeInfo);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(NodeInfo).call(this, props));\n  }\n\n  _createClass(NodeInfo, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      this.setState({\n        updatedItem: this.props.selectedItem,\n        name: this.props.selectedItem.name,\n        showInput: false,\n        showInputDelete: false,\n        showInputColor: false,\n        portState: 'out',\n        newPortName: 'out',\n        newPortIsPK: false,\n        newPortIsFK: false,\n        newPortType: PropertyType.INT,\n        portToRemove: null,\n        portLabelToRemove: null,\n        color: 'Red'\n      });\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps) {\n      if (nextProps != this.props) {\n        this.setState({\n          updatedItem: nextProps.selectedItem,\n          name: nextProps.selectedItem.name\n        });\n        this.forceUpdate();\n      }\n\n      console.log('STATE', this.state);\n    }\n  }, {\n    key: \"changeName1\",\n    value: function changeName1(newValue) {\n      var updatedItem = this.state.updatedItem;\n      updatedItem.name = newValue;\n      this.setState({\n        updatedItem: updatedItem\n      });\n    }\n  }, {\n    key: \"addPort\",\n    value: function addPort() {\n      if (this.state.portState == 'out') {\n        this.state.updatedItem.addOutPort(this.state.newPortIsPK, this.state.newPortIsFK, this.state.newPortName, this.props.selectedRelation, this.props.diagramEngine, this.state.newPortType);\n      } else {\n        this.state.updatedItem.addInPort(this.state.newPortIsPK, this.state.newPortIsFK, this.state.newPortName, this.props.selectedRelation, this.props.diagramEngine, this.state.newPortType);\n      }\n    }\n  }, {\n    key: \"switchViewUpdateValue\",\n    value: function switchViewUpdateValue() {\n      this.addPort();\n      this.setState({\n        showInput: false\n      });\n    }\n  }, {\n    key: \"cancelAddingPort\",\n    value: function cancelAddingPort() {\n      this.setState({\n        showInput: false,\n        showInputDelete: false,\n        showInputColor: false\n      });\n    }\n  }, {\n    key: \"cancelChangingColor\",\n    value: function cancelChangingColor() {\n      this.setState({\n        showInputColor: false\n      });\n    }\n  }, {\n    key: \"cancelInputDelete\",\n    value: function cancelInputDelete() {\n      this.setState({\n        showInputDelete: false\n      });\n    }\n  }, {\n    key: \"handleChange\",\n    value: function handleChange(event) {\n      event.persist();\n      this.setState({\n        newPortName: event.target.value\n      });\n    }\n  }, {\n    key: \"handleChangePK\",\n    value: function handleChangePK(event) {\n      event.persist();\n      this.setState({\n        newPortIsPK: !this.state.newPortIsPK\n      });\n    }\n  }, {\n    key: \"handleChangeFK\",\n    value: function handleChangeFK(event) {\n      event.persist();\n      this.setState({\n        newPortIsFK: !this.state.newPortIsFK\n      });\n    }\n  }, {\n    key: \"handleChangePortType\",\n    value: function handleChangePortType(event) {\n      event.persist();\n      this.setState({\n        newPortType: PropertyType.INT\n      });\n    }\n  }, {\n    key: \"removePort\",\n    value: function removePort() {\n      //find link that connects to this port and delete it\n      if (this.state.portToRemove != null) {\n        var portToDelete = this.state.updatedItem.getPort(this.state.portToRemove);\n        var portLinks = portToDelete.getLinks();\n\n        if (portLinks !== null) {\n          var xd = Object.keys(portLinks);\n          this.props.diagramEngine.getDiagramModel().removeLink(xd[0]);\n        }\n\n        this.state.updatedItem.removePort(portToDelete);\n        this.setState({\n          portToRemove: null\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this = this;\n\n      var allPorts = this.state.updatedItem.ports;\n      console.log('XDD', allPorts);\n      this.state.updatedItem;\n\n      if (allPorts != null) {\n        var aaa = Object.values(allPorts).map(function (value) {\n          return value.label;\n        });\n        var portsIds = Object.keys(allPorts).map(function (key) {\n          return key;\n        });\n\n        var makeItem = function makeItem(x) {\n          return React.createElement(\"option\", {\n            key: x,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 163\n            },\n            __self: this\n          }, x);\n        };\n\n        if (this.state.updatedItem === null) return 'Loading...';\n        return React.createElement(\"div\", {\n          className: \"trayBottom\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 168\n          },\n          __self: this\n        }, React.createElement(NodeProperty, {\n          value: this.state.name,\n          acceptChangeProperty: this.changeName1.bind(this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 170\n          },\n          __self: this\n        }), this.props.selectedItem.type !== 'label' ? React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 172\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          onDoubleClick: function onDoubleClick() {\n            return _this.showInput();\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 173\n          },\n          __self: this\n        }, this.state.showInput ? React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 175\n          },\n          __self: this\n        }, React.createElement(\"input\", {\n          className: \"tray-bottom-item\",\n          type: \"checkbox\",\n          onChange: this.handleChangePK.bind(this),\n          checked: this.state.newPortIsPK,\n          name: 'Primary Key',\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 176\n          },\n          __self: this\n        }), React.createElement(\"input\", {\n          className: \"tray-bottom-item\",\n          type: \"checkbox\",\n          onChange: this.handleChangeFK.bind(this),\n          checked: this.state.newPortIsFK,\n          name: 'Foreign Key',\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 177\n          },\n          __self: this\n        }), React.createElement(\"input\", {\n          className: \"tray-bottom-item\",\n          type: \"text\",\n          onChange: this.handleChange.bind(this),\n          value: this.state.newPortName,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 179\n          },\n          __self: this\n        }), React.createElement(\"input\", {\n          className: \"tray-bottom-item\",\n          type: \"text\",\n          onChange: this.handleChangePortType.bind(this),\n          value: this.state.portState,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 180\n          },\n          __self: this\n        }), React.createElement(\"button\", {\n          className: \"tray-bottom-item\",\n          onClick: this.switchViewUpdateValue.bind(this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 181\n          },\n          __self: this\n        }, \"Add\"), React.createElement(\"button\", {\n          className: \"tray-bottom-item\",\n          onClick: this.cancelAddingPort.bind(this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 182\n          },\n          __self: this\n        }, \"Cancel\")) : React.createElement(\"h1\", {\n          className: \"tray-bottom-item\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 183\n          },\n          __self: this\n        }, 'Add Property')), React.createElement(\"div\", {\n          onDoubleClick: function onDoubleClick() {\n            return _this.showInputDelete();\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 185\n          },\n          __self: this\n        }, this.state.showInputDelete ? React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 187\n          },\n          __self: this\n        }, React.createElement(\"select\", {\n          className: \"tray-bottom-item\",\n          onChange: this.selectPort.bind(this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 188\n          },\n          __self: this\n        }, aaa.map(makeItem)), React.createElement(\"button\", {\n          className: \"tray-bottom-item\",\n          onClick: function onClick() {\n            return _this.removePort();\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 189\n          },\n          __self: this\n        }, \"Delete\"), React.createElement(\"button\", {\n          className: \"tray-bottom-item\",\n          onClick: this.cancelInputDelete.bind(this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 190\n          },\n          __self: this\n        }, \"Cancel\")) : React.createElement(\"h1\", {\n          className: \"tray-bottom-item\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 192\n          },\n          __self: this\n        }, 'Delete Property'))) : null, React.createElement(\"div\", {\n          onDoubleClick: function onDoubleClick() {\n            return _this.showInputColor();\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 196\n          },\n          __self: this\n        }, this.state.showInputColor ? React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 198\n          },\n          __self: this\n        }, React.createElement(\"select\", {\n          className: \"tray-bottom-item\",\n          onChange: this.selectColor.bind(this),\n          value: this.state.color,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 199\n          },\n          __self: this\n        }, React.createElement(\"option\", {\n          value: \"Red\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 200\n          },\n          __self: this\n        }, \"Red\"), React.createElement(\"option\", {\n          value: \"Pink\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 201\n          },\n          __self: this\n        }, \"Pink\"), React.createElement(\"option\", {\n          value: \"Green\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 202\n          },\n          __self: this\n        }, \"Green\"), React.createElement(\"option\", {\n          value: \"Blue\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 203\n          },\n          __self: this\n        }, \"Blue\"), React.createElement(\"option\", {\n          value: \"Orange\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 204\n          },\n          __self: this\n        }, \"Orange\"), React.createElement(\"option\", {\n          value: \"Brown\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 205\n          },\n          __self: this\n        }, \"Brown\")), React.createElement(\"button\", {\n          className: \"tray-bottom-item\",\n          onClick: function onClick() {\n            return _this.changeColor();\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 207\n          },\n          __self: this\n        }, \"Change color\"), React.createElement(\"button\", {\n          className: \"tray-bottom-item\",\n          onClick: this.cancelChangingColor.bind(this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 208\n          },\n          __self: this\n        }, \"Cancel\")) : React.createElement(\"h1\", {\n          className: \"tray-bottom-item\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 210\n          },\n          __self: this\n        }, 'Change Color')));\n      } else return null;\n    }\n  }, {\n    key: \"changeColor\",\n    value: function changeColor() {\n      if (this.state.color != null) {\n        this.state.updatedItem.color = this.state.color;\n      }\n    }\n  }, {\n    key: \"selectColor\",\n    value: function selectColor(e) {\n      e.persist();\n      e.preventDefault();\n      var colors = ['Red', 'Pink', 'Green', 'Blue', 'Orange', 'Brown'];\n      var colorsRgb = ['rgb(255,0,0)', 'rgb(255,0,185)', 'rgb(0,250,14)', 'rgb(0, 250, 253)', 'rgb(239, 137, 74)', 'rgb(125, 73, 64)'];\n      var index = colors.indexOf(e.target.value);\n      var xd = this.state.updatedItem;\n      xd.color = colorsRgb[index];\n      this.setState({\n        color: colorsRgb[index]\n      });\n    }\n  }, {\n    key: \"selectPort\",\n    value: function selectPort(e) {\n      e.persist();\n      var ports = this.state.updatedItem.ports;\n      var names = Object.values(ports).map(function (value) {\n        return value.label;\n      });\n      var portsIds = Object.keys(ports).map(function (key) {\n        return key;\n      });\n      var indexOfGuyToDelete = names.indexOf(e.target.value);\n      this.setState({\n        portLabelToRemove: e.target.value,\n        portToRemove: portsIds[indexOfGuyToDelete]\n      });\n    }\n  }, {\n    key: \"showInput\",\n    value: function showInput() {\n      this.setState({\n        showInput: true\n      });\n    }\n  }, {\n    key: \"showInputDelete\",\n    value: function showInputDelete() {\n      this.setState({\n        showInputDelete: true\n      });\n    }\n  }, {\n    key: \"showInputColor\",\n    value: function showInputColor() {\n      this.setState({\n        showInputColor: true\n      });\n    }\n  }]);\n\n  return NodeInfo;\n}(React.Component);","map":{"version":3,"sources":["/home/dell/Dokumenty/sql-gen2/sql-gen2/sql-generator2/src/components/nodeInfo/NodeInfo.tsx"],"names":["React","NodeProperty","PropertyType","OwnProps","selectedItem","diagramEngine","selectedLink","selectedRelation","State","updatedItem","name","showInput","showInputDelete","showInputColor","portState","newPortType","newPortName","newPortIsPK","newPortIsFK","portToRemove","portLabelToRemove","color","NodeInfo","props","setState","INT","nextProps","forceUpdate","console","log","state","newValue","addOutPort","addInPort","addPort","event","persist","target","value","portToDelete","getPort","portLinks","getLinks","xd","Object","keys","getDiagramModel","removeLink","removePort","allPorts","ports","aaa","values","map","label","portsIds","key","makeItem","x","changeName1","bind","type","handleChangePK","handleChangeFK","handleChange","handleChangePortType","switchViewUpdateValue","cancelAddingPort","selectPort","cancelInputDelete","selectColor","changeColor","cancelChangingColor","e","preventDefault","colors","colorsRgb","index","indexOf","names","indexOfGuyToDelete","Component"],"mappings":"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","sourcesContent":["import './nodeItems.scss';\nimport * as React from \"react\";\nimport { DefaultNodeModel, DefaultPortModel, PortModel, DiagramModel, LabelModel, DefaultLinkModel, DiagramEngine } from 'storm-react-diagrams';\nimport { NodeProperty } from './nodeProperty/NodeProperty';\nimport { number } from 'prop-types';\nimport { randomBytes } from 'crypto';\nimport { Link } from '../models/Link';\nimport { Node} from \"../models/Node\";\nimport { PropertyType } from '../models/PropertyType';\nimport { Port } from '../models/Port';\nimport { RelationType } from '../../App2';\n\nclass OwnProps {\n    selectedItem: Node;\n    diagramEngine: DiagramEngine;\n    selectedLink: Link;\n    selectedRelation: RelationType;\n}\n\nclass State {\n    updatedItem: Node\n    name: string;\n    showInput: boolean;\n    showInputDelete: boolean;\n    showInputColor: boolean;\n    portState: string;\n    newPortType: PropertyType;\n    newPortName: string;\n    newPortIsPK: boolean;\n    newPortIsFK: boolean;\n    portToRemove: string;\n    portLabelToRemove: string;\n    color: string\n}\n\ntype Props = OwnProps;\n\nexport class NodeInfo extends React.Component<Props, State> {\n    constructor(props: Props) {\n        super(props);\n    }\n\n    componentWillMount() {\n        this.setState({\n            updatedItem: this.props.selectedItem,\n            name: this.props.selectedItem.name,\n            showInput: false,\n            showInputDelete: false,\n            showInputColor: false,\n            portState: 'out',\n            newPortName: 'out',\n            newPortIsPK: false,\n            newPortIsFK: false,\n            newPortType: PropertyType.INT,\n            portToRemove: null,\n            portLabelToRemove: null,\n            color: 'Red'\n        })\n    }\n\n    componentWillReceiveProps(nextProps: Props) {\n\n        \n        if (nextProps != this.props) {\n            this.setState({\n                updatedItem: nextProps.selectedItem,\n                name: nextProps.selectedItem.name\n            })\n            this.forceUpdate();\n        }\n        console.log('STATE', this.state);\n    }\n\n    changeName1(newValue: string): void {\n        let updatedItem: Node = this.state.updatedItem;\n        updatedItem.name = newValue;\n        this.setState({ updatedItem: updatedItem });\n    }\n\n    addPort(): void {\n        if (this.state.portState == 'out') {\n            this.state.updatedItem.addOutPort(this.state.newPortIsPK, this.state.newPortIsFK,this.state.newPortName, this.props.selectedRelation, this.props.diagramEngine, this.state.newPortType);\n        } else {\n            this.state.updatedItem.addInPort(this.state.newPortIsPK, this.state.newPortIsFK,this.state.newPortName, this.props.selectedRelation, this.props.diagramEngine, this.state.newPortType);\n        }\n    }\n\n    switchViewUpdateValue(): void {\n        this.addPort();\n        this.setState({ showInput: false });\n    }\n\n    cancelAddingPort(): void {\n        this.setState({ showInput: false, showInputDelete: false, showInputColor: false });\n    }\n    cancelChangingColor(): void {\n        this.setState({ showInputColor: false });\n    }\n    cancelInputDelete(): void {\n        this.setState({ showInputDelete: false });\n    }\n\n    handleChange(event: React.ChangeEvent<HTMLInputElement>) {\n        event.persist()\n\n        this.setState({ newPortName: event.target.value });\n    }\n\n    handleChangePK(event: React.ChangeEvent<HTMLInputElement>) {\n        event.persist()\n\n        this.setState({ newPortIsPK: !this.state.newPortIsPK });\n    }\n\n    handleChangeFK(event: React.ChangeEvent<HTMLInputElement>) {\n        event.persist()\n\n        this.setState({ newPortIsFK: !this.state.newPortIsFK});\n    }\n\n    handleChangePortType(event: React.ChangeEvent<HTMLInputElement>) {\n        event.persist()\n\n        this.setState({ newPortType: PropertyType.INT });\n    }\n\n\n\n    removePort() {\n        //find link that connects to this port and delete it\n\n        \n\n        if (this.state.portToRemove != null) {\n            let portToDelete: Port = this.state.updatedItem.getPort(this.state.portToRemove) as Port;\n            let portLinks = portToDelete.getLinks() as { [s: string]: Link };\n            if(portLinks !== null) {\n                let xd = Object.keys(portLinks);\n\n                this.props.diagramEngine.getDiagramModel().removeLink(xd[0]);\n            }\n            this.state.updatedItem.removePort(portToDelete);\n            this.setState({ portToRemove: null })\n        }\n\n    }\n\n    render() {\n        let allPorts: { [S: string]: Port } = this.state.updatedItem.ports;\n        console.log('XDD', allPorts);\n\n        this.state.updatedItem\n        if (allPorts != null) {\n            let aaa = Object.values(allPorts).map(value => {\n                return value.label;\n            });\n\n            let portsIds = Object.keys(allPorts).map((key) => {\n                return key\n            });\n\n            let makeItem = function (x: any) {\n                return <option key={x}>{x}</option>;\n            }\n\n            if (this.state.updatedItem === null) return 'Loading...';\n            return (\n                <div className=\"trayBottom\">\n\n                    <NodeProperty value={this.state.name} acceptChangeProperty={this.changeName1.bind(this)} />\n                    {this.props.selectedItem.type !== 'label' ?\n                    <div>\n                    <div onDoubleClick={() => this.showInput()}>\n                        {this.state.showInput ?\n                            <div>\n                                <input className=\"tray-bottom-item\" type=\"checkbox\" onChange={this.handleChangePK.bind(this)} checked={this.state.newPortIsPK} name={'Primary Key'}></input>\n                                <input className=\"tray-bottom-item\" type=\"checkbox\" onChange={this.handleChangeFK.bind(this)} checked={this.state.newPortIsFK} name={'Foreign Key'}></input>\n\n                                <input className=\"tray-bottom-item\" type=\"text\" onChange={this.handleChange.bind(this)} value={this.state.newPortName}></input>\n                                <input className=\"tray-bottom-item\" type=\"text\" onChange={this.handleChangePortType.bind(this)} value={this.state.portState}></input>\n                                <button className=\"tray-bottom-item\" onClick={this.switchViewUpdateValue.bind(this)}>Add</button>\n                                <button className=\"tray-bottom-item\" onClick={this.cancelAddingPort.bind(this)}>Cancel</button>\n                            </div> : <h1 className=\"tray-bottom-item\">{'Add Property'}</h1>}\n                    </div>\n                    <div onDoubleClick={() => this.showInputDelete()}>\n                        {this.state.showInputDelete ?\n                            <div>\n                                <select className=\"tray-bottom-item\" onChange={this.selectPort.bind(this)}>{aaa.map(makeItem)}</select>\n                                <button className=\"tray-bottom-item\" onClick={() => this.removePort()}>Delete</button>\n                                <button className=\"tray-bottom-item\" onClick={this.cancelInputDelete.bind(this)}>Cancel</button>\n\n                            </div> : <h1 className=\"tray-bottom-item\">{'Delete Property'}</h1>}\n                    </div>\n                    </div>\n                    : null }\n                    <div onDoubleClick={() => this.showInputColor()}>\n                        {this.state.showInputColor ?\n                            <div>\n                                <select className=\"tray-bottom-item\" onChange={this.selectColor.bind(this)} value={this.state.color}>\n                                    <option value=\"Red\">Red</option>\n                                    <option value=\"Pink\">Pink</option>\n                                    <option value=\"Green\">Green</option>\n                                    <option value=\"Blue\">Blue</option>\n                                    <option value=\"Orange\">Orange</option>\n                                    <option value=\"Brown\">Brown</option>\n                                </select>\n                                <button className=\"tray-bottom-item\" onClick={() => this.changeColor()}>Change color</button>\n                                <button className=\"tray-bottom-item\" onClick={this.cancelChangingColor.bind(this)}>Cancel</button>\n\n                            </div> : <h1 className=\"tray-bottom-item\">{'Change Color'}</h1>}\n                    </div>\n\n                </div>\n\n\n            );\n\n        }\n        else return null;\n\n    }\n    changeColor(): void {\n        if (this.state.color != null) {\n            this.state.updatedItem.color = this.state.color;\n        }\n    }\n\n    selectColor(e: any) {\n        e.persist();\n        e.preventDefault();\n\n        let colors: string[] = ['Red', 'Pink', 'Green', 'Blue', 'Orange', 'Brown'];\n        let colorsRgb: string[] = ['rgb(255,0,0)', 'rgb(255,0,185)', 'rgb(0,250,14)', 'rgb(0, 250, 253)', 'rgb(239, 137, 74)', 'rgb(125, 73, 64)'];\n        let index = colors.indexOf(e.target.value);\n        let xd = this.state.updatedItem;\n        xd.color = colorsRgb[index];\n        this.setState({\n            color: colorsRgb[index]\n        })\n\n    }\n\n    selectPort(e: any) {\n        e.persist()\n        let ports: { [S: string]: Port } = this.state.updatedItem.ports;\n\n        let names = Object.values(ports).map(value => {\n            return value.label\n        })\n        let portsIds = Object.keys(ports).map((key) => {\n            return key\n        });\n\n        let indexOfGuyToDelete = names.indexOf(e.target.value);\n        this.setState({\n            portLabelToRemove: e.target.value,\n            portToRemove: portsIds[indexOfGuyToDelete] as string\n        });\n\n\n    }\n\n    showInput(): void {\n        this.setState({\n            showInput: true\n        })\n    }\n\n    showInputDelete(): void {\n        this.setState({\n            showInputDelete: true\n        })\n    }\n\n    showInputColor(): void {\n\n        this.setState({\n            showInputColor: true,\n        })\n    }\n\n\n}"]},"metadata":{},"sourceType":"module"}