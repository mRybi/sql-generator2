{"ast":null,"code":"import _classCallCheck from \"/home/dell/Dokumenty/sql-gen2/sql-gen2/sql-generator2/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/dell/Dokumenty/sql-gen2/sql-gen2/sql-generator2/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/dell/Dokumenty/sql-gen2/sql-gen2/sql-generator2/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/dell/Dokumenty/sql-gen2/sql-gen2/sql-generator2/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/dell/Dokumenty/sql-gen2/sql-gen2/sql-generator2/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/dell/Dokumenty/sql-gen2/sql-gen2/sql-generator2/src/AppView.tsx\";\nimport * as React from \"react\";\nimport * as _ from \"lodash\";\nimport { DiagramWidget } from \"storm-react-diagrams\";\nimport { TrayItemWidget } from \"./components/dragAndDrop/TrayItemWidget\";\nimport { TrayWidget } from \"./components/dragAndDrop/TrayWidget\";\nimport { Node } from \"./components/models/Node\";\nimport { PropertyType } from \"./components/models/PropertyType\";\nimport { NodeProperties } from \"./components/nodeProperties/NodeProperties\";\nimport { GenerationHandler } from \"./handlers/GenerationHandler\";\nimport { RelationPopup } from \"./components/popups/RealtionPopup/RelationPopup\";\nimport AppContext from \"./context/appContext/AppContext\";\n\nrequire(\"storm-react-diagrams/dist/style.min.css\");\n\nrequire('react-bootstrap-table-next/dist/react-bootstrap-table2.min.css');\n\nexport var AppViewType;\n\n(function (AppViewType) {\n  AppViewType[AppViewType[\"ENTITY\"] = 0] = \"ENTITY\";\n  AppViewType[AppViewType[\"RELATION\"] = 1] = \"RELATION\";\n})(AppViewType || (AppViewType = {}));\n\nexport var RelationType;\n\n(function (RelationType) {\n  RelationType[RelationType[\"O2O\"] = 0] = \"O2O\";\n  RelationType[RelationType[\"O2M\"] = 1] = \"O2M\";\n  RelationType[RelationType[\"M2M\"] = 2] = \"M2M\";\n  RelationType[RelationType[\"none\"] = 3] = \"none\";\n  RelationType[RelationType[\"M2MNoTable\"] = 4] = \"M2MNoTable\";\n})(RelationType || (RelationType = {}));\n\nexport var AppView =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(AppView, _React$Component);\n\n  function AppView(props) {\n    var _this;\n\n    _classCallCheck(this, AppView);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(AppView).call(this, props));\n    _this.state = {\n      showDialog: false,\n      selectedNode: null,\n      selectedLink: null,\n      selectedRelation: RelationType.O2O,\n      showRelationDialog: false\n    };\n    return _this;\n  }\n\n  _createClass(AppView, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      this.setState({\n        selectedNode: null\n      });\n    }\n  }, {\n    key: \"updateRelationPopup\",\n    value: function updateRelationPopup() {\n      this.setState({\n        showRelationDialog: false,\n        selectedNode: null\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(\"div\", {\n        className: \"body\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"header\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      }, \"DB Diagram Scripter\")), React.createElement(\"div\", {\n        className: \"content\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      }, React.createElement(TrayWidget, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      }, React.createElement(TrayItemWidget, {\n        model: {\n          type: \"table\"\n        },\n        name: \"Node\",\n        color: \"rgb(0,192,255)\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      }), React.createElement(TrayItemWidget, {\n        model: {\n          type: \"label\"\n        },\n        name: \"Label\",\n        color: \"rgb(192,255,0)\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        style: {\n          borderColor: \"rgb(0,255,0)\",\n          marginTop: '100px'\n        },\n        className: \"tray-item \".concat(this.state.selectedRelation === RelationType.O2O ? 'selected' : ''),\n        onClick: function onClick() {\n          // let app = this.props.app.getActiveDiagram().getNodes() as { [s: string]: Node };\n          // Object.keys(app).forEach(x => app[x].updatePorts(RelationType.O2O));\n          _this2.setState({\n            selectedRelation: RelationType.O2O\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      }, \"Relation\"), React.createElement(\"div\", {\n        style: {\n          borderColor: \"rgb(255,0,0)\",\n          marginTop: '100px'\n        },\n        className: \"tray-item \".concat(this.context.view === AppViewType.ENTITY ? 'selected' : ''),\n        onClick: function onClick() {\n          _this2.context.changeViewType(0);\n\n          _this2.props.app.getDiagramEngine().recalculatePortsVisually();\n\n          console.log(_this2.props.app.getActiveDiagram().nodes);\n\n          _this2.props.app.getActiveDiagram().setZoomLevel(1); // \t\t\t\t\t\t\t\tlet xa: Node[] = [];\n          // \t\t\t\t\t\t\t\tlet app = this.props.app.getActiveDiagram().getNodes() as { [s: string]: Node };\n          // \t\t\t\t\t\t\t\tObject.keys(app).forEach(x => xa.push(app[x]));\n          // xa[0].setSelected(true);\n          // this.props.app.getActiveDiagram().nodes[0].setSelected(true);\t\t\t\t\t\t\t\t\n\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      }, \"Entity View\"), React.createElement(\"div\", {\n        style: {\n          borderColor: \"rgb(255,0,0)\"\n        },\n        className: \"tray-item \".concat(this.context.view === AppViewType.RELATION ? 'selected' : ''),\n        onClick: function onClick() {\n          _this2.context.changeViewType(1);\n\n          _this2.props.app.getDiagramEngine().recalculatePortsVisually();\n\n          _this2.props.app.getActiveDiagram().setZoomLevel(1); // this.props.app.getActiveDiagram().nodes[0].setSelected(true);\n          // \t\t\t\t\t\t\t\tlet xa: Node[] = [];\n          // \t\t\t\t\t\t\t\tlet app = this.props.app.getActiveDiagram().getNodes() as { [s: string]: Node };\n          // \t\t\t\t\t\t\t\tObject.keys(app).forEach(x => xa.push(app[x]));\n          // xa[0].setSelected(true);\n\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      }, \"Relation View\"), React.createElement(\"div\", {\n        style: {\n          borderColor: \"rgb(255,0,0)\"\n        },\n        className: \"tray-item\",\n        onClick: function onClick() {\n          return _this2.setState({\n            showDialog: true\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132\n        },\n        __self: this\n      }, \"Create DB Code\")), React.createElement(\"div\", {\n        className: \"diagram-layer\",\n        onDrop: function onDrop(event) {\n          var data = JSON.parse(event.dataTransfer.getData(\"storm-diagram-node\"));\n\n          var nodesCount = _.keys(_this2.props.app.getDiagramEngine().getDiagramModel().getNodes()).length;\n\n          var node = null;\n\n          if (data.type === \"table\") {\n            node = new Node(_this2.props.app.getDiagramEngine(), \"Node\".concat(nodesCount + 1), \"rgb(0,192,255)\"); // node = new Node(\"table\", `Node${nodesCount + 1}`, \"rgb(0,192,255)\");\n\n            node.addInPort(\"Id\", true, false, false, false, false, PropertyType.INT); // node.addInPort(true, true, true, true, false, \"Id\", PropertyType.INT);\n            // node.addInPort(false, false, false, false, false, \"Name\", PropertyType.NVARCHAR);\n          } else {\n            node = new Node(_this2.props.app.getDiagramEngine(), \"Label \", \"rgb(192,255,0)\"); // node = new Node(\"label\", \"Label \", \"rgb(192,255,0)\");\n          }\n\n          var points = _this2.props.app.getDiagramEngine().getRelativeMousePoint(event);\n\n          node.x = points.x;\n          node.y = points.y;\n\n          _this2.props.app.getDiagramEngine().getDiagramModel().addNode(node);\n\n          _this2.forceUpdate();\n        },\n        onDragOver: function onDragOver(event) {\n          event.preventDefault();\n        },\n        onClick: function onClick(event) {\n          event.preventDefault();\n\n          _this2.setState({\n            selectedRelation: RelationType.none,\n            showDialog: false\n          });\n        },\n        onDoubleClick: function onDoubleClick(event) {\n          event.preventDefault();\n\n          if (_this2.props.app.getDiagramEngine().getDiagramModel().getSelectedItems().length === 1) {\n            _this2.setState({\n              selectedLink: _this2.props.app.getDiagramEngine().getDiagramModel().getSelectedItems()[0].parent,\n              showRelationDialog: true,\n              selectedNode: null\n            });\n          } else {\n            _this2.setState({\n              showDialog: false,\n              showRelationDialog: false,\n              selectedNode: _this2.props.app.getDiagramEngine().getDiagramModel().getSelectedItems()[0]\n            });\n          }\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143\n        },\n        __self: this\n      }, React.createElement(DiagramWidget, {\n        deleteKeys: [46],\n        className: \"srd-demo-canvas\",\n        diagramEngine: this.props.app.getDiagramEngine(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 210\n        },\n        __self: this\n      })), this.state.selectedNode != null ? React.createElement(NodeProperties, {\n        selectedRelation: this.state.selectedRelation,\n        selectedLink: this.state.selectedLink,\n        selectedItem: this.state.selectedNode,\n        diagramEngine: this.props.app.getDiagramEngine(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 212\n        },\n        __self: this\n      }) : null, React.createElement(GenerationHandler, {\n        isOpen: this.state.showDialog,\n        serializeDiagram: this.props.app.getActiveDiagram().serializeDiagram(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 213\n        },\n        __self: this\n      }), React.createElement(RelationPopup, {\n        diagramModel: this.props.app.getActiveDiagram(),\n        update: function update() {\n          return _this2.updateRelationPopup();\n        },\n        isOpen: this.state.showRelationDialog,\n        link: this.state.selectedLink,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 214\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return AppView;\n}(React.Component);\nAppView.contextType = AppContext;","map":{"version":3,"sources":["/home/dell/Dokumenty/sql-gen2/sql-gen2/sql-generator2/src/AppView.tsx"],"names":["React","_","DiagramWidget","TrayItemWidget","TrayWidget","Node","PropertyType","NodeProperties","GenerationHandler","RelationPopup","AppContext","require","AppViewType","RelationType","AppView","props","state","showDialog","selectedNode","selectedLink","selectedRelation","O2O","showRelationDialog","setState","type","borderColor","marginTop","context","view","ENTITY","changeViewType","app","getDiagramEngine","recalculatePortsVisually","console","log","getActiveDiagram","nodes","setZoomLevel","RELATION","event","data","JSON","parse","dataTransfer","getData","nodesCount","keys","getDiagramModel","getNodes","length","node","addInPort","INT","points","getRelativeMousePoint","x","y","addNode","forceUpdate","preventDefault","none","getSelectedItems","parent","serializeDiagram","updateRelationPopup","Component","contextType"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport * as _ from \"lodash\";\n\nimport { DiagramWidget } from \"storm-react-diagrams\";\nimport { TrayItemWidget } from \"./components/dragAndDrop/TrayItemWidget\";\nimport { TrayWidget } from \"./components/dragAndDrop/TrayWidget\";\nimport { Application } from \"./components/dragAndDrop/Application\";\nimport { Node } from \"./components/models/Node\";\nimport { Link } from \"./components/models/Link\";\nimport { PropertyType } from \"./components/models/PropertyType\";\nimport { NodeProperties } from \"./components/nodeProperties/NodeProperties\";\nimport { GenerationHandler } from \"./handlers/GenerationHandler\";\nimport { RelationPopup } from \"./components/popups/RealtionPopup/RelationPopup\";\nimport AppContext from \"./context/appContext/AppContext\";\n\nrequire(\"storm-react-diagrams/dist/style.min.css\");\nrequire('react-bootstrap-table-next/dist/react-bootstrap-table2.min.css');\n\ninterface Props {\n\tapp: Application;\n}\n\ninterface State {\n\tshowDialog: boolean;\n\tselectedNode: Node;\n\tselectedLink: Link;\n\tselectedRelation: RelationType;\n\tshowRelationDialog: boolean;\n}\n\nexport enum AppViewType {\n\tENTITY = 0,\n\tRELATION = 1\n}\n\nexport enum RelationType {\n\tO2O = 0,\n\tO2M = 1,\n\tM2M = 2,\n\tnone = 3,\n\tM2MNoTable = 4\n}\n\nexport class AppView extends React.Component<Props, State> {\n\n\tstatic contextType = AppContext;\n\n\tconstructor(props: Props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tshowDialog: false,\n\t\t\tselectedNode: null,\n\t\t\tselectedLink: null,\n\t\t\tselectedRelation: RelationType.O2O,\n\t\t\tshowRelationDialog: false\n\t\t}\n\t}\n\n\tcomponentWillMount() {\n\t\tthis.setState({ selectedNode: null })\n\t}\n\n\tupdateRelationPopup() {\n\t\tthis.setState({ showRelationDialog: false,  selectedNode: null});\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"body\">\n\t\t\t\t<div className=\"header\">\n\t\t\t\t\t<div className=\"title\">DB Diagram Scripter</div>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"content\">\n\t\t\t\t\t<TrayWidget>\n\t\t\t\t\t\t<TrayItemWidget model={{ type: \"table\" }} name=\"Node\" color=\"rgb(0,192,255)\" />\n\t\t\t\t\t\t<TrayItemWidget model={{ type: \"label\" }} name=\"Label\" color=\"rgb(192,255,0)\" />\n\n\t\t\t\t\t\t<div\n\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\tborderColor: \"rgb(0,255,0)\", marginTop: '100px'\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\tclassName={`tray-item ${this.state.selectedRelation === RelationType.O2O ? 'selected' : ''}`}\n\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t// let app = this.props.app.getActiveDiagram().getNodes() as { [s: string]: Node };\n\t\t\t\t\t\t\t\t// Object.keys(app).forEach(x => app[x].updatePorts(RelationType.O2O));\n\t\t\t\t\t\t\t\tthis.setState({\n\t\t\t\t\t\t\t\t\tselectedRelation: RelationType.O2O\n\t\t\t\t\t\t\t\t})\n\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tRelation\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div\n\t\t\t\t\t\t\tstyle={{ borderColor: \"rgb(255,0,0)\", marginTop: '100px' }}\n\t\t\t\t\t\t\tclassName={`tray-item ${this.context.view === AppViewType.ENTITY ? 'selected' : ''}`}\n\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\tthis.context.changeViewType(0);\n\t\t\t\t\t\t\t\tthis.props.app.getDiagramEngine().recalculatePortsVisually();\n\t\t\t\t\t\t\t\tconsole.log(this.props.app.getActiveDiagram().nodes)\n\t\t\t\t\t\t\t\tthis.props.app.getActiveDiagram().setZoomLevel(1);\n// \t\t\t\t\t\t\t\tlet xa: Node[] = [];\n// \t\t\t\t\t\t\t\tlet app = this.props.app.getActiveDiagram().getNodes() as { [s: string]: Node };\n// \t\t\t\t\t\t\t\tObject.keys(app).forEach(x => xa.push(app[x]));\n// xa[0].setSelected(true);\n\t\t\t\t\t\t\t\t// this.props.app.getActiveDiagram().nodes[0].setSelected(true);\t\t\t\t\t\t\t\t\n\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tEntity View\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<div\n\t\t\t\t\t\t\tstyle={{ borderColor: \"rgb(255,0,0)\" }}\n\t\t\t\t\t\t\tclassName={`tray-item ${this.context.view === AppViewType.RELATION ? 'selected' : ''}`}\n\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\tthis.context.changeViewType(1);\n\t\t\t\t\t\t\t\tthis.props.app.getDiagramEngine().recalculatePortsVisually();\n\t\t\t\t\t\t\t\tthis.props.app.getActiveDiagram().setZoomLevel(1);\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t// this.props.app.getActiveDiagram().nodes[0].setSelected(true);\n\n// \t\t\t\t\t\t\t\tlet xa: Node[] = [];\n// \t\t\t\t\t\t\t\tlet app = this.props.app.getActiveDiagram().getNodes() as { [s: string]: Node };\n// \t\t\t\t\t\t\t\tObject.keys(app).forEach(x => xa.push(app[x]));\n// xa[0].setSelected(true);\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tRelation View\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<div\n\t\t\t\t\t\t\tstyle={{ borderColor: \"rgb(255,0,0)\" }}\n\t\t\t\t\t\t\tclassName=\"tray-item\"\n\t\t\t\t\t\t\tonClick={() => this.setState({ showDialog: true })}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tCreate DB Code\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\n\t\t\t\t\t</TrayWidget>\n\n\t\t\t\t\t<div\n\t\t\t\t\t\tclassName=\"diagram-layer\"\n\t\t\t\t\t\tonDrop={event => {\n\t\t\t\t\t\t\tvar data = JSON.parse(event.dataTransfer.getData(\"storm-diagram-node\"));\n\t\t\t\t\t\t\tvar nodesCount = _.keys(\n\t\t\t\t\t\t\t\tthis.props.app\n\t\t\t\t\t\t\t\t\t.getDiagramEngine()\n\t\t\t\t\t\t\t\t\t.getDiagramModel()\n\t\t\t\t\t\t\t\t\t.getNodes()\n\t\t\t\t\t\t\t).length;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tvar node = null;\n\t\t\t\t\t\t\tif (data.type === \"table\") {\n\t\t\t\t\t\t\t\tnode = new Node(this.props.app.getDiagramEngine(), `Node${nodesCount + 1}`, \"rgb(0,192,255)\");\n\t\t\t\t\t\t\t\t// node = new Node(\"table\", `Node${nodesCount + 1}`, \"rgb(0,192,255)\");\n\t\t\t\t\t\t\t\t node.addInPort(\"Id\", true, false, false, false, false, PropertyType.INT);\n\n\t\t\t\t\t\t\t\t// node.addInPort(true, true, true, true, false, \"Id\", PropertyType.INT);\n\t\t\t\t\t\t\t\t// node.addInPort(false, false, false, false, false, \"Name\", PropertyType.NVARCHAR);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tnode = new Node(this.props.app.getDiagramEngine(), \"Label \", \"rgb(192,255,0)\");\n\t\t\t\t\t\t\t\t// node = new Node(\"label\", \"Label \", \"rgb(192,255,0)\");\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tvar points = this.props.app.getDiagramEngine().getRelativeMousePoint(event);\n\t\t\t\t\t\t\tnode.x = points.x;\n\t\t\t\t\t\t\tnode.y = points.y;\n\t\t\t\t\t\t\tthis.props.app\n\t\t\t\t\t\t\t\t.getDiagramEngine()\n\t\t\t\t\t\t\t\t.getDiagramModel()\n\t\t\t\t\t\t\t\t.addNode(node);\n\t\t\t\t\t\t\tthis.forceUpdate();\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tonDragOver={event => {\n\t\t\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\t\t}}\n\n\t\t\t\t\t\tonClick={event => {\n\t\t\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\t\t\tthis.setState({\n\t\t\t\t\t\t\t\tselectedRelation: RelationType.none,\n\t\t\t\t\t\t\t\tshowDialog: false\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tonDoubleClick={event => {\n\t\t\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\t\t\tif (this.props.app.getDiagramEngine().getDiagramModel().getSelectedItems().length === 1) {\n\t\t\t\t\t\t\t\tthis.setState({\n\t\t\t\t\t\t\t\t\tselectedLink: this.props.app\n\t\t\t\t\t\t\t\t\t\t.getDiagramEngine()\n\t\t\t\t\t\t\t\t\t\t.getDiagramModel().getSelectedItems()[0].parent as Link,\n\t\t\t\t\t\t\t\t\tshowRelationDialog: true,\n\t\t\t\t\t\t\t\t\tselectedNode: null\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis.setState({\n\t\t\t\t\t\t\t\tshowDialog: false,\n\t\t\t\t\t\t\t\tshowRelationDialog: false,\n\t\t\t\t\t\t\t\tselectedNode: this.props.app\n\t\t\t\t\t\t\t\t\t.getDiagramEngine()\n\t\t\t\t\t\t\t\t\t.getDiagramModel()\n\t\t\t\t\t\t\t\t\t.getSelectedItems()[0] as Node\n\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}}\n\t\t\t\t\t>\n\t\t\t\t\t\t<DiagramWidget deleteKeys={[46]} className=\"srd-demo-canvas\" diagramEngine={this.props.app.getDiagramEngine()} />\n\t\t\t\t\t</div>\n\t\t\t\t\t{this.state.selectedNode != null ? <NodeProperties selectedRelation={this.state.selectedRelation} selectedLink={this.state.selectedLink} selectedItem={this.state.selectedNode} diagramEngine={this.props.app.getDiagramEngine()} /> : null}\n\t\t\t\t\t<GenerationHandler isOpen={this.state.showDialog} serializeDiagram={this.props.app.getActiveDiagram().serializeDiagram()} />\n\t\t\t\t\t<RelationPopup diagramModel={this.props.app.getActiveDiagram()} update={() => this.updateRelationPopup()} isOpen={this.state.showRelationDialog} link={this.state.selectedLink} />\n\t\t\t\t</div>\n\t\t\t</div >\n\t\t);\n\t}\n}"]},"metadata":{},"sourceType":"module"}