{"ast":null,"code":"import _classCallCheck from \"/home/dell/Dokumenty/sql-gen2/sql-gen2/sql-generator2/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/dell/Dokumenty/sql-gen2/sql-gen2/sql-generator2/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/dell/Dokumenty/sql-gen2/sql-gen2/sql-generator2/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/dell/Dokumenty/sql-gen2/sql-gen2/sql-generator2/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _get from \"/home/dell/Dokumenty/sql-gen2/sql-gen2/sql-generator2/node_modules/@babel/runtime/helpers/esm/get\";\nimport _inherits from \"/home/dell/Dokumenty/sql-gen2/sql-gen2/sql-generator2/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport * as _ from \"lodash\";\nimport { PortModel } from \"storm-react-diagrams\";\nimport { Link } from \"./Link\";\nimport { PropertyType } from \"./PropertyType\";\nimport { Node } from \"./Node\";\nimport { RelationType } from \"../../App2\";\nexport var Port =\n/*#__PURE__*/\nfunction (_PortModel) {\n  _inherits(Port, _PortModel);\n\n  function Port(isPrimaryKey, isForeignKey, isInput, name) {\n    var _this;\n\n    var label = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;\n    var selectedRelation = arguments.length > 5 ? arguments[5] : undefined;\n    var diagramEngine = arguments.length > 6 ? arguments[6] : undefined;\n    var propertyType = arguments.length > 7 ? arguments[7] : undefined;\n    var id = arguments.length > 8 ? arguments[8] : undefined;\n\n    _classCallCheck(this, Port);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Port).call(this, name, \"with_prop\", id));\n    _this.in = void 0;\n    _this.label = void 0;\n    _this.propertyType = void 0;\n    _this.isPrimaryKey = void 0;\n    _this.isForeignKey = void 0;\n    _this.links = void 0;\n    _this.iterator = 1;\n    _this.firstM2M = 1;\n    _this.selectedRelation = void 0;\n    _this.diagramEngine = void 0;\n    _this.in = isInput;\n    _this.label = label || name;\n    _this.links = {};\n    _this.propertyType = propertyType;\n    _this.isForeignKey = isForeignKey;\n    _this.isPrimaryKey = isPrimaryKey;\n    _this.selectedRelation = selectedRelation;\n    _this.diagramEngine = diagramEngine;\n    return _this;\n  }\n\n  _createClass(Port, [{\n    key: \"updatePortRelation\",\n    value: function updatePortRelation(selectedRelation) {\n      this.selectedRelation = selectedRelation;\n    }\n  }, {\n    key: \"deSerialize\",\n    value: function deSerialize(object, engine) {\n      _get(_getPrototypeOf(Port.prototype), \"deSerialize\", this).call(this, object, engine);\n\n      this.in = object.in;\n      this.label = object.label;\n    }\n  }, {\n    key: \"serialize\",\n    value: function serialize() {\n      return _.merge(_get(_getPrototypeOf(Port.prototype), \"serialize\", this).call(this), {\n        in: this.in,\n        label: this.label,\n        propertyType: PropertyType[this.propertyType],\n        isForeignKey: this.isForeignKey,\n        isPrimaryKey: this.isPrimaryKey\n      });\n    }\n  }, {\n    key: \"link\",\n    value: function link(nodeToLink) {\n      //dalczego  przypina do zlego portu?\n      var thisPortNode = this.getNode();\n      var ports = nodeToLink.getInPorts();\n      var isThereAlreadyThatPort = ports.filter(function (p) {\n        return p.label === \"\".concat(thisPortNode.name, \"Id\");\n      }).length;\n\n      if (isThereAlreadyThatPort === 0) {\n        var portLinks = this.getLinks();\n        var linkToDelete = Object.keys(portLinks).filter(function (l) {\n          return portLinks[l].getTargetPort() === ports.filter(function (p) {\n            return p.label === 'Id';\n          })[0];\n        });\n        this.diagramEngine.getDiagramModel().removeLink(linkToDelete[0]);\n        var link = this.createLinkModel();\n\n        if (link !== null) {\n          link.setSourcePort(this);\n          var newPort = nodeToLink.addInPort(false, true, \"\".concat(thisPortNode.name, \"Id\"), this.selectedRelation, this.diagramEngine, PropertyType.INT);\n          console.log('ports', this, newPort);\n          link.setTargetPort(newPort);\n          this.diagramEngine.getDiagramModel().addLink(link);\n          this.diagramEngine.recalculatePortsVisually();\n          console.log('link', link);\n          this.selectedRelation = RelationType.none;\n        }\n      }\n\n      this.selectedRelation = RelationType.none;\n      return null;\n    }\n  }, {\n    key: \"createM2MNode\",\n    value: function createM2MNode(port1Name, port2Name) {\n      var nodes = this.diagramEngine.getDiagramModel().getNodes();\n      var isAlredy = Object.keys(nodes).filter(function (x) {\n        return nodes[x].name.slice(3) === \"\".concat(port1Name.slice(3, 8), \"Has\").concat(port2Name);\n      });\n\n      if (isAlredy.length === 0) {\n        var relationNode = new Node('table', \"rl_\".concat(port1Name, \"Has\").concat(port2Name));\n        relationNode.addInPort(true, false, \"Id\", this.selectedRelation, this.diagramEngine, PropertyType.INT);\n        relationNode.addInPort(false, true, \"\".concat(port1Name, \"Id\"), this.selectedRelation, this.diagramEngine, PropertyType.INT);\n        relationNode.addInPort(false, true, \"\".concat(port2Name, \"Id\"), this.selectedRelation, this.diagramEngine, PropertyType.INT);\n        this.diagramEngine.recalculatePortsVisually();\n        return relationNode;\n      }\n\n      return null;\n    }\n  }, {\n    key: \"addRelationLink\",\n    value: function addRelationLink(node1, relationtNode, node2, port) {\n      var portLinks = this.getLinks();\n      var link = Object.keys(portLinks).filter(function (l) {\n        return portLinks[l].getTargetPort() === port;\n      });\n      this.diagramEngine.getDiagramModel().removeLink(link[0]);\n      var link1 = this.createLinkModel();\n      var link2 = this.createLinkModel();\n\n      if (!link1 || !link2) {} else {\n        link1.setSourcePort(node1.getInPorts().filter(function (p) {\n          return p.label === 'Id';\n        })[0]);\n        link1.setTargetPort(relationtNode.getInPorts().filter(function (p) {\n          return p.label === 'Id';\n        })[0]);\n        link2.setSourcePort(relationtNode.getInPorts().filter(function (p) {\n          return p.label === 'Id';\n        })[0]);\n        link2.setTargetPort(node2.getInPorts().filter(function (p) {\n          return p.label === 'Id';\n        })[0]);\n        this.diagramEngine.getDiagramModel().addAll(relationtNode, link1, link2);\n        this.selectedRelation = RelationType.none;\n      }\n\n      this.selectedRelation = RelationType.none;\n    }\n  }, {\n    key: \"canLinkToPort\",\n    value: function canLinkToPort(port) {\n      if (this.selectedRelation === RelationType.none) {\n        return true;\n      } else if (port instanceof Port) {\n        if (this.selectedRelation !== RelationType.M2M && (this.isPrimaryKey && port.isPrimaryKey || this.isPrimaryKey && port.isForeignKey || this.isForeignKey && port.isPrimaryKey)) {\n          var nodeToLink = port.getNode();\n          this.link(nodeToLink);\n        } else if (this.selectedRelation === RelationType.M2M && this.iterator === 1) {\n          if (this.firstM2M === 1) {\n            var _nodeToLink = port.getNode();\n\n            var relNode = this.createM2MNode(this.getNode().name, _nodeToLink.name);\n\n            if (relNode !== null) {\n              this.addRelationLink(this.getNode(), relNode, port.getNode(), port);\n              var app = this.diagramEngine.getDiagramModel().getNodes();\n              Object.keys(app).forEach(function (x) {\n                return app[x].updatePorts(RelationType.none);\n              });\n            } else {\n              var _app = this.diagramEngine.getDiagramModel().getNodes();\n\n              Object.keys(_app).forEach(function (x) {\n                return _app[x].updatePorts(RelationType.none);\n              });\n              this.selectedRelation = RelationType.none;\n              this.firstM2M = 0;\n              this.iterator = 0;\n            }\n          }\n\n          return false;\n        }\n\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"createLinkModel\",\n    value: function createLinkModel() {\n      var link = _get(_getPrototypeOf(Port.prototype), \"createLinkModel\", this).call(this);\n\n      if (this.selectedRelation === RelationType.O2O) {\n        return new Link(\"default\", RelationType.O2O);\n      } else if (this.selectedRelation === RelationType.O2M) {\n        return new Link(\"default\", RelationType.O2M);\n      } else if (this.selectedRelation === RelationType.M2M) {\n        return new Link(\"default\", RelationType.M2M);\n      } else {\n        return null;\n      }\n    }\n  }]);\n\n  return Port;\n}(PortModel);","map":{"version":3,"sources":["/home/dell/Dokumenty/sql-gen2/sql-gen2/sql-generator2/src/components/models/Port.ts"],"names":["_","PortModel","Link","PropertyType","Node","RelationType","Port","isPrimaryKey","isForeignKey","isInput","name","label","selectedRelation","diagramEngine","propertyType","id","in","links","iterator","firstM2M","object","engine","merge","nodeToLink","thisPortNode","getNode","ports","getInPorts","isThereAlreadyThatPort","filter","p","length","portLinks","getLinks","linkToDelete","Object","keys","l","getTargetPort","getDiagramModel","removeLink","link","createLinkModel","setSourcePort","newPort","addInPort","INT","console","log","setTargetPort","addLink","recalculatePortsVisually","none","port1Name","port2Name","nodes","getNodes","isAlredy","x","slice","relationNode","node1","relationtNode","node2","port","link1","link2","addAll","M2M","relNode","createM2MNode","addRelationLink","app","forEach","updatePorts","O2O","O2M"],"mappings":"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","sourcesContent":["import * as _ from \"lodash\";\nimport { PortModel, DiagramEngine, LinkModel, DefaultLinkModel, NodeModel, DiagramModel } from \"storm-react-diagrams\";\nimport { Link } from \"./Link\";\nimport { PropertyType } from \"./PropertyType\";\nimport { Node } from \"./Node\";\nimport { RelationType } from \"../../App2\";\n\nexport class Port extends PortModel {\n\n\tin: boolean;\n\tlabel: string;\n\tpropertyType: PropertyType;\n\tisPrimaryKey: boolean;\n\tisForeignKey: boolean;\n\tlinks: { [id: string]: Link };\n\titerator: number = 1;\n\tfirstM2M: number = 1;\n\tselectedRelation: RelationType;\n\tdiagramEngine: DiagramEngine;\n\n\tconstructor(isPrimaryKey: boolean, isForeignKey: boolean, isInput: boolean, name: string, label: string = null, selectedRelation: RelationType, diagramEngine?: DiagramEngine, propertyType?: PropertyType, id?: string) {\n\t\tsuper(name, \"with_prop\", id);\n\t\tthis.in = isInput;\n\t\tthis.label = label || name;\n\t\tthis.links = {};\n\t\tthis.propertyType = propertyType;\n\t\tthis.isForeignKey = isForeignKey;\n\t\tthis.isPrimaryKey = isPrimaryKey;\n\t\tthis.selectedRelation = selectedRelation;\n\t\tthis.diagramEngine = diagramEngine;\n\n\t}\n\n\tupdatePortRelation(selectedRelation: RelationType) {\n\t\tthis.selectedRelation = selectedRelation;\n\t}\n\n\tdeSerialize(object: any, engine: DiagramEngine) {\n\t\tsuper.deSerialize(object, engine);\n\t\tthis.in = object.in;\n\t\tthis.label = object.label;\n\t}\n\n\tserialize() {\n\t\treturn _.merge(super.serialize(), {\n\t\t\tin: this.in,\n\t\t\tlabel: this.label,\n\t\t\tpropertyType: PropertyType[this.propertyType],\n\t\t\tisForeignKey: this.isForeignKey,\n\t\t\tisPrimaryKey: this.isPrimaryKey\n\t\t});\n\t}\n\n\n\n\tlink(nodeToLink: Node): LinkModel {\n\t\t//dalczego  przypina do zlego portu?\n\n\t\tlet thisPortNode = this.getNode() as Node;\n\t\tlet ports = nodeToLink.getInPorts();\n\t\tlet isThereAlreadyThatPort = ports.filter(p => p.label === `${thisPortNode.name}Id`).length;\n\t\tif (isThereAlreadyThatPort === 0) {\n\t\t\tlet portLinks = this.getLinks() as { [s: string]: Link };\n\t\t\tlet linkToDelete = Object.keys(portLinks).filter(l => portLinks[l].getTargetPort() === ports.filter(p => p.label === 'Id')[0]);\n\t\n\t\t\tthis.diagramEngine.getDiagramModel().removeLink(linkToDelete[0])\n\n\n\t\t\tlet link = this.createLinkModel();\n\t\t\tif (link !== null) {\n\t\t\tlink.setSourcePort(this)\n\t\t\tlet newPort = nodeToLink.addInPort(false, true, `${thisPortNode.name}Id`, this.selectedRelation, this.diagramEngine, PropertyType.INT);\n\t\t\tconsole.log('ports',this, newPort);\n\t\t\tlink.setTargetPort(newPort);\n\t\t\tthis.diagramEngine.getDiagramModel().addLink(link);\n\t\t\tthis.diagramEngine.recalculatePortsVisually();\n\t\t\tconsole.log('link',link);\n\n\t\t\tthis.selectedRelation = RelationType.none;\n\n\t\t\t}\n\t\t\t\n\t\t}\n\t\tthis.selectedRelation = RelationType.none;\n\n\t\treturn null;\n\t}\n\n\tcreateM2MNode(port1Name: string, port2Name: string) {\n\t\tlet nodes = this.diagramEngine.getDiagramModel().getNodes() as { [s: string]: Node };\n\t\tlet isAlredy = Object.keys(nodes).filter(x => nodes[x].name.slice(3) === `${port1Name.slice(3, 8)}Has${port2Name}`);\n\n\n\t\tif (isAlredy.length === 0) {\n\t\t\tlet relationNode = new Node('table', `rl_${port1Name}Has${port2Name}`);\n\t\t\trelationNode.addInPort(true, false, `Id`, this.selectedRelation, this.diagramEngine, PropertyType.INT)\n\t\t\trelationNode.addInPort(false, true, `${port1Name}Id`, this.selectedRelation, this.diagramEngine, PropertyType.INT)\n\t\t\trelationNode.addInPort(false, true, `${port2Name}Id`, this.selectedRelation, this.diagramEngine, PropertyType.INT)\n\t\t\tthis.diagramEngine.recalculatePortsVisually();\n\t\t\t\n\t\t\treturn relationNode;\n\t\t}\n\n\t\treturn null;\n\t}\n\n\taddRelationLink(node1: Node, relationtNode: Node, node2: Node, port: Port) {\n\t\tlet portLinks = this.getLinks() as { [s: string]: Link };\n\n\t\tlet link = Object.keys(portLinks).filter(l => portLinks[l].getTargetPort() === port);\n\n\n\t\tthis.diagramEngine.getDiagramModel().removeLink(link[0])\n\n\n\t\tlet link1 = this.createLinkModel();\n\t\tlet link2 = this.createLinkModel();\n\t\tif (!link1 || !link2) {\n\t\t} else {\n\t\t\tlink1.setSourcePort(node1.getInPorts().filter(p => p.label === 'Id')[0])\n\t\t\tlink1.setTargetPort(relationtNode.getInPorts().filter(p => p.label === 'Id')[0])\n\t\t\tlink2.setSourcePort(relationtNode.getInPorts().filter(p => p.label === 'Id')[0])\n\t\t\tlink2.setTargetPort(node2.getInPorts().filter(p => p.label === 'Id')[0])\n\t\t\tthis.diagramEngine.getDiagramModel().addAll(relationtNode, link1, link2);\n\t\t\tthis.selectedRelation = RelationType.none;\n\t\t}\n\t\tthis.selectedRelation = RelationType.none;\n\n\n\t}\n\n\tcanLinkToPort(port: PortModel): boolean {\n\t\tif (this.selectedRelation === RelationType.none) {\n\t\t\treturn true;\n\t\t} else\n\t\t\tif (port instanceof Port) {\n\n\t\t\t\tif (this.selectedRelation !== RelationType.M2M && (this.isPrimaryKey && port.isPrimaryKey || this.isPrimaryKey && port.isForeignKey || this.isForeignKey && port.isPrimaryKey)) {\n\t\t\t\t\tlet nodeToLink = port.getNode() as Node;\n\t\t\t\t\tthis.link(nodeToLink);\n\t\t\t\t}\n\t\t\t\telse if (this.selectedRelation === RelationType.M2M && this.iterator === 1) {\n\t\t\t\t\tif (this.firstM2M === 1) {\n\t\t\t\t\t\tlet nodeToLink = port.getNode() as Node;\n\t\t\t\t\t\tlet relNode = this.createM2MNode((this.getNode() as Node).name, nodeToLink.name);\n\t\t\t\t\t\tif (relNode !== null) {\n\t\t\t\t\t\t\tthis.addRelationLink(this.getNode() as Node, relNode, port.getNode() as Node, port);\n\t\t\t\t\t\t\tlet app = this.diagramEngine.getDiagramModel().getNodes() as { [s: string]: Node };\n\t\t\t\t\t\t\tObject.keys(app).forEach(x => app[x].updatePorts(RelationType.none));\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tlet app = this.diagramEngine.getDiagramModel().getNodes() as { [s: string]: Node };\n\t\t\t\t\t\t\tObject.keys(app).forEach(x => app[x].updatePorts(RelationType.none));\n\n\t\t\t\t\t\t\tthis.selectedRelation = RelationType.none;\n\t\t\t\t\t\t\tthis.firstM2M = 0;\n\t\t\t\t\t\t\tthis.iterator = 0\n\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\treturn false;\n\n\n\t}\n\n\tcreateLinkModel(): LinkModel {\n\t\tlet link = super.createLinkModel();\n\t\tif (this.selectedRelation === RelationType.O2O) {\n\t\t\treturn new Link(\"default\", RelationType.O2O);\n\t\t} else if (this.selectedRelation === RelationType.O2M) {\n\t\t\treturn new Link(\"default\", RelationType.O2M);\n\t\t} else if (this.selectedRelation === RelationType.M2M) {\n\t\t\treturn new Link(\"default\", RelationType.M2M);\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\n\t}\n}"]},"metadata":{},"sourceType":"module"}