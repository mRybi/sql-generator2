{"ast":null,"code":"import _classCallCheck from \"/home/dell/Dokumenty/sql-gen2/sql-gen2/sql-generator2/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/dell/Dokumenty/sql-gen2/sql-gen2/sql-generator2/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport * as SRD from \"storm-react-diagrams\";\nimport { NodeFactory } from \"../factories/NodeFactory\";\nimport { CustomLabelFactory } from \"../factories/CustomLabelFactory\";\nimport { PortLabelFactory } from \"../factories/PortLabelFactory\";\nexport var Application =\n/*#__PURE__*/\nfunction () {\n  function Application() {\n    _classCallCheck(this, Application);\n\n    this.activeModel = void 0;\n    this.diagramEngine = void 0;\n    this.diagramEngine = new SRD.DiagramEngine();\n    this.diagramEngine.registerNodeFactory(new NodeFactory());\n    this.diagramEngine.registerPortFactory(new PortLabelFactory());\n    this.diagramEngine.registerNodeFactory(new CustomLabelFactory());\n    this.diagramEngine.installDefaultFactories();\n    this.newModel();\n  }\n\n  _createClass(Application, [{\n    key: \"newModel\",\n    value: function newModel() {\n      this.activeModel = new SRD.DiagramModel();\n      this.diagramEngine.setDiagramModel(this.activeModel); // console.log('MODEL JSON', JSON.stringify(this.activeModel.serializeDiagram(), null, 2))\n      // //3-A) create a default node\n      // var node1 = new Node(\"table\",\"Node1\", \"rgb(0,192,255)\");\n      // let port = node1.addInPort(true, true, true, true, false, \"Id\", PropertyType.INT);\n      // let port1 = node1.addInPort(true, true, true, false, false, \"Id1\", PropertyType.INT);\n      // node1.setPosition(100, 100);\n      // //3-B) create another default node\n      // var node2 = new Node(\"table\", \"Node2\", \"rgb(0,192,255)\");\n      // let port2 = node2.addInPort(true, true, true, true, false,\"Id\", PropertyType.INT);\n      // node2.setPosition(400, 100);\n      // // link the ports\n      // let link1 = port.initialLink(node2);\n      // this.activeModel.addAll(node1, node2, link1);\n      // this.diagramEngine.recalculatePortsVisually();\n\n      var node1 = new SRD.DefaultNodeModel(\"Node 1\", \"rgb(0,192,255)\");\n      var port = node1.addOutPort(\"Out\");\n      node1.setPosition(100, 100);\n      var node2 = new SRD.DefaultNodeModel(\"Node 1\", \"rgb(0,192,255)\");\n      var port22 = node1.addOutPort(\"Out\");\n      node1.setPosition(100, 100); //3-B) create another default node\n\n      var node22 = new SRD.DefaultNodeModel(\"Node 2\", \"rgb(192,255,0)\");\n      var port2 = node2.addInPort(\"In\");\n      var port3 = node2.addInPort(\"In2\");\n      node2.setPosition(400, 100); // link the ports\n\n      var link1 = port.link(port2);\n      this.activeModel.addAll(node1, node22, node2, link1);\n    }\n  }, {\n    key: \"getActiveDiagram\",\n    value: function getActiveDiagram() {\n      return this.activeModel;\n    }\n  }, {\n    key: \"getDiagramEngine\",\n    value: function getDiagramEngine() {\n      return this.diagramEngine;\n    }\n  }]);\n\n  return Application;\n}();","map":{"version":3,"sources":["/home/dell/Dokumenty/sql-gen2/sql-gen2/sql-generator2/src/components/dragAndDrop/Application.ts"],"names":["SRD","NodeFactory","CustomLabelFactory","PortLabelFactory","Application","activeModel","diagramEngine","DiagramEngine","registerNodeFactory","registerPortFactory","installDefaultFactories","newModel","DiagramModel","setDiagramModel","node1","DefaultNodeModel","port","addOutPort","setPosition","node2","port22","node22","port2","addInPort","port3","link1","link","addAll"],"mappings":";;AAAA,OAAO,KAAKA,GAAZ,MAAqB,sBAArB;AACA,SAASC,WAAT,QAA4B,0BAA5B;AAGA,SAASC,kBAAT,QAAmC,iCAAnC;AAEA,SAASC,gBAAT,QAAiC,+BAAjC;AAGA,WAAaC,WAAb;AAAA;AAAA;AAIC,yBAAc;AAAA;;AAAA,SAHJC,WAGI;AAAA,SAFJC,aAEI;AACb,SAAKA,aAAL,GAAqB,IAAIN,GAAG,CAACO,aAAR,EAArB;AAEA,SAAKD,aAAL,CAAmBE,mBAAnB,CAAuC,IAAIP,WAAJ,EAAvC;AACA,SAAKK,aAAL,CAAmBG,mBAAnB,CAAuC,IAAIN,gBAAJ,EAAvC;AAEA,SAAKG,aAAL,CAAmBE,mBAAnB,CAAuC,IAAIN,kBAAJ,EAAvC;AACA,SAAKI,aAAL,CAAmBI,uBAAnB;AAEA,SAAKC,QAAL;AACA;;AAdF;AAAA;AAAA,+BAgBmB;AACjB,WAAKN,WAAL,GAAmB,IAAIL,GAAG,CAACY,YAAR,EAAnB;AACA,WAAKN,aAAL,CAAmBO,eAAnB,CAAmC,KAAKR,WAAxC,EAFiB,CAGjB;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;;AAGA,UAAIS,KAAK,GAAG,IAAId,GAAG,CAACe,gBAAR,CAAyB,QAAzB,EAAmC,gBAAnC,CAAZ;AACA,UAAIC,IAAI,GAAGF,KAAK,CAACG,UAAN,CAAiB,KAAjB,CAAX;AACAH,MAAAA,KAAK,CAACI,WAAN,CAAkB,GAAlB,EAAuB,GAAvB;AACA,UAAIC,KAAK,GAAG,IAAInB,GAAG,CAACe,gBAAR,CAAyB,QAAzB,EAAmC,gBAAnC,CAAZ;AACA,UAAIK,MAAM,GAAGN,KAAK,CAACG,UAAN,CAAiB,KAAjB,CAAb;AACAH,MAAAA,KAAK,CAACI,WAAN,CAAkB,GAAlB,EAAuB,GAAvB,EA5BiB,CA6BjB;;AACA,UAAIG,MAAM,GAAG,IAAIrB,GAAG,CAACe,gBAAR,CAAyB,QAAzB,EAAmC,gBAAnC,CAAb;AACA,UAAIO,KAAK,GAAGH,KAAK,CAACI,SAAN,CAAgB,IAAhB,CAAZ;AACA,UAAIC,KAAK,GAAGL,KAAK,CAACI,SAAN,CAAgB,KAAhB,CAAZ;AAEAJ,MAAAA,KAAK,CAACD,WAAN,CAAkB,GAAlB,EAAuB,GAAvB,EAlCiB,CAoCjB;;AACA,UAAIO,KAAK,GAAGT,IAAI,CAACU,IAAL,CAAUJ,KAAV,CAAZ;AAEA,WAAKjB,WAAL,CAAiBsB,MAAjB,CAAwBb,KAAxB,EAA+BO,MAA/B,EAAwCF,KAAxC,EAA+CM,KAA/C;AAEA;AAzDF;AAAA;AAAA,uCA2D6C;AAC3C,aAAO,KAAKpB,WAAZ;AACA;AA7DF;AAAA;AAAA,uCA+D8C;AAC5C,aAAO,KAAKC,aAAZ;AACA;AAjEF;;AAAA;AAAA","sourcesContent":["import * as SRD from \"storm-react-diagrams\";\nimport { NodeFactory } from \"../factories/NodeFactory\";\nimport { Node } from \"../models/Node\";\nimport { PropertyType } from \"../models/PropertyType\";\nimport { CustomLabelFactory } from \"../factories/CustomLabelFactory\";\nimport { RelationType } from \"../../AppView\";\nimport { PortLabelFactory } from \"../factories/PortLabelFactory\";\n\n\nexport class Application {\n\tprotected activeModel: SRD.DiagramModel;\n\tprotected diagramEngine: SRD.DiagramEngine;\n\n\tconstructor() {\n\t\tthis.diagramEngine = new SRD.DiagramEngine();\n\t\t\n\t\tthis.diagramEngine.registerNodeFactory(new NodeFactory());\n\t\tthis.diagramEngine.registerPortFactory(new PortLabelFactory());\n\n\t\tthis.diagramEngine.registerNodeFactory(new CustomLabelFactory());\n\t\tthis.diagramEngine.installDefaultFactories(); \n\n\t\tthis.newModel();\n\t}\n\n\tpublic newModel() {\n\t\tthis.activeModel = new SRD.DiagramModel();\n\t\tthis.diagramEngine.setDiagramModel(this.activeModel);\n\t\t// console.log('MODEL JSON', JSON.stringify(this.activeModel.serializeDiagram(), null, 2))\n\t\t// //3-A) create a default node\n\t\t// var node1 = new Node(\"table\",\"Node1\", \"rgb(0,192,255)\");\n\t\t// let port = node1.addInPort(true, true, true, true, false, \"Id\", PropertyType.INT);\n\t\t// let port1 = node1.addInPort(true, true, true, false, false, \"Id1\", PropertyType.INT);\n\t\t\n\t\t// node1.setPosition(100, 100);\n\n\t\t// //3-B) create another default node\n\t\t// var node2 = new Node(\"table\", \"Node2\", \"rgb(0,192,255)\");\n\t\t// let port2 = node2.addInPort(true, true, true, true, false,\"Id\", PropertyType.INT);\n\t\t// node2.setPosition(400, 100);\n\n\t\t// // link the ports\n\t\t// let link1 = port.initialLink(node2);\n\n\t\t// this.activeModel.addAll(node1, node2, link1);\n\t\t// this.diagramEngine.recalculatePortsVisually();\n\n\n\t\tvar node1 = new SRD.DefaultNodeModel(\"Node 1\", \"rgb(0,192,255)\");\n\t\tlet port = node1.addOutPort(\"Out\");\n\t\tnode1.setPosition(100, 100);\n\t\tvar node2 = new SRD.DefaultNodeModel(\"Node 1\", \"rgb(0,192,255)\");\n\t\tlet port22 = node1.addOutPort(\"Out\");\n\t\tnode1.setPosition(100, 100);\n\t\t//3-B) create another default node\n\t\tvar node22 = new SRD.DefaultNodeModel(\"Node 2\", \"rgb(192,255,0)\");\n\t\tlet port2 = node2.addInPort(\"In\");\n\t\tlet port3 = node2.addInPort(\"In2\");\n\n\t\tnode2.setPosition(400, 100);\n\n\t\t// link the ports\n\t\tlet link1 = port.link(port2);\n\n\t\tthis.activeModel.addAll(node1, node22,  node2, link1);\n\n\t}\n\n\tpublic getActiveDiagram(): SRD.DiagramModel {\n\t\treturn this.activeModel;\n\t}\n\n\tpublic getDiagramEngine(): SRD.DiagramEngine {\n\t\treturn this.diagramEngine;\n\t}\n}"]},"metadata":{},"sourceType":"module"}