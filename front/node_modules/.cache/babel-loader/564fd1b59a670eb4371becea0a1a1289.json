{"ast":null,"code":"import _slicedToArray from \"/home/dell/Dokumenty/sql-gen2/sql-gen2/sql-generator2/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"/home/dell/Dokumenty/sql-gen2/sql-gen2/sql-generator2/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nvar _jsxFileName = \"/home/dell/Dokumenty/sql-gen2/sql-gen2/sql-generator2/src/components/popups/ResultPopup/ResultPopup.tsx\";\nimport './ResultPopup.scss';\nimport React, { useState } from 'react';\nimport Popup from 'reactjs-popup';\nimport sqlFormatter from \"sql-formatter\";\n\nvar Props = function Props() {\n  _classCallCheck(this, Props);\n\n  this.isOpen = void 0;\n  this.generateScript = void 0;\n  this.sqlString = void 0;\n};\n\nexport var ResultPopup = function ResultPopup(props) {\n  var _useState = useState('DatabaseName'),\n      _useState2 = _slicedToArray(_useState, 2),\n      dbName = _useState2[0],\n      setDbName = _useState2[1];\n\n  var formatedSQL = props.sqlString && sqlFormatter.format(props.sqlString, {\n    language: \"sql\",\n    // Defaults to \"sql\"\n    indent: \"    \" // Defaults to two spaces\n\n  });\n  return React.createElement(Popup, {\n    modal: true,\n    closeOnDocumentClick: true,\n    open: props.isOpen,\n    closeOnEscape: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"sql-result-dialog\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    type: \"text\",\n    onChange: function onChange(event) {\n      return setDbName(event.target.value);\n    },\n    value: dbName,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }), React.createElement(\"button\", {\n    onClick: function onClick() {\n      return props.generateScript(dbName);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }, \"Generate\"), React.createElement(\"textarea\", {\n    readOnly: true,\n    value: formatedSQL,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  })));\n};","map":{"version":3,"sources":["/home/dell/Dokumenty/sql-gen2/sql-gen2/sql-generator2/src/components/popups/ResultPopup/ResultPopup.tsx"],"names":["React","useState","Popup","sqlFormatter","Props","isOpen","generateScript","sqlString","ResultPopup","props","dbName","setDbName","formatedSQL","format","language","indent","event","target","value"],"mappings":";;;AAAA,OAAO,oBAAP;AACA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,KAAP,MAAkB,eAAlB;AACA,OAAOC,YAAP,MAAyB,eAAzB;;IAEMC,K;;;OACJC,M;OACAC,c;OACAC,S;;;AAGF,OAAO,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,KAAD,EAAkB;AAAA,kBACfR,QAAQ,CAClC,cADkC,CADO;AAAA;AAAA,MACpCS,MADoC;AAAA,MAC5BC,SAD4B;;AAK3C,MAAMC,WAAW,GAAGH,KAAK,CAACF,SAAN,IAAmBJ,YAAY,CAACU,MAAb,CAAoBJ,KAAK,CAACF,SAA1B,EAAqC;AAC1EO,IAAAA,QAAQ,EAAE,KADgE;AACzD;AACjBC,IAAAA,MAAM,EAAE,MAFkE,CAEzD;;AAFyD,GAArC,CAAvC;AAKA,SACE,oBAAC,KAAD;AACE,IAAA,KAAK,MADP;AAEE,IAAA,oBAAoB,MAFtB;AAGE,IAAA,IAAI,EAAEN,KAAK,CAACJ,MAHd;AAIE,IAAA,aAAa,MAJf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAME;AAAK,IAAA,SAAS,EAAC,mBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACA;AAAO,IAAA,IAAI,EAAC,MAAZ;AAAmB,IAAA,QAAQ,EAAE,kBAAAW,KAAK;AAAA,aAAIL,SAAS,CAACK,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAb;AAAA,KAAlC;AAAqE,IAAA,KAAK,EAAER,MAA5E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADA,EAEA;AAAQ,IAAA,OAAO,EAAG;AAAA,aAAMD,KAAK,CAACH,cAAN,CAAqBI,MAArB,CAAN;AAAA,KAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFA,EAGE;AAAU,IAAA,QAAQ,EAAE,IAApB;AAA0B,IAAA,KAAK,EAAEE,WAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHF,CANF,CADF;AAaD,CAvBM","sourcesContent":["import './ResultPopup.scss';\nimport React, { useState } from 'react'\nimport Popup from 'reactjs-popup'\nimport sqlFormatter from \"sql-formatter\";\n\nclass Props {\n  isOpen: boolean;\n  generateScript?: (name: string) => void;\n  sqlString?: string;\n}\n\nexport const ResultPopup = (props: Props) => {\n  const [dbName, setDbName] = useState(\n    'DatabaseName'\n  );\n\n  const formatedSQL = props.sqlString && sqlFormatter.format(props.sqlString, {\n    language: \"sql\", // Defaults to \"sql\"\n    indent: \"    \"   // Defaults to two spaces\n  });\n  \n  return (\n    <Popup\n      modal\n      closeOnDocumentClick\n      open={props.isOpen}\n      closeOnEscape\n    >\n      <div className=\"sql-result-dialog\">\n      <input type=\"text\" onChange={event => setDbName(event.target.value)} value={dbName}/>\n      <button onClick={ () => props.generateScript(dbName)}>Generate</button>\n        <textarea readOnly={true} value={formatedSQL}></textarea>\n      </div>\n    </Popup>)\n}"]},"metadata":{},"sourceType":"module"}