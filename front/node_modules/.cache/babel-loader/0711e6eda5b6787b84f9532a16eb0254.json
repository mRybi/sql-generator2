{"ast":null,"code":"import _createClass from \"/home/dell/Dokumenty/sql-gen2/sql-gen2/sql-generator2/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/dell/Dokumenty/sql-gen2/sql-gen2/sql-generator2/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/dell/Dokumenty/sql-gen2/sql-gen2/sql-generator2/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/dell/Dokumenty/sql-gen2/sql-gen2/sql-generator2/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _classCallCheck from \"/home/dell/Dokumenty/sql-gen2/sql-gen2/sql-generator2/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nvar _jsxFileName = \"/home/dell/Dokumenty/sql-gen2/sql-gen2/sql-generator2/src/components/nodeInfo/NodeInfo.tsx\";\nimport './nodeItems.scss';\nimport * as React from \"react\";\nimport { NodeProperty } from './nodeProperty/NodeProperty';\n\nvar OwnProps = function OwnProps() {\n  _classCallCheck(this, OwnProps);\n\n  this.selectedItem = void 0;\n};\n\nvar State = function State() {\n  _classCallCheck(this, State);\n\n  this.updatedItem = void 0;\n  this.name = void 0;\n  this.showInput = void 0;\n  this.portState = void 0;\n  this.newPortName = void 0;\n};\n\nexport var NodeInfo =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(NodeInfo, _React$Component);\n\n  function NodeInfo(props) {\n    _classCallCheck(this, NodeInfo);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(NodeInfo).call(this, props));\n  }\n\n  _createClass(NodeInfo, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      this.setState({\n        updatedItem: this.props.selectedItem,\n        name: this.props.selectedItem.name,\n        showInput: false,\n        portState: 'out',\n        newPortName: 'out'\n      });\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps) {\n      console.log('both', this.props, nextProps);\n\n      if (nextProps != this.props) {\n        this.setState({\n          updatedItem: nextProps.selectedItem,\n          name: nextProps.selectedItem.name\n        });\n        this.forceUpdate();\n      }\n    }\n  }, {\n    key: \"changeName1\",\n    value: function changeName1(newValue) {\n      var updatedItem = this.state.updatedItem;\n      updatedItem.name = newValue;\n      this.setState({\n        updatedItem: updatedItem\n      });\n    }\n  }, {\n    key: \"addPort\",\n    value: function addPort() {\n      if (this.state.portState == 'out') {\n        this.state.updatedItem.addOutPort(this.state.newPortName);\n      } else {\n        this.state.updatedItem.addInPort(this.state.newPortName);\n      }\n    }\n  }, {\n    key: \"switchViewUpdateValue\",\n    value: function switchViewUpdateValue() {\n      this.addPort();\n      this.setState({\n        showInput: false\n      });\n    }\n  }, {\n    key: \"handleChange\",\n    value: function handleChange(event) {\n      event.persist();\n      this.setState({\n        newPortName: event.target.value\n      });\n    }\n  }, {\n    key: \"handleChangePort\",\n    value: function handleChangePort(event) {\n      event.persist();\n      this.setState({\n        portState: event.target.value\n      });\n    }\n  }, {\n    key: \"removePort\",\n    value: function removePort(portId) {\n      var ports = this.state.updatedItem.ports;\n      console.log(ports.name);\n      console.log(ports[portId]);\n      var portToDelete = this.state.updatedItem.getPort(portId); //this.props.selectedItem.removePort(portToDelete);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this = this;\n\n      var ports = this.state.updatedItem.ports;\n      console.log('selected node', this.props.selectedItem);\n      this.removePort('39c7cbf7-e099-43d1-996e-ce55240d4286');\n      if (this.state.updatedItem == null) return 'Loading...';\n      return React.createElement(\"div\", {\n        className: \"trayBottom\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      }, React.createElement(NodeProperty, {\n        value: this.state.name,\n        acceptChangeProperty: this.changeName1.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        onDoubleClick: function onDoubleClick() {\n          return _this.showInput();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      }, this.state.showInput ? React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        className: \"tray-bottom-item\",\n        type: \"text\",\n        onChange: this.handleChange.bind(this),\n        value: this.state.newPortName,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      }), React.createElement(\"input\", {\n        className: \"tray-bottom-item\",\n        type: \"text\",\n        onChange: this.handleChangePort.bind(this),\n        value: this.state.portState,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        className: \"tray-bottom-item\",\n        onClick: this.switchViewUpdateValue.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      }, \"Add Port\")) : React.createElement(\"h1\", {\n        className: \"tray-bottom-item\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }, 'AddPort')));\n    }\n  }, {\n    key: \"showInput\",\n    value: function showInput() {\n      this.setState({\n        showInput: true\n      });\n    }\n  }]);\n\n  return NodeInfo;\n}(React.Component);","map":{"version":3,"sources":["/home/dell/Dokumenty/sql-gen2/sql-gen2/sql-generator2/src/components/nodeInfo/NodeInfo.tsx"],"names":["React","NodeProperty","OwnProps","selectedItem","State","updatedItem","name","showInput","portState","newPortName","NodeInfo","props","setState","nextProps","console","log","forceUpdate","newValue","state","addOutPort","addInPort","addPort","event","persist","target","value","portId","ports","portToDelete","getPort","removePort","changeName1","bind","handleChange","handleChangePort","switchViewUpdateValue","Component"],"mappings":";;;;;;AAAA,OAAO,kBAAP;AACA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAEA,SAASC,YAAT,QAA6B,6BAA7B;;IAEMC,Q;;;OACFC,Y;;;IAGEC,K;;;OACFC,W;OACAC,I;OACAC,S;OACAC,S;OACAC,W;;;AAKJ,WAAaC,QAAb;AAAA;AAAA;AAAA;;AACI,oBAAYC,KAAZ,EAA0B;AAAA;;AAAA,iFAChBA,KADgB;AAEzB;;AAHL;AAAA;AAAA,yCAKyB;AACjB,WAAKC,QAAL,CAAc;AACVP,QAAAA,WAAW,EAAE,KAAKM,KAAL,CAAWR,YADd;AAEVG,QAAAA,IAAI,EAAE,KAAKK,KAAL,CAAWR,YAAX,CAAwBG,IAFpB;AAGVC,QAAAA,SAAS,EAAE,KAHD;AAIVC,QAAAA,SAAS,EAAE,KAJD;AAKVC,QAAAA,WAAW,EAAE;AALH,OAAd;AAOH;AAbL;AAAA;AAAA,8CAe8BI,SAf9B,EAegD;AACxCC,MAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoB,KAAKJ,KAAzB,EAAgCE,SAAhC;;AACA,UAAIA,SAAS,IAAI,KAAKF,KAAtB,EAA6B;AACzB,aAAKC,QAAL,CAAc;AACVP,UAAAA,WAAW,EAAEQ,SAAS,CAACV,YADb;AAEVG,UAAAA,IAAI,EAAEO,SAAS,CAACV,YAAV,CAAuBG;AAFnB,SAAd;AAIA,aAAKU,WAAL;AACH;AACJ;AAxBL;AAAA;AAAA,gCA0BgBC,QA1BhB,EA0BwC;AAChC,UAAIZ,WAA6B,GAAG,KAAKa,KAAL,CAAWb,WAA/C;AACAA,MAAAA,WAAW,CAACC,IAAZ,GAAmBW,QAAnB;AACA,WAAKL,QAAL,CAAc;AAAEP,QAAAA,WAAW,EAAEA;AAAf,OAAd;AACH;AA9BL;AAAA;AAAA,8BAgCoB;AACZ,UAAI,KAAKa,KAAL,CAAWV,SAAX,IAAwB,KAA5B,EAAmC;AAC/B,aAAKU,KAAL,CAAWb,WAAX,CAAuBc,UAAvB,CAAkC,KAAKD,KAAL,CAAWT,WAA7C;AACH,OAFD,MAEO;AACH,aAAKS,KAAL,CAAWb,WAAX,CAAuBe,SAAvB,CAAiC,KAAKF,KAAL,CAAWT,WAA5C;AACH;AACJ;AAtCL;AAAA;AAAA,4CAwCkC;AAC1B,WAAKY,OAAL;AACA,WAAKT,QAAL,CAAc;AAAEL,QAAAA,SAAS,EAAE;AAAb,OAAd;AACH;AA3CL;AAAA;AAAA,iCA6CiBe,KA7CjB,EA6C6D;AACrDA,MAAAA,KAAK,CAACC,OAAN;AAEA,WAAKX,QAAL,CAAc;AAAEH,QAAAA,WAAW,EAAEa,KAAK,CAACE,MAAN,CAAaC;AAA5B,OAAd;AACH;AAjDL;AAAA;AAAA,qCAmDqBH,KAnDrB,EAmDiE;AACzDA,MAAAA,KAAK,CAACC,OAAN;AAEA,WAAKX,QAAL,CAAc;AAAEJ,QAAAA,SAAS,EAAEc,KAAK,CAACE,MAAN,CAAaC;AAA1B,OAAd;AACH;AAvDL;AAAA;AAAA,+BA2DeC,MA3Df,EA2D+B;AACvB,UAAIC,KAAsC,GAAG,KAAKT,KAAL,CAAWb,WAAX,CAAuBsB,KAApE;AACAb,MAAAA,OAAO,CAACC,GAAR,CAAYY,KAAK,CAACrB,IAAlB;AACAQ,MAAAA,OAAO,CAACC,GAAR,CAAYY,KAAK,CAACD,MAAD,CAAjB;AACA,UAAIE,YAAuB,GAAG,KAAKV,KAAL,CAAWb,WAAX,CAAuBwB,OAAvB,CAA+BH,MAA/B,CAA9B,CAJuB,CAKvB;AACH;AAjEL;AAAA;AAAA,6BAmEa;AAAA;;AACL,UAAIC,KAAsC,GAAG,KAAKT,KAAL,CAAWb,WAAX,CAAuBsB,KAApE;AACAb,MAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6B,KAAKJ,KAAL,CAAWR,YAAxC;AACA,WAAK2B,UAAL,CAAgB,sCAAhB;AACA,UAAI,KAAKZ,KAAL,CAAWb,WAAX,IAA0B,IAA9B,EAAoC,OAAO,YAAP;AACpC,aACI;AAAK,QAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,YAAD;AAAc,QAAA,KAAK,EAAE,KAAKa,KAAL,CAAWZ,IAAhC;AAAsC,QAAA,oBAAoB,EAAE,KAAKyB,WAAL,CAAiBC,IAAjB,CAAsB,IAAtB,CAA5D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,EAEI;AAAK,QAAA,aAAa,EAAE;AAAA,iBAAM,KAAI,CAACzB,SAAL,EAAN;AAAA,SAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACK,KAAKW,KAAL,CAAWX,SAAX,GACG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAO,QAAA,SAAS,EAAC,kBAAjB;AAAoC,QAAA,IAAI,EAAC,MAAzC;AAAgD,QAAA,QAAQ,EAAE,KAAK0B,YAAL,CAAkBD,IAAlB,CAAuB,IAAvB,CAA1D;AAAwF,QAAA,KAAK,EAAE,KAAKd,KAAL,CAAWT,WAA1G;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,EAEI;AAAO,QAAA,SAAS,EAAC,kBAAjB;AAAoC,QAAA,IAAI,EAAC,MAAzC;AAAgD,QAAA,QAAQ,EAAE,KAAKyB,gBAAL,CAAsBF,IAAtB,CAA2B,IAA3B,CAA1D;AAA4F,QAAA,KAAK,EAAE,KAAKd,KAAL,CAAWV,SAA9G;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFJ,EAGI;AAAQ,QAAA,SAAS,EAAC,kBAAlB;AAAqC,QAAA,OAAO,EAAE,KAAK2B,qBAAL,CAA2BH,IAA3B,CAAgC,IAAhC,CAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAHJ,CADH,GAKY;AAAI,QAAA,SAAS,EAAC,kBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAkC,SAAlC,CANjB,CAFJ,CADJ;AAiBH;AAzFL;AAAA;AAAA,gCA2FsB;AACd,WAAKpB,QAAL,CAAc;AACVL,QAAAA,SAAS,EAAE;AADD,OAAd;AAGH;AA/FL;;AAAA;AAAA,EAA8BP,KAAK,CAACoC,SAApC","sourcesContent":["import './nodeItems.scss';\nimport * as React from \"react\";\nimport { DefaultNodeModel, DefaultPortModel, PortModel } from 'storm-react-diagrams';\nimport { NodeProperty } from './nodeProperty/NodeProperty';\n\nclass OwnProps {\n    selectedItem: DefaultNodeModel\n}\n\nclass State {\n    updatedItem: DefaultNodeModel\n    name: string;\n    showInput: boolean;\n    portState: string;\n    newPortName: string;\n}\n\ntype Props = OwnProps;\n\nexport class NodeInfo extends React.Component<Props, State> {\n    constructor(props: Props) {\n        super(props);\n    }\n\n    componentWillMount() {\n        this.setState({\n            updatedItem: this.props.selectedItem,\n            name: this.props.selectedItem.name,\n            showInput: false,\n            portState: 'out',\n            newPortName: 'out'\n        })\n    }\n\n    componentWillReceiveProps(nextProps: Props) {\n        console.log('both', this.props, nextProps);\n        if (nextProps != this.props) {\n            this.setState({\n                updatedItem: nextProps.selectedItem,\n                name: nextProps.selectedItem.name\n            })\n            this.forceUpdate();\n        }\n    }\n\n    changeName1(newValue: string): void {\n        let updatedItem: DefaultNodeModel = this.state.updatedItem;\n        updatedItem.name = newValue;\n        this.setState({ updatedItem: updatedItem });\n    }\n\n    addPort(): void {\n        if (this.state.portState == 'out') {\n            this.state.updatedItem.addOutPort(this.state.newPortName);\n        } else {\n            this.state.updatedItem.addInPort(this.state.newPortName);\n        }\n    }\n\n    switchViewUpdateValue(): void {\n        this.addPort(); \n        this.setState({ showInput: false });\n    }\n\n    handleChange(event: React.ChangeEvent<HTMLInputElement>) {\n        event.persist()\n\n        this.setState({ newPortName: event.target.value });\n    }\n\n    handleChangePort(event: React.ChangeEvent<HTMLInputElement>) {\n        event.persist()\n\n        this.setState({ portState: event.target.value });\n    }\n\n    \n\n    removePort(portId: string) {\n        let ports: {[S: string]: DefaultPortModel} = this.state.updatedItem.ports;\n        console.log(ports.name);\n        console.log(ports[portId]);\n        let portToDelete: PortModel = this.state.updatedItem.getPort(portId);\n        //this.props.selectedItem.removePort(portToDelete);\n    }\n\n    render() {\n        let ports: {[S: string]: DefaultPortModel} = this.state.updatedItem.ports;\n        console.log('selected node', this.props.selectedItem)\n        this.removePort('39c7cbf7-e099-43d1-996e-ce55240d4286');\n        if (this.state.updatedItem == null) return 'Loading...'\n        return (\n            <div className=\"trayBottom\">\n                <NodeProperty value={this.state.name} acceptChangeProperty={this.changeName1.bind(this)} />\n                <div onDoubleClick={() => this.showInput()}>\n                    {this.state.showInput ?\n                        <div>\n                            <input className=\"tray-bottom-item\" type=\"text\" onChange={this.handleChange.bind(this)} value={this.state.newPortName}></input>\n                            <input className=\"tray-bottom-item\" type=\"text\" onChange={this.handleChangePort.bind(this)} value={this.state.portState}></input>\n                            <button className=\"tray-bottom-item\" onClick={this.switchViewUpdateValue.bind(this)}>Add Port</button>\n                        </div> : <h1 className=\"tray-bottom-item\">{'AddPort'}</h1>}\n                </div>\n                \n\n            </div>\n\n\n        );\n    }\n\n    showInput(): void {\n        this.setState({\n            showInput: true\n        })\n    }\n\n\n}"]},"metadata":{},"sourceType":"module"}