{"ast":null,"code":"import _createClass from \"/home/dell/Dokumenty/sql-gen2/sql-gen2/sql-generator2/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/dell/Dokumenty/sql-gen2/sql-gen2/sql-generator2/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/dell/Dokumenty/sql-gen2/sql-gen2/sql-generator2/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/dell/Dokumenty/sql-gen2/sql-gen2/sql-generator2/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _classCallCheck from \"/home/dell/Dokumenty/sql-gen2/sql-gen2/sql-generator2/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nvar _jsxFileName = \"/home/dell/Dokumenty/sql-gen2/sql-gen2/sql-generator2/src/components/nodeInfo/NodeInfo.tsx\";\nimport './nodeItems.scss';\nimport * as React from \"react\";\nimport { NodeProperty } from './nodeProperty/NodeProperty';\n\nvar OwnProps = function OwnProps() {\n  _classCallCheck(this, OwnProps);\n\n  this.selectedItem = void 0;\n};\n\nvar State = function State() {\n  _classCallCheck(this, State);\n\n  this.updatedItem = void 0;\n  this.name = void 0;\n};\n\nexport var NodeInfo =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(NodeInfo, _React$Component);\n\n  function NodeInfo(props) {\n    _classCallCheck(this, NodeInfo);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(NodeInfo).call(this, props));\n  }\n\n  _createClass(NodeInfo, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      this.setState({\n        updatedItem: this.props.selectedItem,\n        name: this.props.selectedItem.name\n      });\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps) {\n      if (nextProps != this.props) {\n        this.setState({\n          updatedItem: nextProps.selectedItem,\n          name: this.props.selectedItem.name\n        });\n        this.forceUpdate();\n      }\n    }\n  }, {\n    key: \"changeName\",\n    value: function changeName(newName) {\n      console.log('event', event);\n      console.log('event', event.srcElement.innerHTML);\n      console.log('event', event.srcElement.append());\n      var updatedNameItem = this.state.updatedItem;\n      updatedNameItem.name = newName;\n      this.setState({\n        updatedItem: updatedNameItem\n      });\n      return null;\n    }\n  }, {\n    key: \"handleChange\",\n    value: function handleChange(event) {\n      event.persist();\n      console.log(event);\n      console.log(this.state.name);\n      console.log(event.target.value);\n      this.setState({\n        name: event.target.value\n      });\n      console.log('state:  ', this.state);\n    }\n  }, {\n    key: \"changeName1\",\n    value: function changeName1(newValue) {\n      console.log('HALLLOOOOO', this.state);\n      var updatedItem = this.state.updatedItem;\n      updatedItem.name = newValue;\n      this.setState({\n        updatedItem: updatedItem\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var name = this.state.name;\n      if (this.state.updatedItem == null) return 'Loading....';\n      console.log('item', this.props.selectedItem);\n      return React.createElement(\"div\", {\n        className: \"trayBottom\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      }, React.createElement(NodeProperty, {\n        value: this.state.name,\n        acceptChangeProperty: this.changeName1,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return NodeInfo;\n}(React.Component);","map":{"version":3,"sources":["/home/dell/Dokumenty/sql-gen2/sql-gen2/sql-generator2/src/components/nodeInfo/NodeInfo.tsx"],"names":["React","NodeProperty","OwnProps","selectedItem","State","updatedItem","name","NodeInfo","props","setState","nextProps","forceUpdate","newName","console","log","event","srcElement","innerHTML","append","updatedNameItem","state","persist","target","value","newValue","changeName1","Component"],"mappings":"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","sourcesContent":["import './nodeItems.scss';\nimport * as React from \"react\";\nimport { BaseModel, BaseEntity, BaseModelListener, DefaultNodeModel } from 'storm-react-diagrams';\nimport { NodeProperty } from './nodeProperty/NodeProperty';\n\nclass OwnProps {\n    selectedItem: DefaultNodeModel\n}\n\nclass State {\n    updatedItem: DefaultNodeModel\n    name: string;\n}\n\ntype Props = OwnProps;\n\nexport class NodeInfo extends React.Component<Props, State> {\n    constructor(props: Props) {\n        super(props);\n    }\n\n    componentWillMount( ){\n        this.setState({\n            updatedItem: this.props.selectedItem,\n            name: this.props.selectedItem.name\n        })\n    }\n\n    componentWillReceiveProps(nextProps: Props) {\n\n        if(nextProps != this.props) {\n            this.setState({\n                updatedItem: nextProps.selectedItem,\n                name: this.props.selectedItem.name\n            })\n            this.forceUpdate();\n        }\n    }\n\n    changeName( newName: string): (event: React.MouseEvent<HTMLHeadingElement, MouseEvent>) => void {\n        console.log('event',event);\n        console.log('event',event.srcElement.innerHTML);\n        console.log('event',event.srcElement.append());\n\n\n        let updatedNameItem: DefaultNodeModel = this.state.updatedItem;\n        updatedNameItem.name = newName;\n\n        this.setState({ updatedItem: updatedNameItem})\n        return null\n    }\n\n    handleChange(event: React.ChangeEvent<HTMLInputElement>) {\n        event.persist()\n        console.log(event)\n        console.log(this.state.name);\n        console.log(event.target.value);\n\n        this.setState({name: event.target.value});\n        console.log('state:  ', this.state)\n      }\n\n      changeName1(newValue: string): void {\n        console.log('HALLLOOOOO', this.state);\n        let updatedItem: DefaultNodeModel = this.state.updatedItem;\n        updatedItem.name = newValue; \n        this.setState({ updatedItem: updatedItem});\n    }\n\n    render() {\n        let name = this.state.name;\n        if(this.state.updatedItem == null) return 'Loading....' \n        console.log('item', this.props.selectedItem);\n        return (\n            <div className=\"trayBottom\">\n            <NodeProperty value={this.state.name} acceptChangeProperty={this.changeName1}/>\n            {/* //     <input className=\"tray-bottom-item\" type=\"text\" name=\"name\" onBlur={this.changeName1.bind(this)} onAbort={() => this.changeName1()} onChange={this.handleChange.bind(this)} value={this.state.name}></input> */}\n                 {/* onChange={() => this.changeName(this.state.updatedItem.name)} */}\n\n                 {/* <div className=\"tray-bottom-item\" onDoubleClick={() => this.changeName('XDD')}>\n            //         <input>{this.state.updatedItem.name}</input>\n            //     </div>\n            //     <input className=\"tray-bottom-item\">{this.state.updatedItem.width}</input>\n            //     <input className=\"tray-bottom-item\">{this.state.updatedItem.height}</input>\n            //     <input className=\"tray-bottom-item\">{this.state.updatedItem.color}</input> */}\n             </div>\n        );\n    }\n    \n    \n}"]},"metadata":{},"sourceType":"module"}