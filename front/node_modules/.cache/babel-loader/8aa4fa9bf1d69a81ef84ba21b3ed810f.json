{"ast":null,"code":"import _createClass from \"/home/dell/Dokumenty/sql-gen2/sql-gen2/sql-generator2/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/dell/Dokumenty/sql-gen2/sql-gen2/sql-generator2/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/dell/Dokumenty/sql-gen2/sql-gen2/sql-generator2/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/dell/Dokumenty/sql-gen2/sql-gen2/sql-generator2/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _classCallCheck from \"/home/dell/Dokumenty/sql-gen2/sql-gen2/sql-generator2/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nvar _jsxFileName = \"/home/dell/Dokumenty/sql-gen2/sql-gen2/sql-generator2/src/components/nodeInfo/NodeInfo.tsx\";\nimport './nodeItems.scss';\nimport * as React from \"react\";\nimport { NodeProperty } from './nodeProperty/NodeProperty';\n\nvar OwnProps = function OwnProps() {\n  _classCallCheck(this, OwnProps);\n\n  this.selectedItem = void 0;\n  this.diagramModel = void 0;\n};\n\nvar State = function State() {\n  _classCallCheck(this, State);\n\n  this.updatedItem = void 0;\n  this.name = void 0;\n  this.showInput = void 0;\n  this.portState = void 0;\n  this.newPortName = void 0;\n  this.portToRemove = void 0;\n  this.portLabelToRemove = void 0;\n};\n\nexport var NodeInfo =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(NodeInfo, _React$Component);\n\n  function NodeInfo(props) {\n    _classCallCheck(this, NodeInfo);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(NodeInfo).call(this, props));\n  }\n\n  _createClass(NodeInfo, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      this.setState({\n        updatedItem: this.props.selectedItem,\n        name: this.props.selectedItem.name,\n        showInput: false,\n        portState: 'out',\n        newPortName: 'out',\n        portToRemove: null,\n        portLabelToRemove: null\n      });\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps) {\n      console.log('both', this.props, nextProps);\n\n      if (nextProps != this.props) {\n        this.setState({\n          updatedItem: nextProps.selectedItem,\n          name: nextProps.selectedItem.name\n        });\n        this.forceUpdate();\n      }\n    }\n  }, {\n    key: \"changeName1\",\n    value: function changeName1(newValue) {\n      var updatedItem = this.state.updatedItem;\n      updatedItem.name = newValue;\n      this.setState({\n        updatedItem: updatedItem\n      });\n    }\n  }, {\n    key: \"addPort\",\n    value: function addPort() {\n      if (this.state.portState == 'out') {\n        this.state.updatedItem.addOutPort(this.state.newPortName);\n      } else {\n        this.state.updatedItem.addInPort(this.state.newPortName);\n      }\n    }\n  }, {\n    key: \"switchViewUpdateValue\",\n    value: function switchViewUpdateValue() {\n      this.addPort();\n      this.setState({\n        showInput: false\n      });\n    }\n  }, {\n    key: \"handleChange\",\n    value: function handleChange(event) {\n      event.persist();\n      this.setState({\n        newPortName: event.target.value\n      });\n    }\n  }, {\n    key: \"handleChangePort\",\n    value: function handleChangePort(event) {\n      event.persist();\n      this.setState({\n        portState: event.target.value\n      });\n    }\n  }, {\n    key: \"removePort\",\n    value: function removePort() {\n      if (this.state.portToRemove != null) {\n        var portToDelete = this.state.updatedItem.getPort(this.state.portToRemove);\n        this.state.updatedItem.removePort(portToDelete);\n        this.setState({\n          portToRemove: null\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this = this;\n\n      var links = this.props.diagramModel.getLinks();\n      console.log(links);\n      var liksIDs = Object.keys(links).map(function (key) {\n        return key;\n      });\n      var testLink = this.props.diagramModel.getLink(liksIDs[0]);\n      testLink.addLabel(\"Hello World!\");\n      var allPorts = this.state.updatedItem.ports;\n      console.log(allPorts);\n      this.state.updatedItem;\n\n      if (allPorts != null) {\n        var aaa = Object.values(allPorts).map(function (value) {\n          return value.label;\n        });\n        console.log(aaa);\n        var portsIds = Object.keys(allPorts).map(function (key) {\n          return key;\n        });\n\n        var makeItem = function makeItem(x) {\n          return React.createElement(\"option\", {\n            key: x,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 128\n            },\n            __self: this\n          }, x);\n        };\n\n        console.log('selected node', this.props.selectedItem);\n        if (this.state.updatedItem == null) return 'Loading...';\n        return React.createElement(\"div\", {\n          className: \"trayBottom\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 134\n          },\n          __self: this\n        }, React.createElement(\"select\", {\n          onClick: function onClick(e) {\n            return _this.selectPort(e);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 135\n          },\n          __self: this\n        }, aaa.map(makeItem)), React.createElement(\"button\", {\n          onClick: function onClick() {\n            return _this.removePort();\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 136\n          },\n          __self: this\n        }, \"Delete port\"), React.createElement(NodeProperty, {\n          value: this.state.name,\n          acceptChangeProperty: this.changeName1.bind(this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 138\n          },\n          __self: this\n        }), React.createElement(\"div\", {\n          onDoubleClick: function onDoubleClick() {\n            return _this.showInput();\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 139\n          },\n          __self: this\n        }, this.state.showInput ? React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 141\n          },\n          __self: this\n        }, React.createElement(\"input\", {\n          className: \"tray-bottom-item\",\n          type: \"text\",\n          onChange: this.handleChange.bind(this),\n          value: this.state.newPortName,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 142\n          },\n          __self: this\n        }), React.createElement(\"input\", {\n          className: \"tray-bottom-item\",\n          type: \"text\",\n          onChange: this.handleChangePort.bind(this),\n          value: this.state.portState,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 143\n          },\n          __self: this\n        }), React.createElement(\"button\", {\n          className: \"tray-bottom-item\",\n          onClick: this.switchViewUpdateValue.bind(this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 144\n          },\n          __self: this\n        }, \"Add Port\")) : React.createElement(\"h1\", {\n          className: \"tray-bottom-item\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 145\n          },\n          __self: this\n        }, 'AddPort')));\n      } else return null;\n    }\n  }, {\n    key: \"selectPort\",\n    value: function selectPort(e) {\n      e.persist();\n      console.log('select port', e);\n      var ports = this.state.updatedItem.ports;\n      console.log('ports', ports);\n      var names = Object.values(ports).map(function (value) {\n        return value.label;\n      });\n      console.log('names', names);\n      var portsIds = Object.keys(ports).map(function (key) {\n        return key;\n      });\n      console.log('values', portsIds);\n\n      if (e._targetInst.child != null) {\n        var indexOfGuyToDelete = names.indexOf(e._targetInst.child.key);\n        console.log('index', indexOfGuyToDelete);\n        this.setState({\n          portLabelToRemove: e._targetInst.child.key,\n          portToRemove: portsIds[indexOfGuyToDelete]\n        });\n      }\n    }\n  }, {\n    key: \"showInput\",\n    value: function showInput() {\n      var xd = this.state.updatedItem;\n      xd.color = 'rgb(0,0,0)';\n      this.setState({\n        showInput: true,\n        updatedItem: xd\n      });\n    }\n  }]);\n\n  return NodeInfo;\n}(React.Component);","map":{"version":3,"sources":["/home/dell/Dokumenty/sql-gen2/sql-gen2/sql-generator2/src/components/nodeInfo/NodeInfo.tsx"],"names":["React","NodeProperty","OwnProps","selectedItem","diagramModel","State","updatedItem","name","showInput","portState","newPortName","portToRemove","portLabelToRemove","NodeInfo","props","setState","nextProps","console","log","forceUpdate","newValue","state","addOutPort","addInPort","addPort","event","persist","target","value","portToDelete","getPort","removePort","links","getLinks","liksIDs","Object","keys","map","key","testLink","getLink","addLabel","allPorts","ports","aaa","values","label","portsIds","makeItem","x","e","selectPort","changeName1","bind","handleChange","handleChangePort","switchViewUpdateValue","names","_targetInst","child","indexOfGuyToDelete","indexOf","xd","color","Component"],"mappings":"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","sourcesContent":["import './nodeItems.scss';\nimport * as React from \"react\";\nimport { DefaultNodeModel, DefaultPortModel, PortModel, DiagramModel, LabelModel, DefaultLinkModel } from 'storm-react-diagrams';\nimport { NodeProperty } from './nodeProperty/NodeProperty';\nimport { number } from 'prop-types';\n\nclass OwnProps {\n    selectedItem: DefaultNodeModel\n    diagramModel: DiagramModel\n}\n\nclass State {\n    updatedItem: DefaultNodeModel\n    name: string;\n    showInput: boolean;\n    portState: string;\n    newPortName: string;\n    portToRemove: string;\n    portLabelToRemove: string;\n}\n\ntype Props = OwnProps;\n\nexport class NodeInfo extends React.Component<Props, State> {\n    constructor(props: Props) {\n        super(props);\n    }\n\n    componentWillMount() {\n        this.setState({\n            updatedItem: this.props.selectedItem,\n            name: this.props.selectedItem.name,\n            showInput: false,\n            portState: 'out',\n            newPortName: 'out',\n            portToRemove: null,\n            portLabelToRemove: null\n        })\n    }\n\n    componentWillReceiveProps(nextProps: Props) {\n        console.log('both', this.props, nextProps);\n        if (nextProps != this.props) {\n            this.setState({\n                updatedItem: nextProps.selectedItem,\n                name: nextProps.selectedItem.name\n            })\n            this.forceUpdate();\n        }\n    }\n\n    changeName1(newValue: string): void {\n        let updatedItem: DefaultNodeModel = this.state.updatedItem;\n        updatedItem.name = newValue;\n        this.setState({ updatedItem: updatedItem });\n    }\n\n    addPort(): void {\n        if (this.state.portState == 'out') {\n            this.state.updatedItem.addOutPort(this.state.newPortName);\n        } else {\n            this.state.updatedItem.addInPort(this.state.newPortName);\n        }\n    }\n\n    switchViewUpdateValue(): void {\n        this.addPort();\n        this.setState({ showInput: false });\n    }\n\n    handleChange(event: React.ChangeEvent<HTMLInputElement>) {\n        event.persist()\n\n        this.setState({ newPortName: event.target.value });\n    }\n\n    handleChangePort(event: React.ChangeEvent<HTMLInputElement>) {\n        event.persist()\n\n        this.setState({ portState: event.target.value });\n    }\n\n\n\n    removePort() {\n        if (this.state.portToRemove != null) {\n            let portToDelete: PortModel = this.state.updatedItem.getPort(this.state.portToRemove);\n\n            this.state.updatedItem.removePort(portToDelete);\n            this.setState({ portToRemove: null })\n        }\n\n    }\n\n    render() {\n        let links = this.props.diagramModel.getLinks();\n        console.log(links);\n        let liksIDs = Object.keys(links).map((key) => {\n            return key\n        });\n\n        let testLink = this.props.diagramModel.getLink(liksIDs[0]);\n        (testLink as DefaultLinkModel).addLabel(\"Hello World!\");\n\n\n\n\n\n\n        let allPorts: { [S: string]: DefaultPortModel } = this.state.updatedItem.ports;\n        console.log(allPorts);\n\n        this.state.updatedItem\n        if (allPorts != null) {\n            let aaa = Object.values(allPorts).map(value => {\n                return value.label;\n            });\n\n            console.log(aaa);\n\n\n\n            let portsIds = Object.keys(allPorts).map((key) => {\n                return key\n            });\n\n            let makeItem = function (x: any) {\n                return <option key={x}>{x}</option>;\n            }\n\n            console.log('selected node', this.props.selectedItem)\n            if (this.state.updatedItem == null) return 'Loading...';\n            return (\n                <div className=\"trayBottom\">\n                    <select onClick={(e) => this.selectPort(e)}>{aaa.map(makeItem)}</select>\n                    <button onClick={() => this.removePort()}>Delete port</button>\n\n                    <NodeProperty value={this.state.name} acceptChangeProperty={this.changeName1.bind(this)} />\n                    <div onDoubleClick={() => this.showInput()}>\n                        {this.state.showInput ?\n                            <div>\n                                <input className=\"tray-bottom-item\" type=\"text\" onChange={this.handleChange.bind(this)} value={this.state.newPortName}></input>\n                                <input className=\"tray-bottom-item\" type=\"text\" onChange={this.handleChangePort.bind(this)} value={this.state.portState}></input>\n                                <button className=\"tray-bottom-item\" onClick={this.switchViewUpdateValue.bind(this)}>Add Port</button>\n                            </div> : <h1 className=\"tray-bottom-item\">{'AddPort'}</h1>}\n                    </div>\n                    {/* <div onDoubleClick={() => this.showInput()}>\n                        {this.state.showInput ?\n                            <div>\n                                <input className=\"tray-bottom-item\" type=\"text\" onChange={this.handleChange.bind(this)} value={this.state.newPortName}></input>\n                                <input className=\"tray-bottom-item\" type=\"text\" onChange={this.handleChangePort.bind(this)} value={this.state.portState}></input>\n                                <button className=\"tray-bottom-item\" onClick={this.switchViewUpdateValue.bind(this)}>Add Port</button>\n                            </div> : null}\n                    </div>  */}\n\n                </div>\n               \n\n            );\n            \n        }\n        else return null;\n\n    }\n    selectPort(e: any): void {\n        e.persist()\n        console.log('select port', e);\n        let ports: { [S: string]: DefaultPortModel } = this.state.updatedItem.ports;\n        console.log('ports', ports);\n\n        let names = Object.values(ports).map(value => {\n            return value.label\n        })\n        console.log('names', names);\n        let portsIds = Object.keys(ports).map((key) => {\n            return key\n        });\n        console.log('values', portsIds);\n\n        if (e._targetInst.child != null) {\n            let indexOfGuyToDelete = names.indexOf(e._targetInst.child.key);\n            console.log('index', indexOfGuyToDelete)\n            this.setState({\n                portLabelToRemove: e._targetInst.child.key,\n                portToRemove: portsIds[indexOfGuyToDelete] as string\n            });\n        }\n\n    }\n\n    showInput(): void {\n        let xd = this.state.updatedItem;\n        xd.color = 'rgb(0,0,0)'\n        this.setState({\n            showInput: true,\n            updatedItem: xd\n        })\n    }\n\n\n}"]},"metadata":{},"sourceType":"module"}