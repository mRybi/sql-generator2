{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\n\nvar _trimEnd = require(\"lodash/trimEnd\");\n\nvar _trimEnd2 = _interopRequireDefault(_trimEnd);\n\nvar _tokenTypes = require(\"./tokenTypes\");\n\nvar _tokenTypes2 = _interopRequireDefault(_tokenTypes);\n\nvar _Indentation = require(\"./Indentation\");\n\nvar _Indentation2 = _interopRequireDefault(_Indentation);\n\nvar _InlineBlock = require(\"./InlineBlock\");\n\nvar _InlineBlock2 = _interopRequireDefault(_InlineBlock);\n\nvar _Params = require(\"./Params\");\n\nvar _Params2 = _interopRequireDefault(_Params);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nvar Formatter = function () {\n  /**\n   * @param {Object} cfg\n   *   @param {Object} cfg.indent\n   *   @param {Object} cfg.params\n   * @param {Tokenizer} tokenizer\n   */\n  function Formatter(cfg, tokenizer) {\n    _classCallCheck(this, Formatter);\n\n    this.cfg = cfg || {};\n    this.indentation = new _Indentation2[\"default\"](this.cfg.indent);\n    this.inlineBlock = new _InlineBlock2[\"default\"]();\n    this.params = new _Params2[\"default\"](this.cfg.params);\n    this.tokenizer = tokenizer;\n    this.previousReservedWord = {};\n    this.tokens = [];\n    this.index = 0;\n  }\n  /**\n   * Formats whitespaces in a SQL string to make it easier to read.\n   *\n   * @param {String} query The SQL query string\n   * @return {String} formatted query\n   */\n\n\n  Formatter.prototype.format = function format(query) {\n    this.tokens = this.tokenizer.tokenize(query);\n    var formattedQuery = this.getFormattedQueryFromTokens();\n    return formattedQuery.trim();\n  };\n\n  Formatter.prototype.getFormattedQueryFromTokens = function getFormattedQueryFromTokens() {\n    var _this = this;\n\n    var formattedQuery = \"\";\n    this.tokens.forEach(function (token, index) {\n      _this.index = index;\n\n      if (token.type === _tokenTypes2[\"default\"].WHITESPACE) {// ignore (we do our own whitespace formatting)\n      } else if (token.type === _tokenTypes2[\"default\"].LINE_COMMENT) {\n        formattedQuery = _this.formatLineComment(token, formattedQuery);\n      } else if (token.type === _tokenTypes2[\"default\"].BLOCK_COMMENT) {\n        formattedQuery = _this.formatBlockComment(token, formattedQuery);\n      } else if (token.type === _tokenTypes2[\"default\"].RESERVED_TOPLEVEL) {\n        formattedQuery = _this.formatToplevelReservedWord(token, formattedQuery);\n        _this.previousReservedWord = token;\n      } else if (token.type === _tokenTypes2[\"default\"].RESERVED_NEWLINE) {\n        formattedQuery = _this.formatNewlineReservedWord(token, formattedQuery);\n        _this.previousReservedWord = token;\n      } else if (token.type === _tokenTypes2[\"default\"].RESERVED) {\n        formattedQuery = _this.formatWithSpaces(token, formattedQuery);\n        _this.previousReservedWord = token;\n      } else if (token.type === _tokenTypes2[\"default\"].OPEN_PAREN) {\n        formattedQuery = _this.formatOpeningParentheses(token, formattedQuery);\n      } else if (token.type === _tokenTypes2[\"default\"].CLOSE_PAREN) {\n        formattedQuery = _this.formatClosingParentheses(token, formattedQuery);\n      } else if (token.type === _tokenTypes2[\"default\"].PLACEHOLDER) {\n        formattedQuery = _this.formatPlaceholder(token, formattedQuery);\n      } else if (token.value === \",\") {\n        formattedQuery = _this.formatComma(token, formattedQuery);\n      } else if (token.value === \":\") {\n        formattedQuery = _this.formatWithSpaceAfter(token, formattedQuery);\n      } else if (token.value === \".\" || token.value === \";\") {\n        formattedQuery = _this.formatWithoutSpaces(token, formattedQuery);\n      } else {\n        formattedQuery = _this.formatWithSpaces(token, formattedQuery);\n      }\n    });\n    return formattedQuery;\n  };\n\n  Formatter.prototype.formatLineComment = function formatLineComment(token, query) {\n    return this.addNewline(query + token.value);\n  };\n\n  Formatter.prototype.formatBlockComment = function formatBlockComment(token, query) {\n    return this.addNewline(this.addNewline(query) + this.indentComment(token.value));\n  };\n\n  Formatter.prototype.indentComment = function indentComment(comment) {\n    return comment.replace(/\\n/g, \"\\n\" + this.indentation.getIndent());\n  };\n\n  Formatter.prototype.formatToplevelReservedWord = function formatToplevelReservedWord(token, query) {\n    this.indentation.decreaseTopLevel();\n    query = this.addNewline(query);\n    this.indentation.increaseToplevel();\n    query += this.equalizeWhitespace(token.value);\n    return this.addNewline(query);\n  };\n\n  Formatter.prototype.formatNewlineReservedWord = function formatNewlineReservedWord(token, query) {\n    return this.addNewline(query) + this.equalizeWhitespace(token.value) + \" \";\n  }; // Replace any sequence of whitespace characters with single space\n\n\n  Formatter.prototype.equalizeWhitespace = function equalizeWhitespace(string) {\n    return string.replace(/\\s+/g, \" \");\n  }; // Opening parentheses increase the block indent level and start a new line\n\n\n  Formatter.prototype.formatOpeningParentheses = function formatOpeningParentheses(token, query) {\n    // Take out the preceding space unless there was whitespace there in the original query\n    // or another opening parens or line comment\n    var preserveWhitespaceFor = [_tokenTypes2[\"default\"].WHITESPACE, _tokenTypes2[\"default\"].OPEN_PAREN, _tokenTypes2[\"default\"].LINE_COMMENT];\n\n    if (!preserveWhitespaceFor.includes(this.previousToken().type)) {\n      query = (0, _trimEnd2[\"default\"])(query);\n    }\n\n    query += token.value;\n    this.inlineBlock.beginIfPossible(this.tokens, this.index);\n\n    if (!this.inlineBlock.isActive()) {\n      this.indentation.increaseBlockLevel();\n      query = this.addNewline(query);\n    }\n\n    return query;\n  }; // Closing parentheses decrease the block indent level\n\n\n  Formatter.prototype.formatClosingParentheses = function formatClosingParentheses(token, query) {\n    if (this.inlineBlock.isActive()) {\n      this.inlineBlock.end();\n      return this.formatWithSpaceAfter(token, query);\n    } else {\n      this.indentation.decreaseBlockLevel();\n      return this.formatWithSpaces(token, this.addNewline(query));\n    }\n  };\n\n  Formatter.prototype.formatPlaceholder = function formatPlaceholder(token, query) {\n    return query + this.params.get(token) + \" \";\n  }; // Commas start a new line (unless within inline parentheses or SQL \"LIMIT\" clause)\n\n\n  Formatter.prototype.formatComma = function formatComma(token, query) {\n    query = this.trimTrailingWhitespace(query) + token.value + \" \";\n\n    if (this.inlineBlock.isActive()) {\n      return query;\n    } else if (/^LIMIT$/i.test(this.previousReservedWord.value)) {\n      return query;\n    } else {\n      return this.addNewline(query);\n    }\n  };\n\n  Formatter.prototype.formatWithSpaceAfter = function formatWithSpaceAfter(token, query) {\n    return this.trimTrailingWhitespace(query) + token.value + \" \";\n  };\n\n  Formatter.prototype.formatWithoutSpaces = function formatWithoutSpaces(token, query) {\n    return this.trimTrailingWhitespace(query) + token.value;\n  };\n\n  Formatter.prototype.formatWithSpaces = function formatWithSpaces(token, query) {\n    return query + token.value + \" \";\n  };\n\n  Formatter.prototype.addNewline = function addNewline(query) {\n    return (0, _trimEnd2[\"default\"])(query) + \"\\n\" + this.indentation.getIndent();\n  };\n\n  Formatter.prototype.trimTrailingWhitespace = function trimTrailingWhitespace(query) {\n    if (this.previousNonWhitespaceToken().type === _tokenTypes2[\"default\"].LINE_COMMENT) {\n      return (0, _trimEnd2[\"default\"])(query) + \"\\n\";\n    } else {\n      return (0, _trimEnd2[\"default\"])(query);\n    }\n  };\n\n  Formatter.prototype.previousNonWhitespaceToken = function previousNonWhitespaceToken() {\n    var n = 1;\n\n    while (this.previousToken(n).type === _tokenTypes2[\"default\"].WHITESPACE) {\n      n++;\n    }\n\n    return this.previousToken(n);\n  };\n\n  Formatter.prototype.previousToken = function previousToken() {\n    var offset = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    return this.tokens[this.index - offset] || {};\n  };\n\n  return Formatter;\n}();\n\nexports[\"default\"] = Formatter;\nmodule.exports = exports[\"default\"];","map":null,"metadata":{},"sourceType":"script"}