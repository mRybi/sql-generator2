{"ast":null,"code":"import _slicedToArray from \"/home/dell/Dokumenty/sql-gen2/sql-gen2/sql-generator2/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"/home/dell/Dokumenty/sql-gen2/sql-gen2/sql-generator2/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nvar _jsxFileName = \"/home/dell/Dokumenty/sql-gen2/sql-gen2/sql-generator2/src/PopupExample.tsx\";\nimport React, { useState } from 'react';\nimport Popup from 'reactjs-popup';\nimport sqlFormatter from \"sql-formatter\";\nimport './popup.scss';\nimport axios from 'axios';\n\nvar Props = function Props() {\n  _classCallCheck(this, Props);\n\n  this.isOpen = void 0;\n  this.serializeDiagram = void 0;\n};\n\nexport var PopupExample = function PopupExample(props) {\n  var _useState = useState('DB1'),\n      _useState2 = _slicedToArray(_useState, 2),\n      dbName = _useState2[0],\n      setDbName = _useState2[1];\n\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      sqlString = _useState4[0],\n      setSqlString = _useState4[1];\n\n  var aa = sqlString && sqlFormatter.format(sqlString, {\n    language: \"sql\",\n    // Defaults to \"sql\"\n    indent: \"    \" // Defaults to two spaces\n\n  });\n  console.log('AAAA', props, aa);\n  var x = JSON.stringify(props.serializeDiagram, null, 2);\n  var res = axios.post('http://localhost:5000/api/setjob', {\n    SerializedDiagram: x,\n    DatabaseName: dbName\n  }).then(function (response) {\n    setSqlString(response.data);\n  }).catch(function (error) {\n    console.log(error);\n  });\n  return React.createElement(Popup, {\n    modal: true,\n    closeOnDocumentClick: true,\n    open: props.isOpen,\n    closeOnEscape: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"SQLResultDialog\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    type: \"text\",\n    onChange: function onChange(event) {\n      return setDbName(event.target.value);\n    },\n    value: dbName,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }), React.createElement(\"textarea\", {\n    readOnly: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, aa)));\n};","map":{"version":3,"sources":["/home/dell/Dokumenty/sql-gen2/sql-gen2/sql-generator2/src/PopupExample.tsx"],"names":["React","useState","Popup","sqlFormatter","axios","Props","isOpen","serializeDiagram","PopupExample","props","dbName","setDbName","sqlString","setSqlString","aa","format","language","indent","console","log","x","JSON","stringify","res","post","SerializedDiagram","DatabaseName","then","response","data","catch","error","event","target","value"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,KAAP,MAAkB,eAAlB;AACA,OAAOC,YAAP,MAAyB,eAAzB;AACA,OAAO,cAAP;AACA,OAAOC,KAAP,MAAqC,OAArC;;IAEMC,K;;;OACJC,M;OACAC,gB;;;AAGF,OAAO,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,KAAD,EAAkB;AAAA,kBAEhBR,QAAQ,CAClC,KADkC,CAFQ;AAAA;AAAA,MAErCS,MAFqC;AAAA,MAE7BC,SAF6B;;AAAA,mBAMVV,QAAQ,CACxC,EADwC,CANE;AAAA;AAAA,MAMrCW,SANqC;AAAA,MAM1BC,YAN0B;;AAU5C,MAAMC,EAAE,GAAGF,SAAS,IAAIT,YAAY,CAACY,MAAb,CAAoBH,SAApB,EAA+B;AACrDI,IAAAA,QAAQ,EAAE,KAD2C;AACpC;AACjBC,IAAAA,MAAM,EAAE,MAF6C,CAEpC;;AAFoC,GAA/B,CAAxB;AAIAC,EAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBV,KAApB,EAA2BK,EAA3B;AAEA,MAAIM,CAAC,GAAGC,IAAI,CAACC,SAAL,CAAeb,KAAK,CAACF,gBAArB,EAAuC,IAAvC,EAA6C,CAA7C,CAAR;AACK,MAAIgB,GAAG,GAAGnB,KAAK,CAACoB,IAAN,CAAW,kCAAX,EAA+C;AAAEC,IAAAA,iBAAiB,EAAEL,CAArB;AAAwBM,IAAAA,YAAY,EAAEhB;AAAtC,GAA/C,EACRiB,IADQ,CACH,UAACC,QAAD,EAAc;AACnBf,IAAAA,YAAY,CAACe,QAAQ,CAACC,IAAV,CAAZ;AACA,GAHQ,EAIRC,KAJQ,CAIF,UAAUC,KAAV,EAAiB;AACvBb,IAAAA,OAAO,CAACC,GAAR,CAAYY,KAAZ;AACA,GANQ,CAAV;AAOL,SAEE,oBAAC,KAAD;AACE,IAAA,KAAK,MADP;AAEE,IAAA,oBAAoB,MAFtB;AAGE,IAAA,IAAI,EAAEtB,KAAK,CAACH,MAHd;AAIE,IAAA,aAAa,MAJf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAME;AAAK,IAAA,SAAS,EAAC,iBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACA;AAAO,IAAA,IAAI,EAAC,MAAZ;AAAmB,IAAA,QAAQ,EAAE,kBAAA0B,KAAK;AAAA,aAAIrB,SAAS,CAACqB,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAb;AAAA,KAAlC;AAAqE,IAAA,KAAK,EAAExB,MAA5E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADA,EAEE;AAAU,IAAA,QAAQ,EAAE,IAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA2BI,EAA3B,CAFF,CANF,CAFF;AAcD,CAtCM","sourcesContent":["import React, { useState } from 'react'\nimport Popup from 'reactjs-popup'\nimport sqlFormatter from \"sql-formatter\";\nimport './popup.scss';\nimport axios, { AxiosResponse } from 'axios';\n\nclass Props {\n  isOpen: boolean;\n  serializeDiagram: any;\n}\n\nexport const PopupExample = (props: Props) => {\n \n  const [dbName, setDbName] = useState(\n    'DB1'\n  );\n\n  const [sqlString, setSqlString] = useState(\n    ''\n  );\n\n  const aa = sqlString && sqlFormatter.format(sqlString, {\n    language: \"sql\", // Defaults to \"sql\"\n    indent: \"    \"   // Defaults to two spaces\n  });\n  console.log('AAAA', props, aa);\n\n  let x = JSON.stringify(props.serializeDiagram, null, 2);\n\t\t\t\t\t\t\tlet res = axios.post('http://localhost:5000/api/setjob', { SerializedDiagram: x, DatabaseName: dbName })\n\t\t\t\t\t\t\t\t.then((response) => {\n\t\t\t\t\t\t\t\t\tsetSqlString(response.data); \n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t.catch(function (error) {\n\t\t\t\t\t\t\t\t\tconsole.log(error);\n\t\t\t\t\t\t\t\t});\n  return (\n\n    <Popup\n      modal\n      closeOnDocumentClick\n      open={props.isOpen}\n      closeOnEscape\n    >\n      <div className=\"SQLResultDialog\">\n      <input type=\"text\" onChange={event => setDbName(event.target.value)} value={dbName}/>\n        <textarea readOnly={true}>{aa}</textarea>\n        {/* <button>Download</button> */}\n      </div>\n    </Popup>)\n}\n\n"]},"metadata":{},"sourceType":"module"}