{"ast":null,"code":"import _classCallCheck from \"/home/dell/Dokumenty/sql-gen2/sql-gen2/sql-generator2/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/dell/Dokumenty/sql-gen2/sql-gen2/sql-generator2/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/dell/Dokumenty/sql-gen2/sql-gen2/sql-generator2/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/dell/Dokumenty/sql-gen2/sql-gen2/sql-generator2/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/dell/Dokumenty/sql-gen2/sql-gen2/sql-generator2/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/dell/Dokumenty/sql-gen2/sql-gen2/sql-generator2/src/App2.tsx\";\nimport * as React from \"react\";\nimport * as _ from \"lodash\";\nimport { DiagramWidget } from \"storm-react-diagrams\";\nimport { TrayItemWidget } from \"./components/dragAndDrop/TrayItemWidget\";\nimport { TrayWidget } from \"./components/dragAndDrop/TrayWidget\";\nimport './dragAndDrop.scss';\n\nrequire(\"storm-react-diagrams/dist/style.min.css\");\n\nimport './App.css';\nimport { NodeInfo } from \"./components/nodeInfo/NodeInfo\";\nimport { Node } from \"./components/models/Node\";\nimport { PropertyType } from \"./components/models/PropertyType\";\nimport axios from 'axios';\nexport var RelationType;\n\n(function (RelationType) {\n  RelationType[RelationType[\"O2O\"] = 0] = \"O2O\";\n  RelationType[RelationType[\"O2M\"] = 1] = \"O2M\";\n  RelationType[RelationType[\"M2M\"] = 2] = \"M2M\";\n  RelationType[RelationType[\"none\"] = 3] = \"none\";\n})(RelationType || (RelationType = {}));\n\nexport var App2 =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(App2, _React$Component);\n\n  function App2(props) {\n    var _this;\n\n    _classCallCheck(this, App2);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App2).call(this, props));\n    _this.state = {\n      sqlString: null,\n      showDialog: false,\n      selectedNode: null,\n      diagramEngine: null,\n      selectedLink: null,\n      selectedRelation: RelationType.O2O,\n      isLocked: false\n    };\n    return _this;\n  }\n\n  _createClass(App2, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      this.setState({\n        selectedNode: null\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(\"div\", {\n        className: \"body\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"header\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      }, \"Create diagrams\")), React.createElement(\"div\", {\n        className: \"content\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      }, React.createElement(TrayWidget, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      }, React.createElement(TrayItemWidget, {\n        model: {\n          type: \"table\"\n        },\n        name: \"Node\",\n        color: \"rgb(0,192,255)\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      }), React.createElement(TrayItemWidget, {\n        model: {\n          type: \"label\"\n        },\n        name: \"Label\",\n        color: \"rgb(192,255,0)\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        style: {\n          borderColor: \"rgb(0,0,0)\",\n          marginTop: '100px'\n        },\n        className: \"tray-item \".concat(this.state.isLocked ? 'locked' : ''),\n        onClick: function onClick() {\n          var app = _this2.props.app.getActiveDiagram().getNodes();\n\n          Object.keys(app).forEach(function (x) {\n            return app[x].updatePorts(RelationType.none);\n          });\n\n          _this2.setState({\n            selectedRelation: RelationType.none\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }, \"Move\"), React.createElement(\"div\", {\n        style: {\n          borderColor: \"rgb(0,255,0)\",\n          marginTop: '100px'\n        },\n        className: \"tray-item \".concat(this.state.selectedRelation === RelationType.O2O ? 'selected' : ''),\n        onClick: function onClick() {\n          var app = _this2.props.app.getActiveDiagram().getNodes();\n\n          Object.keys(app).forEach(function (x) {\n            return app[x].updatePorts(RelationType.O2O);\n          });\n\n          _this2.setState({\n            selectedRelation: RelationType.O2O\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83\n        },\n        __self: this\n      }, \"One2One Relation\"), React.createElement(\"div\", {\n        style: {\n          borderColor: \"rgb(0,255,0)\"\n        },\n        className: \"tray-item \".concat(this.state.selectedRelation === RelationType.O2M ? 'selected' : ''),\n        onClick: function onClick() {\n          var app = _this2.props.app.getActiveDiagram().getNodes();\n\n          Object.keys(app).forEach(function (x) {\n            return app[x].updatePorts(RelationType.O2M);\n          });\n\n          _this2.setState({\n            selectedRelation: RelationType.O2M\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      }, \"One2Many Relation\"), React.createElement(\"div\", {\n        style: {\n          borderColor: \"rgb(0,255,0)\"\n        },\n        className: \"tray-item \".concat(this.state.selectedRelation === RelationType.M2M ? 'selected' : ''),\n        onClick: function onClick() {\n          var app = _this2.props.app.getActiveDiagram().getNodes();\n\n          Object.keys(app).forEach(function (x) {\n            return app[x].updatePorts(RelationType.M2M);\n          });\n\n          _this2.setState({\n            selectedRelation: RelationType.M2M\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      }, \"Many2Many Relation\"), React.createElement(\"div\", {\n        style: {\n          borderColor: \"rgb(255,0,0)\",\n          marginTop: '100px'\n        },\n        className: \"tray-item\",\n        onClick: function onClick() {\n          console.log(JSON.stringify(_this2.props.app.getActiveDiagram().serializeDiagram(), null, 2));\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126\n        },\n        __self: this\n      }, \"Serialize Graph\"), React.createElement(\"div\", {\n        style: {\n          borderColor: \"rgb(255,0,0)\",\n          marginTop: '100px'\n        },\n        className: \"tray-item\",\n        onClick: function onClick() {\n          var responseSql = \"\";\n          var x = JSON.stringify(_this2.props.app.getActiveDiagram().serializeDiagram(), null, 2);\n          axios.post('http://localhost:5000/api/setjob', {\n            SerializedDiagram: x,\n            DatabaseName: 'db1'\n          }).then(function (response) {\n            responseSql = response.body;\n            console.log(response);\n          }).catch(function (error) {\n            console.log(error);\n          });\n\n          _this2.setState({\n            sqlString: responseSql,\n            showDialog: true\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136\n        },\n        __self: this\n      }, \"Create DB Code\")), React.createElement(\"div\", {\n        className: \"diagram-layer\",\n        onDrop: function onDrop(event) {\n          var data = JSON.parse(event.dataTransfer.getData(\"storm-diagram-node\"));\n\n          var nodesCount = _.keys(_this2.props.app.getDiagramEngine().getDiagramModel().getNodes()).length;\n\n          var node = null;\n\n          if (data.type === \"table\") {\n            node = new Node(\"table\", \"Node\".concat(nodesCount + 1), \"rgb(0,192,255)\");\n            node.addInPort(true, true, true, true, false, \"Id\", _this2.state.selectedRelation, _this2.props.app.getDiagramEngine(), PropertyType.INT);\n            node.addInPort(false, false, false, false, false, \"Name\", _this2.state.selectedRelation, _this2.props.app.getDiagramEngine(), PropertyType.NVARCHAR);\n          } else {\n            node = new Node(\"label\", \"Label \", \"rgb(192,255,0)\");\n          }\n\n          var points = _this2.props.app.getDiagramEngine().getRelativeMousePoint(event);\n\n          node.x = points.x;\n          node.y = points.y;\n\n          _this2.props.app.getDiagramEngine().getDiagramModel().addNode(node);\n\n          _this2.forceUpdate();\n        },\n        onDragOver: function onDragOver(event) {\n          event.preventDefault();\n        },\n        onClick: function onClick(event) {\n          event.preventDefault();\n\n          _this2.setState({\n            selectedRelation: RelationType.none\n          });\n        },\n        onDoubleClick: function onDoubleClick(event) {\n          event.preventDefault();\n\n          _this2.setState({\n            selectedNode: _this2.props.app.getDiagramEngine().getDiagramModel().getSelectedItems()[0],\n            diagramEngine: _this2.props.app.getDiagramEngine(),\n            selectedLink: _this2.props.app.getDiagramEngine().getDiagramModel().getSelectedItems()[1]\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 159\n        },\n        __self: this\n      }, React.createElement(DiagramWidget, {\n        className: \"srd-demo-canvas\",\n        diagramEngine: this.props.app.getDiagramEngine(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 215\n        },\n        __self: this\n      })), this.state.selectedNode != null ? React.createElement(NodeInfo, {\n        selectedRelation: this.state.selectedRelation,\n        selectedLink: this.state.selectedLink,\n        selectedItem: this.state.selectedNode,\n        diagramEngine: this.state.diagramEngine,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 218\n        },\n        __self: this\n      }) : null, this.state.showDialog != null ? React.createElement(SQLResultDialog, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 219\n        },\n        __self: this\n      }) : null));\n    }\n  }]);\n\n  return App2;\n}(React.Component);","map":{"version":3,"sources":["/home/dell/Dokumenty/sql-gen2/sql-gen2/sql-generator2/src/App2.tsx"],"names":["React","_","DiagramWidget","TrayItemWidget","TrayWidget","require","NodeInfo","Node","PropertyType","axios","RelationType","App2","props","state","sqlString","showDialog","selectedNode","diagramEngine","selectedLink","selectedRelation","O2O","isLocked","setState","type","borderColor","marginTop","app","getActiveDiagram","getNodes","Object","keys","forEach","x","updatePorts","none","O2M","M2M","console","log","JSON","stringify","serializeDiagram","responseSql","post","SerializedDiagram","DatabaseName","then","response","body","catch","error","event","data","parse","dataTransfer","getData","nodesCount","getDiagramEngine","getDiagramModel","length","node","addInPort","INT","NVARCHAR","points","getRelativeMousePoint","y","addNode","forceUpdate","preventDefault","getSelectedItems","Component"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport * as _ from \"lodash\";\nimport { DefaultNodeModel, DiagramWidget, BaseEntityType, BaseEntity, BaseModelListener, BaseModel, DiagramModel, DefaultLinkModel, DiagramEngine } from \"storm-react-diagrams\";\nimport { TrayItemWidget } from \"./components/dragAndDrop/TrayItemWidget\";\nimport { TrayWidget } from \"./components/dragAndDrop/TrayWidget\";\nimport { Application } from \"./components/dragAndDrop/Application\";\nimport './dragAndDrop.scss';\nrequire(\"storm-react-diagrams/dist/style.min.css\");\n\nimport './App.css';\nimport { NodeInfo } from \"./components/nodeInfo/NodeInfo\";\nimport { Node } from \"./components/models/Node\";\nimport { Link } from \"./components/models/Link\";\nimport { PropertyType } from \"./components/models/PropertyType\";\nimport axios from 'axios';\n\nexport interface BodyWidgetProps {\n\tapp: Application;\n}\n\nexport interface BodyWidgetState {\n\tshowDialog: boolean;\n\tsqlString: string;\n\tselectedNode: Node;\n\tdiagramEngine: DiagramEngine;\n\tselectedLink: Link;\n\tselectedRelation: RelationType;\n\tisLocked: boolean;\n}\n\nexport enum RelationType {\n\tO2O = 0,\n  O2M = 1,\n\tM2M = 2,\n\tnone = 3\n}\n\nexport class App2 extends React.Component<BodyWidgetProps, BodyWidgetState> {\n\tconstructor(props: BodyWidgetProps) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tsqlString: null,\n\t\t\tshowDialog: false,\n\t\t\tselectedNode: null,\n\t\t\tdiagramEngine: null,\n\t\t\tselectedLink: null,\n\t\t\tselectedRelation: RelationType.O2O,\n\t\t\tisLocked: false\n\t\t}\n\t}\n\n\tcomponentWillMount(){\n\t\tthis.setState({selectedNode: null})\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"body\">\n\t\t\t\t<div className=\"header\">\n\t\t\t\t\t<div className=\"title\">Create diagrams</div>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"content\">\n\t\t\t\t\t<TrayWidget>\n\t\t\t\t\t\t<TrayItemWidget model={{ type: \"table\" }} name=\"Node\" color=\"rgb(0,192,255)\" />\n\t\t\t\t\t\t<TrayItemWidget model={{ type: \"label\" }} name=\"Label\" color=\"rgb(192,255,0)\" />\n\n\t\t\t\t\t\t<div\n\t\t\t\t\t\t\tstyle={{ borderColor: \"rgb(0,0,0)\" , marginTop: '100px'\n\t\t\t\t\t\t}}\n\t\t\t\t\t\t\tclassName={`tray-item ${this.state.isLocked ? 'locked' : ''}`}\n\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\tlet app = this.props.app.getActiveDiagram().getNodes() as {[s: string]: Node} ;\n\t\t\t\t\t\t\t\tObject.keys(app).forEach(x => app[x].updatePorts(RelationType.none));\n\t\t\t\t\t\t\t\tthis.setState({\n\t\t\t\t\t\t\t\t\tselectedRelation: RelationType.none\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tMove\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<div\n\t\t\t\t\t\t\tstyle={{ borderColor: \"rgb(0,255,0)\" , marginTop: '100px'\n\t\t\t\t\t\t}}\n\t\t\t\t\t\t\tclassName={`tray-item ${this.state.selectedRelation === RelationType.O2O ? 'selected' : ''}`}\n\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\tlet app = this.props.app.getActiveDiagram().getNodes() as {[s: string]: Node} ;\n\t\t\t\t\t\t\t\tObject.keys(app).forEach(x => app[x].updatePorts(RelationType.O2O));\n\t\t\t\t\t\t\t\tthis.setState({\n\t\t\t\t\t\t\t\t\tselectedRelation: RelationType.O2O\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tOne2One Relation\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div\n\t\t\t\t\t\t\tstyle={{ borderColor: \"rgb(0,255,0)\"}}\n\t\t\t\t\t\t\tclassName={`tray-item ${this.state.selectedRelation === RelationType.O2M ? 'selected' : ''}`}\n\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\tlet app = this.props.app.getActiveDiagram().getNodes() as {[s: string]: Node} ;\n\t\t\t\t\t\t\t\tObject.keys(app).forEach(x => app[x].updatePorts(RelationType.O2M));\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tthis.setState({\n\t\t\t\t\t\t\t\t\tselectedRelation: RelationType.O2M\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tOne2Many Relation\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div\n\t\t\t\t\t\t\tstyle={{ borderColor: \"rgb(0,255,0)\"}}\n\t\t\t\t\t\t\tclassName={`tray-item ${this.state.selectedRelation === RelationType.M2M ? 'selected' : ''}`}\n\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\tlet app = this.props.app.getActiveDiagram().getNodes() as {[s: string]: Node} ;\n\t\t\t\t\t\t\t\tObject.keys(app).forEach(x => app[x].updatePorts(RelationType.M2M));\n\t\t\t\t\t\t\t\tthis.setState({\n\t\t\t\t\t\t\t\t\tselectedRelation: RelationType.M2M\n\t\t\t\t\t\t\t\t})\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tMany2Many Relation\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div\n\t\t\t\t\t\t\tstyle={{ borderColor: \"rgb(255,0,0)\", marginTop: '100px'}}\n\t\t\t\t\t\t\tclassName=\"tray-item\"\n\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\tconsole.log(JSON.stringify(this.props.app.getActiveDiagram().serializeDiagram(), null, 2));\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tSerialize Graph\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<div\n\t\t\t\t\t\t\tstyle={{ borderColor: \"rgb(255,0,0)\", marginTop: '100px'}}\n\t\t\t\t\t\t\tclassName=\"tray-item\"\n\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\tlet responseSql = \"\";\n\t\t\t\t\t\t\t\tlet x = JSON.stringify(this.props.app.getActiveDiagram().serializeDiagram(), null, 2);\n\t\t\t\t\t\t\t\taxios.post('http://localhost:5000/api/setjob', {SerializedDiagram: x, DatabaseName: 'db1'})\n\t\t\t\t\t\t\t\t.then(function (response: any) {\n\t\t\t\t\t\t\t\t\tresponseSql = response.body;\n\t\t\t\t\t\t\t\t\tconsole.log(response);\n\t\t\t\t\t\t\t\t  })\n\t\t\t\t\t\t\t\t  .catch(function (error) {\n\t\t\t\t\t\t\t\t\tconsole.log(error);\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\tthis.setState({sqlString: responseSql, showDialog: true});\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tCreate DB Code\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\n\t\t\t\n\t\t\t\t\t</TrayWidget>\n\t\t\t\t\t<div\n\t\t\t\t\t\tclassName=\"diagram-layer\"\n\t\t\t\t\t\tonDrop={event => {\n\t\t\t\t\t\t\tvar data = JSON.parse(event.dataTransfer.getData(\"storm-diagram-node\"));\n\t\t\t\t\t\t\tvar nodesCount = _.keys(\n\t\t\t\t\t\t\t\tthis.props.app\n\t\t\t\t\t\t\t\t\t.getDiagramEngine()\n\t\t\t\t\t\t\t\t\t.getDiagramModel()\n\t\t\t\t\t\t\t\t\t.getNodes()\n\t\t\t\t\t\t\t).length;\n\n\t\t\t\t\t\t\tvar node = null;\n\t\t\t\t\t\t\tif (data.type === \"table\") {\n\t\t\t\t\t\t\t\tnode = new Node(\"table\",`Node${nodesCount + 1}`, \"rgb(0,192,255)\");\n\t\t\t\t\t\t\t\tnode.addInPort(true, true, true, true, false, \"Id\",this.state.selectedRelation, this.props.app.getDiagramEngine(), PropertyType.INT);\n\t\t\t\t\t\t\t\tnode.addInPort(false, false, false, false,false,\"Name\",this.state.selectedRelation, this.props.app.getDiagramEngine(), PropertyType.NVARCHAR);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tnode = new Node(\"label\",\"Label \", \"rgb(192,255,0)\");\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tvar points = this.props.app.getDiagramEngine().getRelativeMousePoint(event);\n\t\t\t\t\t\t\tnode.x = points.x;\n\t\t\t\t\t\t\tnode.y = points.y;\n\t\t\t\t\t\t\tthis.props.app\n\t\t\t\t\t\t\t\t.getDiagramEngine()\n\t\t\t\t\t\t\t\t.getDiagramModel()\n\t\t\t\t\t\t\t\t.addNode(node);\n\t\t\t\t\t\t\tthis.forceUpdate();\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tonDragOver={event => {\n\t\t\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\t\t}}\n\n\t\t\t\t\t\tonClick={event => {\n\t\t\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\t\t\tthis.setState({\n\t\t\t\t\t\t\t\tselectedRelation: RelationType.none\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t}}\n\n\t\t\t\t\t\tonDoubleClick={event => {\n\t\t\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tthis.setState({\n\t\t\t\t\t\t\t\tselectedNode: this.props.app\n\t\t\t\t\t\t\t\t.getDiagramEngine()\n\t\t\t\t\t\t\t\t.getDiagramModel()\n\t\t\t\t\t\t\t\t.getSelectedItems()[0] as Node,\n\t\t\t\t\t\t\t\tdiagramEngine: this.props.app.getDiagramEngine(),\n\t\t\t\t\t\t\t\tselectedLink: this.props.app\n\t\t\t\t\t\t\t\t.getDiagramEngine()\n\t\t\t\t\t\t\t\t.getDiagramModel()\n\t\t\t\t\t\t\t\t.getSelectedItems()[1] as Link,\n\t\t\t\t\t\t\t});\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t}}\n\t\t\t\t\t>\n\t\t\t\t\t\t<DiagramWidget className=\"srd-demo-canvas\" diagramEngine={this.props.app.getDiagramEngine()} />\n\n\t\t\t\t\t</div>\n\t\t\t\t\t{ this.state.selectedNode != null ? <NodeInfo selectedRelation={this.state.selectedRelation} selectedLink={this.state.selectedLink} selectedItem={this.state.selectedNode} diagramEngine={this.state.diagramEngine} /> : null}\n\t\t\t\t\t{ this.state.showDialog != null ? <SQLResultDialog /> : null}\n\t\t\t\t\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}"]},"metadata":{},"sourceType":"module"}