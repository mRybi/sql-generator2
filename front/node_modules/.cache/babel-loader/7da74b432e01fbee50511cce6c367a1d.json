{"ast":null,"code":"import _classCallCheck from \"/home/dell/Dokumenty/sql-gen2/sql-gen2/sql-generator2/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/dell/Dokumenty/sql-gen2/sql-gen2/sql-generator2/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport * as SRD from \"storm-react-diagrams\";\nimport { Node } from \"../models/Node\";\nimport { PropertyType } from \"../models/PropertyType\";\nimport { CustomLabelFactory } from \"../factories/CustomLabelFactory\";\nimport { CustomPortFactory } from \"../factories/CustomPortFactory\";\nimport { CustomNodeFactory } from \"../factories/CustomNodeFactory\";\nexport var Application =\n/*#__PURE__*/\nfunction () {\n  function Application() {\n    _classCallCheck(this, Application);\n\n    this.activeModel = void 0;\n    this.diagramEngine = void 0;\n    this.diagramEngine = new SRD.DiagramEngine();\n    this.diagramEngine.registerNodeFactory(new CustomLabelFactory());\n    this.diagramEngine.registerNodeFactory(new CustomNodeFactory());\n    this.diagramEngine.registerPortFactory(new CustomPortFactory());\n    this.diagramEngine.installDefaultFactories();\n    this.newModel();\n  }\n\n  _createClass(Application, [{\n    key: \"newModel\",\n    value: function newModel() {\n      this.activeModel = new SRD.DiagramModel();\n      this.diagramEngine.setDiagramModel(this.activeModel);\n      console.log('MODEL JSON', JSON.stringify(this.activeModel.serializeDiagram(), null, 2)); //3-A) create a default node\n\n      var node1 = new Node(\"Node1\", \"rgb(0,192,255)\");\n      var port = node1.addInPort(\"Id\", true, false, false, false, false, PropertyType.INT);\n      var port1 = node1.addInPort(\"Id11\", false, false, false, false, false, PropertyType.INT); // let port1 = node1.addInPort(true, true, true, false, false, \"Id1\", PropertyType.INT);\n\n      node1.setPosition(100, 100); //3-B) create another default node\n\n      var node2 = new Node(\"Node2\", \"rgb(0,192,255)\");\n      var port2 = node2.addInPort(\"Id\", true, false, false, false, false, PropertyType.INT); // var node2 = new Node(\"table\", \"Node2\", \"rgb(0,192,255)\");\n      // let port2 = node2.addInPort(true, true, true, true, false,\"Id\", PropertyType.INT);\n\n      node2.setPosition(400, 100);\n      var link1 = port.link(port2); // link the ports\n      // let link1 = port.initialLink(node2);\n\n      this.activeModel.addAll(node1, node2, link1);\n      console.log('MODEL JSON', JSON.stringify(this.activeModel.serializeDiagram(), null, 2)); // var node1 = new SRD.DefaultNodeModel(\"Node 1\", \"rgb(0,192,255)\");\n      // let port = node1.addOutPort(\"Out\");\n      // node1.setPosition(100, 100);\n      // var node2 = new SRD.DefaultNodeModel(\"Node 1\", \"rgb(0,192,255)\");\n      // let port22 = node1.addOutPort(\"Out\");\n      // node1.setPosition(100, 100);\n      // //3-B) create another default node\n      // var node22 = new SRD.DefaultNodeModel(\"Node 2\", \"rgb(192,255,0)\");\n      // let port2 = node2.addInPort(\"In\");\n      // let port3 = node2.addInPort(\"In2\");\n      // node2.setPosition(400, 100);\n      // // link the ports\n      // let link1 = port.link(port2);\n      // this.activeModel.addAll(node1, node22,  node2, link1);\n      // this.diagramEngine.recalculatePortsVisually();\n    }\n  }, {\n    key: \"getActiveDiagram\",\n    value: function getActiveDiagram() {\n      return this.activeModel;\n    }\n  }, {\n    key: \"getDiagramEngine\",\n    value: function getDiagramEngine() {\n      return this.diagramEngine;\n    }\n  }]);\n\n  return Application;\n}();","map":{"version":3,"sources":["/home/dell/Dokumenty/sql-gen2/sql-gen2/sql-generator2/src/components/dragAndDrop/Application.ts"],"names":["SRD","Node","PropertyType","CustomLabelFactory","CustomPortFactory","CustomNodeFactory","Application","activeModel","diagramEngine","DiagramEngine","registerNodeFactory","registerPortFactory","installDefaultFactories","newModel","DiagramModel","setDiagramModel","console","log","JSON","stringify","serializeDiagram","node1","port","addInPort","INT","port1","setPosition","node2","port2","link1","link","addAll"],"mappings":";;AAAA,OAAO,KAAKA,GAAZ,MAAqB,sBAArB;AACA,SAASC,IAAT,QAAqB,gBAArB;AACA,SAASC,YAAT,QAA6B,wBAA7B;AACA,SAASC,kBAAT,QAAmC,iCAAnC;AAEA,SAASC,iBAAT,QAAkC,gCAAlC;AACA,SAASC,iBAAT,QAAkC,gCAAlC;AAGA,WAAaC,WAAb;AAAA;AAAA;AAIC,yBAAc;AAAA;;AAAA,SAHJC,WAGI;AAAA,SAFJC,aAEI;AACb,SAAKA,aAAL,GAAqB,IAAIR,GAAG,CAACS,aAAR,EAArB;AACA,SAAKD,aAAL,CAAmBE,mBAAnB,CAAuC,IAAIP,kBAAJ,EAAvC;AAGA,SAAKK,aAAL,CAAmBE,mBAAnB,CAAuC,IAAIL,iBAAJ,EAAvC;AACA,SAAKG,aAAL,CAAmBG,mBAAnB,CAAuC,IAAIP,iBAAJ,EAAvC;AAEA,SAAKI,aAAL,CAAmBI,uBAAnB;AAEA,SAAKC,QAAL;AACA;;AAfF;AAAA;AAAA,+BAiBmB;AACjB,WAAKN,WAAL,GAAmB,IAAIP,GAAG,CAACc,YAAR,EAAnB;AACA,WAAKN,aAAL,CAAmBO,eAAnB,CAAmC,KAAKR,WAAxC;AACAS,MAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BC,IAAI,CAACC,SAAL,CAAe,KAAKZ,WAAL,CAAiBa,gBAAjB,EAAf,EAAoD,IAApD,EAA0D,CAA1D,CAA1B,EAHiB,CAIjB;;AACA,UAAIC,KAAK,GAAG,IAAIpB,IAAJ,CAAS,OAAT,EAAkB,gBAAlB,CAAZ;AACA,UAAIqB,IAAI,GAAGD,KAAK,CAACE,SAAN,CAAgB,IAAhB,EAAsB,IAAtB,EAA4B,KAA5B,EAAmC,KAAnC,EAA0C,KAA1C,EAAiD,KAAjD,EAAwDrB,YAAY,CAACsB,GAArE,CAAX;AACA,UAAIC,KAAK,GAAGJ,KAAK,CAACE,SAAN,CAAgB,MAAhB,EAAwB,KAAxB,EAA+B,KAA/B,EAAsC,KAAtC,EAA6C,KAA7C,EAAoD,KAApD,EAA2DrB,YAAY,CAACsB,GAAxE,CAAZ,CAPiB,CASjB;;AAEAH,MAAAA,KAAK,CAACK,WAAN,CAAkB,GAAlB,EAAuB,GAAvB,EAXiB,CAajB;;AACA,UAAIC,KAAK,GAAG,IAAI1B,IAAJ,CAAS,OAAT,EAAkB,gBAAlB,CAAZ;AACA,UAAI2B,KAAK,GAAGD,KAAK,CAACJ,SAAN,CAAgB,IAAhB,EAAsB,IAAtB,EAA4B,KAA5B,EAAmC,KAAnC,EAA0C,KAA1C,EAAiD,KAAjD,EAAwDrB,YAAY,CAACsB,GAArE,CAAZ,CAfiB,CAiBjB;AACA;;AACAG,MAAAA,KAAK,CAACD,WAAN,CAAkB,GAAlB,EAAuB,GAAvB;AACA,UAAIG,KAAK,GAAGP,IAAI,CAACQ,IAAL,CAAUF,KAAV,CAAZ,CApBiB,CAqBjB;AACA;;AAEA,WAAKrB,WAAL,CAAiBwB,MAAjB,CAAwBV,KAAxB,EAA+BM,KAA/B,EAAsCE,KAAtC;AACAb,MAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BC,IAAI,CAACC,SAAL,CAAe,KAAKZ,WAAL,CAAiBa,gBAAjB,EAAf,EAAoD,IAApD,EAA0D,CAA1D,CAA1B,EAzBiB,CA4BjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AAhEF;AAAA;AAAA,uCAkE6C;AAC3C,aAAO,KAAKb,WAAZ;AACA;AApEF;AAAA;AAAA,uCAsE8C;AAC5C,aAAO,KAAKC,aAAZ;AACA;AAxEF;;AAAA;AAAA","sourcesContent":["import * as SRD from \"storm-react-diagrams\";\nimport { Node } from \"../models/Node\";\nimport { PropertyType } from \"../models/PropertyType\";\nimport { CustomLabelFactory } from \"../factories/CustomLabelFactory\";\nimport { RelationType } from \"../../AppView\";\nimport { CustomPortFactory } from \"../factories/CustomPortFactory\";\nimport { CustomNodeFactory } from \"../factories/CustomNodeFactory\";\n\n\nexport class Application {\n\tprotected activeModel: SRD.DiagramModel;\n\tprotected diagramEngine: SRD.DiagramEngine;\n\n\tconstructor() {\n\t\tthis.diagramEngine = new SRD.DiagramEngine();\n\t\tthis.diagramEngine.registerNodeFactory(new CustomLabelFactory());\n\t\t\n\t\t\n\t\tthis.diagramEngine.registerNodeFactory(new CustomNodeFactory());\n\t\tthis.diagramEngine.registerPortFactory(new CustomPortFactory());\n\n\t\tthis.diagramEngine.installDefaultFactories(); \n\n\t\tthis.newModel();\n\t}\n\n\tpublic newModel() {\n\t\tthis.activeModel = new SRD.DiagramModel();\n\t\tthis.diagramEngine.setDiagramModel(this.activeModel);\n\t\tconsole.log('MODEL JSON', JSON.stringify(this.activeModel.serializeDiagram(), null, 2))\n\t\t//3-A) create a default node\n\t\tvar node1 = new Node(\"Node1\", \"rgb(0,192,255)\");\n\t\tlet port = node1.addInPort(\"Id\", true, false, false, false, false, PropertyType.INT);\n\t\tlet port1 = node1.addInPort(\"Id11\", false, false, false, false, false, PropertyType.INT);\n\n\t\t// let port1 = node1.addInPort(true, true, true, false, false, \"Id1\", PropertyType.INT);\n\t\t\n\t\tnode1.setPosition(100, 100);\n\n\t\t//3-B) create another default node\n\t\tvar node2 = new Node(\"Node2\", \"rgb(0,192,255)\");\n\t\tlet port2 = node2.addInPort(\"Id\", true, false, false, false, false, PropertyType.INT);\n\n\t\t// var node2 = new Node(\"table\", \"Node2\", \"rgb(0,192,255)\");\n\t\t// let port2 = node2.addInPort(true, true, true, true, false,\"Id\", PropertyType.INT);\n\t\tnode2.setPosition(400, 100);\n\t\tlet link1 = port.link(port2);\n\t\t// link the ports\n\t\t// let link1 = port.initialLink(node2);\n\n\t\tthis.activeModel.addAll(node1, node2, link1);\n\t\tconsole.log('MODEL JSON', JSON.stringify(this.activeModel.serializeDiagram(), null, 2))\n\n\n\t\t// var node1 = new SRD.DefaultNodeModel(\"Node 1\", \"rgb(0,192,255)\");\n\t\t// let port = node1.addOutPort(\"Out\");\n\t\t// node1.setPosition(100, 100);\n\t\t// var node2 = new SRD.DefaultNodeModel(\"Node 1\", \"rgb(0,192,255)\");\n\t\t// let port22 = node1.addOutPort(\"Out\");\n\t\t// node1.setPosition(100, 100);\n\t\t// //3-B) create another default node\n\t\t// var node22 = new SRD.DefaultNodeModel(\"Node 2\", \"rgb(192,255,0)\");\n\t\t// let port2 = node2.addInPort(\"In\");\n\t\t// let port3 = node2.addInPort(\"In2\");\n\n\t\t// node2.setPosition(400, 100);\n\n\t\t// // link the ports\n\t\t// let link1 = port.link(port2);\n\n\t\t// this.activeModel.addAll(node1, node22,  node2, link1);\n\t\t// this.diagramEngine.recalculatePortsVisually();\n\n\t}\n\n\tpublic getActiveDiagram(): SRD.DiagramModel {\n\t\treturn this.activeModel;\n\t}\n\n\tpublic getDiagramEngine(): SRD.DiagramEngine {\n\t\treturn this.diagramEngine;\n\t}\n}"]},"metadata":{},"sourceType":"module"}