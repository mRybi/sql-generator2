{"ast":null,"code":"import _classCallCheck from \"/home/dell/Dokumenty/sql-gen2/sql-gen2/sql-generator2/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/dell/Dokumenty/sql-gen2/sql-gen2/sql-generator2/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/dell/Dokumenty/sql-gen2/sql-gen2/sql-generator2/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/dell/Dokumenty/sql-gen2/sql-gen2/sql-generator2/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _get from \"/home/dell/Dokumenty/sql-gen2/sql-gen2/sql-generator2/node_modules/@babel/runtime/helpers/esm/get\";\nimport _inherits from \"/home/dell/Dokumenty/sql-gen2/sql-gen2/sql-generator2/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport * as _ from \"lodash\";\nimport { PortModel } from \"storm-react-diagrams\";\nimport { Link } from \"./Link\";\nimport { PropertyType } from \"./PropertyType\";\nimport { Node } from \"./Node\";\nimport { RelationType } from \"../../App2\";\nexport var Port =\n/*#__PURE__*/\nfunction (_PortModel) {\n  _inherits(Port, _PortModel);\n\n  function Port(isNotNull, isAutoIncremented, isUnique, isPrimaryKey, isForeignKey, isInput, name) {\n    var _this;\n\n    var label = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : null;\n    var selectedRelation = arguments.length > 8 ? arguments[8] : undefined;\n    var diagramEngine = arguments.length > 9 ? arguments[9] : undefined;\n    var propertyType = arguments.length > 10 ? arguments[10] : undefined;\n    var id = arguments.length > 11 ? arguments[11] : undefined;\n\n    _classCallCheck(this, Port);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Port).call(this, name, \"with_prop\", id));\n    _this.in = void 0;\n    _this.label = void 0;\n    _this.propertyType = void 0;\n    _this.isPrimaryKey = void 0;\n    _this.isForeignKey = void 0;\n    _this.isNotNull = void 0;\n    _this.isUnique = void 0;\n    _this.isAutoIncremented = void 0;\n    _this.links = void 0;\n    _this.iterator = 1;\n    _this.firstM2M = 1;\n    _this.selectedRelation = void 0;\n    _this.diagramEngine = void 0;\n    _this.in = isInput;\n    _this.label = label || name;\n    _this.links = {};\n    _this.propertyType = PropertyType[propertyType];\n    _this.isForeignKey = isForeignKey;\n    _this.isPrimaryKey = isPrimaryKey;\n    _this.selectedRelation = selectedRelation;\n    _this.diagramEngine = diagramEngine;\n    _this.isAutoIncremented = isAutoIncremented;\n    _this.isUnique = isUnique;\n    _this.isNotNull = isNotNull;\n    return _this;\n  }\n\n  _createClass(Port, [{\n    key: \"updatePortRelation\",\n    value: function updatePortRelation(selectedRelation) {\n      this.selectedRelation = selectedRelation;\n    }\n  }, {\n    key: \"deSerialize\",\n    value: function deSerialize(object, engine) {\n      _get(_getPrototypeOf(Port.prototype), \"deSerialize\", this).call(this, object, engine);\n\n      this.in = object.in;\n      this.label = object.label;\n    }\n  }, {\n    key: \"serialize\",\n    value: function serialize() {\n      return _.merge(_get(_getPrototypeOf(Port.prototype), \"serialize\", this).call(this), {\n        in: this.in,\n        label: this.label,\n        propertyType: this.propertyType,\n        isForeignKey: this.isForeignKey,\n        isPrimaryKey: this.isPrimaryKey,\n        isNotNull: this.isNotNull,\n        isAutoincremented: this.isAutoIncremented,\n        isUnique: this.isUnique\n      });\n    }\n  }, {\n    key: \"initialLink\",\n    value: function initialLink(nodeToLink) {\n      var thisPortNode = this.getNode();\n      var ports = nodeToLink.getInPorts();\n      var isThereAlreadyThatPort = ports.filter(function (p) {\n        return p.label === \"\".concat(thisPortNode.name, \"Id\");\n      }).length;\n\n      if (isThereAlreadyThatPort === 0) {\n        var link = this.createLinkModel();\n\n        if (link !== null) {\n          link.setSourcePort(this);\n          var newPort = nodeToLink.addInPort(true, false, false, false, true, \"\".concat(thisPortNode.name, \"Id\"), this.selectedRelation, this.diagramEngine, PropertyType.INT);\n          console.log('ports', this, newPort);\n          link.setTargetPort(newPort);\n          this.diagramEngine.getDiagramModel().addLink(link);\n          this.diagramEngine.recalculatePortsVisually();\n          console.log('link', link);\n          this.selectedRelation = RelationType.none;\n        }\n      }\n\n      this.selectedRelation = RelationType.none;\n      return null;\n    }\n  }, {\n    key: \"link\",\n    value: function link(nodeToLink) {\n      var thisPortNode = this.getNode();\n      var ports = nodeToLink.getInPorts();\n      var isThereAlreadyThatPort = ports.filter(function (p) {\n        return p.label === \"\".concat(thisPortNode.name, \"Id\");\n      }).length;\n\n      if (isThereAlreadyThatPort === 0) {\n        if (this.iterator === 1) {\n          var portLinks = this.getLinks();\n          {}\n          var linkToDelete = Object.keys(portLinks).filter(function (l) {\n            return portLinks[l].getTargetPort() === ports.filter(function (p) {\n              return p.label === 'Id';\n            })[0];\n          });\n          this.diagramEngine.getDiagramModel().removeLink(linkToDelete[0]);\n        }\n\n        var link = this.createLinkModel();\n\n        if (link !== null) {\n          link.setSourcePort(this);\n          var newPort = nodeToLink.addInPort(true, false, false, false, true, \"\".concat(thisPortNode.name, \"Id\"), this.selectedRelation, this.diagramEngine, PropertyType.INT);\n          console.log('ports', this, newPort);\n          link.setTargetPort(newPort);\n          this.diagramEngine.getDiagramModel().addLink(link);\n          this.diagramEngine.recalculatePortsVisually();\n          console.log('link', link);\n          this.selectedRelation = RelationType.none;\n        }\n      }\n\n      this.selectedRelation = RelationType.none;\n      return null;\n    }\n  }, {\n    key: \"createM2MNode\",\n    value: function createM2MNode(port1Name, port2Name) {\n      var nodes = this.diagramEngine.getDiagramModel().getNodes();\n      var isAlredy = Object.keys(nodes).filter(function (x) {\n        return nodes[x].name.slice(3) === \"\".concat(port1Name.slice(3, 8), \"Has\").concat(port2Name);\n      });\n\n      if (isAlredy.length === 0) {\n        var relationNode = new Node('table', \"rl_\".concat(port1Name, \"Has\").concat(port2Name));\n        relationNode.addInPort(true, true, true, true, false, \"Id\", this.selectedRelation, this.diagramEngine, PropertyType.INT);\n        relationNode.addInPort(true, true, false, false, true, \"\".concat(port1Name, \"Id\"), this.selectedRelation, this.diagramEngine, PropertyType.INT);\n        relationNode.addInPort(true, true, false, false, true, \"\".concat(port2Name, \"Id\"), this.selectedRelation, this.diagramEngine, PropertyType.INT);\n        this.diagramEngine.recalculatePortsVisually();\n        return relationNode;\n      }\n\n      return null;\n    }\n  }, {\n    key: \"addRelationLink\",\n    value: function addRelationLink(node1, relationtNode, node2, port, port1Name, port2Name) {\n      var portLinks = this.getLinks();\n      var link = Object.keys(portLinks).filter(function (l) {\n        return portLinks[l].getTargetPort() === port;\n      });\n      this.diagramEngine.getDiagramModel().removeLink(link[0]);\n      var link1 = this.createLinkModel();\n      var link2 = this.createLinkModel();\n\n      if (!link1 || !link2) {} else {\n        link1.setSourcePort(node1.getInPorts().filter(function (p) {\n          return p.label === 'Id';\n        })[0]);\n        link1.setTargetPort(relationtNode.getInPorts().filter(function (p) {\n          return p.label === \"\".concat(port1Name, \"Id\");\n        })[0]);\n        link2.setSourcePort(relationtNode.getInPorts().filter(function (p) {\n          return p.label === \"\".concat(port2Name, \"Id\");\n        })[0]);\n        link2.setTargetPort(node2.getInPorts().filter(function (p) {\n          return p.label === 'Id';\n        })[0]);\n        this.diagramEngine.getDiagramModel().addAll(relationtNode, link1, link2);\n        this.selectedRelation = RelationType.none;\n      }\n\n      this.selectedRelation = RelationType.none;\n    }\n  }, {\n    key: \"canLinkToPort\",\n    value: function canLinkToPort(port) {\n      console.log('PORT', this.selectedRelation);\n\n      if (this.selectedRelation === RelationType.none) {\n        return true;\n      } else if (port instanceof Port) {\n        if (this.selectedRelation !== RelationType.M2M && (this.isPrimaryKey && port.isPrimaryKey || this.isPrimaryKey && port.isForeignKey || this.isForeignKey && port.isPrimaryKey)) {\n          var nodeToLink = port.getNode();\n          this.link(nodeToLink);\n        } else if (this.selectedRelation === RelationType.M2M && this.iterator === 1) {\n          if (this.firstM2M === 1) {\n            var _nodeToLink = port.getNode();\n\n            var relNode = this.createM2MNode(this.getNode().name, _nodeToLink.name);\n\n            if (relNode !== null) {\n              this.addRelationLink(this.getNode(), relNode, port.getNode(), port, this.getNode().name, _nodeToLink.name);\n              var app = this.diagramEngine.getDiagramModel().getNodes();\n              Object.keys(app).forEach(function (x) {\n                return app[x].updatePorts(RelationType.none);\n              });\n            } else {\n              var _app = this.diagramEngine.getDiagramModel().getNodes();\n\n              Object.keys(_app).forEach(function (x) {\n                return _app[x].updatePorts(RelationType.none);\n              });\n              this.selectedRelation = RelationType.none;\n              this.firstM2M = 0;\n              this.iterator = 0;\n            }\n          }\n\n          return false;\n        }\n\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"createLinkModel\",\n    value: function createLinkModel() {\n      var link = _get(_getPrototypeOf(Port.prototype), \"createLinkModel\", this).call(this);\n\n      if (this.selectedRelation === RelationType.O2O) {\n        return new Link(\"newLink\", RelationType.O2O);\n      } else if (this.selectedRelation === RelationType.O2M) {\n        return new Link(\"default\", RelationType.O2M);\n      } else if (this.selectedRelation === RelationType.M2M) {\n        return new Link(\"default\", RelationType.M2M);\n      } else if (this.selectedRelation === RelationType.M2MNoTable) {\n        return new Link(\"default\", RelationType.M2MNoTable);\n      } else {\n        return null;\n      }\n    }\n  }]);\n\n  return Port;\n}(PortModel);","map":{"version":3,"sources":["/home/dell/Dokumenty/sql-gen2/sql-gen2/sql-generator2/src/components/models/Port.ts"],"names":["_","PortModel","Link","PropertyType","Node","RelationType","Port","isNotNull","isAutoIncremented","isUnique","isPrimaryKey","isForeignKey","isInput","name","label","selectedRelation","diagramEngine","propertyType","id","in","links","iterator","firstM2M","object","engine","merge","isAutoincremented","nodeToLink","thisPortNode","getNode","ports","getInPorts","isThereAlreadyThatPort","filter","p","length","link","createLinkModel","setSourcePort","newPort","addInPort","INT","console","log","setTargetPort","getDiagramModel","addLink","recalculatePortsVisually","none","portLinks","getLinks","linkToDelete","Object","keys","l","getTargetPort","removeLink","port1Name","port2Name","nodes","getNodes","isAlredy","x","slice","relationNode","node1","relationtNode","node2","port","link1","link2","addAll","M2M","relNode","createM2MNode","addRelationLink","app","forEach","updatePorts","O2O","O2M","M2MNoTable"],"mappings":"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","sourcesContent":["import * as _ from \"lodash\";\nimport { PortModel, DiagramEngine, LinkModel, DefaultLinkModel, NodeModel, DiagramModel } from \"storm-react-diagrams\";\nimport { Link } from \"./Link\";\nimport { PropertyType } from \"./PropertyType\";\nimport { Node } from \"./Node\";\nimport { RelationType } from \"../../App2\";\n\nexport class Port extends PortModel {\n\n\tin: boolean;\n\tlabel: string;\n\tpropertyType: string;\n\tisPrimaryKey: boolean;\n\tisForeignKey: boolean;\n\tisNotNull: boolean;\n\tisUnique: boolean;\n\tisAutoIncremented: boolean;\n\tlinks: { [id: string]: Link };\n\titerator: number = 1;\n\tfirstM2M: number = 1;\n\tselectedRelation: RelationType;\n\t\n\tdiagramEngine: DiagramEngine;\n\n\tconstructor(isNotNull: boolean, isAutoIncremented: boolean, isUnique: boolean, isPrimaryKey: boolean, isForeignKey: boolean, isInput: boolean, name: string, label: string = null, selectedRelation: RelationType, diagramEngine?: DiagramEngine, propertyType?: PropertyType, id?: string) {\n\t\tsuper(name, \"with_prop\", id);\n\t\tthis.in = isInput;\n\t\tthis.label = label || name;\n\t\tthis.links = {};\n\t\tthis.propertyType = PropertyType[propertyType];\n\t\tthis.isForeignKey = isForeignKey;\n\t\tthis.isPrimaryKey = isPrimaryKey;\n\t\tthis.selectedRelation = selectedRelation;\n\t\tthis.diagramEngine = diagramEngine;\n\t\tthis.isAutoIncremented = isAutoIncremented;\n\t\tthis.isUnique = isUnique;\n\t\tthis.isNotNull = isNotNull;\n\n\t}\n\n\tupdatePortRelation(selectedRelation: RelationType) {\n\t\tthis.selectedRelation = selectedRelation;\n\t}\n\n\tdeSerialize(object: any, engine: DiagramEngine) {\n\t\tsuper.deSerialize(object, engine);\n\t\tthis.in = object.in;\n\t\tthis.label = object.label;\n\t}\n\n\tserialize() {\n\t\treturn _.merge(super.serialize(), {\n\t\t\tin: this.in,\n\t\t\tlabel: this.label,\n\t\t\tpropertyType: this.propertyType,\n\t\t\tisForeignKey: this.isForeignKey,\n\t\t\tisPrimaryKey: this.isPrimaryKey,\n\t\t\tisNotNull: this.isNotNull,\n\t\t\tisAutoincremented: this.isAutoIncremented,\n\t\t\tisUnique: this.isUnique\n\t\t});\n\t}\n\n\tinitialLink(nodeToLink: Node): LinkModel {\n\t\tlet thisPortNode = this.getNode() as Node;\n\t\tlet ports = nodeToLink.getInPorts();\n\t\tlet isThereAlreadyThatPort = ports.filter(p => p.label === `${thisPortNode.name}Id`).length;\n\t\tif (isThereAlreadyThatPort === 0) {\n\n\t\t\tlet link = this.createLinkModel();\n\t\t\tif (link !== null) {\n\t\t\t\tlink.setSourcePort(this)\n\t\t\t\tlet newPort = nodeToLink.addInPort(true,false, false, false, true, `${thisPortNode.name}Id`, this.selectedRelation, this.diagramEngine, PropertyType.INT);\n\t\t\t\tconsole.log('ports', this, newPort);\n\t\t\t\tlink.setTargetPort(newPort);\n\t\t\t\tthis.diagramEngine.getDiagramModel().addLink(link);\n\t\t\t\tthis.diagramEngine.recalculatePortsVisually();\n\t\t\t\tconsole.log('link', link);\n\n\t\t\t\tthis.selectedRelation = RelationType.none;\n\n\t\t\t}\n\n\t\t}\n\t\tthis.selectedRelation = RelationType.none;\n\n\t\treturn null;\n\t}\n\n\tlink(nodeToLink: Node): LinkModel {\n\n\t\tlet thisPortNode = this.getNode() as Node;\n\t\tlet ports = nodeToLink.getInPorts();\n\t\tlet isThereAlreadyThatPort = ports.filter(p => p.label === `${thisPortNode.name}Id`).length;\n\t\tif (isThereAlreadyThatPort === 0) {\n\t\t\tif (this.iterator === 1) {\n\t\t\t\tlet portLinks = this.getLinks() as { [s: string]: Link }; { }\n\t\t\t\tlet linkToDelete = Object.keys(portLinks).filter(l => portLinks[l].getTargetPort() === ports.filter(p => p.label === 'Id')[0]);\n\n\t\t\t\tthis.diagramEngine.getDiagramModel().removeLink(linkToDelete[0])\n\t\t\t}\n\n\n\t\t\tlet link = this.createLinkModel();\n\t\t\tif (link !== null) {\n\t\t\t\tlink.setSourcePort(this)\n\t\t\t\tlet newPort = nodeToLink.addInPort(true,false, false,false, true, `${thisPortNode.name}Id`, this.selectedRelation, this.diagramEngine, PropertyType.INT);\n\t\t\t\tconsole.log('ports', this, newPort);\n\t\t\t\tlink.setTargetPort(newPort);\n\t\t\t\tthis.diagramEngine.getDiagramModel().addLink(link);\n\t\t\t\tthis.diagramEngine.recalculatePortsVisually();\n\t\t\t\tconsole.log('link', link);\n\n\t\t\t\tthis.selectedRelation = RelationType.none;\n\n\t\t\t}\n\n\t\t}\n\t\tthis.selectedRelation = RelationType.none;\n\n\t\treturn null;\n\t}\n\n\tcreateM2MNode(port1Name: string, port2Name: string) {\n\t\tlet nodes = this.diagramEngine.getDiagramModel().getNodes() as { [s: string]: Node };\n\t\tlet isAlredy = Object.keys(nodes).filter(x => nodes[x].name.slice(3) === `${port1Name.slice(3, 8)}Has${port2Name}`);\n\n\n\t\tif (isAlredy.length === 0) {\n\t\t\tlet relationNode = new Node('table', `rl_${port1Name}Has${port2Name}`);\n\t\t\trelationNode.addInPort(true,true, true,true, false, `Id`, this.selectedRelation, this.diagramEngine, PropertyType.INT)\n\t\t\trelationNode.addInPort(true,true, false,false, true, `${port1Name}Id`, this.selectedRelation, this.diagramEngine, PropertyType.INT)\n\t\t\trelationNode.addInPort(true,true, false,false, true, `${port2Name}Id`, this.selectedRelation, this.diagramEngine, PropertyType.INT)\n\t\t\tthis.diagramEngine.recalculatePortsVisually();\n\n\t\t\treturn relationNode;\n\t\t}\n\n\t\treturn null;\n\t}\n\n\taddRelationLink(node1: Node, relationtNode: Node, node2: Node, port: Port, port1Name: string, port2Name: string) {\n\t\tlet portLinks = this.getLinks() as { [s: string]: Link };\n\n\t\tlet link = Object.keys(portLinks).filter(l => portLinks[l].getTargetPort() === port);\n\n\n\t\tthis.diagramEngine.getDiagramModel().removeLink(link[0])\n\n\n\t\tlet link1 = this.createLinkModel();\n\t\tlet link2 = this.createLinkModel();\n\t\tif (!link1 || !link2) {\n\t\t} else {\n\t\t\tlink1.setSourcePort(node1.getInPorts().filter(p => p.label === 'Id')[0])\n\t\t\tlink1.setTargetPort(relationtNode.getInPorts().filter(p => p.label === `${port1Name}Id`)[0])\n\t\t\tlink2.setSourcePort(relationtNode.getInPorts().filter(p => p.label === `${port2Name}Id`)[0])\n\t\t\tlink2.setTargetPort(node2.getInPorts().filter(p => p.label === 'Id')[0])\n\t\t\tthis.diagramEngine.getDiagramModel().addAll(relationtNode, link1, link2);\n\t\t\tthis.selectedRelation = RelationType.none;\n\t\t}\n\t\tthis.selectedRelation = RelationType.none;\n\n\n\t}\n\n\tcanLinkToPort(port: PortModel): boolean {\n\t\tconsole.log('PORT', this.selectedRelation);\n\t\tif (this.selectedRelation === RelationType.none) {\n\t\t\treturn true;\n\t\t} else\n\t\t\tif (port instanceof Port) {\n\n\t\t\t\tif (this.selectedRelation !== RelationType.M2M && (this.isPrimaryKey && port.isPrimaryKey || this.isPrimaryKey && port.isForeignKey || this.isForeignKey && port.isPrimaryKey)) {\n\t\t\t\t\tlet nodeToLink = port.getNode() as Node;\n\t\t\t\t\tthis.link(nodeToLink);\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\telse if (this.selectedRelation === RelationType.M2M && this.iterator === 1) {\n\t\t\t\t\tif (this.firstM2M === 1) {\n\t\t\t\t\t\tlet nodeToLink = port.getNode() as Node;\n\t\t\t\t\t\tlet relNode = this.createM2MNode((this.getNode() as Node).name, nodeToLink.name);\n\t\t\t\t\t\tif (relNode !== null) {\n\t\t\t\t\t\t\tthis.addRelationLink(this.getNode() as Node, relNode, port.getNode() as Node, port, (this.getNode() as Node).name, nodeToLink.name);\n\t\t\t\t\t\t\tlet app = this.diagramEngine.getDiagramModel().getNodes() as { [s: string]: Node };\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tObject.keys(app).forEach(x => app[x].updatePorts(RelationType.none));\n\t\t\t\t\t\t\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tlet app = this.diagramEngine.getDiagramModel().getNodes() as { [s: string]: Node };\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tObject.keys(app).forEach(x => app[x].updatePorts(RelationType.none));\n\t\t\t\t\t\t\tthis.selectedRelation = RelationType.none;\n\t\t\t\t\t\t\tthis.firstM2M = 0;\n\t\t\t\t\t\t\tthis.iterator = 0\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\treturn false;\n\n\n\t}\n\n\tcreateLinkModel(): LinkModel {\n\t\tlet link = super.createLinkModel();\n\t\tif (this.selectedRelation === RelationType.O2O) {\n\t\t\treturn new Link(\"newLink\", RelationType.O2O);\n\t\t} else if (this.selectedRelation === RelationType.O2M) {\n\t\t\treturn new Link(\"default\", RelationType.O2M);\n\t\t} else if (this.selectedRelation === RelationType.M2M) {\n\t\t\treturn new Link(\"default\", RelationType.M2M);\n\t\t} else if (this.selectedRelation === RelationType.M2MNoTable) {\n\t\t\treturn new Link(\"default\", RelationType.M2MNoTable);\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t\t \n\t}\n}"]},"metadata":{},"sourceType":"module"}