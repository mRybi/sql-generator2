{"ast":null,"code":"import _classCallCheck from \"/home/dell/Dokumenty/sql-gen2/sql-gen2/sql-generator2/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/dell/Dokumenty/sql-gen2/sql-gen2/sql-generator2/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/dell/Dokumenty/sql-gen2/sql-gen2/sql-generator2/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/dell/Dokumenty/sql-gen2/sql-gen2/sql-generator2/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/dell/Dokumenty/sql-gen2/sql-gen2/sql-generator2/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/dell/Dokumenty/sql-gen2/sql-gen2/sql-generator2/src/App2.tsx\";\nimport * as React from \"react\";\nimport * as _ from \"lodash\";\nimport { DefaultNodeModel, DiagramWidget } from \"storm-react-diagrams\";\nimport { TrayItemWidget } from \"./components/dragAndDrop/TrayItemWidget\";\nimport { TrayWidget } from \"./components/dragAndDrop/TrayWidget\";\nimport './dragAndDrop.scss';\n\nrequire(\"storm-react-diagrams/dist/style.min.css\");\n\nimport './App.css';\nimport { NodeInfo } from \"./components/nodeInfo/NodeInfo\";\n\n/** \n * @author Dylan Vorster\n */\nexport var App2 =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(App2, _React$Component);\n\n  function App2(props) {\n    _classCallCheck(this, App2);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(App2).call(this, props));\n  }\n\n  _createClass(App2, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      this.setState({\n        selectedNode: null\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this = this;\n\n      return React.createElement(\"div\", {\n        className: \"body\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"header\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38\n        },\n        __self: this\n      }, \"Create diagrams\")), React.createElement(\"div\", {\n        className: \"content\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40\n        },\n        __self: this\n      }, React.createElement(TrayWidget, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41\n        },\n        __self: this\n      }, React.createElement(TrayItemWidget, {\n        model: {\n          type: \"in\"\n        },\n        name: \"In Node\",\n        color: \"rgb(192,255,0)\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42\n        },\n        __self: this\n      }), React.createElement(TrayItemWidget, {\n        model: {\n          type: \"out\"\n        },\n        name: \"Out Node\",\n        color: \"rgb(0,192,255)\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"diagram-layer\",\n        onDrop: function onDrop(event) {\n          var data = JSON.parse(event.dataTransfer.getData(\"storm-diagram-node\"));\n\n          var nodesCount = _.keys(_this.props.app.getDiagramEngine().getDiagramModel().getNodes()).length;\n\n          var node = null;\n\n          if (data.type === \"in\") {\n            node = new DefaultNodeModel(\"Node \" + (nodesCount + 1), \"rgb(192,255,0)\");\n          } else {\n            node = new DefaultNodeModel(\"Node \" + (nodesCount + 1), \"rgb(0,192,255)\");\n          }\n\n          var points = _this.props.app.getDiagramEngine().getRelativeMousePoint(event);\n\n          node.x = points.x;\n          node.y = points.y;\n\n          _this.props.app.getDiagramEngine().getDiagramModel().addNode(node);\n\n          _this.forceUpdate();\n        },\n        onDragOver: function onDragOver(event) {\n          event.preventDefault();\n        },\n        onDoubleClick: function onDoubleClick(event) {\n          event.preventDefault();\n\n          _this.setState({\n            selectedNode: _this.props.app.getDiagramEngine().getDiagramModel().getSelectedItems()[0],\n            diagramModel: _this.props.app.getDiagramEngine().getDiagramModel()\n          });\n\n          console.log('XD', _this.state.selectedNode);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45\n        },\n        __self: this\n      }, React.createElement(DiagramWidget, {\n        className: \"srd-demo-canvas\",\n        diagramEngine: this.props.app.getDiagramEngine(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      })), this.state.selectedNode != null ? React.createElement(NodeInfo, {\n        selectedItem: this.state.selectedNode,\n        diagramModel: this.state.diagramModel,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }) : null));\n    }\n  }]);\n\n  return App2;\n}(React.Component);","map":{"version":3,"sources":["/home/dell/Dokumenty/sql-gen2/sql-gen2/sql-generator2/src/App2.tsx"],"names":["React","_","DefaultNodeModel","DiagramWidget","TrayItemWidget","TrayWidget","require","NodeInfo","App2","props","setState","selectedNode","type","event","data","JSON","parse","dataTransfer","getData","nodesCount","keys","app","getDiagramEngine","getDiagramModel","getNodes","length","node","points","getRelativeMousePoint","x","y","addNode","forceUpdate","preventDefault","getSelectedItems","diagramModel","console","log","state","Component"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport * as _ from \"lodash\";\nimport { DefaultNodeModel, DiagramWidget, BaseEntityType, BaseEntity, BaseModelListener, BaseModel, DiagramModel } from \"storm-react-diagrams\";\nimport { TrayItemWidget } from \"./components/dragAndDrop/TrayItemWidget\";\nimport { TrayWidget } from \"./components/dragAndDrop/TrayWidget\";\nimport { Application } from \"./components/dragAndDrop/Application\";\nimport './dragAndDrop.scss';\nrequire(\"storm-react-diagrams/dist/style.min.css\");\nimport './App.css';\nimport { NodeInfo } from \"./components/nodeInfo/NodeInfo\";\n\nexport interface BodyWidgetProps {\n\tapp: Application;\n}\n\nexport interface BodyWidgetState {\n\t// selectedNode: BaseModel<BaseEntity, BaseModelListener>[]; //DefaultNodeModel\n\tselectedNode: DefaultNodeModel;\n\tdiagramModel: DiagramModel;\n}\n\n/** \n * @author Dylan Vorster\n */\nexport class App2 extends React.Component<BodyWidgetProps, BodyWidgetState> {\n\tconstructor(props: BodyWidgetProps) {\n\t\tsuper(props);\n\t}\n\n\tcomponentWillMount(){\n\t\tthis.setState({selectedNode: null})\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"body\">\n\t\t\t\t<div className=\"header\">\n\t\t\t\t\t<div className=\"title\">Create diagrams</div>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"content\">\n\t\t\t\t\t<TrayWidget>\n\t\t\t\t\t\t<TrayItemWidget model={{ type: \"in\" }} name=\"In Node\" color=\"rgb(192,255,0)\" />\n\t\t\t\t\t\t<TrayItemWidget model={{ type: \"out\" }} name=\"Out Node\" color=\"rgb(0,192,255)\" />\n\t\t\t\t\t</TrayWidget>\n\t\t\t\t\t<div\n\t\t\t\t\t\tclassName=\"diagram-layer\"\n\t\t\t\t\t\tonDrop={event => {\n\t\t\t\t\t\t\tvar data = JSON.parse(event.dataTransfer.getData(\"storm-diagram-node\"));\n\t\t\t\t\t\t\tvar nodesCount = _.keys(\n\t\t\t\t\t\t\t\tthis.props.app\n\t\t\t\t\t\t\t\t\t.getDiagramEngine()\n\t\t\t\t\t\t\t\t\t.getDiagramModel()\n\t\t\t\t\t\t\t\t\t.getNodes()\n\t\t\t\t\t\t\t).length;\n\n\t\t\t\t\t\t\tvar node = null;\n\t\t\t\t\t\t\tif (data.type === \"in\") {\n\t\t\t\t\t\t\t\tnode = new DefaultNodeModel(\"Node \" + (nodesCount + 1), \"rgb(192,255,0)\");\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tnode = new DefaultNodeModel(\"Node \" + (nodesCount + 1), \"rgb(0,192,255)\");\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tvar points = this.props.app.getDiagramEngine().getRelativeMousePoint(event);\n\t\t\t\t\t\t\tnode.x = points.x;\n\t\t\t\t\t\t\tnode.y = points.y;\n\t\t\t\t\t\t\tthis.props.app\n\t\t\t\t\t\t\t\t.getDiagramEngine()\n\t\t\t\t\t\t\t\t.getDiagramModel()\n\t\t\t\t\t\t\t\t.addNode(node);\n\t\t\t\t\t\t\tthis.forceUpdate();\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tonDragOver={event => {\n\t\t\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tonDoubleClick={event => {\n\t\t\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tthis.setState({\n\t\t\t\t\t\t\t\tselectedNode: this.props.app\n\t\t\t\t\t\t\t\t.getDiagramEngine()\n\t\t\t\t\t\t\t\t.getDiagramModel()\n\t\t\t\t\t\t\t\t.getSelectedItems()[0] as DefaultNodeModel,\n\t\t\t\t\t\t\t\tdiagramModel: this.props.app.getDiagramEngine().getDiagramModel()\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tconsole.log('XD',this.state.selectedNode);\n\t\t\t\t\t\t}}\n\t\t\t\t\t>\n\t\t\t\t\t\t<DiagramWidget className=\"srd-demo-canvas\" diagramEngine={this.props.app.getDiagramEngine()} />\n\t\t\t\t\t\t\n\t\t\t\t\t</div>\n\t\t\t\t\t{ this.state.selectedNode != null ? <NodeInfo selectedItem={this.state.selectedNode} diagramModel={this.state.diagramModel} /> : null}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}"]},"metadata":{},"sourceType":"module"}