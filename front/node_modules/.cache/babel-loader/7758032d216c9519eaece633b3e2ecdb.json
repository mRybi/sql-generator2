{"ast":null,"code":"import _createClass from \"/home/dell/Dokumenty/sql-gen2/sql-gen2/sql-generator2/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/dell/Dokumenty/sql-gen2/sql-gen2/sql-generator2/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/dell/Dokumenty/sql-gen2/sql-gen2/sql-generator2/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/dell/Dokumenty/sql-gen2/sql-gen2/sql-generator2/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _classCallCheck from \"/home/dell/Dokumenty/sql-gen2/sql-gen2/sql-generator2/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nvar _jsxFileName = \"/home/dell/Dokumenty/sql-gen2/sql-gen2/sql-generator2/src/components/nodeInfo/NodeInfo.tsx\";\nimport './nodeItems.scss';\nimport * as React from \"react\";\nimport { NodeProperty } from './nodeProperty/NodeProperty';\n\nvar OwnProps = function OwnProps() {\n  _classCallCheck(this, OwnProps);\n\n  this.selectedItem = void 0;\n  this.diagramModel = void 0;\n  this.selectedLink = void 0;\n};\n\nvar State = function State() {\n  _classCallCheck(this, State);\n\n  this.updatedItem = void 0;\n  this.name = void 0;\n  this.showInput = void 0;\n  this.showInputDelete = void 0;\n  this.showInputColor = void 0;\n  this.portState = void 0;\n  this.newPortName = void 0;\n  this.portToRemove = void 0;\n  this.portLabelToRemove = void 0;\n  this.color = void 0;\n};\n\nexport var NodeInfo =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(NodeInfo, _React$Component);\n\n  function NodeInfo(props) {\n    _classCallCheck(this, NodeInfo);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(NodeInfo).call(this, props));\n  }\n\n  _createClass(NodeInfo, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      this.setState({\n        updatedItem: this.props.selectedItem,\n        name: this.props.selectedItem.name,\n        showInput: false,\n        showInputDelete: false,\n        showInputColor: false,\n        portState: 'out',\n        newPortName: 'out',\n        portToRemove: null,\n        portLabelToRemove: null,\n        color: 'green'\n      });\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps) {\n      console.log('both', this.props, nextProps);\n\n      if (nextProps != this.props) {\n        this.setState({\n          updatedItem: nextProps.selectedItem,\n          name: nextProps.selectedItem.name\n        });\n        this.forceUpdate();\n      }\n    }\n  }, {\n    key: \"changeName1\",\n    value: function changeName1(newValue) {\n      var updatedItem = this.state.updatedItem;\n      updatedItem.name = newValue;\n      this.setState({\n        updatedItem: updatedItem\n      });\n    }\n  }, {\n    key: \"addPort\",\n    value: function addPort() {\n      if (this.state.portState == 'out') {\n        this.state.updatedItem.addOutPort(this.state.newPortName);\n      } else {\n        this.state.updatedItem.addInPort(this.state.newPortName);\n      }\n    }\n  }, {\n    key: \"switchViewUpdateValue\",\n    value: function switchViewUpdateValue() {\n      this.addPort();\n      this.setState({\n        showInput: false\n      });\n    }\n  }, {\n    key: \"cancelAddingPort\",\n    value: function cancelAddingPort() {\n      this.setState({\n        showInput: false,\n        showInputDelete: false,\n        showInputColor: false\n      });\n    }\n  }, {\n    key: \"handleChange\",\n    value: function handleChange(event) {\n      event.persist();\n      this.setState({\n        newPortName: event.target.value\n      });\n    }\n  }, {\n    key: \"handleChangePort\",\n    value: function handleChangePort(event) {\n      event.persist();\n      this.setState({\n        portState: event.target.value\n      });\n    }\n  }, {\n    key: \"removePort\",\n    value: function removePort() {\n      if (this.state.portToRemove != null) {\n        var portToDelete = this.state.updatedItem.getPort(this.state.portToRemove);\n        this.state.updatedItem.removePort(portToDelete);\n        this.setState({\n          portToRemove: null\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this = this;\n\n      // console.log('selected link', this.props.selectedLink);\n      // let links = this.props.diagramModel.getLinks();\n      // console.log(links);\n      // let liksIDs = Object.keys(links).map((key) => {\n      //     return key\n      // });\n      // let testLink = this.props.diagramModel.getLink(liksIDs[0]);\n      // (testLink as DefaultLinkModel).addLabel(\"Hello World!\");\n      var colors = ['pink', 'red', 'green', 'blue', 'orange', 'brown'];\n      var colorsRgb = ['rgb(255,0,185)', 'rgb(255,0,0)', 'rgb(0,250,14)', 'rgb(0, 250, 253)', 'rgb(239, 137, 74)', 'rgb(125, 73, 64)'];\n      var allPorts = this.state.updatedItem.ports;\n      console.log(allPorts);\n      this.state.updatedItem;\n\n      if (allPorts != null) {\n        var aaa = Object.values(allPorts).map(function (value) {\n          return value.label;\n        });\n        console.log(aaa);\n        var portsIds = Object.keys(allPorts).map(function (key) {\n          return key;\n        });\n\n        var makeItem = function makeItem(x) {\n          return React.createElement(\"option\", {\n            key: x,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 144\n            },\n            __self: this\n          }, x);\n        };\n\n        console.log('selected node', this.props.selectedItem);\n        if (this.state.updatedItem == null) return 'Loading...';\n        return React.createElement(\"div\", {\n          className: \"trayBottom\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 150\n          },\n          __self: this\n        }, React.createElement(NodeProperty, {\n          value: this.state.name,\n          acceptChangeProperty: this.changeName1.bind(this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 152\n          },\n          __self: this\n        }), React.createElement(\"div\", {\n          onDoubleClick: function onDoubleClick() {\n            return _this.showInput();\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 153\n          },\n          __self: this\n        }, this.state.showInput ? React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 155\n          },\n          __self: this\n        }, React.createElement(\"input\", {\n          className: \"tray-bottom-item\",\n          type: \"text\",\n          onChange: this.handleChange.bind(this),\n          value: this.state.newPortName,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 156\n          },\n          __self: this\n        }), React.createElement(\"input\", {\n          className: \"tray-bottom-item\",\n          type: \"text\",\n          onChange: this.handleChangePort.bind(this),\n          value: this.state.portState,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 157\n          },\n          __self: this\n        }), React.createElement(\"button\", {\n          className: \"tray-bottom-item\",\n          onClick: this.switchViewUpdateValue.bind(this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 158\n          },\n          __self: this\n        }, \"Add\"), React.createElement(\"button\", {\n          className: \"tray-bottom-item\",\n          onClick: this.cancelAddingPort.bind(this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 159\n          },\n          __self: this\n        }, \"Cancel\")) : React.createElement(\"h1\", {\n          className: \"tray-bottom-item\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 160\n          },\n          __self: this\n        }, 'Add Property')), React.createElement(\"div\", {\n          onDoubleClick: function onDoubleClick() {\n            return _this.showInputDelete();\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 162\n          },\n          __self: this\n        }, this.state.showInputDelete ? React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 164\n          },\n          __self: this\n        }, React.createElement(\"select\", {\n          className: \"tray-bottom-item\",\n          onChange: function onChange(e) {\n            return _this.selectPort(e);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 165\n          },\n          __self: this\n        }, aaa.map(makeItem)), React.createElement(\"button\", {\n          className: \"tray-bottom-item\",\n          onClick: function onClick() {\n            return _this.removePort();\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 166\n          },\n          __self: this\n        }, \"Delete\"), React.createElement(\"button\", {\n          className: \"tray-bottom-item\",\n          onClick: this.cancelAddingPort.bind(this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 167\n          },\n          __self: this\n        }, \"Cancel\")) : React.createElement(\"h1\", {\n          className: \"tray-bottom-item\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 169\n          },\n          __self: this\n        }, 'Delete Property')), React.createElement(\"div\", {\n          onDoubleClick: function onDoubleClick() {\n            return _this.showInputColor();\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 171\n          },\n          __self: this\n        }, this.state.showInputColor ? React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 173\n          },\n          __self: this\n        }, React.createElement(\"select\", {\n          className: \"tray-bottom-item\",\n          onChange: function onChange(e) {\n            return _this.selectColor(e);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 174\n          },\n          __self: this\n        }, colors.map(makeItem)), React.createElement(\"button\", {\n          className: \"tray-bottom-item\",\n          onClick: function onClick() {\n            return _this.changeColor();\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 175\n          },\n          __self: this\n        }, \"Change color\"), React.createElement(\"button\", {\n          className: \"tray-bottom-item\",\n          onClick: this.cancelAddingPort.bind(this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 176\n          },\n          __self: this\n        }, \"Cancel\")) : React.createElement(\"h1\", {\n          className: \"tray-bottom-item\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 178\n          },\n          __self: this\n        }, 'Change Color')), React.createElement(\"select\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 181\n          },\n          __self: this\n        }, React.createElement(\"option\", {\n          value: \"grapefruit\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 182\n          },\n          __self: this\n        }, \"Grapefruit\"), React.createElement(\"option\", {\n          value: \"lime\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 183\n          },\n          __self: this\n        }, \"Lime\"), React.createElement(\"option\", {\n          selected: true,\n          value: \"coconut\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 184\n          },\n          __self: this\n        }, \"Coconut\"), React.createElement(\"option\", {\n          value: \"mango\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 185\n          },\n          __self: this\n        }, \"Mango\")));\n      } else return null;\n    }\n  }, {\n    key: \"changeColor\",\n    value: function changeColor() {\n      if (this.state.color != null) {\n        this.state.updatedItem.color = this.state.color;\n        this.setState({\n          color: null\n        });\n      }\n    }\n  }, {\n    key: \"selectColor\",\n    value: function selectColor(e) {\n      e.persist();\n      e.preventDefault();\n      var colors = ['red', 'pink', 'green', 'blue', 'orange', 'brown'];\n      var colorsRgb = ['rgb(255,0,0)', 'rgb(255,0,185)', 'rgb(0,250,14)', 'rgb(0, 250, 253)', 'rgb(239, 137, 74)', 'rgb(125, 73, 64)'];\n      var index = colors.indexOf(e._targetInst.child.key);\n      var xd = this.state.updatedItem;\n      xd.color = colorsRgb[index];\n      console.log('color', index, e._targetInst.child.key);\n      this.setState({\n        color: colorsRgb[index]\n      });\n    }\n  }, {\n    key: \"selectPort\",\n    value: function selectPort(e) {\n      console.log('JEBANY KEY', e._targetInst);\n      e.persist();\n      console.log('select port', e);\n      var ports = this.state.updatedItem.ports;\n      console.log('ports', ports);\n      var names = Object.values(ports).map(function (value) {\n        return value.label;\n      });\n      console.log('names', names);\n      var portsIds = Object.keys(ports).map(function (key) {\n        return key;\n      });\n      console.log('values', portsIds);\n\n      if (e.lastEffect != null && e.lastEffect != undefined) {\n        var indexOfGuyToDelete = names.indexOf(e.lastEffect.key);\n        console.log('index', indexOfGuyToDelete);\n        this.setState({\n          portLabelToRemove: e.lastEffect.key,\n          portToRemove: portsIds[indexOfGuyToDelete]\n        });\n      }\n    }\n  }, {\n    key: \"showInput\",\n    value: function showInput() {\n      this.setState({\n        showInput: true\n      });\n    }\n  }, {\n    key: \"showInputDelete\",\n    value: function showInputDelete() {\n      this.setState({\n        showInputDelete: true\n      });\n    }\n  }, {\n    key: \"showInputColor\",\n    value: function showInputColor() {\n      this.setState({\n        showInputColor: true\n      });\n    }\n  }]);\n\n  return NodeInfo;\n}(React.Component);","map":{"version":3,"sources":["/home/dell/Dokumenty/sql-gen2/sql-gen2/sql-generator2/src/components/nodeInfo/NodeInfo.tsx"],"names":["React","NodeProperty","OwnProps","selectedItem","diagramModel","selectedLink","State","updatedItem","name","showInput","showInputDelete","showInputColor","portState","newPortName","portToRemove","portLabelToRemove","color","NodeInfo","props","setState","nextProps","console","log","forceUpdate","newValue","state","addOutPort","addInPort","addPort","event","persist","target","value","portToDelete","getPort","removePort","colors","colorsRgb","allPorts","ports","aaa","Object","values","map","label","portsIds","keys","key","makeItem","x","changeName1","bind","handleChange","handleChangePort","switchViewUpdateValue","cancelAddingPort","e","selectPort","selectColor","changeColor","preventDefault","index","indexOf","_targetInst","child","xd","names","lastEffect","undefined","indexOfGuyToDelete","Component"],"mappings":"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","sourcesContent":["import './nodeItems.scss';\nimport * as React from \"react\";\nimport { DefaultNodeModel, DefaultPortModel, PortModel, DiagramModel, LabelModel, DefaultLinkModel } from 'storm-react-diagrams';\nimport { NodeProperty } from './nodeProperty/NodeProperty';\nimport { number } from 'prop-types';\nimport { randomBytes } from 'crypto';\n\nclass OwnProps {\n    selectedItem: DefaultNodeModel\n    diagramModel: DiagramModel\n    selectedLink: DefaultLinkModel\n}\n\nclass State {\n    updatedItem: DefaultNodeModel\n    name: string;\n    showInput: boolean;\n    showInputDelete: boolean;\n    showInputColor: boolean;\n    portState: string;\n    newPortName: string;\n    portToRemove: string;\n    portLabelToRemove: string;\n    color: string\n}\n\ntype Props = OwnProps;\n\nexport class NodeInfo extends React.Component<Props, State> {\n    constructor(props: Props) {\n        super(props);\n    }\n\n    componentWillMount() {\n        this.setState({\n            updatedItem: this.props.selectedItem,\n            name: this.props.selectedItem.name,\n            showInput: false,\n            showInputDelete: false,\n            showInputColor: false,\n            portState: 'out',\n            newPortName: 'out',\n            portToRemove: null,\n            portLabelToRemove: null,\n            color: 'green'\n        })\n    }\n\n    componentWillReceiveProps(nextProps: Props) {\n        console.log('both', this.props, nextProps);\n        if (nextProps != this.props) {\n            this.setState({\n                updatedItem: nextProps.selectedItem,\n                name: nextProps.selectedItem.name\n            })\n            this.forceUpdate();\n        }\n    }\n\n    changeName1(newValue: string): void {\n        let updatedItem: DefaultNodeModel = this.state.updatedItem;\n        updatedItem.name = newValue;\n        this.setState({ updatedItem: updatedItem });\n    }\n\n    addPort(): void {\n        if (this.state.portState == 'out') {\n            this.state.updatedItem.addOutPort(this.state.newPortName);\n        } else {\n            this.state.updatedItem.addInPort(this.state.newPortName);\n        }\n    }\n\n    switchViewUpdateValue(): void {\n        this.addPort();\n        this.setState({ showInput: false });\n    }\n\n    cancelAddingPort(): void {\n        this.setState({ showInput: false, showInputDelete: false , showInputColor: false});\n    }\n\n    handleChange(event: React.ChangeEvent<HTMLInputElement>) {\n        event.persist()\n\n        this.setState({ newPortName: event.target.value });\n    }\n\n    handleChangePort(event: React.ChangeEvent<HTMLInputElement>) {\n        event.persist()\n\n        this.setState({ portState: event.target.value });\n    }\n\n\n\n    removePort() {\n        if (this.state.portToRemove != null) {\n            let portToDelete: PortModel = this.state.updatedItem.getPort(this.state.portToRemove);\n\n            this.state.updatedItem.removePort(portToDelete);\n            this.setState({ portToRemove: null })\n        }\n\n    }\n\n    render() {\n        // console.log('selected link', this.props.selectedLink);\n        // let links = this.props.diagramModel.getLinks();\n        // console.log(links);\n        // let liksIDs = Object.keys(links).map((key) => {\n        //     return key\n        // });\n\n        // let testLink = this.props.diagramModel.getLink(liksIDs[0]);\n        // (testLink as DefaultLinkModel).addLabel(\"Hello World!\");\n\n\n        /////// Colors/////////////////// red pink green blue orange brown\n        let colors: string[] = ['pink','red', 'green', 'blue', 'orange', 'brown']\n        let colorsRgb: string[] = ['rgb(255,0,185)','rgb(255,0,0)',  'rgb(0,250,14)', 'rgb(0, 250, 253)', 'rgb(239, 137, 74)', 'rgb(125, 73, 64)']\n\n\n\n\n        let allPorts: { [S: string]: DefaultPortModel } = this.state.updatedItem.ports;\n        console.log(allPorts);\n\n        this.state.updatedItem\n        if (allPorts != null) {\n            let aaa = Object.values(allPorts).map(value => {\n                return value.label;\n            });\n\n            console.log(aaa);\n\n\n\n            let portsIds = Object.keys(allPorts).map((key) => {\n                return key\n            });\n\n            let makeItem = function (x: any) {\n                return <option key={x}>{x}</option>;\n            }\n\n            console.log('selected node', this.props.selectedItem)\n            if (this.state.updatedItem == null) return 'Loading...';\n            return (\n                <div className=\"trayBottom\">\n\n                    <NodeProperty value={this.state.name} acceptChangeProperty={this.changeName1.bind(this)} />\n                    <div onDoubleClick={() => this.showInput()}>\n                        {this.state.showInput ?\n                            <div>\n                                <input className=\"tray-bottom-item\" type=\"text\" onChange={this.handleChange.bind(this)} value={this.state.newPortName}></input>\n                                <input className=\"tray-bottom-item\" type=\"text\" onChange={this.handleChangePort.bind(this)} value={this.state.portState}></input>\n                                <button className=\"tray-bottom-item\" onClick={this.switchViewUpdateValue.bind(this)}>Add</button>\n                                <button className=\"tray-bottom-item\" onClick={this.cancelAddingPort.bind(this)}>Cancel</button>\n                            </div> : <h1 className=\"tray-bottom-item\">{'Add Property'}</h1>}\n                    </div>\n                    <div onDoubleClick={() => this.showInputDelete()}>\n                        {this.state.showInputDelete ?\n                            <div>\n                                <select className=\"tray-bottom-item\" onChange={(e) => this.selectPort(e)}>{aaa.map(makeItem)}</select>\n                                <button  className=\"tray-bottom-item\" onClick={() => this.removePort()}>Delete</button>\n                                <button  className=\"tray-bottom-item\" onClick={this.cancelAddingPort.bind(this)}>Cancel</button>\n\n                            </div>: <h1 className=\"tray-bottom-item\">{'Delete Property'}</h1>}\n                    </div>\n                    <div onDoubleClick={() => this.showInputColor()}>\n                        {this.state.showInputColor ?\n                            <div>\n                                <select className=\"tray-bottom-item\" onChange={(e) => this.selectColor(e)}>{colors.map(makeItem)}</select>\n                                <button  className=\"tray-bottom-item\" onClick={() => this.changeColor()}>Change color</button>\n                                <button  className=\"tray-bottom-item\" onClick={this.cancelAddingPort.bind(this)}>Cancel</button>\n\n                            </div>: <h1 className=\"tray-bottom-item\">{'Change Color'}</h1>}\n                    </div>\n\n                    <select>\n  <option value=\"grapefruit\">Grapefruit</option>\n  <option value=\"lime\">Lime</option>\n  <option selected value=\"coconut\">Coconut</option>\n  <option value=\"mango\">Mango</option>\n</select>\n\n                </div>\n\n\n            );\n\n        }\n        else return null;\n\n    }\n    changeColor(): void {\n        if (this.state.color != null) {\n            \n            this.state.updatedItem.color = this.state.color;\n            this.setState({ color: null })\n        }\n    }\n\n    selectColor(e: any): void {\n        e.persist();\n        e.preventDefault();\n        let colors: string[] = ['red', 'pink', 'green', 'blue', 'orange', 'brown'];\n        let colorsRgb: string[] = ['rgb(255,0,0)', 'rgb(255,0,185)', 'rgb(0,250,14)', 'rgb(0, 250, 253)', 'rgb(239, 137, 74)', 'rgb(125, 73, 64)'];\n        let index = colors.indexOf(e._targetInst.child.key);\n        let xd = this.state.updatedItem;\n        xd.color = colorsRgb[index];\n        console.log('color',index, e._targetInst.child.key)\n        this.setState({\n            color: colorsRgb[index]\n        })\n\n    }\n\n    selectPort(e: any): void {\n        console.log('JEBANY KEY',e._targetInst);\n        e.persist()\n        console.log('select port', e);\n        let ports: { [S: string]: DefaultPortModel } = this.state.updatedItem.ports;\n        console.log('ports', ports);\n\n        let names = Object.values(ports).map(value => {\n            return value.label\n        })\n        console.log('names', names);\n        let portsIds = Object.keys(ports).map((key) => {\n            return key\n        });\n        console.log('values', portsIds);\n\n        if (e.lastEffect != null && e.lastEffect != undefined) {\n            let indexOfGuyToDelete = names.indexOf(e.lastEffect.key);\n            console.log('index', indexOfGuyToDelete)\n            this.setState({\n                portLabelToRemove: e.lastEffect.key,\n                portToRemove: portsIds[indexOfGuyToDelete] as string\n            });\n        }\n\n    }\n\n    showInput(): void {\n        this.setState({\n            showInput: true\n        })\n    }\n\n    showInputDelete(): void {\n        this.setState({\n            showInputDelete: true\n        })\n    }\n\n    showInputColor(): void {\n\n        this.setState({\n            showInputColor: true,\n        })\n    }\n\n\n}"]},"metadata":{},"sourceType":"module"}