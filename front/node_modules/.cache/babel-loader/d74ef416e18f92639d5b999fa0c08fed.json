{"ast":null,"code":"import _classCallCheck from \"/home/dell/Dokumenty/sql-gen2/sql-gen2/sql-generator2/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/dell/Dokumenty/sql-gen2/sql-gen2/sql-generator2/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport * as SRD from \"storm-react-diagrams\";\nimport { NodeFactory } from \"../factories/NodeFactory\";\nimport { PortLabelFactory } from \"../factories/PortLabelFactory\";\nimport { Node } from \"../models/Node\";\nimport { PropertyType } from \"../models/PropertyType\";\nimport { CustomLabelFactory } from \"../factories/CustomLabelFactory\";\nimport { RelationType } from \"../../App2\";\nimport { DefaultLinkFactory } from \"../factories/DefaultLinkFactory\";\nexport var Application =\n/*#__PURE__*/\nfunction () {\n  function Application() {\n    _classCallCheck(this, Application);\n\n    this.activeModel = void 0;\n    this.diagramEngine = void 0;\n    this.diagramEngine = new SRD.DiagramEngine();\n    this.diagramEngine.installDefaultFactories();\n    this.diagramEngine.registerNodeFactory(new NodeFactory());\n    this.diagramEngine.registerPortFactory(new PortLabelFactory());\n    this.diagramEngine.registerLinkFactory(new DefaultLinkFactory());\n    this.diagramEngine.registerNodeFactory(new CustomLabelFactory());\n    this.newModel();\n  }\n\n  _createClass(Application, [{\n    key: \"newModel\",\n    value: function newModel() {\n      this.activeModel = new SRD.DiagramModel();\n      this.diagramEngine.setDiagramModel(this.activeModel);\n      console.log('MODEL JSON', JSON.stringify(this.activeModel.serializeDiagram(), null, 2)); //3-A) create a default node\n\n      var node1 = new Node(\"table\", \"Node1\", \"rgb(0,192,255)\");\n      var port = node1.addInPort(true, true, true, true, false, \"Id\", RelationType.O2O, this.diagramEngine, PropertyType.INT);\n      node1.setPosition(100, 100); //3-B) create another default node\n\n      var node2 = new Node(\"table\", \"Node2\", \"rgb(0,192,255)\");\n      var port2 = node2.addInPort(true, true, true, true, false, \"Id\", RelationType.O2O, this.diagramEngine, PropertyType.INT);\n      node2.setPosition(400, 100); // link the ports\n\n      var link1 = port.initialLink(node2);\n      this.activeModel.addAll(node1, node2, link1);\n      this.diagramEngine.recalculatePortsVisually();\n    }\n  }, {\n    key: \"getActiveDiagram\",\n    value: function getActiveDiagram() {\n      return this.activeModel;\n    }\n  }, {\n    key: \"getDiagramEngine\",\n    value: function getDiagramEngine() {\n      return this.diagramEngine;\n    }\n  }]);\n\n  return Application;\n}();","map":{"version":3,"sources":["/home/dell/Dokumenty/sql-gen2/sql-gen2/sql-generator2/src/components/dragAndDrop/Application.ts"],"names":["SRD","NodeFactory","PortLabelFactory","Node","PropertyType","CustomLabelFactory","RelationType","DefaultLinkFactory","Application","activeModel","diagramEngine","DiagramEngine","installDefaultFactories","registerNodeFactory","registerPortFactory","registerLinkFactory","newModel","DiagramModel","setDiagramModel","console","log","JSON","stringify","serializeDiagram","node1","port","addInPort","O2O","INT","setPosition","node2","port2","link1","initialLink","addAll","recalculatePortsVisually"],"mappings":";;AAAA,OAAO,KAAKA,GAAZ,MAAqB,sBAArB;AACA,SAASC,WAAT,QAA4B,0BAA5B;AACA,SAASC,gBAAT,QAAiC,+BAAjC;AACA,SAASC,IAAT,QAAqB,gBAArB;AACA,SAASC,YAAT,QAA6B,wBAA7B;AACA,SAASC,kBAAT,QAAmC,iCAAnC;AACA,SAASC,YAAT,QAA6B,YAA7B;AACA,SAASC,kBAAT,QAAmC,iCAAnC;AAGA,WAAaC,WAAb;AAAA;AAAA;AAIC,yBAAc;AAAA;;AAAA,SAHJC,WAGI;AAAA,SAFJC,aAEI;AACb,SAAKA,aAAL,GAAqB,IAAIV,GAAG,CAACW,aAAR,EAArB;AACA,SAAKD,aAAL,CAAmBE,uBAAnB;AAEA,SAAKF,aAAL,CAAmBG,mBAAnB,CAAuC,IAAIZ,WAAJ,EAAvC;AACA,SAAKS,aAAL,CAAmBI,mBAAnB,CAAuC,IAAIZ,gBAAJ,EAAvC;AACA,SAAKQ,aAAL,CAAmBK,mBAAnB,CAAuC,IAAIR,kBAAJ,EAAvC;AAEA,SAAKG,aAAL,CAAmBG,mBAAnB,CAAuC,IAAIR,kBAAJ,EAAvC;AAEA,SAAKW,QAAL;AACA;;AAfF;AAAA;AAAA,+BAiBmB;AACjB,WAAKP,WAAL,GAAmB,IAAIT,GAAG,CAACiB,YAAR,EAAnB;AACA,WAAKP,aAAL,CAAmBQ,eAAnB,CAAmC,KAAKT,WAAxC;AACAU,MAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BC,IAAI,CAACC,SAAL,CAAe,KAAKb,WAAL,CAAiBc,gBAAjB,EAAf,EAAoD,IAApD,EAA0D,CAA1D,CAA1B,EAHiB,CAIjB;;AACA,UAAIC,KAAK,GAAG,IAAIrB,IAAJ,CAAS,OAAT,EAAiB,OAAjB,EAA0B,gBAA1B,CAAZ;AACA,UAAIsB,IAAI,GAAGD,KAAK,CAACE,SAAN,CAAgB,IAAhB,EAAsB,IAAtB,EAA4B,IAA5B,EAAkC,IAAlC,EAAwC,KAAxC,EAA+C,IAA/C,EAAqDpB,YAAY,CAACqB,GAAlE,EAAuE,KAAKjB,aAA5E,EAA2FN,YAAY,CAACwB,GAAxG,CAAX;AACAJ,MAAAA,KAAK,CAACK,WAAN,CAAkB,GAAlB,EAAuB,GAAvB,EAPiB,CASjB;;AACA,UAAIC,KAAK,GAAG,IAAI3B,IAAJ,CAAS,OAAT,EAAkB,OAAlB,EAA2B,gBAA3B,CAAZ;AACA,UAAI4B,KAAK,GAAGD,KAAK,CAACJ,SAAN,CAAgB,IAAhB,EAAsB,IAAtB,EAA4B,IAA5B,EAAkC,IAAlC,EAAwC,KAAxC,EAA8C,IAA9C,EAAoDpB,YAAY,CAACqB,GAAjE,EAAqE,KAAKjB,aAA1E,EAAyFN,YAAY,CAACwB,GAAtG,CAAZ;AACAE,MAAAA,KAAK,CAACD,WAAN,CAAkB,GAAlB,EAAuB,GAAvB,EAZiB,CAcjB;;AACA,UAAIG,KAAK,GAAGP,IAAI,CAACQ,WAAL,CAAiBH,KAAjB,CAAZ;AAEA,WAAKrB,WAAL,CAAiByB,MAAjB,CAAwBV,KAAxB,EAA+BM,KAA/B,EAAsCE,KAAtC;AACA,WAAKtB,aAAL,CAAmByB,wBAAnB;AAEA;AArCF;AAAA;AAAA,uCAuC6C;AAC3C,aAAO,KAAK1B,WAAZ;AACA;AAzCF;AAAA;AAAA,uCA2C8C;AAC5C,aAAO,KAAKC,aAAZ;AACA;AA7CF;;AAAA;AAAA","sourcesContent":["import * as SRD from \"storm-react-diagrams\";\nimport { NodeFactory } from \"../factories/NodeFactory\";\nimport { PortLabelFactory } from \"../factories/PortLabelFactory\";\nimport { Node } from \"../models/Node\";\nimport { PropertyType } from \"../models/PropertyType\";\nimport { CustomLabelFactory } from \"../factories/CustomLabelFactory\";\nimport { RelationType } from \"../../App2\";\nimport { DefaultLinkFactory } from \"../factories/DefaultLinkFactory\";\n\n\nexport class Application {\n\tprotected activeModel: SRD.DiagramModel;\n\tprotected diagramEngine: SRD.DiagramEngine;\n\n\tconstructor() {\n\t\tthis.diagramEngine = new SRD.DiagramEngine();\n\t\tthis.diagramEngine.installDefaultFactories(); \n\t\t\n\t\tthis.diagramEngine.registerNodeFactory(new NodeFactory());\n\t\tthis.diagramEngine.registerPortFactory(new PortLabelFactory());\n\t\tthis.diagramEngine.registerLinkFactory(new DefaultLinkFactory());\n\n\t\tthis.diagramEngine.registerNodeFactory(new CustomLabelFactory());\n\n\t\tthis.newModel();\n\t}\n\n\tpublic newModel() {\n\t\tthis.activeModel = new SRD.DiagramModel();\n\t\tthis.diagramEngine.setDiagramModel(this.activeModel);\n\t\tconsole.log('MODEL JSON', JSON.stringify(this.activeModel.serializeDiagram(), null, 2))\n\t\t//3-A) create a default node\n\t\tvar node1 = new Node(\"table\",\"Node1\", \"rgb(0,192,255)\");\n\t\tlet port = node1.addInPort(true, true, true, true, false, \"Id\", RelationType.O2O, this.diagramEngine, PropertyType.INT);\n\t\tnode1.setPosition(100, 100);\n\n\t\t//3-B) create another default node\n\t\tvar node2 = new Node(\"table\", \"Node2\", \"rgb(0,192,255)\");\n\t\tlet port2 = node2.addInPort(true, true, true, true, false,\"Id\", RelationType.O2O,this.diagramEngine, PropertyType.INT);\n\t\tnode2.setPosition(400, 100);\n\n\t\t// link the ports\n\t\tlet link1 = port.initialLink(node2);\n\n\t\tthis.activeModel.addAll(node1, node2, link1);\n\t\tthis.diagramEngine.recalculatePortsVisually();\n\n\t}\n\n\tpublic getActiveDiagram(): SRD.DiagramModel {\n\t\treturn this.activeModel;\n\t}\n\n\tpublic getDiagramEngine(): SRD.DiagramEngine {\n\t\treturn this.diagramEngine;\n\t}\n}"]},"metadata":{},"sourceType":"module"}