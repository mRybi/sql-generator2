{"ast":null,"code":"import _classCallCheck from \"/home/dell/Dokumenty/sql-gen2/sql-gen2/sql-generator2/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/dell/Dokumenty/sql-gen2/sql-gen2/sql-generator2/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/dell/Dokumenty/sql-gen2/sql-gen2/sql-generator2/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/dell/Dokumenty/sql-gen2/sql-gen2/sql-generator2/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/dell/Dokumenty/sql-gen2/sql-gen2/sql-generator2/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/dell/Dokumenty/sql-gen2/sql-gen2/sql-generator2/src/App2.tsx\";\nimport * as React from \"react\";\nimport * as _ from \"lodash\";\nimport { DiagramWidget } from \"storm-react-diagrams\";\nimport { TrayItemWidget } from \"./components/dragAndDrop/TrayItemWidget\";\nimport { TrayWidget } from \"./components/dragAndDrop/TrayWidget\";\nimport './dragAndDrop.scss';\n\nrequire(\"storm-react-diagrams/dist/style.min.css\");\n\nrequire('react-bootstrap-table-next/dist/react-bootstrap-table2.min.css');\n\nimport './App.css';\nimport { Node } from \"./components/models/Node\";\nimport { PropertyType } from \"./components/models/PropertyType\";\nimport { NodeProperties } from \"./components/nodeProperties/NodeProperties\";\nimport { PopupExample } from \"./PopupExample\";\nexport var RelationType;\n\n(function (RelationType) {\n  RelationType[RelationType[\"O2O\"] = 0] = \"O2O\";\n  RelationType[RelationType[\"O2M\"] = 1] = \"O2M\";\n  RelationType[RelationType[\"M2M\"] = 2] = \"M2M\";\n  RelationType[RelationType[\"none\"] = 3] = \"none\";\n})(RelationType || (RelationType = {}));\n\nexport var App2 =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(App2, _React$Component);\n\n  function App2(props) {\n    var _this;\n\n    _classCallCheck(this, App2);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App2).call(this, props));\n    _this.state = {\n      sqlString: null,\n      showDialog: false,\n      selectedNode: null,\n      diagramEngine: null,\n      selectedLink: null,\n      selectedRelation: RelationType.O2O,\n      isLocked: false\n    };\n    return _this;\n  }\n\n  _createClass(App2, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      this.setState({\n        selectedNode: null\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      function handleClick(e, data) {\n        console.log(data.foo);\n      }\n\n      return React.createElement(\"div\", {\n        className: \"body\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"header\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }, \"Create diagrams\")), React.createElement(\"div\", {\n        className: \"content\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      }, React.createElement(TrayWidget, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      }, React.createElement(TrayItemWidget, {\n        model: {\n          type: \"table\"\n        },\n        name: \"Node\",\n        color: \"rgb(0,192,255)\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      }), React.createElement(TrayItemWidget, {\n        model: {\n          type: \"label\"\n        },\n        name: \"Label\",\n        color: \"rgb(192,255,0)\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        style: {\n          borderColor: \"rgb(0,255,0)\",\n          marginTop: '100px'\n        },\n        className: \"tray-item \".concat(this.state.selectedRelation === RelationType.O2O ? 'selected' : ''),\n        onClick: function onClick() {\n          var app = _this2.props.app.getActiveDiagram().getNodes();\n\n          Object.keys(app).forEach(function (x) {\n            return app[x].updatePorts(RelationType.O2O);\n          });\n\n          _this2.setState({\n            selectedRelation: RelationType.O2O\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      }, \"One2One Relation\"), React.createElement(\"div\", {\n        style: {\n          borderColor: \"rgb(0,255,0)\"\n        },\n        className: \"tray-item \".concat(this.state.selectedRelation === RelationType.O2M ? 'selected' : ''),\n        onClick: function onClick() {\n          var app = _this2.props.app.getActiveDiagram().getNodes();\n\n          Object.keys(app).forEach(function (x) {\n            return app[x].updatePorts(RelationType.O2M);\n          });\n\n          _this2.setState({\n            selectedRelation: RelationType.O2M\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      }, \"One2Many Relation\"), React.createElement(\"div\", {\n        style: {\n          borderColor: \"rgb(0,255,0)\"\n        },\n        className: \"tray-item \".concat(this.state.selectedRelation === RelationType.M2M ? 'selected' : ''),\n        onClick: function onClick() {\n          var app = _this2.props.app.getActiveDiagram().getNodes();\n\n          Object.keys(app).forEach(function (x) {\n            return app[x].updatePorts(RelationType.M2M);\n          });\n\n          _this2.setState({\n            selectedRelation: RelationType.M2M\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      }, \"Many2Many Relation\"), React.createElement(\"div\", {\n        style: {\n          borderColor: \"rgb(255,0,0)\",\n          marginTop: '100px'\n        },\n        className: \"tray-item\",\n        onClick: function onClick() {\n          _this2.setState({\n            showDialog: true\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132\n        },\n        __self: this\n      }, \"Create DB Code\")), React.createElement(\"div\", {\n        className: \"diagram-layer\",\n        onDrop: function onDrop(event) {\n          var data = JSON.parse(event.dataTransfer.getData(\"storm-diagram-node\"));\n\n          var nodesCount = _.keys(_this2.props.app.getDiagramEngine().getDiagramModel().getNodes()).length;\n\n          var node = null;\n\n          if (data.type === \"table\") {\n            node = new Node(\"table\", \"Node\".concat(nodesCount + 1), \"rgb(0,192,255)\");\n            node.addInPort(true, true, true, true, false, \"Id\", _this2.state.selectedRelation, _this2.props.app.getDiagramEngine(), PropertyType.INT);\n            node.addInPort(false, false, false, false, false, \"Name\", _this2.state.selectedRelation, _this2.props.app.getDiagramEngine(), PropertyType.NVARCHAR);\n          } else {\n            node = new Node(\"label\", \"Label \", \"rgb(192,255,0)\");\n          }\n\n          var points = _this2.props.app.getDiagramEngine().getRelativeMousePoint(event);\n\n          node.x = points.x;\n          node.y = points.y;\n\n          _this2.props.app.getDiagramEngine().getDiagramModel().addNode(node);\n\n          _this2.forceUpdate();\n        },\n        onDragOver: function onDragOver(event) {\n          event.preventDefault();\n        },\n        onClick: function onClick(event) {\n          event.preventDefault();\n\n          _this2.setState({\n            selectedRelation: RelationType.none,\n            showDialog: false\n          });\n        } // onMouseOverCapture={event => {\n        // \tevent.preventDefault();\n        // \tconsole.log('qweqwe',this.props.app\n        // \t.getDiagramEngine()\n        // \t.getDiagramModel().getSelectedItems()[0] as Node )\n        // }}\n        ,\n        onDoubleClick: function onDoubleClick(event) {\n          event.preventDefault();\n\n          _this2.setState({\n            showDialog: false,\n            selectedNode: _this2.props.app.getDiagramEngine().getDiagramModel().getSelectedItems()[0],\n            diagramEngine: _this2.props.app.getDiagramEngine(),\n            selectedLink: _this2.props.app.getDiagramEngine().getDiagramModel().getSelectedItems()[1]\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148\n        },\n        __self: this\n      }, React.createElement(DiagramWidget, {\n        deleteKeys: [46],\n        className: \"srd-demo-canvas\",\n        diagramEngine: this.props.app.getDiagramEngine(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 217\n        },\n        __self: this\n      })), this.state.selectedNode != null ? React.createElement(NodeProperties, {\n        selectedRelation: this.state.selectedRelation,\n        selectedLink: this.state.selectedLink,\n        selectedItem: this.state.selectedNode,\n        diagramEngine: this.state.diagramEngine,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 220\n        },\n        __self: this\n      }) : null, React.createElement(PopupExample, {\n        fU: function fU() {\n          return _this2.forceUpdate();\n        },\n        isOpen: this.state.showDialog,\n        serializeDiagram: this.props.app.getActiveDiagram().serializeDiagram(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 222\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return App2;\n}(React.Component);","map":{"version":3,"sources":["/home/dell/Dokumenty/sql-gen2/sql-gen2/sql-generator2/src/App2.tsx"],"names":["React","_","DiagramWidget","TrayItemWidget","TrayWidget","require","Node","PropertyType","NodeProperties","PopupExample","RelationType","App2","props","state","sqlString","showDialog","selectedNode","diagramEngine","selectedLink","selectedRelation","O2O","isLocked","setState","handleClick","e","data","console","log","foo","type","borderColor","marginTop","app","getActiveDiagram","getNodes","Object","keys","forEach","x","updatePorts","O2M","M2M","event","JSON","parse","dataTransfer","getData","nodesCount","getDiagramEngine","getDiagramModel","length","node","addInPort","INT","NVARCHAR","points","getRelativeMousePoint","y","addNode","forceUpdate","preventDefault","none","getSelectedItems","serializeDiagram","Component"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport * as _ from \"lodash\";\nimport { DefaultNodeModel, DiagramWidget, BaseEntityType, BaseEntity, BaseModelListener, BaseModel, DiagramModel, DefaultLinkModel, DiagramEngine } from \"storm-react-diagrams\";\nimport { TrayItemWidget } from \"./components/dragAndDrop/TrayItemWidget\";\nimport { TrayWidget } from \"./components/dragAndDrop/TrayWidget\";\nimport { Application } from \"./components/dragAndDrop/Application\";\nimport './dragAndDrop.scss';\nrequire(\"storm-react-diagrams/dist/style.min.css\");\nrequire('react-bootstrap-table-next/dist/react-bootstrap-table2.min.css');\nimport SQLResultDialog from \"./components/SQLResultDialog/SQLResultDialog\";\nimport './App.css';\nimport { NodeInfo } from \"./components/nodeInfo/NodeInfo\";\nimport { Node } from \"./components/models/Node\";\nimport { Link } from \"./components/models/Link\";\nimport { PropertyType } from \"./components/models/PropertyType\";\nimport axios, { AxiosResponse } from 'axios';\nimport { ContextMenu, MenuItem, ContextMenuTrigger } from \"react-contextmenu\";\nimport { NodeProperties } from \"./components/nodeProperties/NodeProperties\";\nimport Popup from 'reactjs-popup'\nimport {  PopupExample } from \"./PopupExample\";\n\nexport interface BodyWidgetProps {\n\tapp: Application;\n}\n\nexport interface BodyWidgetState {\n\tshowDialog: boolean;\n\tsqlString: AxiosResponse;\n\tselectedNode: Node;\n\tdiagramEngine: DiagramEngine;\n\tselectedLink: Link;\n\tselectedRelation: RelationType;\n\tisLocked: boolean;\n}\n\nexport enum RelationType {\n\tO2O = 0,\n\tO2M = 1,\n\tM2M = 2,\n\tnone = 3\n}\n\nexport class App2 extends React.Component<BodyWidgetProps, BodyWidgetState> {\n\tconstructor(props: BodyWidgetProps) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tsqlString: null,\n\t\t\tshowDialog: false,\n\t\t\tselectedNode: null,\n\t\t\tdiagramEngine: null,\n\t\t\tselectedLink: null,\n\t\t\tselectedRelation: RelationType.O2O,\n\t\t\tisLocked: false\n\t\t}\n\t}\n\n\tcomponentWillMount() {\n\t\tthis.setState({ selectedNode: null })\n\t}\n\n\n\n\trender() {\n\t\tfunction handleClick(e: any, data: any) {\n\t\t\tconsole.log(data.foo);\n\t\t}\n\t\treturn (\n\t\t\t<div className=\"body\">\n\t\t\t\t<div className=\"header\">\n\t\t\t\t\t<div className=\"title\">Create diagrams</div>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"content\">\n\t\t\t\t\t<TrayWidget>\n\t\t\t\t\t\t<TrayItemWidget model={{ type: \"table\" }} name=\"Node\" color=\"rgb(0,192,255)\" />\n\t\t\t\t\t\t<TrayItemWidget model={{ type: \"label\" }} name=\"Label\" color=\"rgb(192,255,0)\" />\n\n\n\t\t\t\t\t\t<div\n\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\tborderColor: \"rgb(0,255,0)\", marginTop: '100px'\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\tclassName={`tray-item ${this.state.selectedRelation === RelationType.O2O ? 'selected' : ''}`}\n\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\tlet app = this.props.app.getActiveDiagram().getNodes() as { [s: string]: Node };\n\t\t\t\t\t\t\t\tObject.keys(app).forEach(x => app[x].updatePorts(RelationType.O2O));\n\t\t\t\t\t\t\t\tthis.setState({\n\t\t\t\t\t\t\t\t\tselectedRelation: RelationType.O2O\n\t\t\t\t\t\t\t\t})\n\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tOne2One Relation\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div\n\t\t\t\t\t\t\tstyle={{ borderColor: \"rgb(0,255,0)\" }}\n\t\t\t\t\t\t\tclassName={`tray-item ${this.state.selectedRelation === RelationType.O2M ? 'selected' : ''}`}\n\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\tlet app = this.props.app.getActiveDiagram().getNodes() as { [s: string]: Node };\n\t\t\t\t\t\t\t\tObject.keys(app).forEach(x => app[x].updatePorts(RelationType.O2M));\n\n\t\t\t\t\t\t\t\tthis.setState({\n\t\t\t\t\t\t\t\t\tselectedRelation: RelationType.O2M\n\t\t\t\t\t\t\t\t})\n\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tOne2Many Relation\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div\n\t\t\t\t\t\t\tstyle={{ borderColor: \"rgb(0,255,0)\" }}\n\t\t\t\t\t\t\tclassName={`tray-item ${this.state.selectedRelation === RelationType.M2M ? 'selected' : ''}`}\n\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\tlet app = this.props.app.getActiveDiagram().getNodes() as { [s: string]: Node };\n\t\t\t\t\t\t\t\tObject.keys(app).forEach(x => app[x].updatePorts(RelationType.M2M));\n\t\t\t\t\t\t\t\tthis.setState({\n\t\t\t\t\t\t\t\t\tselectedRelation: RelationType.M2M\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tMany2Many Relation\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t{/* <div\n\t\t\t\t\t\t\tstyle={{ borderColor: \"rgb(255,0,0)\", marginTop: '100px'}}\n\t\t\t\t\t\t\tclassName=\"tray-item\"\n\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\tconsole.log(JSON.stringify(this.props.app.getActiveDiagram().serializeDiagram(), null, 2));\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tSerialize Graph\n\t\t\t\t\t\t</div> */}\n\n\t\t\t\t\t\t<div\n\t\t\t\t\t\tstyle={{ borderColor: \"rgb(255,0,0)\", marginTop: '100px' }}\n\t\t\t\t\t\tclassName=\"tray-item\"\n\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tthis.setState({showDialog: true});\n\t\t\t\t\t\t}}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tCreate DB Code\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\n\t\t\t\n\t\t\t\t\t</TrayWidget>\n\n\t\t\t\t<div\n\t\t\t\t\tclassName=\"diagram-layer\"\n\t\t\t\t\tonDrop={event => {\n\t\t\t\t\t\tvar data = JSON.parse(event.dataTransfer.getData(\"storm-diagram-node\"));\n\t\t\t\t\t\tvar nodesCount = _.keys(\n\t\t\t\t\t\t\tthis.props.app\n\t\t\t\t\t\t\t\t.getDiagramEngine()\n\t\t\t\t\t\t\t\t.getDiagramModel()\n\t\t\t\t\t\t\t\t.getNodes()\n\t\t\t\t\t\t).length;\n\n\t\t\t\t\t\tvar node = null;\n\t\t\t\t\t\tif (data.type === \"table\") {\n\t\t\t\t\t\t\tnode = new Node(\"table\", `Node${nodesCount + 1}`, \"rgb(0,192,255)\");\n\t\t\t\t\t\t\tnode.addInPort(true, true, true, true, false, \"Id\", this.state.selectedRelation, this.props.app.getDiagramEngine(), PropertyType.INT);\n\t\t\t\t\t\t\tnode.addInPort(false, false, false, false, false, \"Name\", this.state.selectedRelation, this.props.app.getDiagramEngine(), PropertyType.NVARCHAR);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tnode = new Node(\"label\", \"Label \", \"rgb(192,255,0)\");\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar points = this.props.app.getDiagramEngine().getRelativeMousePoint(event);\n\t\t\t\t\t\tnode.x = points.x;\n\t\t\t\t\t\tnode.y = points.y;\n\t\t\t\t\t\tthis.props.app\n\t\t\t\t\t\t\t.getDiagramEngine()\n\t\t\t\t\t\t\t.getDiagramModel()\n\t\t\t\t\t\t\t.addNode(node);\n\t\t\t\t\t\tthis.forceUpdate();\n\t\t\t\t\t}}\n\t\t\t\t\tonDragOver={event => {\n\t\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\t}}\n\n\t\t\t\t\tonClick={event => {\n\t\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\t\tthis.setState({\n\t\t\t\t\t\t\tselectedRelation: RelationType.none,\n\t\t\t\t\t\t\tshowDialog: false\n\t\t\t\t\t\t})\n\t\t\t\t\t}}\n\n\t\t\t\t\t// onMouseOverCapture={event => {\n\t\t\t\t\t// \tevent.preventDefault();\n\n\t\t\t\t\t// \tconsole.log('qweqwe',this.props.app\n\t\t\t\t\t// \t.getDiagramEngine()\n\t\t\t\t\t// \t.getDiagramModel().getSelectedItems()[0] as Node )\n\n\t\t\t\t\t// }}\n\n\n\n\t\t\t\t\tonDoubleClick={event => {\n\t\t\t\t\t\tevent.preventDefault();\n\n\t\t\t\t\t\tthis.setState({\n\t\t\t\t\t\t\tshowDialog: false,\n\t\t\t\t\t\t\tselectedNode: this.props.app\n\t\t\t\t\t\t\t\t.getDiagramEngine()\n\t\t\t\t\t\t\t\t.getDiagramModel()\n\t\t\t\t\t\t\t\t.getSelectedItems()[0] as Node,\n\t\t\t\t\t\t\tdiagramEngine: this.props.app.getDiagramEngine(),\n\t\t\t\t\t\t\tselectedLink: this.props.app\n\t\t\t\t\t\t\t\t.getDiagramEngine()\n\t\t\t\t\t\t\t\t.getDiagramModel()\n\t\t\t\t\t\t\t\t.getSelectedItems()[1] as Link,\n\t\t\t\t\t\t});\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\t<DiagramWidget deleteKeys={[46]} className=\"srd-demo-canvas\" diagramEngine={this.props.app.getDiagramEngine()} />\n\n\t\t\t\t</div>\n\t\t\t\t{this.state.selectedNode != null ? <NodeProperties selectedRelation={this.state.selectedRelation} selectedLink={this.state.selectedLink} selectedItem={this.state.selectedNode} diagramEngine={this.state.diagramEngine} /> : null}\n\t\t\t\t{/* {this.state.showDialog ? <SQLResultDialog sqlStringResponse={this.state.sqlString} /> : null} */}\n\t\t\t\t<PopupExample fU={() => this.forceUpdate()} isOpen={this.state.showDialog} serializeDiagram={this.props.app.getActiveDiagram().serializeDiagram()}/>\n\t\t\t</div>\n\t\t\t</div >\n\t\t);\n\t}\n}"]},"metadata":{},"sourceType":"module"}