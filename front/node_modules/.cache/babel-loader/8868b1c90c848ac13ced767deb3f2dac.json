{"ast":null,"code":"import _classCallCheck from \"/home/dell/Dokumenty/sql-gen2/sql-gen2/sql-generator2/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/dell/Dokumenty/sql-gen2/sql-gen2/sql-generator2/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/dell/Dokumenty/sql-gen2/sql-gen2/sql-generator2/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/dell/Dokumenty/sql-gen2/sql-gen2/sql-generator2/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/dell/Dokumenty/sql-gen2/sql-gen2/sql-generator2/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/dell/Dokumenty/sql-gen2/sql-gen2/sql-generator2/src/AppView.tsx\";\nimport './App.scss';\nimport './dragAndDrop.scss';\nimport * as React from \"react\";\nimport * as _ from \"lodash\";\nimport { DiagramWidget } from \"storm-react-diagrams\";\nimport { TrayItemWidget } from \"./components/dragAndDrop/TrayItemWidget\";\nimport { TrayWidget } from \"./components/dragAndDrop/TrayWidget\";\nimport { Node } from \"./components/models/Node\";\nimport { PropertyType } from \"./components/models/PropertyType\";\nimport { NodeProperties } from \"./components/nodeProperties/NodeProperties\";\nimport { GenerationHandler } from \"./handlers/GenerationHandler\";\nimport { RelationPopup } from \"./components/popups/RealtionPopup/RelationPopup\";\nimport AppContext from \"./context/appContext/AppContext\";\n\nrequire(\"storm-react-diagrams/dist/style.min.css\");\n\nrequire('react-bootstrap-table-next/dist/react-bootstrap-table2.min.css');\n\nexport var AppViewType;\n\n(function (AppViewType) {\n  AppViewType[AppViewType[\"ENTITY\"] = 0] = \"ENTITY\";\n  AppViewType[AppViewType[\"RELATION\"] = 1] = \"RELATION\";\n})(AppViewType || (AppViewType = {}));\n\nexport var RelationType;\n\n(function (RelationType) {\n  RelationType[RelationType[\"O2O\"] = 0] = \"O2O\";\n  RelationType[RelationType[\"O2M\"] = 1] = \"O2M\";\n  RelationType[RelationType[\"M2M\"] = 2] = \"M2M\";\n  RelationType[RelationType[\"none\"] = 3] = \"none\";\n  RelationType[RelationType[\"M2MNoTable\"] = 4] = \"M2MNoTable\";\n})(RelationType || (RelationType = {}));\n\nexport var AppView =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(AppView, _React$Component);\n\n  function AppView(props) {\n    var _this;\n\n    _classCallCheck(this, AppView);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(AppView).call(this, props));\n    _this.state = {\n      sqlString: null,\n      showDialog: false,\n      selectedNode: null,\n      diagramEngine: null,\n      selectedLink: null,\n      selectedRelation: RelationType.O2O,\n      isLocked: false,\n      showRelationDialog: false,\n      activeView: AppViewType.ENTITY\n    };\n    return _this;\n  }\n\n  _createClass(AppView, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      this.setState({\n        selectedNode: null\n      });\n    }\n  }, {\n    key: \"updateRelationPopup\",\n    value: function updateRelationPopup() {\n      this.setState({\n        showRelationDialog: false,\n        selectedNode: null\n      }); // this.forceUpdate();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      console.log('QQQQ', this.context);\n      return React.createElement(\"div\", {\n        className: \"body\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"header\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        },\n        __self: this\n      }, \"DB Diagram Scripter\")), React.createElement(\"div\", {\n        className: \"content\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        },\n        __self: this\n      }, React.createElement(TrayWidget, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      }, React.createElement(TrayItemWidget, {\n        model: {\n          type: \"table\"\n        },\n        name: \"Node\",\n        color: \"rgb(0,192,255)\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }), React.createElement(TrayItemWidget, {\n        model: {\n          type: \"label\"\n        },\n        name: \"Label\",\n        color: \"rgb(192,255,0)\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        style: {\n          borderColor: \"rgb(0,255,0)\",\n          marginTop: '100px'\n        },\n        className: \"tray-item \".concat(this.state.selectedRelation === RelationType.O2O ? 'selected' : ''),\n        onClick: function onClick() {\n          var app = _this2.props.app.getActiveDiagram().getNodes();\n\n          Object.keys(app).forEach(function (x) {\n            return app[x].updatePorts(RelationType.O2O);\n          });\n\n          _this2.setState({\n            selectedRelation: RelationType.O2O\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      }, \"Relation\"), React.createElement(\"div\", {\n        style: {\n          borderColor: \"rgb(255,0,0)\",\n          marginTop: '100px'\n        },\n        className: \"tray-item \".concat(this.context.view === AppViewType.ENTITY ? 'selected' : ''),\n        onClick: function onClick() {\n          _this2.context.changeViewType(0);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 167\n        },\n        __self: this\n      }, \"Entity View\"), React.createElement(\"div\", {\n        style: {\n          borderColor: \"rgb(255,0,0)\"\n        },\n        className: \"tray-item \".concat(this.context.view === AppViewType.RELATION ? 'selected' : ''),\n        onClick: function onClick() {\n          // this.setState({ activeView: AppViewType.RELATION });\n          _this2.context.changeViewType(1);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 179\n        },\n        __self: this\n      }, \"Relation View\"), React.createElement(\"div\", {\n        style: {\n          borderColor: \"rgb(255,0,0)\"\n        },\n        className: \"tray-item\",\n        onClick: function onClick() {\n          _this2.setState({\n            showDialog: true\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 193\n        },\n        __self: this\n      }, \"Create DB Code\")), React.createElement(\"div\", {\n        className: \"diagram-layer\",\n        onDrop: function onDrop(event) {\n          var data = JSON.parse(event.dataTransfer.getData(\"storm-diagram-node\"));\n\n          var nodesCount = _.keys(_this2.props.app.getDiagramEngine().getDiagramModel().getNodes()).length;\n\n          var node = null;\n\n          if (data.type === \"table\") {\n            node = new Node(\"table\", \"Node\".concat(nodesCount + 1), \"rgb(0,192,255)\");\n            node.addInPort(true, true, true, true, false, \"Id\", _this2.state.selectedRelation, _this2.props.app.getDiagramEngine(), PropertyType.INT);\n            node.addInPort(false, false, false, false, false, \"Name\", _this2.state.selectedRelation, _this2.props.app.getDiagramEngine(), PropertyType.NVARCHAR);\n          } else {\n            node = new Node(\"label\", \"Label \", \"rgb(192,255,0)\");\n          }\n\n          var points = _this2.props.app.getDiagramEngine().getRelativeMousePoint(event);\n\n          node.x = points.x;\n          node.y = points.y;\n\n          _this2.props.app.getDiagramEngine().getDiagramModel().addNode(node);\n\n          _this2.forceUpdate();\n        },\n        onDragOver: function onDragOver(event) {\n          event.preventDefault();\n        },\n        onClick: function onClick(event) {\n          event.preventDefault();\n\n          _this2.setState({\n            selectedRelation: RelationType.none,\n            showDialog: false\n          });\n        } // \t\t\t\t\t\tonMouseOverCapture={event => {\n        // \t\t\t\t\t\t\tevent.preventDefault();\n        // \t\t\t\t\t\t\tif (this.props.app\n        // \t\t\t\t\t\t\t\t.getDiagramEngine()\n        // \t\t\t\t\t\t\t\t.getDiagramModel().getSelectedItems()[0] !== undefined) {\n        // \t\t\t\t\t\t\t\t\tconsole.log('0000', this.props.app\n        // \t\t\t\t\t\t\t\t\t.getDiagramEngine()\n        // \t\t\t\t\t\t\t\t\t.getDiagramModel().getSelectedItems()[0].parent as Link);\n        // \t\t\t\t\t\t\t\tlet a = (this.props.app\n        // \t\t\t\t\t\t\t\t.getDiagramEngine()\n        // \t\t\t\t\t\t\t\t.getDiagramModel().getSelectedItems()[0].parent as Link).sourcePort;\n        // \t\t\t\t\t\t\t\tlet b = (this.props.app\n        // \t\t\t\t\t\t\t\t\t.getDiagramEngine()\n        // \t\t\t\t\t\t\t\t\t.getDiagramModel().getSelectedItems()[0].parent as Link).targetPort;\n        // a.setSelected(true);\n        // b.setSelected(true);\n        // \t\t\t\t\t\t\t}\n        // \t\t\t\t\t\t}}\n        ,\n        onDoubleClick: function onDoubleClick(event) {\n          event.preventDefault();\n          console.log('OOOO', _this2.props.app.getDiagramEngine().getDiagramModel().getSelectedItems());\n\n          if (_this2.props.app.getDiagramEngine().getDiagramModel().getSelectedItems().length === 1) {\n            _this2.setState({\n              selectedLink: _this2.props.app.getDiagramEngine().getDiagramModel().getSelectedItems()[0].parent,\n              showRelationDialog: true,\n              selectedNode: null\n            });\n          } else {\n            _this2.setState({\n              showDialog: false,\n              showRelationDialog: false,\n              selectedNode: _this2.props.app.getDiagramEngine().getDiagramModel().getSelectedItems()[0],\n              diagramEngine: _this2.props.app.getDiagramEngine() // ,\n              // selectedLink: this.props.app\n              // \t.getDiagramEngine()\n              // \t.getDiagramModel()\n              // \t.getSelectedItems()[1] as Link,\n\n            });\n          }\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 209\n        },\n        __self: this\n      }, React.createElement(DiagramWidget, {\n        deleteKeys: [46],\n        className: \"srd-demo-canvas\",\n        diagramEngine: this.props.app.getDiagramEngine(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 305\n        },\n        __self: this\n      })), this.state.selectedNode != null ? React.createElement(NodeProperties, {\n        selectedRelation: this.state.selectedRelation,\n        selectedLink: this.state.selectedLink,\n        selectedItem: this.state.selectedNode,\n        diagramEngine: this.state.diagramEngine,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 308\n        },\n        __self: this\n      }) : null, React.createElement(GenerationHandler, {\n        isOpen: this.state.showDialog,\n        serializeDiagram: this.props.app.getActiveDiagram().serializeDiagram(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 310\n        },\n        __self: this\n      }), React.createElement(RelationPopup, {\n        diagramModel: this.props.app.getActiveDiagram(),\n        update: function update() {\n          return _this2.updateRelationPopup();\n        },\n        isOpen: this.state.showRelationDialog,\n        link: this.state.selectedLink,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 311\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return AppView;\n}(React.Component);\nAppView.contextType = AppContext;","map":{"version":3,"sources":["/home/dell/Dokumenty/sql-gen2/sql-gen2/sql-generator2/src/AppView.tsx"],"names":["React","_","DiagramWidget","TrayItemWidget","TrayWidget","Node","PropertyType","NodeProperties","GenerationHandler","RelationPopup","AppContext","require","AppViewType","RelationType","AppView","props","state","sqlString","showDialog","selectedNode","diagramEngine","selectedLink","selectedRelation","O2O","isLocked","showRelationDialog","activeView","ENTITY","setState","console","log","context","type","borderColor","marginTop","app","getActiveDiagram","getNodes","Object","keys","forEach","x","updatePorts","view","changeViewType","RELATION","event","data","JSON","parse","dataTransfer","getData","nodesCount","getDiagramEngine","getDiagramModel","length","node","addInPort","INT","NVARCHAR","points","getRelativeMousePoint","y","addNode","forceUpdate","preventDefault","none","getSelectedItems","parent","serializeDiagram","updateRelationPopup","Component","contextType"],"mappings":"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","sourcesContent":["import './App.scss';\nimport './dragAndDrop.scss';\nimport * as React from \"react\";\nimport * as _ from \"lodash\";\nimport { AxiosResponse } from 'axios';\n\nimport { DiagramWidget, DiagramEngine } from \"storm-react-diagrams\";\nimport { TrayItemWidget } from \"./components/dragAndDrop/TrayItemWidget\";\nimport { TrayWidget } from \"./components/dragAndDrop/TrayWidget\";\nimport { Application } from \"./components/dragAndDrop/Application\";\nimport { Node } from \"./components/models/Node\";\nimport { Link } from \"./components/models/Link\";\nimport { PropertyType } from \"./components/models/PropertyType\";\nimport { NodeProperties } from \"./components/nodeProperties/NodeProperties\";\nimport { GenerationHandler } from \"./handlers/GenerationHandler\";\nimport { RelationPopup } from \"./components/popups/RealtionPopup/RelationPopup\";\nimport AppContext from \"./context/appContext/AppContext\";\n\nrequire(\"storm-react-diagrams/dist/style.min.css\");\nrequire('react-bootstrap-table-next/dist/react-bootstrap-table2.min.css');\n\ninterface Props {\n\tapp: Application;\n}\n\ninterface State {\n\tshowDialog: boolean;\n\tsqlString: AxiosResponse;\n\tselectedNode: Node;\n\tdiagramEngine: DiagramEngine;\n\tselectedLink: Link;\n\tselectedRelation: RelationType;\n\tisLocked: boolean;\n\tshowRelationDialog: boolean;\n\tactiveView: AppViewType\n}\n\nexport enum AppViewType {\n\tENTITY = 0,\n\tRELATION = 1\n}\n\nexport enum RelationType {\n\tO2O = 0,\n\tO2M = 1,\n\tM2M = 2,\n\tnone = 3,\n\tM2MNoTable = 4\n}\n\nexport class AppView extends React.Component<Props, State> {\n\n\tstatic contextType = AppContext;\n\n\tconstructor(props: Props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tsqlString: null,\n\t\t\tshowDialog: false,\n\t\t\tselectedNode: null,\n\t\t\tdiagramEngine: null,\n\t\t\tselectedLink: null,\n\t\t\tselectedRelation: RelationType.O2O,\n\t\t\tisLocked: false,\n\t\t\tshowRelationDialog: false,\n\t\t\tactiveView: AppViewType.ENTITY\n\t\t}\n\t}\n\n\tcomponentWillMount() {\n\t\tthis.setState({ selectedNode: null })\n\t}\n\n\tupdateRelationPopup() {\n\t\tthis.setState({ showRelationDialog: false,  selectedNode: null});\n\t\t// this.forceUpdate();\n\t}\n\n\n\trender() {\n\t\tconsole.log('QQQQ', this.context);\n\t\treturn (\n\t\t\t<div className=\"body\">\n\t\t\t\t<div className=\"header\">\n\t\t\t\t\t<div className=\"title\">DB Diagram Scripter</div>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"content\">\n\t\t\t\t\t<TrayWidget>\n\t\t\t\t\t\t<TrayItemWidget model={{ type: \"table\" }} name=\"Node\" color=\"rgb(0,192,255)\" />\n\t\t\t\t\t\t<TrayItemWidget model={{ type: \"label\" }} name=\"Label\" color=\"rgb(192,255,0)\" />\n\n\n\t\t\t\t\t\t<div\n\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\tborderColor: \"rgb(0,255,0)\", marginTop: '100px'\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\tclassName={`tray-item ${this.state.selectedRelation === RelationType.O2O ? 'selected' : ''}`}\n\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\tlet app = this.props.app.getActiveDiagram().getNodes() as { [s: string]: Node };\n\t\t\t\t\t\t\t\tObject.keys(app).forEach(x => app[x].updatePorts(RelationType.O2O));\n\t\t\t\t\t\t\t\tthis.setState({\n\t\t\t\t\t\t\t\t\tselectedRelation: RelationType.O2O\n\t\t\t\t\t\t\t\t})\n\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tRelation{/* One2One Relation */}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t{/* <div\n\t\t\t\t\t\t\tstyle={{ borderColor: \"rgb(0,255,0)\" }}\n\t\t\t\t\t\t\tclassName={`tray-item ${this.state.selectedRelation === RelationType.O2M ? 'selected' : ''}`}\n\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\tlet app = this.props.app.getActiveDiagram().getNodes() as { [s: string]: Node };\n\t\t\t\t\t\t\t\tObject.keys(app).forEach(x => app[x].updatePorts(RelationType.O2M));\n\n\t\t\t\t\t\t\t\tthis.setState({\n\t\t\t\t\t\t\t\t\tselectedRelation: RelationType.O2M\n\t\t\t\t\t\t\t\t})\n\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tOne2Many Relation\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div\n\t\t\t\t\t\t\tstyle={{ borderColor: \"rgb(0,255,0)\" }}\n\t\t\t\t\t\t\tclassName={`tray-item ${this.state.selectedRelation === RelationType.M2M ? 'selected' : ''}`}\n\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\tlet app = this.props.app.getActiveDiagram().getNodes() as { [s: string]: Node };\n\t\t\t\t\t\t\t\tObject.keys(app).forEach(x => app[x].updatePorts(RelationType.M2M));\n\t\t\t\t\t\t\t\tthis.setState({\n\t\t\t\t\t\t\t\t\tselectedRelation: RelationType.M2M\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tMany2Many Atributes Relation\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<div\n\t\t\t\t\t\t\tstyle={{ borderColor: \"rgb(0,255,0)\" }}\n\t\t\t\t\t\t\tclassName={`tray-item ${this.state.selectedRelation === RelationType.M2MNoTable ? 'selected' : ''}`}\n\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\tlet app = this.props.app.getActiveDiagram().getNodes() as { [s: string]: Node };\n\t\t\t\t\t\t\t\tObject.keys(app).forEach(x => app[x].updatePorts(RelationType.M2MNoTable));\n\t\t\t\t\t\t\t\tthis.setState({\n\t\t\t\t\t\t\t\t\tselectedRelation: RelationType.M2MNoTable // RelationType.M2MNoTable\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tMany2Many No Atributes Relation\n\t\t\t\t\t\t</div> */}\n\n\n\n\n\n\n\t\t\t\t\t\t{/* <div\n\t\t\t\t\t\t\tstyle={{ borderColor: \"rgb(255,0,0)\", marginTop: '100px'}}\n\t\t\t\t\t\t\tclassName=\"tray-item\"\n\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\tconsole.log(JSON.stringify(this.props.app.getActiveDiagram().serializeDiagram(), null, 2));\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tSerialize Graph\n\t\t\t\t\t\t</div> */}\n\n\t\t\t\t\t\t<div\n\t\t\t\t\t\t\tstyle={{ borderColor: \"rgb(255,0,0)\", marginTop: '100px' }}\n\t\t\t\t\t\t\tclassName={`tray-item ${this.context.view === AppViewType.ENTITY ? 'selected' : ''}`}\n\t\t\t\t\t\t\tonClick={() => {\n\n\t\t\t\t\t\t\t\tthis.context.changeViewType(0);\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tEntity View\n\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<div\n\t\t\t\t\t\t\tstyle={{ borderColor: \"rgb(255,0,0)\" }}\n\t\t\t\t\t\t\tclassName={`tray-item ${this.context.view === AppViewType.RELATION ? 'selected' : ''}`}\n\t\t\t\t\t\t\tonClick={() => {\n\n\t\t\t\t\t\t\t\t// this.setState({ activeView: AppViewType.RELATION });\n\t\t\t\t\t\t\t\tthis.context.changeViewType(1);\n\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tRelation View\n\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<div\n\t\t\t\t\t\t\tstyle={{ borderColor: \"rgb(255,0,0)\" }}\n\t\t\t\t\t\t\tclassName=\"tray-item\"\n\t\t\t\t\t\t\tonClick={() => {\n\n\t\t\t\t\t\t\t\tthis.setState({ showDialog: true });\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tCreate DB Code\n\n\t\t\t\t\t\t</div>\n\n\n\n\t\t\t\t\t</TrayWidget>\n\n\t\t\t\t\t<div\n\t\t\t\t\t\tclassName=\"diagram-layer\"\n\t\t\t\t\t\tonDrop={event => {\n\t\t\t\t\t\t\tvar data = JSON.parse(event.dataTransfer.getData(\"storm-diagram-node\"));\n\t\t\t\t\t\t\tvar nodesCount = _.keys(\n\t\t\t\t\t\t\t\tthis.props.app\n\t\t\t\t\t\t\t\t\t.getDiagramEngine()\n\t\t\t\t\t\t\t\t\t.getDiagramModel()\n\t\t\t\t\t\t\t\t\t.getNodes()\n\t\t\t\t\t\t\t).length;\n\n\t\t\t\t\t\t\tvar node = null;\n\t\t\t\t\t\t\tif (data.type === \"table\") {\n\t\t\t\t\t\t\t\tnode = new Node(\"table\", `Node${nodesCount + 1}`, \"rgb(0,192,255)\");\n\t\t\t\t\t\t\t\tnode.addInPort(true, true, true, true, false, \"Id\", this.state.selectedRelation, this.props.app.getDiagramEngine(), PropertyType.INT);\n\t\t\t\t\t\t\t\tnode.addInPort(false, false, false, false, false, \"Name\", this.state.selectedRelation, this.props.app.getDiagramEngine(), PropertyType.NVARCHAR);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tnode = new Node(\"label\", \"Label \", \"rgb(192,255,0)\");\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tvar points = this.props.app.getDiagramEngine().getRelativeMousePoint(event);\n\t\t\t\t\t\t\tnode.x = points.x;\n\t\t\t\t\t\t\tnode.y = points.y;\n\t\t\t\t\t\t\tthis.props.app\n\t\t\t\t\t\t\t\t.getDiagramEngine()\n\t\t\t\t\t\t\t\t.getDiagramModel()\n\t\t\t\t\t\t\t\t.addNode(node);\n\t\t\t\t\t\t\tthis.forceUpdate();\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tonDragOver={event => {\n\t\t\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\t\t}}\n\n\t\t\t\t\t\tonClick={event => {\n\t\t\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\t\t\tthis.setState({\n\t\t\t\t\t\t\t\tselectedRelation: RelationType.none,\n\t\t\t\t\t\t\t\tshowDialog: false\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t}}\n\n// \t\t\t\t\t\tonMouseOverCapture={event => {\n// \t\t\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\t\t\t\n// \t\t\t\t\t\t\tif (this.props.app\n// \t\t\t\t\t\t\t\t.getDiagramEngine()\n// \t\t\t\t\t\t\t\t.getDiagramModel().getSelectedItems()[0] !== undefined) {\n// \t\t\t\t\t\t\t\t\tconsole.log('0000', this.props.app\n// \t\t\t\t\t\t\t\t\t.getDiagramEngine()\n// \t\t\t\t\t\t\t\t\t.getDiagramModel().getSelectedItems()[0].parent as Link);\n\n// \t\t\t\t\t\t\t\tlet a = (this.props.app\n// \t\t\t\t\t\t\t\t.getDiagramEngine()\n// \t\t\t\t\t\t\t\t.getDiagramModel().getSelectedItems()[0].parent as Link).sourcePort;\n// \t\t\t\t\t\t\t\tlet b = (this.props.app\n// \t\t\t\t\t\t\t\t\t.getDiagramEngine()\n// \t\t\t\t\t\t\t\t\t.getDiagramModel().getSelectedItems()[0].parent as Link).targetPort;\n// a.setSelected(true);\n// b.setSelected(true);\n\n// \t\t\t\t\t\t\t}\n// \t\t\t\t\t\t}}\n\n\n\n\t\t\t\t\t\tonDoubleClick={event => {\n\t\t\t\t\t\t\tevent.preventDefault();\n\n\t\t\t\t\t\t\tconsole.log('OOOO', this.props.app.getDiagramEngine().getDiagramModel().getSelectedItems());\nif (this.props.app.getDiagramEngine().getDiagramModel().getSelectedItems().length === 1) {\n\tthis.setState({\n\t\tselectedLink: this.props.app\n\t\t\t.getDiagramEngine()\n\t\t\t.getDiagramModel().getSelectedItems()[0].parent as Link,\n\t\tshowRelationDialog: true,\n\t\tselectedNode: null\n\t})\n} else {\nthis.setState({\n\t\t\t\t\t\t\t\tshowDialog: false,\n\t\t\t\t\t\t\t\tshowRelationDialog: false,\n\t\t\t\t\t\t\t\tselectedNode: this.props.app\n\t\t\t\t\t\t\t\t\t.getDiagramEngine()\n\t\t\t\t\t\t\t\t\t.getDiagramModel()\n\t\t\t\t\t\t\t\t\t.getSelectedItems()[0] as Node,\n\t\t\t\t\t\t\t\tdiagramEngine: this.props.app.getDiagramEngine()\n\t\t\t\t\t\t\t\t// ,\n\t\t\t\t\t\t\t\t// selectedLink: this.props.app\n\t\t\t\t\t\t\t\t// \t.getDiagramEngine()\n\t\t\t\t\t\t\t\t// \t.getDiagramModel()\n\t\t\t\t\t\t\t\t// \t.getSelectedItems()[1] as Link,\n\t\t\t\t\t\t\t});\n}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t}}\n\t\t\t\t\t>\n\t\t\t\t\t\t<DiagramWidget deleteKeys={[46]} className=\"srd-demo-canvas\" diagramEngine={this.props.app.getDiagramEngine()} />\n\n\t\t\t\t\t</div>\n\t\t\t\t\t{this.state.selectedNode != null ? <NodeProperties selectedRelation={this.state.selectedRelation} selectedLink={this.state.selectedLink} selectedItem={this.state.selectedNode} diagramEngine={this.state.diagramEngine} /> : null}\n\t\t\t\t\t{/* {this.state.showDialog ? <SQLResultDialog sqlStringResponse={this.state.sqlString} /> : null} */}\n\t\t\t\t\t<GenerationHandler isOpen={this.state.showDialog} serializeDiagram={this.props.app.getActiveDiagram().serializeDiagram()} />\n\t\t\t\t\t<RelationPopup diagramModel={this.props.app.getActiveDiagram()} update={() => this.updateRelationPopup()} isOpen={this.state.showRelationDialog} link={this.state.selectedLink} />\n\t\t\t\t</div>\n\t\t\t</div >\n\t\t);\n\t\t\n\t}\n}"]},"metadata":{},"sourceType":"module"}