{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\n\nvar _repeat = require(\"lodash/repeat\");\n\nvar _repeat2 = _interopRequireDefault(_repeat);\n\nvar _last = require(\"lodash/last\");\n\nvar _last2 = _interopRequireDefault(_last);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nvar INDENT_TYPE_TOP_LEVEL = \"top-level\";\nvar INDENT_TYPE_BLOCK_LEVEL = \"block-level\";\n/**\n * Manages indentation levels.\n *\n * There are two types of indentation levels:\n *\n * - BLOCK_LEVEL : increased by open-parenthesis\n * - TOP_LEVEL : increased by RESERVED_TOPLEVEL words\n */\n\nvar Indentation = function () {\n  /**\n   * @param {String} indent Indent value, default is \"  \" (2 spaces)\n   */\n  function Indentation(indent) {\n    _classCallCheck(this, Indentation);\n\n    this.indent = indent || \"  \";\n    this.indentTypes = [];\n  }\n  /**\n   * Returns current indentation string.\n   * @return {String}\n   */\n\n\n  Indentation.prototype.getIndent = function getIndent() {\n    return (0, _repeat2[\"default\"])(this.indent, this.indentTypes.length);\n  };\n  /**\n   * Increases indentation by one top-level indent.\n   */\n\n\n  Indentation.prototype.increaseToplevel = function increaseToplevel() {\n    this.indentTypes.push(INDENT_TYPE_TOP_LEVEL);\n  };\n  /**\n   * Increases indentation by one block-level indent.\n   */\n\n\n  Indentation.prototype.increaseBlockLevel = function increaseBlockLevel() {\n    this.indentTypes.push(INDENT_TYPE_BLOCK_LEVEL);\n  };\n  /**\n   * Decreases indentation by one top-level indent.\n   * Does nothing when the previous indent is not top-level.\n   */\n\n\n  Indentation.prototype.decreaseTopLevel = function decreaseTopLevel() {\n    if ((0, _last2[\"default\"])(this.indentTypes) === INDENT_TYPE_TOP_LEVEL) {\n      this.indentTypes.pop();\n    }\n  };\n  /**\n   * Decreases indentation by one block-level indent.\n   * If there are top-level indents within the block-level indent,\n   * throws away these as well.\n   */\n\n\n  Indentation.prototype.decreaseBlockLevel = function decreaseBlockLevel() {\n    while (this.indentTypes.length > 0) {\n      var type = this.indentTypes.pop();\n\n      if (type !== INDENT_TYPE_TOP_LEVEL) {\n        break;\n      }\n    }\n  };\n\n  return Indentation;\n}();\n\nexports[\"default\"] = Indentation;\nmodule.exports = exports[\"default\"];","map":null,"metadata":{},"sourceType":"script"}