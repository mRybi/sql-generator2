{"ast":null,"code":"import _classCallCheck from \"/home/dell/Dokumenty/sql-gen2/sql-gen2/sql-generator2/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/dell/Dokumenty/sql-gen2/sql-gen2/sql-generator2/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/dell/Dokumenty/sql-gen2/sql-gen2/sql-generator2/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/dell/Dokumenty/sql-gen2/sql-gen2/sql-generator2/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _get from \"/home/dell/Dokumenty/sql-gen2/sql-gen2/sql-generator2/node_modules/@babel/runtime/helpers/esm/get\";\nimport _inherits from \"/home/dell/Dokumenty/sql-gen2/sql-gen2/sql-generator2/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport * as _ from \"lodash\";\nimport { PortModel } from \"storm-react-diagrams\";\nimport { Link } from \"./Link\";\nimport { PropertyType } from \"./PropertyType\";\nimport { Node } from \"./Node\";\nimport { RelationType } from \"../../App2\";\nexport var Port =\n/*#__PURE__*/\nfunction (_PortModel) {\n  _inherits(Port, _PortModel);\n\n  function Port(isPrimaryKey, isForeignKey, isInput, name) {\n    var _this;\n\n    var label = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;\n    var selectedRelation = arguments.length > 5 ? arguments[5] : undefined;\n    var diagramModel = arguments.length > 6 ? arguments[6] : undefined;\n    var propertyType = arguments.length > 7 ? arguments[7] : undefined;\n    var id = arguments.length > 8 ? arguments[8] : undefined;\n\n    _classCallCheck(this, Port);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Port).call(this, name, \"with_prop\", id));\n    _this.in = void 0;\n    _this.label = void 0;\n    _this.propertyType = void 0;\n    _this.isPrimaryKey = void 0;\n    _this.isForeignKey = void 0;\n    _this.links = void 0;\n    _this.iterator = 1;\n    _this.firstM2M = 1;\n    _this.selectedRelation = void 0;\n    _this.diagramModel = void 0;\n    _this.in = isInput;\n    _this.label = label || name;\n    _this.links = {};\n    _this.propertyType = propertyType;\n    _this.isForeignKey = isForeignKey;\n    _this.isPrimaryKey = isPrimaryKey;\n    _this.selectedRelation = selectedRelation;\n    _this.diagramModel = diagramModel;\n    return _this;\n  }\n\n  _createClass(Port, [{\n    key: \"updatePortRelation\",\n    value: function updatePortRelation(selectedRelation) {\n      this.selectedRelation = selectedRelation;\n    }\n  }, {\n    key: \"deSerialize\",\n    value: function deSerialize(object, engine) {\n      _get(_getPrototypeOf(Port.prototype), \"deSerialize\", this).call(this, object, engine);\n\n      this.in = object.in;\n      this.label = object.label;\n    }\n  }, {\n    key: \"serialize\",\n    value: function serialize() {\n      return _.merge(_get(_getPrototypeOf(Port.prototype), \"serialize\", this).call(this), {\n        in: this.in,\n        label: this.label,\n        propertyType: PropertyType[this.propertyType],\n        isForeignKey: this.isForeignKey,\n        isPrimaryKey: this.isPrimaryKey\n      });\n    } // link(port: PortModel): LinkModel {\n    // \tlet link = this.createLinkModel();\n    // \tlink.setSourcePort(this);\n    // \tlink.setTargetPort(port);\n    // \treturn link;\n    // }\n\n  }, {\n    key: \"link\",\n    value: function link(nodeToLink) {\n      //dalczego  przypina do zlego portu?\n      console.log('nodeToLink', nodeToLink);\n      var thisPortNode = this.getNode();\n      var ports = nodeToLink.getInPorts();\n      var isThereAlreadyThatPort = ports.filter(function (p) {\n        return p.label === \"\".concat(thisPortNode.name, \"Id\");\n      }).length;\n\n      if (isThereAlreadyThatPort === 0) {\n        if (this.selectedRelation === RelationType.M2M) {\n          // let link = this.createLinkModel();\n          var relationNode = new Node('table', \"rl_\".concat(thisPortNode.name, \"Has\").concat(nodeToLink.name));\n          relationNode.addInPort(true, false, \"Id\", this.selectedRelation, this.diagramModel, PropertyType.INT);\n          relationNode.addInPort(false, true, \"\".concat(thisPortNode.name, \"Id\"), this.selectedRelation, this.diagramModel, PropertyType.INT);\n          relationNode.addInPort(false, true, \"\".concat(nodeToLink.name, \"Id\"), this.selectedRelation, this.diagramModel, PropertyType.INT);\n          this.diagramModel.addNode(relationNode); // link.setSourcePort(this);\n          // let ports = relationNode.getInPorts();\n          // link.setTargetPort(ports.filter(p => p.label === 'Id')[0]);\n          // console.log('port', ports.filter(p => p.label === 'Id')[0].getNode());\n          // return link;\n        } else {\n          var link = this.createLinkModel();\n          var newPort = nodeToLink.addInPort(false, true, \"\".concat(thisPortNode.name, \"Id\"), this.selectedRelation, this.diagramModel, PropertyType.INT);\n          console.log('newPort', newPort);\n          link.setSourcePort(this);\n          link.setTargetPort(newPort);\n          console.log('NEWLINK', link);\n          return link;\n        }\n      }\n\n      console.log('NULL');\n      return null;\n    }\n  }, {\n    key: \"canLinkToPort\",\n    value: function canLinkToPort(port) {\n      //logika czy mozna polaczyc\n      if (port instanceof Port) {\n        if (this.iterator === 1 && (this.isPrimaryKey && port.isForeignKey || this.isForeignKey && port.isPrimaryKey)) {\n          var nodeToLink = port.getNode();\n          this.link(nodeToLink);\n          this.iterator = 0;\n        } else if (this.isPrimaryKey && port.isPrimaryKey && (this.selectedRelation !== RelationType.M2M || this.firstM2M === 1)) {\n          var _nodeToLink = port.getNode();\n\n          this.link(_nodeToLink);\n          this.iterator = 0;\n          this.firstM2M = 0;\n        } // return (this.isPrimaryKey && port.isForeignKey || this.isForeignKey && port.isPrimaryKey) ? true : false\n\n\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"createLinkModel\",\n    value: function createLinkModel() {\n      var link = _get(_getPrototypeOf(Port.prototype), \"createLinkModel\", this).call(this);\n\n      if (this.selectedRelation === RelationType.O2O) {\n        return new Link(\"default\", RelationType.O2O);\n      } else if (this.selectedRelation === RelationType.O2M) {\n        return new Link(\"default\", RelationType.O2M);\n      } else {\n        return new Link(\"default\", RelationType.M2M);\n      }\n    }\n  }]);\n\n  return Port;\n}(PortModel);","map":{"version":3,"sources":["/home/dell/Dokumenty/sql-gen2/sql-gen2/sql-generator2/src/components/models/Port.ts"],"names":["_","PortModel","Link","PropertyType","Node","RelationType","Port","isPrimaryKey","isForeignKey","isInput","name","label","selectedRelation","diagramModel","propertyType","id","in","links","iterator","firstM2M","object","engine","merge","nodeToLink","console","log","thisPortNode","getNode","ports","getInPorts","isThereAlreadyThatPort","filter","p","length","M2M","relationNode","addInPort","INT","addNode","link","createLinkModel","newPort","setSourcePort","setTargetPort","port","O2O","O2M"],"mappings":";;;;;;AAAA,OAAO,KAAKA,CAAZ,MAAmB,QAAnB;AACA,SAASC,SAAT,QAA+F,sBAA/F;AACA,SAASC,IAAT,QAAqB,QAArB;AACA,SAASC,YAAT,QAA6B,gBAA7B;AACA,SAASC,IAAT,QAAqB,QAArB;AACA,SAASC,YAAT,QAA6B,YAA7B;AAGA,WAAaC,IAAb;AAAA;AAAA;AAAA;;AAYC,gBAAYC,YAAZ,EAAmCC,YAAnC,EAA0DC,OAA1D,EAA4EC,IAA5E,EAAuN;AAAA;;AAAA,QAA7HC,KAA6H,uEAA7G,IAA6G;AAAA,QAAvGC,gBAAuG;AAAA,QAAvEC,YAAuE;AAAA,QAA1CC,YAA0C;AAAA,QAAbC,EAAa;;AAAA;;AACtN,8EAAML,IAAN,EAAY,WAAZ,EAAyBK,EAAzB;AADsN,UAXvNC,EAWuN;AAAA,UAVpNL,KAUoN;AAAA,UATvNG,YASuN;AAAA,UARvNP,YAQuN;AAAA,UAPvNC,YAOuN;AAAA,UANvNS,KAMuN;AAAA,UALvNC,QAKuN,GALpM,CAKoM;AAAA,UAJvNC,QAIuN,GAJpM,CAIoM;AAAA,UAHvNP,gBAGuN;AAAA,UAFvNC,YAEuN;AAEtN,UAAKG,EAAL,GAAUP,OAAV;AACM,UAAKE,KAAL,GAAaA,KAAK,IAAID,IAAtB;AACA,UAAKO,KAAL,GAAa,EAAb;AACN,UAAKH,YAAL,GAAoBA,YAApB;AACA,UAAKN,YAAL,GAAoBA,YAApB;AACA,UAAKD,YAAL,GAAoBA,YAApB;AACA,UAAKK,gBAAL,GAAwBA,gBAAxB;AACA,UAAKC,YAAL,GAAmBA,YAAnB;AATsN;AAUtN;;AAtBF;AAAA;AAAA,uCAwBoBD,gBAxBpB,EAwBoD;AAClD,WAAKA,gBAAL,GAAwBA,gBAAxB;AACA;AA1BF;AAAA;AAAA,gCA4BaQ,MA5Bb,EA4B0BC,MA5B1B,EA4BiD;AAC/C,4EAAkBD,MAAlB,EAA0BC,MAA1B;;AACA,WAAKL,EAAL,GAAUI,MAAM,CAACJ,EAAjB;AACA,WAAKL,KAAL,GAAaS,MAAM,CAACT,KAApB;AACA;AAhCF;AAAA;AAAA,gCAkCa;AACX,aAAOX,CAAC,CAACsB,KAAF,sEAA2B;AACjCN,QAAAA,EAAE,EAAE,KAAKA,EADwB;AAExBL,QAAAA,KAAK,EAAE,KAAKA,KAFY;AAGjCG,QAAAA,YAAY,EAAEX,YAAY,CAAC,KAAKW,YAAN,CAHO;AAIjCN,QAAAA,YAAY,EAAE,KAAKA,YAJc;AAKjCD,QAAAA,YAAY,EAAE,KAAKA;AALc,OAA3B,CAAP;AAOA,KA1CF,CA4CC;AACA;AAEA;AACA;AACA;AACA;;AAlDD;AAAA;AAAA,yBAoDMgB,UApDN,EAoDmC;AACnC;AAECC,MAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BF,UAA1B;AAEA,UAAIG,YAAY,GAAG,KAAKC,OAAL,EAAnB;AACA,UAAIC,KAAK,GAAGL,UAAU,CAACM,UAAX,EAAZ;AACA,UAAIC,sBAAsB,GAAGF,KAAK,CAACG,MAAN,CAAa,UAAAC,CAAC;AAAA,eAAIA,CAAC,CAACrB,KAAF,eAAee,YAAY,CAAChB,IAA5B,OAAJ;AAAA,OAAd,EAAwDuB,MAArF;;AACA,UAAGH,sBAAsB,KAAK,CAA9B,EAAiC;AAChC,YAAG,KAAKlB,gBAAL,KAA0BP,YAAY,CAAC6B,GAA1C,EAA+C;AAC9C;AACA,cAAIC,YAAY,GAAG,IAAI/B,IAAJ,CAAS,OAAT,eAAwBsB,YAAY,CAAChB,IAArC,gBAA+Ca,UAAU,CAACb,IAA1D,EAAnB;AACAyB,UAAAA,YAAY,CAACC,SAAb,CAAuB,IAAvB,EAA6B,KAA7B,QAA0C,KAAKxB,gBAA/C,EAAiE,KAAKC,YAAtE,EAAoFV,YAAY,CAACkC,GAAjG;AACAF,UAAAA,YAAY,CAACC,SAAb,CAAuB,KAAvB,EAA8B,IAA9B,YAAuCV,YAAY,CAAChB,IAApD,SAA8D,KAAKE,gBAAnE,EAAqF,KAAKC,YAA1F,EAAwGV,YAAY,CAACkC,GAArH;AACAF,UAAAA,YAAY,CAACC,SAAb,CAAuB,KAAvB,EAA8B,IAA9B,YAAuCb,UAAU,CAACb,IAAlD,SAA4D,KAAKE,gBAAjE,EAAmF,KAAKC,YAAxF,EAAsGV,YAAY,CAACkC,GAAnH;AACA,eAAKxB,YAAL,CAAkByB,OAAlB,CAA0BH,YAA1B,EAN8C,CAS9C;AACA;AACA;AACA;AACA;AACA,SAdD,MAcO;AACN,cAAII,IAAI,GAAG,KAAKC,eAAL,EAAX;AAEA,cAAIC,OAAO,GAAGlB,UAAU,CAACa,SAAX,CAAqB,KAArB,EAA4B,IAA5B,YAAqCV,YAAY,CAAChB,IAAlD,SAA4D,KAAKE,gBAAjE,EAAmF,KAAKC,YAAxF,EAAsGV,YAAY,CAACkC,GAAnH,CAAd;AACAb,UAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBgB,OAAvB;AAEAF,UAAAA,IAAI,CAACG,aAAL,CAAmB,IAAnB;AAEAH,UAAAA,IAAI,CAACI,aAAL,CAAmBF,OAAnB;AACAjB,UAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBc,IAAvB;AACA,iBAAOA,IAAP;AACA;AACD;;AACDf,MAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AACA,aAAO,IAAP;AACC;AA1FF;AAAA;AAAA,kCA4FemB,IA5Ff,EA4FyC;AACvC;AACA,UAAIA,IAAI,YAAYtC,IAApB,EAA0B;AACzB,YAAG,KAAKY,QAAL,KAAkB,CAAlB,KAAwB,KAAKX,YAAL,IAAqBqC,IAAI,CAACpC,YAA1B,IAA0C,KAAKA,YAAL,IAAqBoC,IAAI,CAACrC,YAA5F,CAAH,EAA8G;AAC7G,cAAIgB,UAAU,GAAGqB,IAAI,CAACjB,OAAL,EAAjB;AACA,eAAKY,IAAL,CAAUhB,UAAV;AACA,eAAKL,QAAL,GAAgB,CAAhB;AACA,SAJD,MAIO,IAAG,KAAKX,YAAL,IAAqBqC,IAAI,CAACrC,YAA1B,KAA2C,KAAKK,gBAAL,KAA0BP,YAAY,CAAC6B,GAAvC,IAA8C,KAAKf,QAAL,KAAkB,CAA3G,CAAH,EAAiH;AACvH,cAAII,WAAU,GAAGqB,IAAI,CAACjB,OAAL,EAAjB;;AACA,eAAKY,IAAL,CAAUhB,WAAV;AACA,eAAKL,QAAL,GAAgB,CAAhB;AACA,eAAKC,QAAL,GAAgB,CAAhB;AAEA,SAXwB,CAYzB;;;AACA,eAAO,IAAP;AACA;;AACD,aAAO,KAAP;AAGA;AAhHF;AAAA;AAAA,sCAkH8B;AAC5B,UAAIoB,IAAI,4EAAR;;AACA,UAAI,KAAK3B,gBAAL,KAA0BP,YAAY,CAACwC,GAA3C,EAAgD;AAC/C,eAAO,IAAI3C,IAAJ,CAAS,SAAT,EAAoBG,YAAY,CAACwC,GAAjC,CAAP;AACA,OAFD,MAEO,IAAI,KAAKjC,gBAAL,KAA0BP,YAAY,CAACyC,GAA3C,EAAgD;AACtD,eAAO,IAAI5C,IAAJ,CAAS,SAAT,EAAoBG,YAAY,CAACyC,GAAjC,CAAP;AACA,OAFM,MAEA;AACN,eAAO,IAAI5C,IAAJ,CAAS,SAAT,EAAoBG,YAAY,CAAC6B,GAAjC,CAAP;AACA;AAED;AA5HF;;AAAA;AAAA,EAA0BjC,SAA1B","sourcesContent":["import * as _ from \"lodash\";\nimport { PortModel, DiagramEngine, LinkModel, DefaultLinkModel, NodeModel, DiagramModel } from \"storm-react-diagrams\";\nimport { Link } from \"./Link\";\nimport { PropertyType } from \"./PropertyType\";\nimport { Node } from \"./Node\";\nimport { RelationType } from \"../../App2\";\nimport { Application } from \"../dragAndDrop/Application\";\n\nexport class Port extends PortModel {\n\tin: boolean;\n    label: string;\n\tpropertyType: PropertyType;\n\tisPrimaryKey: boolean;\n\tisForeignKey: boolean;\n\tlinks: { [id: string]: Link };\n\titerator: number = 1;\n\tfirstM2M: number = 1;\n\tselectedRelation: RelationType;\n\tdiagramModel: DiagramModel;\n\n\tconstructor(isPrimaryKey: boolean, isForeignKey: boolean, isInput: boolean, name: string, label: string = null, selectedRelation: RelationType, diagramModel?: DiagramModel ,propertyType?: PropertyType, id?: string) {\n\t\tsuper(name, \"with_prop\", id);\n\t\tthis.in = isInput;\n        this.label = label || name;\n        this.links = {};\n\t\tthis.propertyType = propertyType;\n\t\tthis.isForeignKey = isForeignKey;\n\t\tthis.isPrimaryKey = isPrimaryKey;\n\t\tthis.selectedRelation = selectedRelation;\n\t\tthis.diagramModel= diagramModel;\n\t}\n\n\tupdatePortRelation(selectedRelation: RelationType) {\n\t\tthis.selectedRelation = selectedRelation;\n\t}\n\n\tdeSerialize(object: any, engine: DiagramEngine) {\n\t\tsuper.deSerialize(object, engine);\n\t\tthis.in = object.in;\n\t\tthis.label = object.label;\n\t}\n\n\tserialize() {\n\t\treturn _.merge(super.serialize(), {\n\t\t\tin: this.in,\n            label: this.label,\n\t\t\tpropertyType: PropertyType[this.propertyType],\n\t\t\tisForeignKey: this.isForeignKey,\n\t\t\tisPrimaryKey: this.isPrimaryKey\n\t\t});\n\t}\n\n\t// link(port: PortModel): LinkModel {\n\t// \tlet link = this.createLinkModel();\n\n\t// \tlink.setSourcePort(this);\n\t// \tlink.setTargetPort(port);\n\t// \treturn link;\n\t// }\n\n\tlink(nodeToLink: Node): LinkModel {\n//dalczego  przypina do zlego portu?\n\n\tconsole.log('nodeToLink', nodeToLink);\n\n\tlet thisPortNode = this.getNode() as Node;\n\tlet ports = nodeToLink.getInPorts();\n\tlet isThereAlreadyThatPort = ports.filter(p => p.label === `${thisPortNode.name}Id`).length;\n\tif(isThereAlreadyThatPort === 0) {\n\t\tif(this.selectedRelation === RelationType.M2M) {\n\t\t\t// let link = this.createLinkModel();\n\t\t\tlet relationNode = new Node('table', `rl_${thisPortNode.name}Has${nodeToLink.name}`);\n\t\t\trelationNode.addInPort(true, false, `Id`, this.selectedRelation, this.diagramModel, PropertyType.INT)\n\t\t\trelationNode.addInPort(false, true, `${thisPortNode.name}Id`, this.selectedRelation, this.diagramModel, PropertyType.INT)\n\t\t\trelationNode.addInPort(false, true, `${nodeToLink.name}Id`, this.selectedRelation, this.diagramModel, PropertyType.INT)\n\t\t\tthis.diagramModel.addNode(relationNode);\n\n\n\t\t\t// link.setSourcePort(this);\n\t\t\t// let ports = relationNode.getInPorts();\n\t\t\t// link.setTargetPort(ports.filter(p => p.label === 'Id')[0]);\n\t\t\t// console.log('port', ports.filter(p => p.label === 'Id')[0].getNode());\n\t\t\t// return link;\n\t\t} else {\n\t\t\tlet link = this.createLinkModel();\n\t\t\t\n\t\t\tlet newPort = nodeToLink.addInPort(false, true, `${thisPortNode.name}Id`, this.selectedRelation, this.diagramModel, PropertyType.INT);\n\t\t\tconsole.log('newPort', newPort);\n\t\n\t\t\tlink.setSourcePort(this);\n\t\t\t\n\t\t\tlink.setTargetPort(newPort);\n\t\t\tconsole.log('NEWLINK', link);\n\t\t\treturn link;\n\t\t}\n\t}\n\tconsole.log('NULL');\n\treturn null;\n\t}\n\n\tcanLinkToPort(port: PortModel): boolean {\n\t\t//logika czy mozna polaczyc\n\t\tif (port instanceof Port) {\n\t\t\tif(this.iterator === 1 && (this.isPrimaryKey && port.isForeignKey || this.isForeignKey && port.isPrimaryKey)) {\t\t\n\t\t\t\tlet nodeToLink = port.getNode() as Node;\n\t\t\t\tthis.link(nodeToLink);\n\t\t\t\tthis.iterator = 0;\n\t\t\t} else if(this.isPrimaryKey && port.isPrimaryKey && (this.selectedRelation !== RelationType.M2M || this.firstM2M === 1)){\t\t\n\t\t\t\tlet nodeToLink = port.getNode() as Node;\n\t\t\t\tthis.link(nodeToLink);\n\t\t\t\tthis.iterator = 0;\n\t\t\t\tthis.firstM2M = 0;\n\n\t\t\t}\n\t\t\t// return (this.isPrimaryKey && port.isForeignKey || this.isForeignKey && port.isPrimaryKey) ? true : false\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t\t\n\t\t\n\t}\n\n\tcreateLinkModel(): LinkModel {\n\t\tlet link = super.createLinkModel();\n\t\tif (this.selectedRelation === RelationType.O2O) {\n\t\t\treturn new Link(\"default\", RelationType.O2O);\n\t\t} else if (this.selectedRelation === RelationType.O2M) {\n\t\t\treturn new Link(\"default\", RelationType.O2M);\n\t\t} else {\n\t\t\treturn new Link(\"default\", RelationType.M2M);\n\t\t}\n\t\t\n\t}\n}"]},"metadata":{},"sourceType":"module"}