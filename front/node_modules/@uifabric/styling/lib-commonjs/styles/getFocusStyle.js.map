{"version":3,"file":"getFocusStyle.js","sourceRoot":"../src/","sources":["styles/getFocusStyle.ts"],"names":[],"mappings":";;AAEA,+CAAsD;AACtD,iDAA8D;AAC9D,uCAAsC;AAiCtC,uBACE,KAAa,EACb,cAAgD,EAChD,QAAkC,EAClC,iBAA6B,EAC7B,WAAoB,EACpB,YAAqB,EACrB,aAAuB;IAEvB,IAAI,OAAO,cAAc,KAAK,QAAQ,IAAI,CAAC,cAAc,EAAE;QACzD,OAAO,sBAAsB,CAAC,KAAK,EAAE,EAAE,KAAK,EAAE,cAAc,EAAE,QAAQ,UAAA,EAAE,iBAAiB,mBAAA,EAAE,WAAW,aAAA,EAAE,YAAY,cAAA,EAAE,aAAa,eAAA,EAAE,CAAC,CAAC;KACxI;SAAM;QACL,OAAO,sBAAsB,CAAC,KAAK,EAAE,cAAc,CAAC,CAAC;KACtD;AACH,CAAC;AAdD,sCAcC;AAED,gCAAgC,KAAa,EAAE,OAAoC;IAApC,wBAAA,EAAA,YAAoC;IAE/E,IAAA,kBAAS,EAAT,8BAAS,EACT,kBAAS,EAAT,8BAAS,EACT,qBAAqB,EAArB,0CAAqB,EACrB,6CAAiB,EACjB,wBAAiC,EAAjC,sDAAiC,EACjC,yBAA6C,EAA7C,kEAA6C,EAC7C,0BAAoB,EAApB,yCAAoB,CACV;IAEZ,OAAO;QACL,4FAA4F;QAC5F,OAAO,EAAE,aAAa;QACtB,+DAA+D;QAC/D,QAAQ,UAAA;QAER,SAAS;gBACP,qCAAqC;gBACrC,uDAAuD;gBACvD,oBAAoB,EAAE;oBACpB,MAAM,EAAE,GAAG;iBACZ;;YAED,sFAAsF;YACtF,mBAAmB;YACnB,GAAC,MAAI,mCAAuB,WAAK,aAAa,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,YAAQ,IAAG;gBACvE,OAAO,EAAE,IAAI;gBACb,QAAQ,EAAE,UAAU;gBACpB,IAAI,EAAE,KAAK,GAAG,CAAC;gBACf,GAAG,EAAE,KAAK,GAAG,CAAC;gBACd,MAAM,EAAE,KAAK,GAAG,CAAC;gBACjB,KAAK,EAAE,KAAK,GAAG,CAAC;gBAChB,MAAM,EAAK,KAAK,iBAAY,WAAa;gBACzC,OAAO,EAAK,KAAK,iBAAY,YAAc;gBAC3C,MAAM,EAAE,mBAAQ,CAAC,UAAU;gBAC3B,SAAS;oBACP,GAAC,mCAAoB,IAAG,iBAAiB;uBAC1C;aACF;eACF;KACF,CAAC;;AACJ,CAAC;AAED;;GAEG;AACH;IACE,OAAO;QACL,SAAS,EAAE;YACT,qBAAqB,EAAE;gBACrB,0FAA0F;gBAC1F,MAAM,EAAE,CAAC;aACV;YACD,GAAG,EAAE;gBACH,yFAAyF;gBACzF,OAAO,EAAE,aAAa;aACvB;SACF;KACF,CAAC;AACJ,CAAC;AAbD,gCAaC;AAED;;;;;;;;GAQG;AACH,8BAAqC,KAAa,EAAE,KAAiB,EAAE,KAAiB,EAAE,KAAc;IAApD,sBAAA,EAAA,SAAiB;IAAE,sBAAA,EAAA,SAAiB;IACtF,OAAO;QACL,SAAS;YACP,GAAC,aAAW,mCAAuB,cAAW,IAAG;gBAC/C,OAAO,EAAK,KAAK,gBAAU,KAAK,IAAI,KAAK,CAAC,OAAO,CAAC,gBAAgB,CAAE;gBACpE,aAAa,EAAK,CAAC,KAAK,OAAI;aAC7B;eACF;KACF,CAAC;;AACJ,CAAC;AATD,oDASC","sourcesContent":["import { IRawStyle } from '@uifabric/merge-styles';\r\nimport { IGetFocusStylesOptions, ITheme } from '../interfaces/index';\r\nimport { HighContrastSelector } from './CommonStyles';\r\nimport { IsFocusVisibleClassName } from '@uifabric/utilities';\r\nimport { ZIndexes } from './zIndexes';\r\n\r\n/**\r\n * Generates a focus style which can be used to define an :after focus border.\r\n *\r\n * @param theme - The theme object to use.\r\n * @param options - Options to customize the focus border.\r\n * @returns The style object.\r\n */\r\nexport function getFocusStyle(theme: ITheme, options?: IGetFocusStylesOptions): IRawStyle;\r\n/**\r\n * Generates a focus style which can be used to define an :after focus border.\r\n *\r\n * @param theme - The theme object to use.\r\n * @param inset - The number of pixels to inset the border.\r\n * @param position - The positioning applied to the container. Must\r\n * be 'relative' or 'absolute' so that the focus border can live around it.\r\n * @param highContrastStyle - Style for high contrast mode.\r\n * @param borderColor - Color of the border.\r\n * @param outlineColor - Color of the outline.\r\n * @param isFocusedOnly - If the styles should apply on focus or not.\r\n * @returns The style object.\r\n * @deprecated Use the object parameter version instead.\r\n */\r\nexport function getFocusStyle(\r\n  theme: ITheme,\r\n  inset?: number,\r\n  position?: 'relative' | 'absolute',\r\n  highContrastStyle?: IRawStyle | undefined,\r\n  borderColor?: string,\r\n  outlineColor?: string,\r\n  isFocusedOnly?: boolean\r\n): IRawStyle;\r\nexport function getFocusStyle(\r\n  theme: ITheme,\r\n  insetOrOptions?: number | IGetFocusStylesOptions,\r\n  position?: 'relative' | 'absolute',\r\n  highContrastStyle?: IRawStyle,\r\n  borderColor?: string,\r\n  outlineColor?: string,\r\n  isFocusedOnly?: boolean\r\n): IRawStyle {\r\n  if (typeof insetOrOptions === 'number' || !insetOrOptions) {\r\n    return _getFocusStyleInternal(theme, { inset: insetOrOptions, position, highContrastStyle, borderColor, outlineColor, isFocusedOnly });\r\n  } else {\r\n    return _getFocusStyleInternal(theme, insetOrOptions);\r\n  }\r\n}\r\n\r\nfunction _getFocusStyleInternal(theme: ITheme, options: IGetFocusStylesOptions = {}): IRawStyle {\r\n  const {\r\n    inset = 0,\r\n    width = 1,\r\n    position = 'relative',\r\n    highContrastStyle,\r\n    borderColor = theme.palette.white,\r\n    outlineColor = theme.palette.neutralSecondary,\r\n    isFocusedOnly = true\r\n  } = options;\r\n\r\n  return {\r\n    // Clear browser-specific focus styles and use 'transparent' as placeholder for focus style.\r\n    outline: 'transparent',\r\n    // Requirement because pseudo-element is absolutely positioned.\r\n    position,\r\n\r\n    selectors: {\r\n      // Clear the focus border in Firefox.\r\n      // Reference: http://stackoverflow.com/a/199319/1436671\r\n      '::-moz-focus-inner': {\r\n        border: '0'\r\n      },\r\n\r\n      // When the element that uses this mixin is in a :focus state, add a pseudo-element to\r\n      // create a border.\r\n      [`.${IsFocusVisibleClassName} &${isFocusedOnly ? ':focus' : ''}:after`]: {\r\n        content: '\"\"',\r\n        position: 'absolute',\r\n        left: inset + 1,\r\n        top: inset + 1,\r\n        bottom: inset + 1,\r\n        right: inset + 1,\r\n        border: `${width}px solid ${borderColor}`,\r\n        outline: `${width}px solid ${outlineColor}`,\r\n        zIndex: ZIndexes.FocusStyle,\r\n        selectors: {\r\n          [HighContrastSelector]: highContrastStyle\r\n        }\r\n      }\r\n    }\r\n  };\r\n}\r\n\r\n/**\r\n * Generates style to clear browser specific focus styles.\r\n */\r\nexport function focusClear(): IRawStyle {\r\n  return {\r\n    selectors: {\r\n      '&::-moz-focus-inner': {\r\n        // Clear the focus border in Firefox. Reference: http://stackoverflow.com/a/199319/1436671\r\n        border: 0\r\n      },\r\n      '&': {\r\n        // Clear browser specific focus styles and use transparent as placeholder for focus style\r\n        outline: 'transparent'\r\n      }\r\n    }\r\n  };\r\n}\r\n\r\n/**\r\n * Generates a style which can be used to set a border on focus.\r\n *\r\n * @param theme - The theme object to use.\r\n * @param inset - The number of pixels to inset the border (default 0)\r\n * @param width - The border width in pixels (default 1)\r\n * @param color - Color of the outline (default `theme.palette.neutralSecondary`)\r\n * @returns The style object.\r\n */\r\nexport function getFocusOutlineStyle(theme: ITheme, inset: number = 0, width: number = 1, color?: string): IRawStyle {\r\n  return {\r\n    selectors: {\r\n      [`:global(${IsFocusVisibleClassName}) &:focus`]: {\r\n        outline: `${width} solid ${color || theme.palette.neutralSecondary}`,\r\n        outlineOffset: `${-inset}px`\r\n      }\r\n    }\r\n  };\r\n}\r\n"]}