{"version":3,"sources":["components/TrayWidget.tsx","components/TrayItemWidget.tsx","helpers/DemoCanvasWidget.tsx","infrastructure/models/ArrowLinkModel.ts","infrastructure/models/DefaultLabelModel.tsx","infrastructure/models/DefaultNodeModel.ts","infrastructure/models/DefaultLinkModel.ts","infrastructure/Toolkit.ts","infrastructure/models/DefaultPortModel.ts","infrastructure/models/ArrowPortModel.ts","components/TrayItemDiv.tsx","infrastructure/models/PropertyType.ts","components/grid/Grid.tsx","components/grid/Row.tsx","components/grid/Col.tsx","components/PropertyTable/PropertyTable.tsx","components/DarkInput.tsx","components/NodeProperties/NodeProperties.tsx","components/popups/ResultPopup/ResultPopup.tsx","handlers/GenerationHandler.tsx","components/popups/LoadFilePopup/LoadFilePopup.tsx","handlers/LoadFileHandler.tsx","components/popups/SaveToFilePopup/SaveToFilePopup.tsx","components/popups/SaveToJpegPopup/SaveToJpegPopup.tsx","components/popups/RealtionPopup/RelationPopup.tsx","components/BodyWidget.tsx","infrastructure/widgets/ArrowLinkWidget.tsx","infrastructure/factories/ArrowLinkFactory.tsx","infrastructure/widgets/DefaultPortLabelWidget.tsx","infrastructure/widgets/DefaultNodeWidget.tsx","infrastructure/factories/DefaultNodeFactory.tsx","infrastructure/widgets/DefaultLabelWidget.tsx","infrastructure/factories/DefaultLabelFactory.tsx","infrastructure/factories/DefaultPortFactory.tsx","infrastructure/widgets/DefaultLinkPointWidget.tsx","infrastructure/widgets/DefaultLinkSegmentWidget.tsx","infrastructure/widgets/DefaultLinkWidget.tsx","infrastructure/factories/DefaultLinkFactory.tsx","infrastructure/widgets/CustomLabelWidget.tsx","infrastructure/factories/CustomLabelFactory.tsx","infrastructure/factories/ArrowPortFactory.tsx","components/Application.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["S","styled","div","TrayWidget","Tray","this","props","children","React","p","color","TrayItemWidget","draggable","onDragStart","event","dataTransfer","setData","JSON","stringify","model","name","Container","background","DemoCanvasWidget","ArrowLinkModel","options","type","width","selectedColor","curvyness","DefaultLinkModel","DefaultLabelModel","offsetY","label","data","LabelModel","DefaultNodeModel","isLabel","portsIn","lookupTable","clone","portsOut","port","getOptions","in","indexOf","push","_","portsInOrder","id","getPortFromID","NodeModel","withPoint","number","addLabel","point","PointModel","link","setPosition","position","x","y","addPoint","relName","properties","alignment","PortModelAlignment","RIGHT","LEFT","TOP","points","length","curve","BezierCurve","setSource","getFirstPoint","getPosition","setTarget","getLastPoint","setSourceControl","setTargetControl","sourcePort","getSourceControl","translate","calculateControlOffset","getSourcePort","targetPort","getTargetControl","getTargetPort","getSVGCurve","relPorts","getPorts","Object","values","map","a","propertyType","isPrimaryKey","isNotNull","isAutoincremented","isUnique","propertiesNode","forEach","rel","addPort","DefaultPortModel","labelOb","setLabel","fireEvent","LinkModel","Toolkit","TESTING","TESTING_UID","replace","c","r","Math","random","toString","element","selector","document","body","closest","logic","isNamePort","isForeignKey","isPartialKey","engine","fkPortId","alignemnt","UID","links","dEngine","newLabel","newPropType","factory","createLinkModel","setSourcePort","setTargetPort","removeMiddlePoints","getParent","recursiveRelation","generateModel","linksCount","keys","getModel","getLinks","console","log","PortModel","AdvancedPortModel","thisParent","portNode","portNodePorts","thisParentPorts","czyMaPortZPKjakoFk","find","czyMaPortZPKjakoFk2","pk","marginTop","isSelected","css","isDisabled","PropertyType","TrayItemDiv","Grid","style","className","buildClassNameString","Row","flex","Col","onDoubleClick","size","config","pull","offset","order","hidden","buildGridColConfigClassNames","sm","md","lg","xl","xxl","xxxl","PropertyTable","useState","updatedItem","setUpdatedItem","forceUpdate","setValue","value","useForceUpdate","useEffect","updateOptionsLabel","updateAttributesTypes","useMemo","selectedItem","handleChangePK","row","persist","ports","clearPartialKeys","allPorts","names","index","optionsNames","endsWith","updateOptionsPropertyType","columns","key","dataField","text","formatter","cellContent","defaultValue","onChange","toLowerCase","trim","includes","target","relView","relationAtributes","attString","getLabels","relationName","handleChangePortLabel","paddingLeft","list","handleChangepPropType","obj","checked","handleChangeFK","handleChangePartialKey","disabled","handleChangeNull","handleChangeAutoInc","handleChangeUnique","onClick","removePort","filter","getID","labels","oldLabel","slice","portsTable","cols","col","isLogic","keyField","bordered","AddNewAtributeButton","newPortNumber","addNewPort","input","fontSize","DarkInput","Input","NodeProperties","defaultName","setDefaultName","setName","showInput","setShowInput","setLocked","handleNameChange","diagramEngine","getNodes","node","height","wordBreak","update","ResultPopup","dbName","setDbName","mySQLView","setmySQLView","formatedMSSQL","mssqlString","sqlFormatter","format","language","indent","formatedMySQL","mysqlString","modal","closeOnDocumentClick","open","isOpen","closeOnEscape","marginRight","generateScript","readOnly","contentEditable","blob","Blob","FileSaver","saveAs","GenerationHandler","sqlString","setSqlString","setMySqlString","dbms","serDiagram","serializeDiagram","dNodes","nodes","dLinks","diagramJson","diagram","axios","post","SerializedModel","DatabaseName","RelationType","isUml","response","status","errorMessage","responseMy","LoadFilePopup","fileReader","fileContent","setFileContent","handleFileRead","e","content","result","onClose","files","FileReader","onloadend","readAsText","accept","loadDiagram","LoadFileHandler","app","getDiagramEngine","parse","setIsUml","consceptual","DiagramModel","conceptualDiagram","deserializeModel","splice","loadConceptualModel","setIsLogic","logicalDiagram","loadLogicModel","repaintCanvas","error","SaveToFilePopup","fileName","setFileName","diagramModel","serialize","secondModel","getActiveNodeLayer","SaveToJpegPopup","domtoimage","toJpeg","getElementById","quality","then","dataUrl","createElement","download","href","click","RelationPopup","left","setLeft","right","setRight","setRelationAtributes","relationNameOnly","setRelationNameOnly","leftLabel","rightLabel","handleRelationNameChenge","getPoints","remove","sourceP","targetP","removeLink","renderOptionPicker","side","GridItem","newSourceP","newTargetP","addLink","GridContainer","margin","span","BodyWidget","showDialog","setShowDialog","showRelationDialog","setShowRelationDialog","showLoadFileDialog","setShowLoadFileDialog","showSaveFileDialog","setSaveFileDialog","showSaveJPEGDialog","setSaveJPEGDialog","showSaveOptions","setSaveOptions","selectedNode","setSelectedNode","selectedLink","setSelectedLink","isLogicModel","setIsLogicModel","changeRelation","temp","substring","temp2","refreshPopups","Body","Header","Content","DropdownIcon","setConceptualModel","setLogicModel","Layer","onDrop","getData","nodesCount","newNodeName","getRelativeMousePoint","addNode","onDragOver","preventDefault","ctrlKey","getSelectedEntities","getActiveDiagram","getLogicDiagram","CustomLinkArrowWidget","previousPoint","setSelected","angle","atan2","PI","transform","fill","onMouseLeave","onMouseEnter","data-id","data-linkid","getLink","ArrowLinkWidget","colorSelected","paths","refPaths","j","generateLink","LinkWidget","generateLinePath","onMouseDown","addPointToLink","generateArrow","i","generatePoint","data-default-link-test","testName","DefaultLinkWidget","ArrowLinkFactory","DefaultLinkFactory","PortItem","DefaultPortLabel","portJSX","Port","PortLabel","PrimaryKeyIcon","NamedPort","PortContainer","HiddenPort","selected","DefaultNodeWidget","generatePort","portsJSX","namedPortsJSX","notNamedPortsJSX","Node","data-default-node-name","Title","NamedPortLeft","TitleName","NamedPortRight","Ports","PortsContainer","DefaultNodeFactory","AbstractReactFactory","DefaultLabelWidget","Label","DefaultLabelFactory","DefaultPortFactory","AbstractModelFactory","PointTop","circle","DefaultLinkPointWidget","state","cx","cy","setState","opacity","DefaultLinkSegmentWidget","Bottom","generateLinkSegment","path","ref","forwardRef","Top","strokeLinecap","onSelection","extras","strokeOpacity","strokeWidth","onContextMenu","isLocked","setRenderedPaths","current","shiftKey","getMaxNumberPointsPerLink","stopPropagation","getActionEventBus","fireAction","extraProps","getFactoryForLink","getSVGPath","Keyframes","keyframes","Path","stroke","d","CustomLabelWidget","CustomLabelFactory","ArrowPortFactory","Application","createEngine","getNodeFactories","registerFactory","getLabelFactories","getPortFactories","getLinkFactories","getStateMachine","getCurrentState","DefaultDiagramState","dragNewLink","allowLooseLinks","newModel","activeModel","logicModel","setModel","concNodes","k","nodePorts","logicPort","nodesWithoutPK","n","priorityLinks","sourceNode","targetNode","priom2mLinks","sourceLabel","targetLabel","priosourceLinks","priotargetLinks","priooneToOneLinks","convertTargetPorts","convertSourceLinks","convertM2MLink","concLinks","m2mLinks","sourceLinks","targetLinks","oneToOneLinks","activeModelCopy","logicNodes","sourceNodeId","targetNodeId","relNode","sourceNodePorts","sourceNodePKPort","targetNodePorts","targetNodePKPort","targetNodePrimaryKeysPorts","sourceNodePrimaryKeysPorts","node2","targetP2","sourceP2","link2","addAll","tNode","Boolean","window","location","hostname","match","ReactDOM","render","App","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"4mBAGUA,M,KACS,KAAGC,UAAOC,IAAV,KAQZ,I,EAAMC,EAAb,uKAEI,OAAO,gBAACH,EAAEI,KAAH,KAASC,KAAKC,MAAMC,cAF/B,GAAgCC,a,yQCHb,OAAGP,UAAOC,IAAV,KAKG,SAACO,GAAD,OAAOA,EAAEC,S,CANrBV,M,KAaH,IAAMW,EAAb,uKACY,IAAD,OACP,OACE,gBAAC,EAAEP,KAAH,CACEM,MAAOL,KAAKC,MAAMI,MAClBE,WAAW,EACXC,YAAa,SAACC,GACZA,EAAMC,aAAaC,QACjB,qBACAC,KAAKC,UAAU,EAAKZ,MAAMa,UAI7Bd,KAAKC,MAAMc,UAbpB,GAAoCZ,a,mtBCb7B,IAAMa,EAAYpB,UAAOC,IAAV,KAEA,SAACO,GAAD,OAAOA,EAAEa,cAWvB,SAACb,GAAD,OAAOA,EAAEC,SACT,SAACD,GAAD,OAAOA,EAAEC,SAGT,SAACD,GAAD,OAAOA,EAAEC,SACT,SAACD,GAAD,OAAOA,EAAEC,SAOT,SAACD,GAAD,OAAOA,EAAEC,SACT,SAACD,GAAD,OAAOA,EAAEC,SAGT,SAACD,GAAD,OAAOA,EAAEC,SACT,SAACD,GAAD,OAAOA,EAAEC,SAMJa,EAAb,uKAEI,OACE,gBAACF,EAAD,CACEC,WAAYjB,KAAKC,MAAMgB,YAAc,kBACrCZ,MAAOL,KAAKC,MAAMI,OAAS,2BAE1BL,KAAKC,MAAMC,cAPpB,GAAsCC,a,QCzCzBgB,EAAb,kDACE,aAAoD,IAAxCC,EAAuC,uDAAJ,GAAI,oDAE/CC,KAAM,QACNC,MAAOF,EAAQE,OAAS,EACxBjB,MAAOe,EAAQf,OAAS,OACxBkB,cAAeH,EAAQG,eAAiB,iBACxCC,UAAW,GACRJ,IART,UAAoCK,oB,yCCYvBC,EAAb,kDACE,aAAqD,IAAzCN,EAAwC,uDAAJ,GAAI,oDAEhDO,QAA4B,MAAnBP,EAAQO,SAAmB,GAAKP,EAAQO,QACjDN,KAAM,WACHD,IALT,qDASWQ,GACP5B,KAAKoB,QAAQQ,MAAQA,IAVzB,kCAacnB,GACV,mEAAkBA,GAClBT,KAAKoB,QAAQQ,MAAQnB,EAAMoB,KAAKD,QAfpC,kCAmBI,OAAO,kGAELA,MAAO5B,KAAKoB,QAAQQ,YArB1B,GAAuCE,c,QCK1BC,EAAb,kDAKE,WAAYC,EAAkBjB,EAAcV,GAAgB,IAAD,8BACzD,cAAM,CACJgB,KAAM,UACNN,OACAV,WAEG2B,QAAUA,EACf,EAAKC,QAAU,GAP0C,EAL7D,oDAeUC,EAAiBC,GACvBA,EAAMF,QAAU,GAChBE,EAAMC,SAAW,GACjB,+DAAcF,EAAaC,KAlB/B,iCAqByCE,GACrC,kEAAiBA,KAtBrB,8BAyBsCA,GAOlC,OANA,+DAAcA,GACVA,EAAKC,aAAaC,KACgB,IAAhCvC,KAAKiC,QAAQO,QAAQH,IACvBrC,KAAKiC,QAAQQ,KAAKJ,GAGfA,IAhCX,kCAmCc5B,GAAgC,IAAD,OACzC,mEAAkBA,GAClBT,KAAKoB,QAAQL,KAAON,EAAMoB,KAAKd,KAC/Bf,KAAKoB,QAAQf,MAAQI,EAAMoB,KAAKxB,MAChCL,KAAKiC,QAAUS,MAAMjC,EAAMoB,KAAKc,cAAc,SAACC,GAC7C,OAAO,EAAKC,cAAcD,MAE5B5C,KAAKgC,QAAUvB,EAAMoB,KAAKG,UA1C9B,kCA8CI,OAAO,kGAELjB,KAAMf,KAAKoB,QAAQL,KACnBV,MAAOL,KAAKoB,QAAQf,MACpB2B,QAAShC,KAAKgC,YAlDpB,mCAuDI,OAAOhC,KAAKiC,YAvDhB,GAAsCa,aCuCzBrB,EAAb,kDAIE,aAAuG,IAAD,EAA1FL,EAA0F,uDAAvD,GAAI2B,EAAmD,uCAAjBC,EAAiB,uCAepG,GAfoG,qBACpG,2BACE3B,KAAM,UACNC,MAAOF,EAAQE,OAAS,EACxBjB,MAAOe,EAAQf,OAAS,OACxBkB,cAAeH,EAAQG,eAAiB,iBACxCC,UAAW,GACRJ,KAGA6B,SAAS,OACd,EAAKA,SAAL,yBAAgCD,GAAU,EAA1C,QACA,EAAKC,SAAS,OAGXF,EAAW,CACZ,IAAIG,EAAQ,IAAIC,aAAW,CAACC,KAAK,iBACjCF,EAAMG,YAAYN,EAAUO,SAASC,EAAGR,EAAUO,SAASE,GAC3D,EAAKC,SAASP,GAlBoF,OAsBpG,EAAKQ,QAAU,gBAEf,EAAKC,WAAa,IAAI5B,GAAiB,EAAO,UAAW,kBAxB2C,EAJxG,mEA+ByBM,GACrB,OAAIA,EAAKC,aAAasB,YAAcC,qBAAmBC,MAC9C,CAAC9D,KAAKoB,QAAQI,UAAW,GACvBa,EAAKC,aAAasB,YAAcC,qBAAmBE,KACrD,EAAE/D,KAAKoB,QAAQI,UAAW,GACxBa,EAAKC,aAAasB,YAAcC,qBAAmBG,IACrD,CAAC,GAAIhE,KAAKoB,QAAQI,WAEpB,CAAC,EAAGxB,KAAKoB,QAAQI,aAvC5B,mCA4CI,GAA2B,IAAvBxB,KAAKiE,OAAOC,OAAc,CAC5B,IAMqB,EAMA,EAZfC,EAAQ,IAAIC,cAMlB,GALAD,EAAME,UAAUrE,KAAKsE,gBAAgBC,eACrCJ,EAAMK,UAAUxE,KAAKyE,eAAeF,eACpCJ,EAAMO,iBAAiB1E,KAAKsE,gBAAgBC,cAAcpC,SAC1DgC,EAAMQ,iBAAiB3E,KAAKyE,eAAeF,cAAcpC,SAErDnC,KAAK4E,YACP,EAAAT,EACGU,oBACAC,UAFH,oBAEgB9E,KAAK+E,uBAAuB/E,KAAKgF,mBAGnD,GAAIhF,KAAKiF,YACP,EAAAd,EACGe,oBACAJ,UAFH,oBAEgB9E,KAAK+E,uBAAuB/E,KAAKmF,mBAEnD,OAAOhB,EAAMiB,iBA9DnB,kCAmEI,IAAIC,EACFrF,KAAK2D,YACL3D,KAAK2D,WAAW2B,YAChBC,OAAOC,OAAOxF,KAAK2D,WAAW2B,YAC5B3B,EACF0B,GACAA,EAASI,KAAI,SAACC,GACZ,MAAO,CACL9D,MAAO8D,EAAE9D,MACT+D,aAAcD,EAAEC,aAChBC,aAAcF,EAAEE,aAChBC,UAAWH,EAAEG,UACbC,kBAAmBJ,EAAEI,kBACrBC,SAAUL,EAAEK,aAIlB,OAAO,kGAELzE,MAAOtB,KAAKoB,QAAQE,MACpBjB,MAAOL,KAAKoB,QAAQf,MACpBmB,UAAWxB,KAAKoB,QAAQI,UACxBD,cAAevB,KAAKoB,QAAQG,cAC5BmC,QAAS1D,KAAK0D,QACdC,iBA3FN,kCA+FclD,GACV,IAAIuF,EAAiB,IAAIjE,GACvB,EACA,UACA,kBAEFtB,EAAMoB,KAAK8B,WAAWsC,SAAQ,SAACC,GAC7BF,EAAeG,QACb,IAAIC,GACF,EACAF,EAAItE,OACJ,EACAsE,EAAIN,cACJ,GACA,EACAM,EAAIL,UACJK,EAAIJ,kBACJI,EAAIH,SACJG,EAAIP,kBAKV,mEAAkBlF,GAClBT,KAAKoB,QAAQf,MAAQI,EAAMoB,KAAKxB,MAChCL,KAAKoB,QAAQE,MAAQb,EAAMoB,KAAKP,MAChCtB,KAAKoB,QAAQI,UAAYf,EAAMoB,KAAKL,UACpCxB,KAAKoB,QAAQG,cAAgBd,EAAMoB,KAAKN,cACxCvB,KAAK2D,WAAaqC,EAClBhG,KAAK0D,QAAUjD,EAAMoB,KAAK6B,UA5H9B,+BA+HW9B,GACP,GAAIA,aAAiBE,aACnB,OAAO,gEAAeF,GAExB,IAAIyE,EAAU,IAAI3E,EAElB,OADA2E,EAAQC,SAAS1E,GACV,gEAAeyE,KArI1B,+BAwIW/E,GACPtB,KAAKoB,QAAQE,MAAQA,EACrBtB,KAAKuG,UAAU,CAAEjF,SAAS,kBA1I9B,+BA6IWjB,GACPL,KAAKoB,QAAQf,MAAQA,EACrBL,KAAKuG,UAAU,CAAElG,SAAS,oBA/I9B,GAAsCmG,a,SCzDzBC,EAAb,mGASI,OAAIA,EAAQC,SACVD,EAAQE,cACF,GAAN,OAAUF,EAAQE,cAEb,uCAAuCC,QAAQ,SAAS,SAACC,GAC9D,IAAMC,EAAqB,GAAhBC,KAAKC,SAAiB,EAEjC,OADgB,MAANH,EAAYC,EAAS,EAAJA,EAAW,GAC7BG,SAAS,SAhBxB,8BAuBwBC,EAAkBC,GACtC,OAAIC,SAASC,KAAKC,QACTJ,EAAQI,QAAQH,GAElBG,EAAQJ,EAASC,OA3B5B,KAAaV,EACJC,SAAmB,EADfD,EAEJE,YAAc,ECoBhB,I,EAAMP,EAAb,kDAeE,WACEmB,EACAxG,EACAyG,EACA5B,EACA6B,EACAC,EACA7B,EACAC,EACAC,EACAJ,EACAgC,EACA/E,EACAgF,EACAC,GACC,IAAD,8BACA,cAAM,CACJjF,GAAIA,GAAM6D,EAAQqB,MAClBvF,IAAI,EACJxB,OACAa,MAAOb,EACP4E,aAAcA,EACd/B,UAAWiE,EACXxG,KAAMkG,EAAQ,QAAU,aAGrB3F,MAAQb,EACb,EAAKyG,WAAaA,EAClB,EAAKO,MAAQ,GAEb,EAAKnC,aAAeA,EACpB,EAAK6B,aAAeA,EACpB,EAAKC,aAAeA,EAEpB,EAAK7B,UAAYA,EACjB,EAAKE,SAAWA,EAChB,EAAKD,kBAAoBA,EAEzB,EAAKH,aAAeA,EACpB,EAAKiC,SAAWA,EAEhB,EAAKI,QAAUL,EA1Bf,EA9BJ,wDA2DclH,GACV,mEAAkBA,GAClBT,KAAKoB,QAAQmB,GAAK9B,EAAMoB,KAAKU,GAC7BvC,KAAKoB,QAAQQ,MAAQnB,EAAMoB,KAAKD,MAEhC5B,KAAK4B,MAAQnB,EAAMoB,KAAKD,MACxB5B,KAAKwH,WAAa/G,EAAMoB,KAAK2F,WAE7BxH,KAAK4F,aAAenF,EAAMoB,KAAK+D,aAC/B5F,KAAK0H,aAAejH,EAAMoB,KAAK6F,aAE/B1H,KAAKyH,aAAehH,EAAMoB,KAAK4F,aAC/BzH,KAAK6F,UAAYpF,EAAMoB,KAAKgE,UAC5B7F,KAAK+F,SAAWtF,EAAMoB,KAAKkE,SAC3B/F,KAAK8F,kBAAoBrF,EAAMoB,KAAKiE,kBACpC9F,KAAK2F,aAAelF,EAAMoB,KAAK8D,aAC/B3F,KAAK4H,SAAWnH,EAAMoB,KAAK+F,WA3E/B,kCA+EI,OAAO,kGAELrF,GAAIvC,KAAKuC,GACTX,MAAO5B,KAAK4B,MACZ4F,WAAYxH,KAAKwH,WACjB5B,aAAc5F,KAAK4F,aACnB8B,aAAc1H,KAAK0H,aAEnBD,aAAczH,KAAKyH,aACnB5B,UAAW7F,KAAK6F,UAChBE,SAAU/F,KAAK+F,SACfD,kBAAmB9F,KAAK8F,kBACxBH,aAAc3F,KAAK2F,aACnBiC,SAAU5H,KAAK4H,aA5FrB,yCAgGqBK,GACjBjI,KAAKoB,QAAQQ,MAAQqG,IAjGzB,gDAoG4BC,GACxBlI,KAAKoB,QAAQuE,aAAeuC,IArGhC,2BAyGI7F,EACA8F,GAEA,IAAI/E,EAAOpD,KAAKoI,gBAAgBD,GAIhC,OAHA/E,EAAKiF,cAAcrI,MACnBoD,EAAKkF,cAAcjG,GACnBe,EAAKmF,qBACEnF,IAhHX,oCAmHgBf,GACZ,OAAIA,IAASrC,OAGTqC,EAAKmG,cAAgBxI,KAAKwI,aAC5BxI,KAAKyI,kBAAkBpG,IAGlB,KA3HX,sCA8HkB8F,GACd,IAAI/E,EAAI,wEACR,IAAKA,GAAQ+E,EACX,OAAOA,EAAQO,cAAc,IAE/B,IAAIC,EAAajG,IAAEkG,KACjB5I,KAAKgI,QAAQa,WAAWC,YACxB5E,OAIF,OAFA6E,QAAQC,IAAIL,GAELvF,GAAQ,IAAI3B,EAAiB,GAAI,CAAC6B,SAAU,CAACC,EAAGvD,KAAKuE,cAAchB,EAAI,GAAIC,EAAGxD,KAAKuE,cAAcf,EAAI,MAAQmF,EAAa,KAzIrI,wCA6IoBtG,GAGhB,OAFArC,KAAKoD,KAAKf,IAEH,MAhJX,GAAsC4G,aCXzBC,EAAb,kDACE,WACEnI,EACAyG,EACA5B,EACA6B,EACAC,EACA7B,EACAC,EACAC,EACAJ,EACA/C,EACAgF,EACAC,GACC,wCAEC,EACA9G,EACAyG,EACA5B,EACA6B,EACAC,EACA7B,EACAC,EACAC,EACAJ,EACA,KACA/C,EACAgF,EACAC,GA7BN,iDAkCIxF,EAEA8F,GAEA,IAAI/E,EAAOpD,KAAKoI,kBAGhB,OAFAhF,EAAKiF,cAAchG,GACnBe,EAAKkF,cAActI,MACZoD,IAzCX,oCA4CgBf,GACZ,GAAIA,IAASrC,KACX,OAAO,EAGT,IAAImJ,EAAanJ,KAAKwI,YAClBY,EAAW/G,EAAKmG,YAEhBa,EAAgBD,EAAS9D,WAGzBgE,EAAkBH,EAAW7D,WAI7BiE,EAAqBhE,OAAOqD,KAAKU,GAAiBE,MACpD,SAAC5G,GAAD,OAAQ0G,EAAgB1G,GAAIgF,WAAawB,EAAS9G,aAAaM,MAE7D6G,EAAsBlE,OAAOqD,KAAKS,GAAeG,MACnD,SAAC5G,GAAD,OAAQyG,EAAczG,GAAIgF,WAAauB,EAAW7G,aAAaM,MAG7D8G,EACFnE,OAAOqD,KAAKU,GAAiBE,MAC3B,SAAC5G,GAAD,OAAQ0G,EAAgB1G,GAAIgD,iBACzB,KAwCP,OAtCK2D,GAAuBE,IACtBC,EACFN,EAASjD,QACP,IAAI+C,EACFC,EAAW7G,aAAavB,KACtBuI,EAAgBI,GAAIpH,aAAavB,MACnC,GACA,GACA,GACA,GACA,GACA,GACA,EACA,MAEA0F,EAAQqB,MACRqB,EAAW7G,aAAaM,KAI5BwG,EAASjD,QACP,IAAI+C,EACFC,EAAW7G,aAAavB,KAAO,MAC/B,GACA,GACA,GACA,GACA,GACA,GACA,EACA,MACA0F,EAAQqB,MACRqB,EAAW7G,aAAaM,OAMzB,IA7GX,wCAiHI,OAAO,IAAIzB,MAjHf,GAAuCiF,G,0pBCApB,OAAGxG,UAAOC,IAAV,KAUK,qBAAEQ,SAIR,qBAAEsJ,aAKd,qBAAEC,YAEFC,cADU,QAMV,qBAAEC,YAEFD,cADU,Q,CA5BNlK,M,KAmCH,IC/CKoK,ED+CCC,EAAb,uKACY,IAAD,IACiDhK,KAAKC,MAAvD6J,EADC,EACDA,WAAWF,EADV,EACUA,WAAYD,EADtB,EACsBA,UAAWtJ,EADjC,EACiCA,MAAOU,EADxC,EACwCA,KAE/C,OACE,gBAAC,EAAEhB,KAAH,iBACMC,KAAKC,MADX,CAEE6J,WAAYA,EACZF,WAAYA,EACZD,UAAWA,EACXtJ,MAAOA,IALT,UAOGL,KAAKC,MAAMC,gBAPd,QAO0Ba,OAZhC,GAAiCZ,aE3CZ8J,G,8KAEjB,OACE,uBAAKC,MAAOlK,KAAKC,MAAMiK,MAAOC,UAAWnK,KAAKoK,wBAC3CpK,KAAKC,MAAMC,Y,6CAMhB,IAAIiK,EAAY,UAMhB,OAJ4B,MAAxBnK,KAAKC,MAAMkK,YACbA,GAAS,WAAQnK,KAAKC,MAAMkK,YAGvBA,M,GAhBuBhK,cCAbkK,E,uKAEjB,OACE,uBAAKF,UAAWnK,KAAKoK,wBAAyBpK,KAAKC,MAAMC,Y,6CAK3D,IAAIiK,EAAY,cAUhB,OARInK,KAAKC,MAAMqK,OACbH,GAAa,kBAGa,MAAxBnK,KAAKC,MAAMkK,YACbA,GAAS,WAAQnK,KAAKC,MAAMkK,YAGvBA,M,GAlBsBhK,aCAZoK,E,uKAEjB,OACE,uBACEJ,UAAWnK,KAAKoK,uBAChBI,cAAexK,KAAKC,MAAMuK,eAEzBxK,KAAKC,MAAMC,Y,mDAKWuK,EAAcC,GACzC,GAAc,MAAVA,EAAgB,MAAO,GAE3B,IAAIP,EAAS,cAAUM,GAwBvB,MAtBsB,kBAAXC,EACTP,GAAaO,GAEbP,GAAaO,EAAOD,KAED,MAAfC,EAAOC,OACTR,GAAS,cAAWM,EAAX,eAAsBC,EAAOC,OAGrB,MAAfD,EAAOjI,OACT0H,GAAS,cAAWM,EAAX,eAAsBC,EAAOjI,OAGnB,MAAjBiI,EAAOE,SACTT,GAAS,cAAWM,EAAX,iBAAwBC,EAAOE,SAGtB,MAAhBF,EAAOG,QACTV,GAAS,2BAAwBM,EAAxB,YAAgCC,EAAOG,SAI7CV,I,6CAIP,IAAIA,EAAY,cAqBhB,OAnB4B,MAAxBnK,KAAKC,MAAMkK,YACbA,GAAS,WAAQnK,KAAKC,MAAMkK,YAGL,MAArBnK,KAAKC,MAAM6K,SACbX,GAAS,oBAAiBnK,KAAKC,MAAM6K,SAGf,MAApB9K,KAAKC,MAAM4K,QACbV,GAAS,2BAAwBnK,KAAKC,MAAM4K,QAG9CV,GAAanK,KAAK+K,6BAA6B,KAAM/K,KAAKC,MAAM+K,IAChEb,GAAanK,KAAK+K,6BAA6B,KAAM/K,KAAKC,MAAMgL,IAChEd,GAAanK,KAAK+K,6BAA6B,KAAM/K,KAAKC,MAAMiL,IAChEf,GAAanK,KAAK+K,6BAA6B,KAAM/K,KAAKC,MAAMkL,IAChEhB,GAAanK,KAAK+K,6BAA6B,MAAO/K,KAAKC,MAAMmL,KACjEjB,GAAanK,KAAK+K,6BAA6B,OAAQ/K,KAAKC,MAAMoL,U,GA9DrClL,a,iBHJrB4J,K,UAAAA,E,kBAAAA,E,oBAAAA,E,UAAAA,E,gBAAAA,E,yBAAAA,E,yBAAAA,E,qBAAAA,E,YAAAA,E,YAAAA,E,YAAAA,E,oBAAAA,E,sBAAAA,E,YAAAA,E,mBAAAA,E,yBAAAA,E,YAAAA,E,qBAAAA,E,2BAAAA,E,cAAAA,E,uBAAAA,E,6BAAAA,E,cAAAA,E,YAAAA,E,YAAAA,E,UAAAA,E,YAAAA,E,eAAAA,M,0IIiBuB,uBAAGnK,UAAOQ,EAAV,M,CADzBT,M,KAqBH,I,GAAM2L,GAAgB,SAACrL,GAAkB,IAAD,EACPE,IAAMoL,SAAS,MADR,mBACtCC,EADsC,KACzBC,EADyB,KAGvCC,EARD,WAA2B,IAAD,EACVvL,IAAMoL,SAAS,GAA3BI,EADsB,oBAE/B,OAAO,kBAAMA,GAAS,SAACC,GAAD,QAAaA,MAMfC,GAEpB1L,IAAM2L,WAAU,WACf,OAAO,WACLC,IACAC,QAIH7L,IAAM8L,SAAQ,WACZR,EAAexL,EAAMiM,gBACpB,CAACjM,EAAMiM,eAEV,IASMC,EAAiB,SACrB1L,EACA2L,GAEA3L,EAAM4L,UACLb,EAAY3I,cACXuJ,EAAI9J,aAAaM,IACIgD,cAAgBwG,EAAIxG,aAE1C4F,EAAY3I,cACXuJ,EAAI9J,aAAaM,IACIiD,YAAYuG,EAAIxG,aAEtC4F,EAAY3I,cACXuJ,EAAI9J,aAAaM,IACIkD,oBAAoBsG,EAAIxG,aAE9C4F,EAAY3I,cACXuJ,EAAI9J,aAAaM,IACImD,WAAWqG,EAAIxG,aA5Bf,WACvB,IAAI0G,EACFd,GACAA,EAAYc,OACXd,EAAYc,MAEf/G,OAAOqD,KAAK0D,GAAO7G,KAAI,SAACrF,GAAD,OAAO2I,QAAQC,IAAKsD,EAAMlM,GAAGsH,cAAe,MAwBnE6E,GACAb,KAmEIK,EAAqB,WACzB,IAAIS,EAAWvM,EAAMiM,aAAa5G,WAE9BmH,EAAQlH,OAAOC,OAAOgH,GAAU/G,KAAI,SAACpD,GAAD,MAEpC,CACAT,MAAOS,EAAKT,MACZgB,GAAIP,EAAKC,aAAaM,OAKP2C,OAAOC,OAAOgH,GAAU/G,KAAI,SAACpD,GAAD,MAE3C,CACAT,MAAQS,EAAKC,aAAaV,MAC1BgB,GAAIP,EAAKC,aAAaM,OAMbqD,SAAQ,SAACiB,EAASwF,GAC7BxF,EAAUuF,EAAMC,GACfzM,EAAMiM,aAAarJ,cAAcqE,EAAQtE,IAAyBmJ,mBAAmBU,EAAMC,GAAO9K,WAKjGoK,EAAwB,WAC5B,IAAIQ,EAAWvM,EAAMiM,aAAa5G,WAE9BmH,EAAQlH,OAAOC,OAAOgH,GAAU/G,KAAI,SAACpD,GAAD,MAEpC,CACAT,MAAOS,EAAKsD,aACZ/C,GAAIP,EAAKC,aAAaM,OAKtB+J,EAAepH,OAAOC,OAAOgH,GAAU/G,KAAI,SAACpD,GAAD,MAE3C,CACAT,MAAQS,EAAKC,aAAaqD,aAC1B/C,GAAIP,EAAKC,aAAaM,OAK1B6J,EAAMxG,SAAQ,SAACiB,EAASwF,GACtB3D,QAAQC,IAAI9B,EAAQtF,MAAOsF,EAAQtF,MAAMgL,SAAS,KAAK1F,EAAQtF,MAAMsF,EAAQtF,MAAMsC,OAAS,GAAgD,MAA5CgD,EAAQtF,MAAMsF,EAAQtF,MAAMsC,OAAS,IAElIgD,EAAQtF,MAAMgL,SAAS,MAAoD,MAA5C1F,EAAQtF,MAAMsF,EAAQtF,MAAMsC,OAAS,KACpEjE,EAAMiM,aAAarJ,cAAcqE,EAAQtE,IAAyB+C,aAAegH,EAAaD,GAAO9K,UAM1G+K,EAAa1G,SAAQ,SAACiB,EAASwF,GAC7BxF,EAAUuF,EAAMC,GACfzM,EAAMiM,aAAarJ,cAAcqE,EAAQtE,IAAyBiK,0BAA0BJ,EAAMC,GAAO9K,UAG5G8J,IACA3C,QAAQC,IAAIyD,EAAOE,IA2GfG,EAAiB,CACrB,CACEC,IAAK,gBACLC,UAAW,QACXC,KAAM,gBACNC,UAAW,SAACC,EAAkBf,GAAnB,OACT,yBAAKjC,UAAU,SAQb,2BACED,MAAO,CAAE5I,MAAO,SAChB6I,UAAU,YACV9I,KAAK,OACL+L,aAAchB,EAAIxK,MAClByL,SAAU,SAAC5M,GAAD,OAhHU,SAC5BA,EACA2L,GAEA3L,EAAM4L,UAEN,IAAIG,EAAWvM,EAAMiM,aAAa5G,WAE9BmH,EAAQlH,OAAOC,OAAOgH,GAAU/G,KAAI,SAACpD,GAAD,OACtCA,EAAKT,MAAM0L,cAAcC,UAGL7K,IAAEkG,KACtB3I,EAAMiM,aAAa5G,YACnBpB,OAOF,GAJAuI,EAAMe,SAAS/M,EAAMgN,OAAO7B,MAAM0B,cAAcC,QAC5C/B,EAAY3I,cAAcuJ,EAAI9J,aAAaM,IAAyBhB,MAAU4J,EAAY3I,cAAcuJ,EAAI9J,aAAaM,IAA0BN,aAAaV,MACjK4J,EAAY3I,cAAcuJ,EAAI9J,aAAaM,IAAyBhB,MAAQnB,EAAMgN,OAAO7B,MAAM2B,OAE/FtN,EAAMyN,QAAS,CAChB,IAAIC,EAA8C,OAA1B1N,EAAMmD,KAAKO,YAAuB1D,EAAMmD,KAAKO,WAAW2B,WAC5EsI,EAAY,GAEhB,GAAGrI,OAAOqD,KAAK+E,GAAmBzJ,OAAS,EACzCqB,OAAOqD,KAAK+E,GAAmBlI,KAAI,SAAA7C,GAAE,OAAIgL,GAAS,UAAOD,EAAkB/K,GAAIhB,MAA7B,YAAsC+L,EAAkB/K,GAAI+C,aAA5D,UAGrC1F,EAAMmD,KAAKyK,YACjB,GAAGvL,aAAaV,MAAvB,UAAkC3B,EAAM6N,aAAxC,aAAyDF,IAkFhCG,CAAsBtN,EAAO2L,SAK1D,CACElC,MAAO,CAAE8D,YAAa,GACtBhB,UAAW,eACXC,KAAM,gBACNF,IAAK,gBACLG,UAAW,SAACC,EAAkBf,GAAnB,OACT,yBAAKjC,UAAU,SACb,2BACED,MAAO,CAAE5I,MAAO,SAChBD,KAAK,OACL4M,KAAK,QACL9D,UAAU,YACVkD,SAAU,SAAC5M,GAAD,OA5IU,SAC5BA,EACA2L,GAEA3L,EAAM4L,UAELb,EAAY3I,cACXuJ,EAAI9J,aAAaM,IACI+C,aAAelF,EAAMgN,OAAO7B,MAoItBsC,CAAsBzN,EAAO2L,IAClDgB,aAAchB,EAAIzG,eAEpB,8BAAU/C,GAAG,SA9CZ2C,OAAOC,OAAOuE,GAActE,KAAI,SAAC0I,GAAD,OACrC,4BAAQpB,IAAKoB,EAAKvC,MAAOuC,GACtBA,UAgDL,CACEnB,UAAW,eACXC,KAAM,iBACNF,IAAK,iBACLG,UAAW,SAACC,EAAkBf,GAAnB,OACT,yBAAKjC,UAAU,YACb,+BACE,2BACE9I,KAAK,WACL+M,QAAShC,EAAIxG,aACbyH,SAAU,SAAC5M,GAAD,OAAW0L,EAAe1L,EAAO2L,UAMrD,CACEY,UAAW,eACXC,KAAM,iBACNF,IAAK,iBACLG,UAAW,SAACC,EAAkBf,GAAnB,OACT,yBAAKjC,UAAU,YACb,+BACE,2BACE9I,KAAK,WACL+M,QAAShC,EAAI3E,aACb4F,SAAU,SAAC5M,GAAD,OAlTC,SACrBA,EACA2L,GAEA3L,EAAM4L,UACLb,EAAY3I,cACXuJ,EAAI9J,aAAaM,IACI6E,cAAgB2E,EAAI3E,aAE1C+D,EAAY3I,cACXuJ,EAAI9J,aAAaM,IACIiD,YAAYuG,EAAI3E,aAEvCiE,IAqS+B2C,CAAe5N,EAAO2L,UAMrD,CACEY,UAAW,eACXC,KAAM,iBACNF,IAAK,iBACLG,UAAW,SAACC,EAAkBf,GAAnB,OACT,yBAAKjC,UAAU,YACb,+BACE,2BACE9I,KAAK,WACL+M,QAAShC,EAAI1E,aACb2F,SAAU,SAAC5M,GAAD,OAvSS,SAC7BA,EACA2L,GAEA3L,EAAM4L,UACLb,EAAY3I,cACXuJ,EAAI9J,aAAaM,IACI8E,cAAgB0E,EAAI1E,aAE1C8D,EAAY3I,cACXuJ,EAAI9J,aAAaM,IACIiD,YAAYuG,EAAI1E,aACvCgE,IA2R+B4C,CAAuB7N,EAAO2L,UAM7D,CACEY,UAAW,YACXC,KAAM,WACNF,IAAK,WACLG,UAAW,SAACC,EAAkBf,GAAnB,OACT,yBAAKjC,UAAU,YACb,+BACE,2BACEoE,SAAUnC,EAAIxG,cAAgBwG,EAAI3E,aAClCpG,KAAK,WACL+M,QAAShC,EAAIvG,UACbwH,SAAU,SAAC5M,GAAD,OAnUG,SACvBA,EACA2L,GAEA3L,EAAM4L,UACLb,EAAY3I,cACXuJ,EAAI9J,aAAaM,IACIiD,WAAauG,EAAIvG,UACxC6F,IA2T+B8C,CAAiB/N,EAAO2L,UAMvD,CACEY,UAAW,oBACXC,KAAM,sBACNF,IAAK,sBACLG,UAAW,SAACC,EAAkBf,GAAnB,OACT,yBAAKjC,UAAU,YACb,+BACE,2BACEoE,SAAUnC,EAAIxG,aACdvE,KAAK,WACL+M,QAAShC,EAAItG,kBACbuH,SAAU,SAAC5M,GAAD,OA/SM,SAC1BA,EACA2L,GAEA3L,EAAM4L,UACLb,EAAY3I,cACXuJ,EAAI9J,aAAaM,IACIkD,mBAAqBsG,EAAItG,kBAChD4F,IAuS+B+C,CAAoBhO,EAAO2L,UAM1D,CACEY,UAAW,WACXC,KAAM,YACNF,IAAK,YACLG,UAAW,SAACC,EAAkBf,GAAnB,OACT,yBAAKjC,UAAU,YACb,+BACE,2BACEoE,SAAUnC,EAAIxG,aACdvE,KAAK,WACL+M,QAAShC,EAAIrG,SACbsH,SAAU,SAAC5M,GAAD,OA3UK,SACzBA,EACA2L,GAEA3L,EAAM4L,UACLb,EAAY3I,cACXuJ,EAAI9J,aAAaM,IACImD,UAAYqG,EAAIrG,SACvC2F,IAmU+BgD,CAAmBjO,EAAO2L,UAMzD,CACEY,UAAW,SACXC,KAAM,SACNF,IAAK,SACLG,UAAW,SAACC,EAAkBf,GAAnB,OACT,yBAAKjC,UAAU,YACb,+BACE,0BACEwE,QAAS,kBArLF,SAACtM,GAIlB,GAHA0G,QAAQC,IAAI,SAAU3G,GACtBmJ,EAAYoD,WAAWvM,GAEpBpC,EAAMmD,KAAM,CACf2F,QAAQC,IAAI,cAAe/I,EAAMmD,MAE/B,IAAIuK,EAA8C,OAA1B1N,EAAMmD,KAAKO,YAAuB1D,EAAMmD,KAAKO,WAAW2B,WAC5EsI,EAAY,GAEhB,GAAGrI,OAAOqD,KAAK+E,GAAmBzJ,OAAS,EAAG,CAC5CqB,OAAOqD,KAAK+E,GAAmBkB,QAAO,SAAAjM,GAAE,OAAIA,IAAOP,EAAKyM,WAASrJ,KAAI,SAAA7C,GAAE,OAAIgL,GAAS,UAAOD,EAAkB/K,GAAIhB,MAA7B,YAAsC+L,EAAkB/K,GAAI+C,aAA5D,UAEpF,IAAIoJ,EAAS9O,EAAMmD,KAAKyK,YACpBmB,EAAWD,EAAO,GAAGzM,aAAaV,MACtCmN,EAAO,GAAGzM,aAAaV,MAAQoN,EAASC,MAAM,EAAGD,EAASxM,QAAQ,OAClEuM,EAAO,GAAGzM,aAAaV,OAAvB,YAAqCgM,IAIzClC,IAiKyBkD,CAAWxC,IAC1BjC,UAAU,yCAQlBmC,EACFd,GACAA,EAAYc,OACXd,EAAYc,MAEX4C,EACF5C,GACA/G,OAAOqD,KAAK0D,GACT7G,KAAI,SAAClC,GACJ,OAAO+I,EAAM/I,MAEdsL,QAAO,SAACzO,GAAD,OAAQA,EAAEoH,cAKlB2H,EAAOrC,EAUX,SAZEoC,IAAcA,EAAW1F,MAAK,SAACpJ,GAAD,OAAOA,EAAEwF,mBAKvCuJ,EAAOA,EAAKN,QAAO,SAACO,GAAD,MAA2B,iBAAlBA,EAAIpC,cAG7B/M,EAAMoP,UACTF,EAAOA,EAAKN,QAAO,SAAChI,GAAD,MAAuB,iBAAhBA,EAAEmG,cAI5B,yBAAK7C,UAAS,WAAMlK,EAAMyN,SAAW,YACnC,kBAAC,KAAD,CACE4B,SAAS,KACTzN,KAAMqN,EACNpC,QACE7M,EAAMyN,QACFyB,EAAKN,QACH,SAACO,GAAD,MACoB,iBAAlBA,EAAIpC,WACc,iBAAlBoC,EAAIpC,aAERmC,EAENI,UAAU,IAEZ,kBAAC,EAAEC,qBAAH,CAAwBb,QAAS,kBAlQlB,SAACc,IACjBjE,EAAiCrF,QAChC,IAAI+C,EAAJ,uBACkBuG,IAChB,GACA,GACA,GACA,GACA,GACA,GACA,EACA,MACAhJ,EAAQqB,QAIT7H,EAAMyN,WACMzN,EAARmD,KACayK,YAEX,GAAGvL,aAAaV,OAAvB,iCAAmD6N,GAAnD,YAGF/D,IA2OyCgE,CAAWR,EAAWhL,UAA7D,sB,0YClgBc,QAAGtE,UAAO+P,MAAV,MAQd,gBAAEC,EAAF,EAAEA,SAAF,OACF/F,cADG,KAEc+F,M,CAXXjQ,Q,KAkBH,IAAMkQ,GAAb,uKAGI,OACE,gBAAC,GAAEC,MACG9P,KAAKC,MAERD,KAAKC,MAAMC,cAPpB,GAA+BC,aCXxB,SAAS0L,KAAkB,IAAD,EACV1L,WAAe,GAA3BwL,EADsB,oBAE/B,OAAO,kBAAMA,GAAS,SAACC,GAAD,QAAaA,MAG9B,I,GAAMmE,GAAiB,SAAC9P,GAAkB,IAAD,EACRE,WAAe,MADP,mBACvCqL,EADuC,KAC1BC,EAD0B,OAERtL,WAAe,IAFP,mBAEvC6P,EAFuC,KAE1BC,EAF0B,OAItB9P,WAAe,IAJO,mBAIvCY,EAJuC,KAIjCmP,EAJiC,OAKZ/P,YAAe,GALH,mBAKvCgQ,EALuC,KAK5BC,EAL4B,KAOxC1E,EAAcG,KAEpB1L,WAAc,WACZsL,EAAexL,EAAMiM,cACrBgE,EAAQjQ,EAAMiM,aAAa5J,aAAavB,MACxCkP,EAAehQ,EAAMiM,aAAa5J,aAAavB,QAC9C,CAACd,EAAMiM,eAEV/L,aAAgB,WAGd,OAFAF,EAAMiM,aAAamE,YAEZ,WACLpQ,EAAMiM,aAAamE,WAAU,OAIjC,IAAMC,EAAmB,SACvB7P,IAEAA,EAAM4L,UACmB,IAAtB5L,EAAMgN,OAAO7B,SACC3L,EAAMsQ,cAClB1H,WACA2H,WAEkB/K,KAAI,SAACgL,GAAD,OACvBA,EAAKnO,aAAavB,KAAKuM,cAAcC,UAGjCC,SAAS/M,EAAMgN,OAAO7B,MAAM0B,cAAcC,QAC3C/B,EAAYlJ,aAAavB,KAAOiP,EAChCxE,EAAYlJ,aAAavB,KAAON,EAAMgN,OAAO7B,MAAM2B,QAE1D7B,KA2BF,OAAKF,EAGD,uBAAKrB,UAAU,cAeb,gBAAC,EAAD,KACE,gBAAC,EAAD,KACE,gBAAC,EAAD,KACIgG,EAOElQ,EAAMiM,aAAalK,QACrB,4BACEkI,MAAO,CAAEwG,OAAQ,SACjBvG,UAAU,kBACViD,aAAcrM,EACdsM,SAAU,SAAC5M,GAAD,OAAW6P,EAAiB7P,MAIvC,gBAAC,GAAD,CACCmP,SAAU,GACVvO,KAAK,OACL+L,aAAcrM,EACdsM,SAAU,SAAC5M,GAAD,OAAW6P,EAAiB7P,MAnBxC,sBACEyJ,MAAO,CAAEyG,UAAW,aACpBnG,cAAe,kBAAM4F,GAAa,KAEjCrP,IAoBLyK,EAAYxJ,QAOV,KANF,gBAAC,GAAD,CACA4O,OAAQ3Q,EAAM2Q,OACZ1E,aAAcjM,EAAMiM,aACpBqE,cAAetQ,EAAMsQ,cACrBlB,QAASpP,EAAMoP,aAnDJ,M,0FC3EdwB,GAAc,SAAC5Q,GAAkB,IAAD,EACfsL,mBAAS,gBADM,mBACpCuF,EADoC,KAC5BC,EAD4B,OAETxF,oBAAS,GAFA,mBAEpCyF,EAFoC,KAEzBC,EAFyB,KAIvCC,EACFjR,EAAMkR,aACNC,KAAaC,OAAOpR,EAAMkR,YAAa,CACrCG,SAAU,MACVC,OAAQ,OAGRC,EACFvR,EAAMwR,aACNL,KAAaC,OAAOpR,EAAMwR,YAAa,CACrCH,SAAU,MACVC,OAAQ,OAoBZ,OACE,kBAAC,KAAD,CAAOG,OAAK,EAACC,sBAAoB,EAACC,KAAM3R,EAAM4R,OAAQC,eAAa,GACjE,yBAAK3H,UAAU,qBACb,2BACED,MAAO,CAAE6H,YAAa,QACtB1Q,KAAK,OACLgM,SAAU,SAAC5M,GAAD,OAAWsQ,EAAUtQ,EAAMgN,OAAO7B,QAC5CA,MAAOkF,IAGT,4BACE5G,MAAO,CAAE6H,YAAa,QACtBpD,QAAS,WACP5F,QAAQC,IAAIgI,GACZ/Q,EAAM+R,eAAelB,EAASE,EAAsB,QAAV,WAJ9C,YAUA,4BACE7G,UAAS,UAAK6G,EAAY,GAAK,gBAC/BrC,QAAS,WACPsC,GAAa,KAHjB,SASA,4BACE9G,UAAS,UAAK6G,EAAY,eAAiB,IAC3CrC,QAAS,WACPsC,GAAa,KAHjB,SASA,8BACE/G,MAAO,CAAEP,UAAW,OACpBsI,UAAU,EACVrG,MAAOoF,EAAYQ,EAAgBN,EACnCgB,iBAAiB,IAGnB,4BAAQhI,MAAO,CAAE6H,YAAa,QAAUxD,UAAWtO,EAAMkR,YAAaxC,QAzDtD,WACpB,IAAIwD,EAAO,IAAIC,KAAK,CAAClB,GAAgB,CAAE7P,KAAM,6BAC7CgR,KAAUC,OAAOH,EAAjB,UAA0BrB,EAA1B,SACA7Q,EAAM2Q,WAsDF,kBAGA,4BAAQ1G,MAAO,CAAE6H,YAAa,QAAUxD,UAAWtO,EAAMwR,YAAa9C,QAtDtD,WACpB,IAAIwD,EAAO,IAAIC,KAAK,CAACZ,GAAgB,CAAEnQ,KAAM,6BAC7CgR,KAAUC,OAAOH,EAAjB,UAA0BrB,EAA1B,SACA7Q,EAAM2Q,WAmDF,qB,qBCrFK2B,GAAoB,SAACtS,GAAkB,IAAD,EACfsL,mBAAS,IADM,mBAC1CiH,EAD0C,KAC/BC,EAD+B,OAEXlH,mBAAS,IAFE,mBAE1CkG,EAF0C,KAE7BiB,EAF6B,KAIjD5G,qBAAU,kBAAM2G,EAAa,MAAK,CAACxS,EAAM4R,SAEzC,IAAMG,EAAc,yCAAG,WAAOjR,EAAc4R,GAArB,oCAAAjN,EAAA,yDACfkN,EAAa3S,EAAM4S,mBACnBC,EAASF,EAAU,OAAW,GAArB,OAETG,EAAQxN,OAAOqD,KAAKkK,GAAQrN,KAAI,SAAC7C,GACrC,OAAOkQ,EAAOlQ,MAGVoQ,EAASJ,EAAU,OAAW,GAArB,OACT7K,EAAQxC,OAAOqD,KAAKoK,GAAQvN,KAAI,SAAC7C,GACrC,OAAOoQ,EAAOpQ,MAGVqQ,EAAc,CAClBF,QACAhL,SAEImL,EAAUtS,KAAKC,UAAUoS,EAAa,KAAM,GAEtC,UAATN,EAnBkB,wBAoBnB5J,QAAQC,IAAI,SApBO,UAqBImK,KAAMC,KAC3B,4CACA,CACEC,gBAAiBH,EACjBI,aAAcvS,EACdwS,aAActT,EAAMuT,MAAQ,MAAQ,SA1BrB,QA8BK,OATlBC,EArBa,QA8BNC,OACXjB,EAAagB,EAAS5R,OAGtB4Q,EADMkB,EAAe,oDAGrB5K,QAAQC,IAAI2K,IApCK,+BAuCnB5K,QAAQC,IAAI,SAvCO,UAyCMmK,KAAMC,KAC7B,4CACA,CACEC,gBAAiBH,EACjBI,aAAcvS,EACdwS,aAActT,EAAMuT,MAAQ,MAAQ,SA9CrB,QAkDO,OATpBI,EAzCa,QAkDJF,OACbhB,EAAekB,EAAW/R,OAG1B6Q,EADMiB,EAAe,oDAGrB5K,QAAQC,IAAI2K,IAxDK,4CAAH,wDA6DpB,OACE,kBAAC,GAAD,CACE/C,OAAQ3Q,EAAM2Q,OACdO,YAAaqB,EACbf,YAAaA,EACbO,eAAgB,SAACjR,EAAc4R,GAAf,OAAgCX,EAAejR,EAAM4R,IACrEd,OAAQ5R,EAAM4R,UC3EPgC,I,OAAgB,SAAC5T,GAC5B,IAAI6T,EADyC,EAGPvI,mBAAS,IAHF,mBAGtCwI,EAHsC,KAGzBC,EAHyB,KAKvCC,EAAiB,SAACC,GACtB,IAAMC,EAAUL,EAAWM,OAC3BJ,EAAeG,IASjB,OACE,kBAAC,KAAD,CACEzC,OAAK,EACLC,sBAAoB,EACpBC,KAAM3R,EAAM4R,OACZC,eAAa,EACbuC,QAAS,kBAAMpU,EAAM2Q,WAErB,yBAAKzG,UAAU,qBACb,2BACE9I,KAAK,OACLgM,SAAU,SAAC5M,GAAD,OAjBQM,EAiBoBN,EAAMgN,OAAO6G,MAAM,IAhB/DR,EAAa,IAAIS,YACNC,UAAYP,OACvBH,EAAWW,WAAW1T,GAHC,IAACA,GAkBlB2T,OAAO,YAET,4BAAQ/F,QAAS,kBAAM1O,EAAM0U,YAAYZ,KAAzC,YC3BKa,GAAkB,SAAC3U,GA+C9B,OACE,kBAAC,GAAD,CACE2Q,OAAQ3Q,EAAM2Q,OACd+D,YAAa,SAAC5T,GAAD,OAjDG,SAACA,GACnB,IAAM4G,EAAS1H,EAAM4U,IAAIC,mBACzB,IACE,IAAM3G,EAIFvN,KAAKmU,MAAMhU,GACfgI,QAAQC,IAAImF,GAEZlO,EAAM+U,SAAS7G,EAAIqF,OAEnB,IAAIyB,EAAc,IAAIC,eAClB3N,EAAQ,IAAI2N,eAEb/G,EAAIgH,oBACLF,EAAYG,iBAAiBjH,EAAIgH,kBAAmBxN,GAEpDsN,EAAYnM,WAAW7C,SAAQ,SAAC7C,GAC9BA,EAAKyK,YAAYwH,OAAO,EAAG,MAG7BpV,EAAM4U,IAAIS,oBAAoBL,GAC9BhV,EAAMsV,YAAW,IAIdpH,EAAIqH,iBACLjO,EAAM6N,iBAAiBjH,EAAIqH,eAAgB7N,GAG7CJ,EAAMuB,WAAW7C,SAAQ,SAAC7C,GACxBA,EAAKyK,YAAYwH,OAAO,EAAG,MAG7BpV,EAAM4U,IAAIY,eAAelO,GACzBtH,EAAMsV,YAAW,IAGnB5N,EAAO+N,gBACPzV,EAAM2Q,SACN,MAAO+E,GACP5M,QAAQC,IAAI2M,IAOWhB,CAAY5T,IACnC8Q,OAAQ5R,EAAM4R,UChDP+D,I,OAAkB,SAAC3V,GAAkB,IAAD,EACfsL,mBAAS,WADM,mBACxCsK,EADwC,KAC9BC,EAD8B,KAkB/C,OACE,kBAAC,KAAD,CACEpE,OAAK,EACLC,sBAAoB,EACpBC,KAAM3R,EAAM4R,OACZC,eAAa,EACbuC,QAAS,kBAAMpU,EAAM2Q,WAErB,yBAAKzG,UAAU,qBACb,2BACE9I,KAAK,OACLgM,SAAU,SAAC5M,GAAD,OAAWqV,EAAYrV,EAAMgN,OAAO7B,QAC9CA,MAAOiK,IAET,4BAAQlH,QA7BG,WACf,IAAMsE,EAAcrS,KAAKC,UAAU,CACjCsU,kBAAmBlV,EAAM8V,aAAaC,YACtCR,eAAgB9S,UAAUzC,EAAMgW,YAAYC,qBAAqB1F,YAAc,KAAOvQ,EAAMgW,YAAYD,YAExGxC,MAAOvT,EAAMuT,QAGfzK,QAAQC,IAAI,YAAa/I,EAAMgW,YAAahW,EAAMgW,YAAYC,qBAAqB1F,YAEnF,IAAI2B,EAAO,IAAIC,KAAK,CAACa,GAAc,CAAE5R,KAAM,6BAC3CgR,KAAUC,OAAOH,EAAjB,UAA0B0D,EAA1B,YACA5V,EAAM2Q,WAiBF,Y,8BCpCKuF,GAAkB,SAAClW,GAAkB,IAAD,EACfsL,mBAAS,WADM,mBACxCsK,EADwC,KAC9BC,EAD8B,KAe/C,OACE,kBAAC,KAAD,CACEpE,OAAK,EACLC,sBAAoB,EACpBC,KAAM3R,EAAM4R,OACZC,eAAa,EACbuC,QAAS,kBAAMpU,EAAM2Q,WAErB,yBAAKzG,UAAU,qBACb,2BACE9I,KAAK,OACLgM,SAAU,SAAC5M,GAAD,OAAWqV,EAAYrV,EAAMgN,OAAO7B,QAC9CA,MAAOiK,IAET,4BAAQlH,QA1BG,WACfyH,KACGC,OAAOjP,SAASkP,eAAe,iBAAkB,CAAEC,QAAS,MAC5DC,MAAK,SAACC,GACL,IAAIrT,EAAOgE,SAASsP,cAAc,KAClCtT,EAAKuT,SAAL,UAAmBd,EAAnB,SACAzS,EAAKwT,KAAOH,EACZrT,EAAKyT,QACL5W,EAAM2Q,cAkBN,W,mUC3BoB,gBAAGhR,UAAOC,IAAV,MAKL,WAAGD,UAAOC,IAAV,M,CANbF,Q,YAmBGmX,GAAgB,SAAC7W,GAAkB,IAAD,EACrBsL,mBAAS,QADY,mBACtCwL,EADsC,KAChCC,EADgC,OAGnBzL,mBAAS,QAHU,mBAGtC0L,EAHsC,KAG/BC,EAH+B,OAKK3L,mBAAS,IALd,mBAKnB4L,GALmB,aAMG5L,mBAAS,iBANZ,mBAMtC6L,EANsC,KAMpBC,EANoB,KAS7ClX,IAAM2L,WAAU,WACd,IAAIwL,EACFrX,EAAMmD,MACNnD,EAAMmD,KAAKyK,YAAY3J,OAAS,GAC/BjE,EAAMmD,KAAKyK,YAAY,GAAyBvL,aAAaV,MAK5D2V,GAHFtX,EAAMmD,MACNnD,EAAMmD,KAAKyK,YAAY3J,OAAS,GAC/BjE,EAAMmD,KAAKyK,YAAY,GAAyBvL,aAAaV,MAE9D3B,EAAMmD,MACNnD,EAAMmD,KAAKyK,YAAY3J,OAAS,GAC/BjE,EAAMmD,KAAKyK,YAAY,GAAyBvL,aAAaV,OAEhEoV,EAAQM,GAAwB,QAEhCJ,EAASK,GAA0B,UAClC,CAACtX,EAAMmD,OAEV,IAAIwN,EAAS,WACX,IAAIrN,EAAIiU,IACJzI,EAAS9O,EAAMmD,KAAKyK,YACxBkB,EAAO,GAAGzM,aAAaV,MAAQmV,EAC/BhI,EAAO,GAAGzM,aAAaV,MAAQqV,EAC/BlI,EAAO,GAAGzM,aAAaV,MAAQwV,EAAmB7T,EAElDtD,EAAMmD,KAAKM,QAAU0T,EAIrB,IADA,IAAInT,EAAShE,EAAMmD,KAAKqU,YACf/K,EAAQ,EAAGA,EAAQzI,EAAOC,OAAS,EAAGwI,IAAS,CACtCzI,EAAOyI,GACfgL,SAGVP,EAAqB5T,GACrBtD,EAAM2Q,UAGF4G,EAA2B,WAC/BzO,QAAQC,IAAI/I,EAAMmD,KAAKM,SAEvB,IAAIiK,EAA8C,OAA1B1N,EAAMmD,KAAKO,YAAuB1D,EAAMmD,KAAKO,WAAW2B,WAC5EsI,EAAY,GAEhB,OAAGrI,OAAOqD,KAAK+E,GAAmBzJ,OAAS,GACzCqB,OAAOqD,KAAK+E,GAAmBlI,KAAI,SAAA7C,GAAE,OAAIgL,GAAS,UAAOD,EAAkB/K,GAAIhB,MAA7B,YAAsC+L,EAAkB/K,GAAI+C,aAA5D,UAE/B,KAAOiI,GAIjB,IAMPhJ,EACJ3E,EAAMmD,MACNnD,EAAMmD,KAAK4B,iBACV/E,EAAMmD,KAAK4B,gBAAgBwD,YACxBvD,EACJhF,EAAMmD,MACNnD,EAAMmD,KAAK+B,iBACVlF,EAAMmD,KAAK+B,gBAAgBqD,YAExBkP,EAAS,WACb,IAAMC,EAAU1X,EAAMmD,MAAQnD,EAAMmD,KAAK4B,gBACnC4S,EAAU3X,EAAMmD,MAAQnD,EAAMmD,KAAK+B,gBAMzC,GALAwS,EAAQE,WAAW5X,EAAMmD,MACzBwU,EAAQC,WAAW5X,EAAMmD,MAEzBnD,EAAMsQ,cAAc1H,WAAWgP,WAAW5X,EAAMmD,MAE5CnD,EAAMoP,QAAS,CACjB,IAAIlG,EAAalJ,EAAMmD,KACpB+B,gBACAqD,YACCY,EAAWnJ,EAAMmD,KAAK4B,gBAAgBwD,YAEtCa,EAAgBD,EAAS9D,WAGzBgE,EAAkBH,EAAW7D,WAI7BiE,EAAqBhE,OAAOqD,KAAKU,GAAiBuF,QACpD,SAACjM,GAAD,OAAQ0G,EAAgB1G,GAAIgF,WAAawB,EAAS9G,aAAaM,MAC/D,GACE6G,EAAsBlE,OAAOqD,KAAKS,GAAewF,QACnD,SAACjM,GAAD,OAAQyG,EAAczG,GAAIgF,WAAauB,EAAW7G,aAAaM,MAC/D,GAEE2G,EACFJ,EAAWyF,WAAWtF,EAAgBC,IAEtCH,EAASwF,WAAWvF,EAAcI,IAItCxJ,EAAM2Q,UAGFxP,EACJ,oCACE,4BAAQwK,MAAM,QAAd,QACA,4BAAQA,MAAM,QAAd,QACA,4BAAQA,MAAM,QAAd,QACA,4BAAQA,MAAM,QAAd,QACA,4BAAQA,MAAM,QAAd,SAIEkM,EAAqB,SAACC,GAC1B,OAEE,kBAAC,GAAEC,SAAH,KAEE,4BACE7N,UAAU,aACVkD,SAAU,SAAC5M,GAAD,MACC,SAATsX,EACIf,EAAQvW,EAAMgN,OAAO7B,OACrBsL,EAASzW,EAAMgN,OAAO7B,QAE5BA,MAAgB,SAATmM,EAAkBhB,EAAOE,GAE/B7V,KAyFT,OAAInB,EAAMoP,QAEN,kBAAC,KAAD,CAAOqC,OAAK,EAACC,sBAAoB,EAACC,KAAM3R,EAAM4R,OAAQC,eAAa,GACjE,oCACE,kBAAC,GAAEkG,SAAH,KACE,4BAAQrJ,QAAS+I,GAAjB,WAEF,kBAAC,GAAEM,SAAH,KACE,4BAAQrJ,QA1FE,WAClB,IAAIxF,EAAalJ,EAAMmD,KAAK+B,gBAAgBqD,YACxCY,EAAWnJ,EAAMmD,KAAK4B,gBAAgBwD,YAEtCa,EAAgBD,EAAS9D,WAGzBgE,EAAkBH,EAAW7D,WAO7BiE,EAAqBhE,OAAOqD,KAAKU,GAAiBuF,QACpD,SAACjM,GAAD,OAAQ0G,EAAgB1G,GAAIgF,WAAawB,EAAS9G,aAAaM,MAC/D,GACE6G,EAAsBlE,OAAOqD,KAAKS,GAAewF,QACnD,SAACjM,GAAD,OAAQyG,EAAczG,GAAIgF,WAAauB,EAAW7G,aAAaM,MAC/D,GAEF,GAAI2G,EAAoB,CACtBJ,EAAWyF,WAAWtF,EAAgBC,IACtC,IAAIG,EAAKnE,OAAOqD,KAAKU,GAAiBuF,QACpC,SAACjM,GAAD,OAAQ0G,EAAgB1G,GAAIgD,gBAC5B,GACFwD,EAASjD,QACP,IAAI+C,EAEFC,EAAW7G,aAAavB,KAAOuI,EAAgBI,GAAIpH,aAAavB,MAChE,GACA,GACA,GACA,GACA,GACA,GACA,EACA,MACA0F,EAAQqB,MACRqB,EAAW7G,aAAaM,SAGvB,CACLwG,EAASwF,WAAWvF,EAAcI,IAElC,IAAIC,EAAKnE,OAAOqD,KAAKS,GAAewF,QAClC,SAACjM,GAAD,OAAQyG,EAAczG,GAAIgD,gBAC1B,GACFwD,EAASjD,QACP,IAAI+C,EAGFE,EAAS9G,aAAavB,KAAOsI,EAAcK,GAAIpH,aAAavB,MAC5D,GACA,GACA,GACA,GACA,GACA,GACA,EACA,MACA0F,EAAQqB,MACRsB,EAAS9G,aAAaM,KAK5B,IAAIqV,EAAahY,EAAMmD,KAAK+B,gBACxB+S,EAAajY,EAAMmD,KAAK4B,gBACxBlE,EAAQb,EAAMsQ,cAAc1H,WAEhC/H,EAAM+W,WAAW5X,EAAMmD,MAEvB,IAAIA,EAAO,IAAIjC,EAAe,CAAEE,KAAM,UAEtC+B,EAAKiF,cAAc4P,GACnB7U,EAAKkF,cAAc4P,GACnBpX,EAAMqX,QAAQ/U,GAEdnD,EAAM2Q,WAWE,cAON,kBAAC,KAAD,CAAOc,OAAK,EAACC,sBAAoB,EAACC,KAAM3R,EAAM4R,OAAQC,eAAa,EAACuC,QAASpU,EAAM2Q,QACjF,oCACE,kBAAC,GAAEwH,cAAH,KACE,kBAAC,GAAEJ,SAAH,KAEE,2BAAIpT,GAAcA,EAAWtC,aAAavB,OAG5C,kBAAC,GAAEiX,SAAH,KACE,2BACE3W,KAAK,OACL+L,aAAcgK,EACd/J,SAAU,SAAC5M,GAAD,OAAW4W,EAAoB5W,EAAMgN,OAAO7B,WAG1D,kBAAC,GAAEoM,SAAH,KAEE,2BAAI/S,GAAcA,EAAW3C,aAAavB,OAE3C+W,EAAmB,QACpB,kBAAC,GAAEE,SAAH,KAEE,4BAAQrJ,QAASiC,GAAjB,SAEDkH,EAAmB,SACpB,kBAAC,GAAEE,SAAH,MACA,kBAAC,GAAEA,SAAH,KAEE,4BAAQrJ,QAAS+I,GAAjB,YAGHzX,EAAMmD,MACL,6BACE,wBAAI8G,MAAO,CAAEmO,OAAQ,IAArB,cACA,kBAAC,GAAD,CACAvK,aAAcsJ,EACZxG,OAAQA,EACRlD,SAAS,EACTtK,KAAMnD,EAAMmD,KACZmN,cAAetQ,EAAMsQ,cACrBrE,aAAcjM,EAAMmD,KAAKO,WACzB0L,QAASpP,EAAMoP,c,60BC9RZ,OAAGzP,UAAOC,IAAV,MAOE,SAAGD,UAAOC,IAAV,MAWC,UAAGD,UAAOC,IAAV,MAKF,QAAGD,UAAOC,IAAV,MAKO,eAAGD,UAAO0Y,KAAV,M,CA7BjB3Y,Q,KAoCH,I,GAAM4Y,GAAa,SAACtY,GAA4B,IAAD,EAChBE,YAAe,GADC,mBAC7CqY,EAD6C,KACjCC,EADiC,OAEAtY,YAAe,GAFf,mBAE7CuY,EAF6C,KAEzBC,EAFyB,OAGAxY,YAAe,GAHf,mBAG7CyY,EAH6C,KAGzBC,EAHyB,OAIJ1Y,YAAe,GAJX,mBAI7C2Y,EAJ6C,KAIzBC,EAJyB,OAKJ5Y,YAAe,GALX,mBAK7C6Y,EAL6C,KAKzBC,EALyB,OAMV9Y,YAAe,GANL,mBAM7C+Y,EAN6C,KAM5BC,EAN4B,OAQZhZ,WAAe,MARH,mBAQ7CiZ,EAR6C,KAQ/BC,EAR+B,OASZlZ,WAAe,MATH,mBAS7CmZ,EAT6C,KAS/BC,EAT+B,OAW1BpZ,YAAe,GAXW,mBAW7CqT,EAX6C,KAWtCwB,EAXsC,OAaZ7U,YAAe,GAbH,mBAa7CqZ,EAb6C,KAa/BC,EAb+B,KAe9C/N,EAAcG,KAEpB1L,aAAgB,WACdkZ,EAAgB,MAChBE,EAAgB,QACf,IAEH,IAAMG,GAAiB,WACTzZ,EAAM4U,IAAIC,mBAAmBjM,WAAWC,WAC9C7C,SAAQ,SAAC7C,GACb,IAAIuW,EAAQvW,EAAKyK,YAAY,GAC1BvL,aACAV,MAAMgY,UAAU,EAAG,GAClBC,EAASzW,EAAKyK,YAAY,GAC3BvL,aACAV,MAAMgY,UAAU,EAAG,GAErBxW,EAAKyK,YAAY,GAAyBvL,aAAaV,MACtDiY,EACCzW,EAAKyK,YAAY,GACfvL,aACAV,MAAMgY,UAAU,GACpBxW,EAAKyK,YAAY,GAAyBvL,aAAaV,MACtD+X,EACCvW,EAAKyK,YAAY,GACfvL,aACAV,MAAMgY,UAAU,OAInBE,GAAgB,WACpBP,EAAgB,MAChBF,EAAgB,MAEhBZ,GAAc,GACdM,GAAkB,GAClBE,GAAkB,GAClBE,GAAe,GACfN,GAAsB,GACtBF,GAAsB,IAexB,OACE,gBAAC,GAAEoB,KAAH,KACE,gBAAC,GAAEC,OAAH,4BACA,gBAAC,GAAEC,QAAH,KACE,gBAAC,EAAD,KACE,gBAAC,EAAD,CACEnZ,MAAO,CAAEO,KAAM,WACfN,KAAMyY,EAAe,WAAa,SAClCnZ,MAAM,mBAER,gBAAC,EAAD,CACES,MAAO,CAAEO,KAAM,SACfN,KAAK,QACLV,MAAM,mBAGR,gBAAC,EAAD,CACEU,KAAK,eACLV,MAAM,iBACNsJ,UAAU,OACVgF,QAAS,WACPkK,GAAsB,GACtBQ,EAAgB,SAIpB,gBAAC,EAAD,CACEhZ,MAAM,iBACNsO,QAAS,WACPwK,GAAgBD,GAChBG,EAAgB,QAGlB,uCAEE,gBAAC,GAAEa,aAAH,CACE/P,UAAS,aACN+O,EAAoC,cAAlB,qBAM1BA,GACC,gBAAC,EAAD,CACEnY,KAAK,OACLV,MAAM,iBACNsO,QAAS,WACPoK,GAAkB,GAClBM,EAAgB,SAIrBH,GACC,gBAAC,EAAD,CACEnY,KAAK,OACLV,MAAM,iBACNsO,QAAS,WACPsK,GAAkB,GAClBI,EAAgB,SAKtB,gBAAC,EAAD,CACEzP,YAAa4P,EACbzY,KAAK,kBACLV,MAAM,gBACNsJ,UAAU,OACVgF,QAAS,WACH6K,IACFvZ,EAAM4U,IAAIsF,qBACVV,GAAgB,OAKtB,gBAAC,EAAD,CACE7P,WAAY4P,EACZzY,KAAK,eACLV,MAAM,gBACNsO,QAAS,WACF6K,IACHvZ,EAAM4U,IAAIuF,gBACVX,GAAgB,OAKtB,gBAAC,EAAD,CACE3P,WAAY0P,EACZ5P,WAAY4J,EACZzS,KAAK,MACLV,MAAM,kBACNsJ,UAAU,OACVgF,QAAS,WACF6K,GAAiBhG,IACpBkG,KACA1E,GAAS,OAKf,gBAAC,EAAD,CACElL,WAAY0P,EACZ5P,YAAa4J,EACbzS,KAAK,OACLV,MAAM,kBACNsO,QAAS,YACF6K,GAAgBhG,IACnBkG,KACA1E,GAAS,OAKf,gBAAC,EAAD,CACEjU,KAAK,iBACLV,MAAM,eACNsJ,UAAU,OACVgF,QAAS,WACP8J,GAAc,GACdY,EAAgB,UAItB,gBAAC,GAAEgB,MAAH,CACEzX,GAAG,gBACH0X,OAAQ,SAAC7Z,GACP,IAuBIgQ,EAvBA5O,EAAOjB,KAAKmU,MACdtU,EAAMC,aAAa6Z,QAAQ,uBAQzB9N,EALWxM,EAAM4U,IAClBC,mBACAjM,WACA2H,WAEkB/K,KAAI,SAACgL,GAAD,OACvBA,EAAKnO,aAAavB,KAAKuM,cAAcC,UAGnCiN,EAAa9X,OACfzC,EAAM4U,IAAIC,mBAAmBjM,WAAW2H,YACxCtM,OAEEuW,EAAchO,EAAMe,SACtB,gBAASgN,EAAa,GAAIlN,cAAcC,QADxB,gBAGLiN,EAAa,EAHR,YAGaA,EAAa,GAH1B,gBAILA,EAAa,GAGR,YAAd3Y,EAAKR,MACPoP,EAAO,IAAI1O,GAAiB,EAAO0Y,EAAa,kBAE5CjB,GACF/I,EAAKtK,QACH,IAAI+C,EACF,MACA,GACA,GACA,GACA,GACA,GACA,GACA,EACA,QAGJuH,EAAKtK,QACH,IAAI+C,EACF,IACA,GACA,GACA,GACA,GACA,GACA,GACA,EACA,QAGJuH,EAAKtK,QACH,IAAI+C,EACF,KACA,GACA,GACA,GACA,GACA,GACA,GACA,EACA,UAIJuH,EAAKtK,QACH,IAAIC,EACFoT,EACA,MACA,GACA,GACA,GACA,GACA,GACA,GACA,EACA,MACAvZ,EAAM4U,IAAIC,qBAGdrE,EAAKtK,QACH,IAAIC,EACFoT,EACA,IACA,GACA,GACA,GACA,GACA,GACA,GACA,EACA,MACAvZ,EAAM4U,IAAIC,qBAGdrE,EAAKtK,QACH,IAAIC,EACFoT,EACA,KACA,GACA,GACA,GACA,GACA,GACA,GACA,EACA,MACAvZ,EAAM4U,IAAIC,uBAKhBrE,EAAO,IAAI1O,GAAiB,EAAM,SAAU,kBAG9C,IAAImB,EAAQjD,EAAM4U,IACfC,mBACA4F,sBAAsBja,GACzBgQ,EAAKpN,YAAYH,GACjBjD,EAAM4U,IAAIC,mBAAmBjM,WAAW8R,QAAQlK,GAEhD/E,KAEFkP,WAAY,SAACna,GACXA,EAAMoa,kBAERlM,QAAS,SAAClO,IACRA,EAAMoa,iBAEJpa,EAAMqa,SACN7a,EAAM4U,IACHC,mBACAjM,WACAkS,sBAAsB,aAAc5X,gBAEjBlD,EAAM4U,IACzBC,mBACAjM,WACAkS,sBAAsB,GAEXrD,SACdhM,KAEFoO,MAEFtP,cAAe,SAAC/J,GAEd,GADAA,EAAMoa,iBAEJ5a,EAAM4U,IACHC,mBACAjM,WACAkS,sBAAsB,aAAc5X,aAEvCoW,EACEtZ,EAAM4U,IACHC,mBACAjM,WACAkS,sBAAsB,GACtBvS,aAELmQ,GAAsB,GACtBU,EAAgB,WACX,GACLpZ,EAAM4U,IACHC,mBACAjM,WACAkS,sBAAsB,aAAchZ,EACvC,CACA+X,KACA,IAAIV,EAAenZ,EAAM4U,IACtBC,mBACAjM,WACAkS,sBAAsB,GAEzB1B,EAAgBD,MAIpB,gBAAC,EAAD,KACE,gBAAC,eAAD,CACEjP,UAAU,kBACVxC,OAAQ1H,EAAM4U,IAAIC,uBAIP,MAAhBsE,EACC,gBAAC,GAAD,CACExI,OAAQkJ,GAERzK,QAASmK,EACTtN,aAAckN,EACd7I,cAAetQ,EAAM4U,IAAIC,qBAEzB,KACJ,gBAAC,GAAD,CACEtB,MAAOA,EACPnE,QAASmK,EACT5I,OAAQkJ,GACRjI,OAAQ2G,EACR3F,iBAAkB,kBAtVrB2G,IAIDvZ,EAAM4U,IAAIuF,gBAEVX,GAAgB,IALTxZ,EAAM4U,IAAIC,mBAAmBjM,WAAWmN,eAwV7C,gBAAC,GAAD,CACEpF,OAAQkJ,GACRjI,OAAQ+G,EACR/D,IAAK5U,EAAM4U,IACXG,SAAUA,EACVO,WAAYkE,IAEd,gBAAC,GAAD,CACE7I,OAAQkJ,GACR/D,aAAc9V,EAAM4U,IAAImG,mBACxB/E,YAAahW,EAAM4U,IAAIoG,kBACvBpJ,OAAQiH,EACRtF,MAAOA,IAET,gBAAC,GAAD,CACE5C,OAAQkJ,GACR/D,aAAc9V,EAAM4U,IAAImG,mBACxBnJ,OAAQmH,IAGV,gBAAC,GAAD,CACEzI,cAAetQ,EAAM4U,IAAIC,mBACzBlE,OAAQkJ,GACRjI,OAAQ6G,EACRtV,KAAMkW,EACNjK,QAASmK,OCreb0B,GAAwB,SAACjb,GAAgB,IACrCiD,EAAyBjD,EAAzBiD,MAAOiY,EAAkBlb,EAAlBkb,cAD6B,EAEpBhb,IAAMoL,UAAS,GAA9B6P,EAFmC,oBAGtCC,EACJ,GAKE,IAJDtU,KAAKuU,MACJpY,EAAMqB,cAAcf,EAAI2X,EAAc5W,cAAcf,EACpDN,EAAMqB,cAAchB,EAAI4X,EAAc5W,cAAchB,GAGpDwD,KAAKwU,GAGT,OACE,uBACEpR,UAAU,QACVqR,UACE,aACAtY,EAAMqB,cAAchB,EACpB,KACAL,EAAMqB,cAAcf,EACpB,KAGF,uBAAG0G,MAAO,CAAEsR,UAAW,UAAYH,EAAQ,SACzC,uBAAGG,UAAW,oBACZ,6BACEvX,OAAO,kBACPwX,KAAMxb,EAAMI,MACZqb,aAAc,kBAAMN,GAAY,IAChCO,aAAc,kBAAMP,GAAY,IAChCQ,UAAS1Y,EAAM4L,QACf+M,cAAa3Y,EAAM4Y,UAAUhN,cAQ5BiN,GAAb,4KACgB7Y,EAAmBiY,GAC/B,OACE,kBAAC,GAAD,CACEpO,IAAK7J,EAAM4L,QACX5L,MAAOA,EACPiY,cAAeA,EACfa,cAAehc,KAAKC,MAAMmD,KAAKd,aAAaf,cAC5ClB,MAAOL,KAAKC,MAAMmD,KAAKd,aAAajC,UAR5C,+BAaY,IAAD,OAEH4D,EAASjE,KAAKC,MAAMmD,KAAKqU,YACzBwE,EAAQ,GACZjc,KAAKkc,SAAW,GAGhB,IAPO,eAOEC,GACPF,EAAMxZ,KACJ,EAAK2Z,aACHC,aAAWC,iBAAiBrY,EAAOkY,GAAIlY,EAAOkY,EAAI,IAClD,CACE,cAAe,EAAKlc,MAAMmD,KAAK0L,QAC/B,aAAcqN,EACdI,YAAa,SAAC9b,GACZ,EAAK+b,eAAe/b,EAAc0b,EAAI,KAG1CA,KAXGA,EAAI,EAAGA,EAAIlY,EAAOC,OAAS,EAAGiY,IAAM,EAApCA,GAgBTF,EAAMxZ,KAAKzC,KAAKyc,cAAcxY,EAAO,GAAIA,EAAO,KAGlD,IAAK,IAAIyY,EAAI,EAAGA,EAAIzY,EAAOC,OAAS,EAAGwY,IACtCT,EAAMxZ,KAAKzC,KAAK2c,cAAc1Y,EAAOyY,KAKtC,OAFCT,EAAMxZ,KAAKzC,KAAK2c,cAAc1Y,EAAOA,EAAOC,OAAS,KAE/C,uBAAG0Y,yBAAwB5c,KAAKC,MAAMmD,KAAKd,aAAaua,UAAWZ,OA7C5E,GAAqCa,qBCzCxBC,GAAb,kDACE,aAAe,uCACP,SAFV,4DAMI,OAAO,IAAI5b,IANf,0CASsBV,GAClB,OAAO,kBAAC,GAAD,CAAiB2C,KAAM3C,EAAMK,MAAOyP,cAAevQ,KAAK2H,aAVnE,GAAsCqV,sB,sgCCKd,YAAGpd,UAAOC,IAAV,MAMJ,QAAGD,UAAOC,IAAV,MAID,OAAGD,UAAOC,IAAV,MAUU,iBAAGD,UAAO0Y,KAAV,MAMD,gBAAG1Y,UAAOC,IAAV,MA1BnB,IA+BMod,EAAQ,WAAGrd,UAAOC,IAAV,MAKE,aAAGD,kBAAOqd,EAAPrd,CAAH,MAID,YAAGA,kBAAOqd,EAAPrd,CAAH,M,CAzCdD,Q,KA8CH,I,GAAMud,GAAmB,SAACjd,GAAkC,IAC3DoC,EAAiBpC,EAAjBoC,KAAMsF,EAAW1H,EAAX0H,OAEPtF,EAAKmF,YACRnF,EAAKgO,YAGP,IAAI8M,EACF,gBAAC,aAAD,CAAYxV,OAAQA,EAAQtF,KAAMA,GAChC,gBAAC,GAAE+a,KAAH,OAIExb,EACJ,gBAAC,GAAEyb,UAAH,KACE,2BACGhb,EAAKT,MACL,IACAS,EAAKsD,eAKNC,EAAevD,EAAKuD,cACxB,gBAAC,GAAE0X,eAAH,CAAkBnT,UAAU,sBAE9B,OAAI9H,EAAKmF,WACA,gBAAC,GAAE+V,UAAH,KAAcJ,GAGnB,gBAAC,GAAEK,cAAH,KACE,gBAAC,GAAEP,SAAH,KAAarX,GACb,gBAAC,GAAEqX,SAAH,KAAarb,GACb,gBAAC,GAAE6b,WAAH,KAAeN,K,8tCC/EJ,OAAGvd,UAAOC,IAAV,MACK,SAACO,GAAD,OAAOA,EAAEa,cAOT,SAACb,GAAD,OAAQA,EAAEsd,SAAW,iBAAmB,WAG5C,QAAG9d,UAAOC,IAAV,MAQI,YAAGD,UAAOC,IAAV,MAKJ,QAAGD,UAAOC,IAAV,MAKS,iBAAGD,UAAOC,IAAV,MAcD,gBAAGD,UAAOC,IAAV,MAKC,iBAAGD,UAAOC,IAAV,M,CAjDnBF,Q,KA4DH,I,GAAMge,GAAoB,SAAC1d,GAChC,IAAM2d,EAAe,SAACvb,GACpB,OACE,gBAAC,GAAD,CACEsF,OAAQ1H,EAAM0H,OACdtF,KAAMA,EACN0K,IAAK1K,EAAKjB,QAAQwB,MAKhB6N,EAASxQ,EAATwQ,KACFnE,EAAQmE,EAAKnL,WACbuY,EAAWnb,MAAM4J,EAAOsR,GACxBE,EAAgBD,EAAShP,QAAO,SAACzO,GAAD,OAAOA,EAAEH,MAAMoC,KAAKmF,cACpDuW,EAAmBF,EAAShP,QAAO,SAACzO,GAAD,OAAQA,EAAEH,MAAMoC,KAAKmF,cAE5D,OACE,gBAAC,GAAEwW,KAAH,CACEC,yBAAwBxN,EAAKnO,aAAavB,KAC1C2c,SAAUjN,EAAK7G,aACf3I,WAAYwP,EAAKnO,aAAajC,OAE9B,gBAAC,GAAE6d,MAAH,KAC4B,IAAzBJ,EAAc5Z,QACb,gBAAC,GAAEia,cAAH,KACGP,EAAaE,EAAc,GAAG7d,MAAMoC,OAIzC,gBAAC,GAAE+b,UAAH,KAAc3N,EAAKnO,aAAavB,MAEN,IAAzB+c,EAAc5Z,QACb,gBAAC,GAAEma,eAAH,KACGT,EAAaE,EAAc,GAAG7d,MAAMoC,QAI3C,gBAAC,GAAEic,MAAH,KACE,gBAAC,GAAEC,eAAH,KAAmBR,MCtGhBS,GAAb,kDAIE,aAAe,uCACP,WALV,gEAQsB/d,GAClB,OAAO,gBAAC,GAAD,CAAmBkH,OAAQ3H,KAAK2H,OAAQ8I,KAAMhQ,EAAMK,UAT/D,oCAYgBL,GACZ,OAAO,IAAIsB,GAAiB,EAAO,SAAU,sBAbjD,GAAwC0c,wB,6SCGpB,QAAG7e,UAAOC,IAAV,M,CADVF,Q,KAgBH,IAAM+e,GAAb,uKAII,OAAO,gBAAC,GAAEC,MAAH,KAAU3e,KAAKC,MAAMa,MAAMwB,aAAaV,WAJnD,GAAwCzB,aClB3Bye,GAAb,kDAIE,aAAe,uCACP,WALV,gEAQsBne,GAClB,OAAO,gBAAC,GAAD,CAAoBK,MAAOL,EAAMK,UAT5C,oCAYgBL,GACZ,OAAO,IAAIiB,MAbf,GAAyC+c,wBCF5BI,GAAb,kDAIE,aAAe,uCACP,WALV,4DASI,OAAO,IAAIzY,GAAiB,EAAO,QAAQ,GAAM,OATrD,GAAwC0Y,wB,iGCUjC,IAAMC,GAAWnf,UAAOof,OAAV,MAIRC,GAAb,kDAIE,WAAYhf,GAAQ,IAAD,8BACjB,cAAMA,IACDif,MAAQ,CACXxB,UAAU,GAHK,EAJrB,qDAWY,IAAD,OACCxa,EAAUlD,KAAKC,MAAfiD,MACR,OACE,yBACE,0BACEic,GAAIjc,EAAMqB,cAAchB,EACxB6b,GAAIlc,EAAMqB,cAAcf,EACxBsD,EAAG,EACH2U,KACEzb,KAAKkf,MAAMxB,UAAY1d,KAAKC,MAAMiD,MAAM0G,aACpC5J,KAAKC,MAAM+b,cACXhc,KAAKC,MAAMI,QAGnB,gBAAC0e,GAAD,CACE5U,UAAU,QACVuR,aAAc,WACZ,EAAK2D,SAAS,CAAE3B,UAAU,KAE5B/B,aAAc,WACZ,EAAK0D,SAAS,CAAE3B,UAAU,KAE5B9B,UAAS1Y,EAAM4L,QACf+M,cAAa3Y,EAAM4Y,UAAUhN,QAC7BqQ,GAAIjc,EAAMqB,cAAchB,EACxB6b,GAAIlc,EAAMqB,cAAcf,EACxBsD,EAAG,GACHwY,QAAS,SAtCnB,GAA4Cnf,aCF/Bof,GAAb,uKAGY,IAAD,OACDC,EAASrf,eACbH,KAAKC,MAAMkI,QAAQsX,oBACjBzf,KAAKC,MAAMmD,KACXpD,KAAKC,MAAMyd,UAAY1d,KAAKC,MAAMmD,KAAKwG,aACvC5J,KAAKC,MAAMyf,MAEb,CACEC,IAAK3f,KAAKC,MAAM2f,aAIdC,EAAM1f,eAAmBqf,EAAnB,yBACVM,cAAe,QACfpE,aAAc,WACZ,EAAKzb,MAAM8f,aAAY,IAEzBpE,aAAc,WACZ,EAAK1b,MAAM8f,aAAY,KAEtB/f,KAAKC,MAAM+f,QARJ,IASVL,IAAK,KACL,cAAe3f,KAAKC,MAAMmD,KAAK0L,QAC/BmR,cAAejgB,KAAKC,MAAMyd,SAAW,GAAM,EAC3CwC,YAAa,GACbzE,KAAM,OACN0E,cAAe,SAAC1f,GACT,EAAKR,MAAMmD,KAAKgd,aACnB3f,GAASA,EAAMoa,iBACf,EAAK5a,MAAMmD,KAAKsU,cAKtB,OACE,yBACG8H,EACAK,OAxCT,GAA8C1f,aCKjC2c,GAAb,kDAME,WAAY7c,GAA0B,IAAD,8BACnC,cAAMA,IACDic,SAAW,GAChB,EAAKgD,MAAQ,CACXxB,UAAU,GAJuB,EANvC,iEAeI1d,KAAKC,MAAMmD,KAAKid,iBACdrgB,KAAKkc,SAASzW,KAAI,SAACka,GACjB,OAAOA,EAAIW,cAjBnB,0CAuBItgB,KAAKC,MAAMmD,KAAKid,iBACdrgB,KAAKkc,SAASzW,KAAI,SAACka,GACjB,OAAOA,EAAIW,cAzBnB,6CA+BItgB,KAAKC,MAAMmD,KAAKid,iBAAiB,MA/BrC,qCAkCiB5f,EAAmBiM,GAAgB,IAAD,OAC/C,IACGjM,EAAM8f,WACNvgB,KAAKC,MAAMmD,KAAKgd,YACjBpgB,KAAKC,MAAMmD,KAAKqU,YAAYvT,OAAS,GACnClE,KAAKC,MAAMsQ,cAAciQ,4BAC3B,CACA,IAAMtd,EAAQ,IAAIC,aAAW,CAC3BC,KAAMpD,KAAKC,MAAMmD,KACjBE,SAAUtD,KAAKC,MAAMsQ,cAAcmK,sBAAsBja,KAE3DT,KAAKC,MAAMmD,KAAKK,SAASP,EAAOwJ,GAChCjM,EAAM4L,UACN5L,EAAMggB,kBACNzgB,KAAK0L,aAAY,WACf,EAAKzL,MAAMsQ,cAAcmQ,oBAAoBC,WAAW,CACtDlgB,QACAK,MAAOoC,UAnDjB,oCAyDgBA,GACZ,OACE,gBAAC,GAAD,CACE6J,IAAK7J,EAAM4L,QACX5L,MAAOA,EACP8Y,cAAehc,KAAKC,MAAMmD,KAAKd,aAAaf,cAC5ClB,MAAOL,KAAKC,MAAMmD,KAAKd,aAAajC,UA/D5C,mCAqEIqf,EACAkB,EACAhe,GACc,IAAD,OACP+c,EAAMxf,cAEZ,OADAH,KAAKkc,SAASzZ,KAAKkd,GAEjB,gBAAC,GAAD,CACE5S,IAAG,eAAUnK,GACb8c,KAAMA,EACNhC,SAAU1d,KAAKkf,MAAMxB,SACrBnN,cAAevQ,KAAKC,MAAMsQ,cAC1BpI,QAASnI,KAAKC,MAAMsQ,cAAcsQ,kBAAkB7gB,KAAKC,MAAMmD,MAC/DA,KAAMpD,KAAKC,MAAMmD,KACjBwc,WAAYD,EACZI,YAAa,SAACrC,GACZ,EAAK2B,SAAS,CAAE3B,SAAUA,KAE5BsC,OAAQY,MAvFhB,+BA4FY,IAAD,OAEH3c,EAASjE,KAAKC,MAAMmD,KAAKqU,YACzBwE,EAAQ,GAGZ,GAFAjc,KAAKkc,SAAW,GAEM,IAAlBjY,EAAOC,OACT+X,EAAMxZ,KACJzC,KAAKoc,aACHpc,KAAKC,MAAMmD,KAAK0d,aAChB,CACEvE,YAAa,SAAC9b,GACZ,EAAK+b,eAAe/b,EAAO,KAG/B,MAKmC,MAAnCT,KAAKC,MAAMmD,KAAK+B,iBAClB8W,EAAMxZ,KAAKzC,KAAK2c,cAAc1Y,EAAO,SAElC,CAEL,IAFM,IAAD,WAEIkY,GACPF,EAAMxZ,KACJ,EAAK2Z,aACHC,aAAWC,iBAAiBrY,EAAOkY,GAAIlY,EAAOkY,EAAI,IAClD,CACE,cAAe,EAAKlc,MAAMmD,KAAK0L,QAC/B,aAAcqN,EACdI,YAAa,SAAC9b,GACZ,EAAK+b,eAAe/b,EAAO0b,EAAI,KAGnCA,KAXGA,EAAI,EAAGA,EAAIlY,EAAOC,OAAS,EAAGiY,IAAM,EAApCA,GAiBT,IAAK,IAAIO,EAAI,EAAGA,EAAIzY,EAAOC,OAAS,EAAGwY,IACrCT,EAAMxZ,KAAKzC,KAAK2c,cAAc1Y,EAAOyY,KAGA,MAAnC1c,KAAKC,MAAMmD,KAAK+B,iBAClB8W,EAAMxZ,KAAKzC,KAAK2c,cAAc1Y,EAAOA,EAAOC,OAAS,KAIzD,OACE,qBAAG0Y,yBAAwB5c,KAAKC,MAAMmD,KAAKd,aAAaua,UACrDZ,OAjJT,GAAuC9b,a,6aCbhC,I,GAAM4gB,GAAYC,oBAAH,MAShBtD,GAAW7T,cAAH,KAECkX,IAGFE,GAAOrhB,UAAO8f,KAAV,MACb,SAACtf,GAAD,OAAOA,EAAEsd,UAAYA,MAKZV,GAAb,kDAGE,aAA+B,IAAnB3b,EAAkB,uDAAX,UAAW,uCACtBA,GAJV,gEAOsBZ,GAClB,OAAO,gBAAC,GAAD,CAAmB2C,KAAM3C,EAAMK,MAAOyP,cAAevQ,KAAK2H,WARrE,oCAWgBlH,GACZ,OAAO,IAAIgB,IAZf,0CAesBX,EAAa4c,EAAmBgC,GAClD,OACE,gBAACuB,GAAD,CACEvD,SAAUA,EACVwD,OACExD,EAAW5c,EAAMwB,aAAaf,cAAgBT,EAAMwB,aAAajC,MAEnE6f,YAAapf,EAAMwB,aAAahB,MAChC6f,EAAGzB,QAvBX,GAEUjB,wB,mjBCxBS,OAAG7e,UAAOC,IAAV,MACG,SAACO,GAAD,OAAOA,EAAEa,cAOT,SAACb,GAAD,OAAQA,EAAEsd,SAAW,iBAAmB,WAG1C,QAAG9d,UAAOC,IAAV,MAOI,YAAGD,UAAOC,IAAV,M,CAnBdF,Q,KA8BH,IAAMyhB,GAAoB,SAACnhB,GAA6B,IACvDwQ,EAASxQ,EAATwQ,KAEN,OACE,gBAAC,GAAEuN,KAAH,CACEC,yBAAwBxN,EAAKnO,aAAavB,KAC1C2c,SAAUjN,EAAK7G,aACf3I,WAAYwP,EAAKnO,aAAajC,OAE9B,gBAAC,GAAE6d,MAAH,KACE,gBAAC,GAAEE,UAAH,KAAc3N,EAAKnO,aAAavB,SCvC3BsgB,GAAb,kDAIE,aAAe,uCACP,SALV,gEAQsB5gB,GAClB,OAAO,gBAAC,GAAD,CAAmBkH,OAAQ3H,KAAK2H,OAAQ8I,KAAMhQ,EAAMK,UAT/D,oCAYgBL,GACZ,OAAO,IAAIsB,GAAiB,EAAM,QAAS,sBAb/C,GAAwC0c,wBCF3B6C,GAAb,kDAIE,aAAe,uCACP,SALV,4DASI,OAAO,IAAIpY,EAAkB,QAAQ,GAAM,OAT/C,GAAsC4V,wBCmBzByC,GAAb,WAME,aAAe,oBACbvhB,KAAKuQ,cAAgBiR,MAErBxhB,KAAKuQ,cACFkR,mBACAC,gBAAgB,IAAIL,IACvBrhB,KAAKuQ,cACFkR,mBACAC,gBAAgB,IAAIlD,IAEvBxe,KAAKuQ,cACFoR,oBACAD,gBAAgB,IAAI9C,IAEvB5e,KAAKuQ,cACFqR,mBACAF,gBAAgB,IAAI7C,IACvB7e,KAAKuQ,cACFqR,mBACAF,gBAAgB,IAAIJ,IAEvBthB,KAAKuQ,cACFsR,mBACAH,gBAAgB,IAAI3E,IACvB/c,KAAKuQ,cACFsR,mBACAH,gBAAgB,IAAI1E,IAEvB,IAAMkC,EAAQlf,KAAKuQ,cAAcuR,kBAAkBC,kBAE/C7C,aAAiB8C,wBACnB9C,EAAM+C,YAAYvX,OAAOwX,iBAAkB,GAG7CliB,KAAKmiB,WAxCT,uDA4CIniB,KAAKoiB,YAAc,IAAIlN,eACvBlV,KAAKqiB,WAAa,IAAInN,eAEtBlV,KAAKuQ,cAAc+R,SAAStiB,KAAKoiB,eA/CrC,yCAmDI,OAAOpiB,KAAKoiB,cAnDhB,wCAuDI,OAAOpiB,KAAKqiB,aAvDhB,yCA2DI,OAAOriB,KAAKuQ,gBA3DhB,sCA8D0B,IAAD,OACjBgS,EAAYviB,KAAKoiB,YAAY5R,WAEjCjL,OAAOqD,KAAK2Z,GAAWtc,SAAQ,SAACuc,GAC9B,IAAI/R,EAAO8R,EAAUC,GAAGrgB,QAEpBsgB,EAAYF,EAAUC,GAAGld,WAE7BC,OAAOqD,KAAK6Z,GAAW5T,QAAO,SAAAjM,GAAE,OAAI6f,EAAU7f,GAAI4E,cAAYvB,SAAQ,SAACuc,GACrE,IAAIngB,EAAOogB,EAAUD,GACjBE,EAAY,IAAIxZ,EAClB7G,EAAKT,MACLS,EAAKmF,WACLnF,EAAKuD,aACLvD,EAAKoF,aACLpF,EAAKqF,aACLrF,EAAKwD,UACLxD,EAAKyD,kBACLzD,EAAK0D,SACL1D,EAAKsD,cAEP8K,EAAKtK,QAAQuc,MAGf,EAAKL,WAAW1H,QAAQlK,MAG1B,IAAIsC,EAAQ/S,KAAKqiB,WAAW7R,WAExBmS,EAAqC,GACzC5P,EAAMtN,KAAI,SAAAmd,GACR,IAAItW,EAAQsW,EAAEtd,WAIa,IAFT5C,IAAE8C,OAAO8G,GAAOuC,QAAO,SAAAxM,GAAI,OAAIA,EAAKuD,gBAEtC1B,QACdye,EAAelgB,KAAKmgB,MAKxB,IAAI7a,EAAQ/H,KAAKoiB,YAAYtZ,WAEzB+Z,EAAgB,GAEpB9a,EAAM8G,QAAO,SAAAzL,GACX,IAAI0f,EAAa1f,EAAK4B,gBAAgBwD,YAClCua,EAAa3f,EAAK+B,gBAAgBqD,aAElCma,EAAeld,KAAI,SAAAgL,GAAI,OAAIA,EAAKnO,aAAavB,QAAMyM,SAASsV,EAAWxgB,aAAavB,OAAS4hB,EAAeld,KAAI,SAAAgL,GAAI,OAAIA,EAAKnO,aAAavB,QAAMyM,SAASuV,EAAWzgB,aAAavB,QACnL8hB,EAAcpgB,KAAKW,MAIvB2F,QAAQC,IAAI,iBAAkB6Z,GAE9B,IAAIG,EAAeH,EAAchU,QAAO,SAAAzL,GACtC,IAAI6f,EAAe7f,EAChByK,YAAY,GAAyBvL,aAAaV,MACjDshB,EAAe9f,EAChByK,YAAY,GAAyBvL,aAAaV,MAErD,OAAOqhB,EAAYzV,SAAS,MAAQ0V,EAAY1V,SAAS,QAGvD2V,EAAkBN,EAAchU,QAAO,SAAAzL,GACzC,IAAI6f,EAAe7f,EAChByK,YAAY,GAAyBvL,aAAaV,MACjDshB,EAAe9f,EAChByK,YAAY,GAAyBvL,aAAaV,MAErD,OAAOqhB,EAAYzV,SAAS,OAAS0V,EAAY1V,SAAS,QAGxD4V,EAAkBP,EAAchU,QAAO,SAAAzL,GACzC,IAAI6f,EAAe7f,EAChByK,YAAY,GAAyBvL,aAAaV,MACjDshB,EAAe9f,EAChByK,YAAY,GAAyBvL,aAAaV,MAErD,OAAQqhB,EAAYzV,SAAS,MAAQ0V,EAAY1V,SAAS,QAGxD6V,EAAoBR,EAAchU,QAAO,SAAAzL,GAC3C,IAAI6f,EAAe7f,EAChByK,YAAY,GAAyBvL,aAAaV,MACjDshB,EAAe9f,EAChByK,YAAY,GAAyBvL,aAAaV,MAErD,OAAQqhB,EAAYzV,SAAS,OAAS0V,EAAY1V,SAAS,QAK7DxN,KAAKsjB,mBAAmBF,GAGxBpjB,KAAKujB,mBAAmBJ,GAGxBnjB,KAAKwjB,eAAeR,GAEpBhjB,KAAKujB,mBAAmBF,GAExB,IAAII,EAAYzjB,KAAKoiB,YAAYtZ,WAAW+F,QAAO,SAAAzL,GAAI,OAAKyf,EAAcrV,SAASpK,MAG/EsgB,EAAWD,EAAU5U,QAAO,SAAAzL,GAC9B,IAAI6f,EAAe7f,EAChByK,YAAY,GAAyBvL,aAAaV,MACjDshB,EAAe9f,EAChByK,YAAY,GAAyBvL,aAAaV,MAErD,OAAOqhB,EAAYzV,SAAS,MAAQ0V,EAAY1V,SAAS,QAGvDmW,EAAcF,EAAU5U,QAAO,SAAAzL,GACjC,IAAI6f,EAAe7f,EAChByK,YAAY,GAAyBvL,aAAaV,MACjDshB,EAAe9f,EAChByK,YAAY,GAAyBvL,aAAaV,MAErD,OAAOqhB,EAAYzV,SAAS,OAAS0V,EAAY1V,SAAS,QAGxDoW,EAAcH,EAAU5U,QAAO,SAAAzL,GACjC,IAAI6f,EAAe7f,EAChByK,YAAY,GAAyBvL,aAAaV,MACjDshB,EAAe9f,EAChByK,YAAY,GAAyBvL,aAAaV,MAErD,OAAQqhB,EAAYzV,SAAS,MAAQ0V,EAAY1V,SAAS,QAGxDqW,EAAgBJ,EAAU5U,QAAO,SAAAzL,GACnC,IAAI6f,EAAe7f,EAChByK,YAAY,GAAyBvL,aAAaV,MACjDshB,EAAe9f,EAChByK,YAAY,GAAyBvL,aAAaV,MAErD,OAAQqhB,EAAYzV,SAAS,OAAS0V,EAAY1V,SAAS,QAM7DxN,KAAKsjB,mBAAmBM,GAGxB5jB,KAAKujB,mBAAmBI,GAGxB3jB,KAAKwjB,eAAeE,GAEpB1jB,KAAKujB,mBAAmBM,GAGxB7jB,KAAKuQ,cAAc+R,SAAStiB,KAAKqiB,cA3NrC,2CA+NIriB,KAAKqiB,WAAa,KAClBriB,KAAKqiB,WAAa,IAAInN,eAEtB,IAAI4O,EAAkB,IAAI5O,eAEtBnC,EAAQ/S,KAAKoiB,YAAY5R,WAE7BjL,OAAOqD,KAAKmK,GAAO9M,SAAQ,SAACuc,GAC1BsB,EAAgBnJ,QAAQ5H,EAAMyP,OAGhC,IAAIza,EAAQ/H,KAAKoiB,YAAYtZ,WAE7BvD,OAAOqD,KAAKb,GAAO9B,SAAQ,SAACuc,GAC1BsB,EAAgB3L,QAAQpQ,EAAMya,OAGhCxiB,KAAKoiB,YAAc0B,EAEnB9jB,KAAKuQ,cAAc+R,SAAStiB,KAAKoiB,eAlPrC,0CAqP6BthB,GACzBd,KAAKoiB,YAActhB,EAEnBd,KAAKuQ,cAAc+R,SAAStiB,KAAKoiB,eAxPrC,qCA2PwBthB,GACpBd,KAAKqiB,WAAavhB,EAClBd,KAAKuQ,cAAc+R,SAAStiB,KAAKqiB,cA7PrC,qCAgQwBqB,GAA2C,IAAD,OAC9Dne,OAAOqD,KAAK8a,GAAUzd,SAAQ,SAACuc,GAC7B,IAAIuB,EAAa,EAAK1B,WAAW7R,WAE7BsS,EAAaY,EAASlB,GAAG5d,WAAW4D,YACpCwb,EAAeD,EAChBlV,QACC,SAAC4B,GAAD,OACGA,EAA0BnO,aAAavB,OACxC+hB,EAAWxgB,aAAavB,QAC1B,GACDuB,aAAaM,GAEZmgB,EAAaW,EAASlB,GAAGvd,WAAWuD,YACpCyb,EAAeF,EAChBlV,QACC,SAAC4B,GAAD,OACGA,EAA0BnO,aAAavB,OACxCgiB,EAAWzgB,aAAavB,QAC1B,GACDuB,aAAaM,GAEZshB,EAAYR,EAASlB,GACtB7e,WAAgCxB,QAEnC+hB,EAAQ5hB,aAAavB,KAAOmjB,EAAQ5hB,aAAavB,KAAO2iB,EAASlB,GAAG9e,QAEpEwgB,EAAQ7gB,YACNyf,EAAWve,cAAchB,EAAI,IAC7Buf,EAAWve,cAAcf,EAAI,KAG/B0gB,EAAQ/d,QACN,IAAI+C,EACF,MACA,GACA,GACA,GACA,GACA,GACA,GACA,EACA,QAGJgb,EAAQ/d,QACN,IAAI+C,EACF,IACA,GACA,GACA,GACA,GACA,GACA,GACA,EACA,QAGJgb,EAAQ/d,QACN,IAAI+C,EACF,KACA,GACA,GACA,GACA,GACA,GACA,GACA,EACA,QAIJ,IAGIib,EAHkBJ,EAAWlV,QAC/B,SAAC+T,GAAD,OAAOA,EAAEtgB,aAAaM,KAAOohB,KAC7B,GACoC1e,WAGlC8e,EAAmB1hB,IAAEkG,KAAKub,GAAiBtV,QAAO,SAAA9B,GAAG,OAAIoX,EAAgBpX,GAAKnH,cAAgBue,EAAgBpX,GAAKrF,gBAAcjC,KAAI,SAAAsH,GAAG,OAAIoX,EAAgBpX,MAK5JsX,EAHkBN,EAAWlV,QAC/B,SAAC+T,GAAD,OAAOA,EAAEtgB,aAAaM,KAAOqhB,KAC7B,GACoC3e,WAGlCgf,EAAmB5hB,IAAEkG,KAAKyb,GAAiBxV,QAAO,SAAA9B,GAAG,OAAIsX,EAAgBtX,GAAKnH,cAAgBye,EAAgBtX,GAAKrF,gBAAcjC,KAAI,SAAAsH,GAAG,OAAIsX,EAAgBtX,MAE5JwX,EAA6B7hB,IAAEkG,KAAKyb,GAAiBxV,QAAO,SAAA9B,GAAG,OAAIsX,EAAgBtX,GAAKnH,gBAAcH,KAAI,SAAAsH,GAAG,OAAIsX,EAAgBtX,MACjIyX,EAA6B9hB,IAAEkG,KAAKub,GAAiBtV,QAAO,SAAA9B,GAAG,OAAIoX,EAAgBpX,GAAKnH,gBAAcH,KAAI,SAAAsH,GAAG,OAAIoX,EAAgBpX,MAEjIxJ,EAAI,EACR6gB,EAAiBne,SAAQ,SAAA5D,GACvB6hB,EAAQ/d,QACN,IAAI+C,EACF4Z,EAAWxgB,aAAavB,KAAOsB,EAAKT,MAApC,UAA+CkhB,IAAeC,EAAaxf,EAAI,KAC/E,IACAihB,EAA2BtgB,OAAS,GACpCsgB,EAA2BtgB,OAAS,GACpC,GACA,GACA,GACA,EACA,MACAuC,EAAQqB,MACRkc,IAGJzgB,OAKF+gB,EAAiBre,SAAQ,SAAA5D,GACvB6hB,EAAQ/d,QACN,IAAI+C,EACF6Z,EAAWzgB,aAAavB,KAAOsB,EAAKT,OACpC,IACA2iB,EAA2BrgB,OAAS,GACpCqgB,EAA2BrgB,OAAS,GACpC,GACA,GACA,GACA,EACA,MACAuC,EAAQqB,MACRmc,OAKN,EAAK5B,WAAW1H,QAAQuJ,GAExB,IAGIvM,EAHOoM,EAAWlV,QACpB,SAAC+T,GAAD,OAAOA,EAAEtgB,aAAaM,KAAOohB,KAC7B,GACiB1e,WAAW,GAC1BsS,EAAUsM,EAAQ5e,WAAW,IAE7BlC,EAAO,IAAIjC,EAAe,CAAEE,KAAM,UAEtC+B,EAAKiF,cAAcsP,GACnBvU,EAAKkF,cAAcsP,GAEnB,IAAI6M,EAAQV,EAAWlV,QACrB,SAAC+T,GAAD,OAAOA,EAAEtgB,aAAaM,KAAOqhB,KAC7B,GACES,EAAWR,EAAQ5e,WAAW,GAC9Bqf,EAAWF,EAAMnf,WAAW,IAE5Bsf,EAAQ,IAAIzjB,EAAe,CAAEE,KAAM,UAEvCujB,EAAMvc,cAAcsc,GACpBC,EAAMtc,cAAcoc,GAEpB,EAAKrC,WAAWwC,OAAOzhB,EAAMwhB,QA3ZnC,yCAga4BjB,GAA8C,IAAD,OACrEpe,OAAOqD,KAAK+a,GAAa1d,SAAQ,SAACuc,GAChC,IAAIuB,EAAa,EAAK1B,WAAW7R,WAE7BsS,EAAaa,EAAYnB,GAAG5d,WAAW4D,YACvCwb,EAAeD,EAChBlV,QACC,SAAC4B,GAAD,OACGA,EAA0BnO,aAAavB,OACxC+hB,EAAWxgB,aAAavB,QAC1B,GACDuB,aAAaM,GAEZmgB,EAAaY,EAAYnB,GAAGvd,WAAWuD,YACvCyb,EAAeF,EAChBlV,QACC,SAAC4B,GAAD,OACGA,EAA0BnO,aAAavB,OACxCgiB,EAAWzgB,aAAavB,QAC1B,GACDuB,aAAaM,GAOZuhB,EAHkBJ,EAAWlV,QAC/B,SAAC+T,GAAD,OAAOA,EAAEtgB,aAAaM,KAAOqhB,KAC7B,GACoC3e,WAGlC8e,EAAmB1hB,IAAEkG,KAAKub,GAAiBtV,QAAO,SAAA9B,GAAG,OAAIoX,EAAgBpX,GAAKnH,cAAgBue,EAAgBpX,GAAKrF,gBAAcjC,KAAI,SAAAsH,GAAG,OAAIoX,EAAgBpX,MAI5J0D,EAAOsT,EAAWlV,QACpB,SAAC+T,GAAD,OAAOA,EAAEtgB,aAAaM,KAAOohB,KAC7B,GAEEK,EAAkB5T,EAAKnL,WAGvBif,EAA6B7hB,IAAEkG,KAAKyb,GAAiBxV,QAAO,SAAA9B,GAAG,OAAIsX,EAAgBtX,GAAKnH,gBAAcH,KAAI,SAAAsH,GAAG,OAAIsX,EAAgBtX,MAErIqX,EAAiBne,SAAQ,SAAA5D,GACvBoO,EAAKtK,QACH,IAAI+C,EACF6Z,EAAWzgB,aAAavB,KAAOsB,EAAKT,OACpC,IACA2iB,EAA2BrgB,OAAS,GACpCqgB,EAA2BrgB,OAAS,GACpC,GACA,GACA,GACA,EACA,MACAuC,EAAQqB,MACRmc,OAIN,IAAIxB,EAAYhS,EAAKnL,WACJ5C,IAAEkG,KAAK6Z,GAAW5T,QAAO,SAAA9B,GAAG,OAAI0V,EAAU1V,GAAKrF,gBAAcjC,KAAI,SAAAsH,GAAG,OAAI0V,EAAU1V,MAExFtH,KAAI,SAAApD,GAAI,OAAIA,EAAKuD,cAAe,KAE3C,IAGIP,EAHYse,EAAYnB,GAC3B7e,WAAgCxB,QAEVmD,WAEvB5C,IAAE8C,OAAOH,GAAUI,KAAI,SAAApD,GACrB,IAAIqgB,EAAY,IAAIxZ,EAClB7G,EAAKT,MACLS,EAAKmF,WACLnF,EAAKuD,aACLvD,EAAKoF,aACLpF,EAAKqF,aACLrF,EAAKwD,UACLxD,EAAKyD,kBACLzD,EAAK0D,SACL1D,EAAKsD,cAEP8K,EAAKtK,QAAQuc,MAGf,IAAIoC,EAAQf,EAAWlV,QACrB,SAAC+T,GAAD,OAAOA,EAAEtgB,aAAaM,KAAOqhB,KAC7B,GAEErM,EAAUnH,EAAKnL,WAAW,GAC1BqS,EAAUmN,EAAMxf,WAAW,IAE3BlC,EAAO,IAAIjC,EAAe,CAAEE,KAAM,UAEtC+B,EAAKiF,cAAcsP,GACnBvU,EAAKkF,cAAcsP,GACnB,EAAKyK,WAAWlK,QAAQ/U,QAhgB9B,yCAogB4BwgB,GAA8C,IAAD,OACrEre,OAAOqD,KAAKgb,GAAa3d,SAAQ,SAACuc,GAChC,IAAIuB,EAAa,EAAK1B,WAAW7R,WAE7BsS,EAAac,EAAYpB,GAAG5d,WAAW4D,YACvCwb,EAAeD,EAChBlV,QACC,SAAC4B,GAAD,OACGA,EAA0BnO,aAAavB,OACxC+hB,EAAWxgB,aAAavB,QAC1B,GACDuB,aAAaM,GAEZmgB,EAAaa,EAAYpB,GAAGvd,WAAWuD,YACvCyb,EAAeF,EAChBlV,QACC,SAAC4B,GAAD,OACGA,EAA0BnO,aAAavB,OACxCgiB,EAAWzgB,aAAavB,QAC1B,GACDuB,aAAaM,GAQZuhB,EAHkBJ,EAAWlV,QAC/B,SAAC+T,GAAD,OAAOA,EAAEtgB,aAAaM,KAAOohB,KAC7B,GACoC1e,WAGlC8e,EAAmB1hB,IAAEkG,KAAKub,GAAiBtV,QAAO,SAAA9B,GAAG,OAAIoX,EAAgBpX,GAAKnH,cAAgBue,EAAgBpX,GAAKrF,gBAAcjC,KAAI,SAAAsH,GAAG,OAAIoX,EAAgBpX,MAG5J0D,EAAOsT,EAAWlV,QACpB,SAAC+T,GAAD,OAAOA,EAAEtgB,aAAaM,KAAOqhB,KAC7B,GAEEI,EAAkB5T,EAAKnL,WAGvBif,EAA6B7hB,IAAEkG,KAAKyb,GAAiBxV,QAAO,SAAA9B,GAAG,OAAIsX,EAAgBtX,GAAKnH,gBAAcH,KAAI,SAAAsH,GAAG,OAAIsX,EAAgBtX,MAGrIqX,EAAiBne,SAAQ,SAAA5D,GACvBoO,EAAKtK,QACH,IAAI+C,EACF4Z,EAAWxgB,aAAavB,KAAOsB,EAAKT,OACpC,IACA2iB,EAA2BrgB,OAAS,GACpCqgB,EAA2BrgB,OAAS,GACpC,GACA,GACA,GACA,EACA,MACAuC,EAAQqB,MACRkc,OAKN,IAAIvB,EAAYhS,EAAKnL,WACJ5C,IAAEkG,KAAK6Z,GAAW5T,QAAO,SAAA9B,GAAG,OAAI0V,EAAU1V,GAAKrF,gBAAcjC,KAAI,SAAAsH,GAAG,OAAI0V,EAAU1V,MAExFtH,KAAI,SAAApD,GAAI,OAAIA,EAAKuD,cAAe,KAE3C,IAGIP,EAHYue,EAAYpB,GAC3B7e,WAAgCxB,QAEVmD,WAEvB5C,IAAE8C,OAAOH,GAAUI,KAAI,SAAApD,GACrB,IAAIqgB,EAAY,IAAIxZ,EAClB7G,EAAKT,MACLS,EAAKmF,WACLnF,EAAKuD,aACLvD,EAAKoF,aACLpF,EAAKqF,aACLrF,EAAKwD,UACLxD,EAAKyD,kBACLzD,EAAK0D,SACL1D,EAAKsD,cAEP8K,EAAKtK,QAAQuc,MAGf,IAAIoC,EAAQf,EAAWlV,QACrB,SAAC+T,GAAD,OAAOA,EAAEtgB,aAAaM,KAAOohB,KAC7B,GAEEpM,EAAUnH,EAAKnL,WAAW,IAC1BqS,EAAUmN,EAAMxf,WAAW,GAE3BlC,EAAO,IAAIjC,EAAe,CAAEE,KAAM,UAEtC+B,EAAKiF,cAAcsP,GACnBvU,EAAKkF,cAAcsP,GACnB,EAAKyK,WAAWlK,QAAQ/U,UAtmB9B,KCnBe,cACb,IAAIyR,EAAM,IAAI0M,GACd,OACE,uBAAKpX,UAAU,WACb,gBAAC,GAAD,CAAY0K,IAAKA,MCIHkQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCRNC,IAASC,OAAO,kBAACC,GAAD,MAASle,SAASkP,eAAe,SD8H3C,kBAAmBiP,WACrBA,UAAUC,cAAcC,MACrBjP,MAAK,SAACkP,GACLA,EAAaC,gBAEdC,OAAM,SAACjQ,GACN5M,QAAQ4M,MAAMA,EAAMkQ,c","file":"static/js/main.3bedd2e5.chunk.js","sourcesContent":["import * as React from \"react\";\nimport styled from \"@emotion/styled\";\n\nnamespace S {\n  export const Tray = styled.div`\n  min-width: 200px;\n  background: rgb(20, 20, 20);\n  flex-grow: 0;\n  flex-shrink: 0;\n`;\n}\n\nexport class TrayWidget extends React.Component {\n  render() {\n    return <S.Tray>{this.props.children}</S.Tray>;\n  }\n}\n","import * as React from \"react\";\nimport styled from \"@emotion/styled\";\n\nexport interface TrayItemWidgetProps {\n  model: any;\n  color: string;\n  name: string;\n}\nnamespace S {\n  export const Tray = styled.div<{ color: string }>`\n  color: white;\n  font-family: Helvetica, Arial;\n  padding: 5px;\n  margin: 0px 10px;\n  border: solid 1px ${(p) => p.color};\n  border-radius: 5px;\n  margin-bottom: 2px;\n  cursor: pointer;\n`;\n}\n\nexport class TrayItemWidget extends React.Component<TrayItemWidgetProps> {\n  render() {\n    return (\n      <S.Tray\n        color={this.props.color}\n        draggable={true}\n        onDragStart={(event) => {\n          event.dataTransfer.setData(\n            \"storm-diagram-node\",\n            JSON.stringify(this.props.model)\n          );\n        }}\n      >\n        {this.props.name}\n      </S.Tray>\n    );\n  }\n}\n","import * as React from \"react\";\nimport styled from \"@emotion/styled\";\n\nexport interface DemoCanvasWidgetProps {\n  color?: string;\n  background?: string;\n}\n\nexport const Container = styled.div<{ color: string; background: string }>`\n  height: 100%;\n  background-color: ${(p) => p.background};\n  background-size: 50px 50px;\n  display: flex;\n  > * {\n    height: 100%;\n    min-height: 100%;\n    width: 100%;\n  }\n  background-image: linear-gradient(\n      0deg,\n      transparent 24%,\n      ${(p) => p.color} 25%,\n      ${(p) => p.color} 26%,\n      transparent 27%,\n      transparent 74%,\n      ${(p) => p.color} 75%,\n      ${(p) => p.color} 76%,\n      transparent 77%,\n      transparent\n    ),\n    linear-gradient(\n      90deg,\n      transparent 24%,\n      ${(p) => p.color} 25%,\n      ${(p) => p.color} 26%,\n      transparent 27%,\n      transparent 74%,\n      ${(p) => p.color} 75%,\n      ${(p) => p.color} 76%,\n      transparent 77%,\n      transparent\n    );\n`;\n\nexport class DemoCanvasWidget extends React.Component<DemoCanvasWidgetProps> {\n  render() {\n    return (\n      <Container\n        background={this.props.background || \"rgb(60, 60, 60)\"}\n        color={this.props.color || \"rgba(255,255,255, 0.05)\"}\n      >\n        {this.props.children}\n      </Container>\n    );\n  }\n}\n","import { DefaultLinkModelOptions } from \"./DefaultLinkModel\";\nimport { DefaultLinkModel } from \"@projectstorm/react-diagrams\";\n\nexport class ArrowLinkModel extends DefaultLinkModel {\n  constructor(options: DefaultLinkModelOptions = {}) {\n    super({\n      type: \"arrow\",\n      width: options.width || 3,\n      color: options.color || \"gray\",\n      selectedColor: options.selectedColor || \"rgb(0,192,255)\",\n      curvyness: 0,\n      ...options,\n    });\n    \n    \n  }\n}\n","import {\n  LabelModel,\n  LabelModelGenerics,\n  LabelModelOptions,\n} from \"@projectstorm/react-diagrams-core\";\nimport { DeserializeEvent } from \"@projectstorm/react-canvas-core\";\n\nexport interface DefaultLabelModelOptions extends LabelModelOptions {\n  label?: string;\n}\n\nexport interface DefaultLabelModelGenerics extends LabelModelGenerics {\n  OPTIONS: DefaultLabelModelOptions;\n}\n\nexport class DefaultLabelModel extends LabelModel<DefaultLabelModelGenerics> {\n  constructor(options: DefaultLabelModelOptions = {}) {\n    super({\n      offsetY: options.offsetY == null ? -23 : options.offsetY,\n      type: \"default\",\n      ...options,\n    });\n  }\n\n  setLabel(label: string) {\n    this.options.label = label;\n  }\n\n  deserialize(event: DeserializeEvent<this>) {\n    super.deserialize(event);\n    this.options.label = event.data.label;\n  }\n\n  serialize() {\n    return {\n      ...super.serialize(),\n      label: this.options.label,\n    };\n  }\n}\n","import * as _ from \"lodash\";\nimport { DefaultPortModel } from \"../models/DefaultPortModel\";\nimport {\n  NodeModel,\n  NodeModelGenerics,\n} from \"@projectstorm/react-diagrams-core\";\nimport {\n  BasePositionModelOptions,\n  DeserializeEvent,\n} from \"@projectstorm/react-canvas-core\";\n\nexport interface DefaultNodeModelOptions extends BasePositionModelOptions {\n  name?: string;\n  color?: string;\n}\n\nexport interface DefaultNodeModelGenerics extends NodeModelGenerics {\n  OPTIONS: DefaultNodeModelOptions;\n}\n\nexport class DefaultNodeModel extends NodeModel<DefaultNodeModelGenerics> {\n  isLabel: boolean;\n\n  protected portsIn: DefaultPortModel[];\n\n  constructor(isLabel: boolean, name: string, color: string) {\n    super({\n      type: \"default\",\n      name,\n      color,\n    });\n    this.isLabel = isLabel;\n    this.portsIn = [];\n  }\n\n  doClone(lookupTable: {}, clone: any): void {\n    clone.portsIn = [];\n    clone.portsOut = [];\n    super.doClone(lookupTable, clone);\n  }\n\n  removePort<T extends DefaultPortModel>(port: T): void {\n    super.removePort(port);\n  }\n\n  addPort<T extends DefaultPortModel>(port: T): T {\n    super.addPort(port);\n    if (port.getOptions().in) {\n      if (this.portsIn.indexOf(port) === -1) {\n        this.portsIn.push(port);\n      }\n    }\n    return port;\n  }\n\n  deserialize(event: DeserializeEvent<this>) {\n    super.deserialize(event);\n    this.options.name = event.data.name;\n    this.options.color = event.data.color;\n    this.portsIn = _.map(event.data.portsInOrder, (id) => {\n      return this.getPortFromID(id);\n    }) as DefaultPortModel[];\n    this.isLabel = event.data.isLabel;\n  }\n\n  serialize(): any {\n    return {\n      ...super.serialize(),\n      name: this.options.name,\n      color: this.options.color,\n      isLabel: this.isLabel\n    };\n  }\n\n  getInPorts(): DefaultPortModel[] {\n    return this.portsIn;\n  }\n}\n","import {\n  LabelModel,\n  LinkModel,\n  LinkModelGenerics,\n  LinkModelListener,\n  PortModel,\n  PortModelAlignment,\n  PointModel,\n} from \"@projectstorm/react-diagrams-core\";\nimport { DefaultLabelModel } from \"../models/DefaultLabelModel\";\nimport { BezierCurve } from \"@projectstorm/geometry\";\nimport {\n  BaseEntityEvent,\n  BaseModelOptions,\n  DeserializeEvent,\n} from \"@projectstorm/react-canvas-core\";\nimport { DefaultNodeModel } from \"./DefaultNodeModel\";\nimport { PropertyType } from \"./PropertyType\";\nimport { DefaultPortModel } from \"./DefaultPortModel\";\nimport _ from \"lodash\";\n\nexport interface DefaultLinkModelListener extends LinkModelListener {\n  colorChanged?(\n    event: BaseEntityEvent<DefaultLinkModel> & { color: null | string }\n  ): void;\n\n  widthChanged?(\n    event: BaseEntityEvent<DefaultLinkModel> & { width: 0 | number }\n  ): void;\n}\n\nexport interface LinkWithPointOptions extends BaseModelOptions {\n  position: {x: number, y: number};\n}\n\n\nexport interface DefaultLinkModelOptions extends BaseModelOptions {\n  width?: number;\n  color?: string;\n  selectedColor?: string;\n  curvyness?: number;\n  type?: string;\n  testName?: string;\n}\n\nexport interface DefaultLinkModelGenerics extends LinkModelGenerics {\n  LISTENER: DefaultLinkModelListener;\n  OPTIONS: DefaultLinkModelOptions;\n}\n\nclass RelationProperties {\n  label: string;\n  isPrimaryKey: boolean;\n  isAutoincremented: boolean;\n  isNotNull: boolean;\n  isUnique: boolean;\n  propertyType: PropertyType;\n}\n\nexport class DefaultLinkModel extends LinkModel<DefaultLinkModelGenerics> {\n  properties: DefaultNodeModel;\n  relName: string;\n\n  constructor(options: DefaultLinkModelOptions = {}, withPoint?: LinkWithPointOptions, number?: number) {\n    super({\n      type: \"default\",\n      width: options.width || 3,\n      color: options.color || \"gray\",\n      selectedColor: options.selectedColor || \"rgb(0,192,255)\",\n      curvyness: 0,\n      ...options,\n    });\n\n    this.addLabel(\"0,N\");\n    this.addLabel(`relation name  ${number || 1} \\n`);\n    this.addLabel(\"0,N\");\n\n\n    if(withPoint) {\n      let point = new PointModel({link: this});\n      point.setPosition(withPoint.position.x ,withPoint.position.y)\n      this.addPoint(point);\n    }\n\n\n    this.relName = \"relation name\";\n\n    this.properties = new DefaultNodeModel(false, \"relNode\", \"rgb(0,192,255)\");\n  }\n\n  calculateControlOffset(port: PortModel): [number, number] {\n    if (port.getOptions().alignment === PortModelAlignment.RIGHT) {\n      return [this.options.curvyness, 0];\n    } else if (port.getOptions().alignment === PortModelAlignment.LEFT) {\n      return [-this.options.curvyness, 0];\n    } else if (port.getOptions().alignment === PortModelAlignment.TOP) {\n      return [0, -this.options.curvyness];\n    }\n    return [0, this.options.curvyness];\n  }\n\n  getSVGPath(): string {\n\n    if (this.points.length === 2) {\n      const curve = new BezierCurve();\n      curve.setSource(this.getFirstPoint().getPosition());\n      curve.setTarget(this.getLastPoint().getPosition());\n      curve.setSourceControl(this.getFirstPoint().getPosition().clone());\n      curve.setTargetControl(this.getLastPoint().getPosition().clone());\n\n      if (this.sourcePort) {\n        curve\n          .getSourceControl()\n          .translate(...this.calculateControlOffset(this.getSourcePort()));\n      }\n\n      if (this.targetPort) {\n        curve\n          .getTargetControl()\n          .translate(...this.calculateControlOffset(this.getTargetPort()));\n      }\n      return curve.getSVGCurve();\n    }\n  }\n\n  serialize() {\n    let relPorts =\n      this.properties &&\n      this.properties.getPorts() &&\n      Object.values(this.properties.getPorts());\n    let properties =\n      relPorts &&\n      relPorts.map((a: DefaultPortModel) => {\n        return {\n          label: a.label,\n          propertyType: a.propertyType,\n          isPrimaryKey: a.isPrimaryKey,\n          isNotNull: a.isNotNull,\n          isAutoincremented: a.isAutoincremented,\n          isUnique: a.isUnique,\n        };\n      });\n\n    return {\n      ...super.serialize(),\n      width: this.options.width,\n      color: this.options.color,\n      curvyness: this.options.curvyness,\n      selectedColor: this.options.selectedColor,\n      relName: this.relName,\n      properties,\n    };\n  }\n\n  deserialize(event: DeserializeEvent<this>) {\n    let propertiesNode = new DefaultNodeModel(\n      false,\n      \"relNode\",\n      \"rgb(0,192,255)\"\n    );\n    event.data.properties.forEach((rel: RelationProperties) => {\n      propertiesNode.addPort(\n        new DefaultPortModel(\n          false,\n          rel.label,\n          false,\n          rel.isPrimaryKey,\n          false,\n          false,\n          rel.isNotNull,\n          rel.isAutoincremented,\n          rel.isUnique,\n          rel.propertyType\n        )\n      );\n    });\n\n    super.deserialize(event);\n    this.options.color = event.data.color;\n    this.options.width = event.data.width;\n    this.options.curvyness = event.data.curvyness;\n    this.options.selectedColor = event.data.selectedColor;\n    this.properties = propertiesNode;\n    this.relName = event.data.relName;\n  }\n\n  addLabel(label: LabelModel | string) {\n    if (label instanceof LabelModel) {\n      return super.addLabel(label);\n    }\n    let labelOb = new DefaultLabelModel();\n    labelOb.setLabel(label);\n    return super.addLabel(labelOb);\n  }\n\n  setWidth(width: number) {\n    this.options.width = width;\n    this.fireEvent({ width }, \"widthChanged\");\n  }\n\n  setColor(color: string) {\n    this.options.color = color;\n    this.fireEvent({ color }, \"colorChanged\");\n  }\n}\n","import * as closest from \"closest\";\n\nexport class Toolkit {\n  static TESTING: boolean = false;\n  static TESTING_UID = 0;\n\n  /**\n   * Generats a unique ID (thanks Stack overflow :3)\n   * @returns {String}\n   */\n  public static UID(): string {\n    if (Toolkit.TESTING) {\n      Toolkit.TESTING_UID++;\n      return `${Toolkit.TESTING_UID}`;\n    }\n    return \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, (c) => {\n      const r = (Math.random() * 16) | 0;\n      const v = c === \"x\" ? r : (r & 0x3) | 0x8;\n      return v.toString(16);\n    });\n  }\n\n  /**\n   * Finds the closest element as a polyfill\n   */\n  public static closest(element: Element, selector: string) {\n    if (document.body.closest) {\n      return element.closest(selector);\n    }\n    return closest(element, selector);\n  }\n}\n","import {\n  LinkModel,\n  PortModel,\n  PortModelAlignment,\n  PortModelGenerics,\n  PortModelOptions,\n  PointModel,\n  DiagramEngine,\n} from \"@projectstorm/react-diagrams-core\";\nimport { DefaultLinkModel } from \"../models/DefaultLinkModel\";\nimport { AbstractModelFactory } from \"@projectstorm/react-canvas-core\";\nimport { Toolkit } from \"../Toolkit\";\nimport _ from \"lodash\";\n\nexport interface DefaultPortModelOptions extends PortModelOptions {\n  label?: string;\n  propertyType?: string;\n  in?: boolean;\n}\n\nexport interface DefaultPortModelGenerics extends PortModelGenerics {\n  OPTIONS: DefaultPortModelOptions;\n}\n\nexport class DefaultPortModel extends PortModel<DefaultPortModelGenerics> {\n  in: boolean;\n  isNamePort: boolean;\n  label: string;\n  isPrimaryKey: boolean;\n  isPartialKey: boolean;\n  isForeignKey: boolean;\n  isAutoincremented: boolean;\n  isNotNull: boolean;\n  isUnique: boolean;\n  propertyType: string;\n  fkPortId: string;\n\n  dEngine: DiagramEngine;\n\n  constructor(\n    logic: boolean,\n    name: string,\n    isNamePort: boolean,\n    isPrimaryKey?: boolean,\n    isForeignKey?: boolean,\n    isPartialKey?: boolean,\n    isNotNull?: boolean,\n    isAutoincremented?: boolean,\n    isUnique?: boolean,\n    propertyType?: string,\n    engine?: DiagramEngine,\n    id?: string,\n    fkPortId?: string,\n    alignemnt?: PortModelAlignment,\n  ) {\n    super({\n      id: id || Toolkit.UID(),\n      in: true,\n      name,\n      label: name,\n      propertyType: propertyType,\n      alignment: alignemnt,\n      type: logic ? \"arrow\" : \"default\",\n    });\n\n    this.label = name;\n    this.isNamePort = isNamePort;\n    this.links = {};\n\n    this.isPrimaryKey = isPrimaryKey;\n    this.isForeignKey = isForeignKey;\n    this.isPartialKey = isPartialKey;\n\n    this.isNotNull = isNotNull;\n    this.isUnique = isUnique;\n    this.isAutoincremented = isAutoincremented;\n\n    this.propertyType = propertyType;\n    this.fkPortId = fkPortId;\n\n    this.dEngine = engine;\n  }\n\n  deserialize(event: any) {\n    super.deserialize(event);\n    this.options.in = event.data.in;\n    this.options.label = event.data.label;\n\n    this.label = event.data.label;\n    this.isNamePort = event.data.isNamePort;\n\n    this.isPrimaryKey = event.data.isPrimaryKey;\n    this.isPartialKey = event.data.isPartialKey;\n\n    this.isForeignKey = event.data.isForeignKey;\n    this.isNotNull = event.data.isNotNull;\n    this.isUnique = event.data.isUnique;\n    this.isAutoincremented = event.data.isAutoincremented;\n    this.propertyType = event.data.propertyType;\n    this.fkPortId = event.data.fkPortId;\n  }\n\n  serialize() {\n    return {\n      ...super.serialize(),\n      in: this.in,\n      label: this.label,\n      isNamePort: this.isNamePort,\n      isPrimaryKey: this.isPrimaryKey,\n      isPartialKey: this.isPartialKey,\n\n      isForeignKey: this.isForeignKey,\n      isNotNull: this.isNotNull,\n      isUnique: this.isUnique,\n      isAutoincremented: this.isAutoincremented,\n      propertyType: this.propertyType,\n      fkPortId: this.fkPortId,\n    };\n  }\n\n  updateOptionsLabel(newLabel: string) {\n    this.options.label = newLabel;\n  }\n\n  updateOptionsPropertyType(newPropType: string) {\n    this.options.propertyType = newPropType;\n  }\n\n  link<T extends LinkModel>(\n    port: PortModel,\n    factory?: AbstractModelFactory<T>\n  ): T {\n    let link = this.createLinkModel(factory);\n    link.setSourcePort(this);\n    link.setTargetPort(port);\n    link.removeMiddlePoints()\n    return link as T;\n  }\n\n  canLinkToPort(port: PortModel): boolean {\n    if (port === this) {\n      return false;\n    }\n    if( port.getParent() === this.getParent()) {\n      this.recursiveRelation(port);\n    }\n\n    return true;\n  }\n\n  createLinkModel(factory?: AbstractModelFactory<LinkModel>): LinkModel {\n    let link = super.createLinkModel();\n    if (!link && factory) {\n      return factory.generateModel({});\n    }\n    var linksCount = _.keys(\n      this.dEngine.getModel().getLinks()\n    ).length;\n\n    console.log(linksCount);\n\n    return link || new DefaultLinkModel({}, {position: {x: this.getPosition().x + 40, y: this.getPosition().y - 100 }}, linksCount + 1);\n\n  }\n\n  recursiveRelation(port: PortModel) {\n    this.link(port);\n\n    return false;\n  }\n}\n","import {\n  LinkModel,\n  LinkModelGenerics,\n  PortModel,\n  PortModelAlignment,\n  DiagramEngine,\n} from \"@projectstorm/react-diagrams\";\nimport { ArrowLinkModel } from \"./ArrowLinkModel\";\nimport { DefaultPortModel } from \"./DefaultPortModel\";\nimport { DefaultNodeModel } from \"./DefaultNodeModel\";\nimport { Toolkit } from \"../Toolkit\";\nimport { AbstractModelFactory } from \"@projectstorm/react-canvas-core\";\n\nexport class AdvancedPortModel extends DefaultPortModel {\n  constructor(\n    name: string,\n    isNamePort: boolean,\n    isPrimaryKey?: boolean,\n    isForeignKey?: boolean,\n    isPartialKey?: boolean,\n    isNotNull?: boolean,\n    isAutoincremented?: boolean,\n    isUnique?: boolean,\n    propertyType?: string,\n    id?: string,\n    fkPortId?: string,\n    alignemnt?: PortModelAlignment\n  ) {\n    super(\n      true,\n      name,\n      isNamePort,\n      isPrimaryKey,\n      isForeignKey,\n      isPartialKey,\n      isNotNull,\n      isAutoincremented,\n      isUnique,\n      propertyType,\n      null,\n      id,\n      fkPortId,\n      alignemnt\n    );\n  }\n\n  link<T extends LinkModel>(\n    port: PortModel,\n    \n    factory?: AbstractModelFactory<T>\n  ): T {\n    let link = this.createLinkModel();\n    link.setSourcePort(port);\n    link.setTargetPort(this);\n    return link as T;\n  }\n\n  canLinkToPort(port: PortModel): boolean {\n    if (port === this) {\n      return false;\n    }\n\n    let thisParent = this.getParent() as DefaultNodeModel;\n    let portNode = port.getParent() as DefaultNodeModel;\n\n    let portNodePorts = portNode.getPorts() as {\n      [s: string]: AdvancedPortModel;\n    };\n    let thisParentPorts = thisParent.getPorts() as {\n      [s: string]: AdvancedPortModel;\n    };\n\n    let czyMaPortZPKjakoFk = Object.keys(thisParentPorts).find(\n      (id) => thisParentPorts[id].fkPortId === portNode.getOptions().id\n    );\n    let czyMaPortZPKjakoFk2 = Object.keys(portNodePorts).find(\n      (id) => portNodePorts[id].fkPortId === thisParent.getOptions().id\n    );\n\n    let pk =\n      Object.keys(thisParentPorts).find(\n        (id) => thisParentPorts[id].isPrimaryKey\n      ) || \"Id\";\n\n    if (!czyMaPortZPKjakoFk && !czyMaPortZPKjakoFk2) {\n      if (pk) {\n        portNode.addPort(\n          new AdvancedPortModel(\n            thisParent.getOptions().name +\n              thisParentPorts[pk].getOptions().name,\n            false,\n            false,\n            true,\n            true,\n            true,\n            false,\n            false,\n            \"INT\",\n            \n            Toolkit.UID(),\n            thisParent.getOptions().id\n          )\n        );\n      } else {\n        portNode.addPort(\n          new AdvancedPortModel(\n            thisParent.getOptions().name + \"Id\",\n            false,\n            false,\n            true,\n            true,\n            true,\n            false,\n            false,\n            \"INT\",\n            Toolkit.UID(),\n            thisParent.getOptions().id\n          )\n        );\n      }\n    }\n\n    return true;\n  }\n\n  createLinkModel(): ArrowLinkModel | LinkModel<LinkModelGenerics> {\n    return new ArrowLinkModel();\n  }\n}\n","import * as React from \"react\";\nimport styled from \"@emotion/styled\";\nimport { css } from \"@emotion/core\";\n\nexport interface TrayItemDivProps {\n  color: string;\n  name?: string;\n  onClick: () => void;\n  marginTop?: string;\n  isSelected?: boolean;\n  isDisabled?: boolean;\n}\nnamespace S {\n  export const Tray = styled.div<{\n    color: string;\n    marginTop: string;\n    isSelected: boolean;\n    isDisabled: boolean;\n  }>`\n    color: white;\n    font-family: Helvetica, Arial;\n    padding: 5px;\n    margin: 0px 10px;\n    border: solid 1px ${({color}) => color};\n    border-radius: 5px;\n    margin-bottom: 2px;\n    cursor: pointer;\n    margin-top: ${({marginTop}) => marginTop};\n\n    display: flex;\n    justify-content: space-between;\n  \n    ${({isSelected}) =>\n      isSelected &&\n      css`\n        background-color: black;\n        border-width: 4px !important;\n      `}\n  \n    ${({isDisabled}) =>\n      isDisabled &&\n      css`\n        cursor: not-allowed !important;\n      `}\n  `;\n}\n\nexport class TrayItemDiv extends React.Component<TrayItemDivProps> {\n  render() {\n    let { isDisabled,isSelected, marginTop, color, name } = this.props;\n\n    return (\n      <S.Tray\n        {...this.props}\n        isDisabled={isDisabled}\n        isSelected={isSelected}\n        marginTop={marginTop}\n        color={color}\n      >\n        {this.props.children ?? name}\n      </S.Tray>\n    );\n  }\n}\n","export enum PropertyType {\n  BIT = \"BIT\",\n  TINYINT = \"TINYINT\",\n  SMALLINT = \"SMALLINT\",\n  INT = \"INT\",\n  BIGINT = \"BIGINT\",\n  \"DECIMAL()\" = \"DECIMAL()\",\n  \"NUMERIC()\" = \"NUMERIC()\",\n  \"FLOAT()\" = \"FLOAT()\",\n  REAL = \"REAL\",\n  DATE = \"DATE\",\n  TIME = \"TIME\",\n  DATETIME = \"DATETIME\",\n  TIMESTAMP = \"TIMESTAMP\",\n  YEAR = \"YEAR\",\n  \"CHAR()\" = \"CHAR()\",\n  \"VARCHAR()\" = \"VARCHAR()\",\n  TEXT = \"TEXT\",\n  \"NCHAR()\" = \"NCHAR()\",\n  \"NVARCHAR()\" = \"NVARCHAR()\",\n  NTEXT = \"NTEXT\",\n  \"BINARY()\" = \"BINARY()\",\n  \"VARBINARY()\" = \"VARBINARY()\",\n  IMAGE = \"IMAGE\",\n  CLOB = \"CLOB\",\n  BLOB = \"BLOB\",\n  XML = \"XML\",\n  JSON = \"JSON\",\n  MONEY = \"MONEY\",\n}\n","import * as React from \"react\";\n\nimport { GridProps } from \"./\";\n\nexport default class Grid extends React.Component<GridProps> {\n  render() {\n    return (\n      <div style={this.props.style} className={this.buildClassNameString()}>\n        {this.props.children}\n      </div>\n    );\n  }\n\n  buildClassNameString() {\n    let className = \"ms-Grid\";\n\n    if (this.props.className != null) {\n      className += ` ${this.props.className}`;\n    }\n\n    return className;\n  }\n}\n","import * as React from \"react\";\n\nimport { GridRowProps } from \"./\";\n\nexport default class Row extends React.Component<GridRowProps> {\n  render() {\n    return (\n      <div className={this.buildClassNameString()}>{this.props.children}</div>\n    );\n  }\n\n  buildClassNameString() {\n    let className = \"ms-Grid-row\";\n\n    if (this.props.flex) {\n      className += \" grid-row-flex\";\n    }\n\n    if (this.props.className != null) {\n      className += ` ${this.props.className}`;\n    }\n\n    return className;\n  }\n}\n","import * as React from \"react\";\n\nimport { GridColProps, GridColConfigProp } from \"./\";\n\nexport default class Col extends React.Component<GridColProps> {\n  render() {\n    return (\n      <div\n        className={this.buildClassNameString()}\n        onDoubleClick={this.props.onDoubleClick}\n      >\n        {this.props.children}\n      </div>\n    );\n  }\n\n  buildGridColConfigClassNames(size: string, config: GridColConfigProp) {\n    if (config == null) return \"\";\n\n    let className = ` ms-${size}`;\n\n    if (typeof config === \"string\") {\n      className += config;\n    } else {\n      className += config.size;\n\n      if (config.pull != null) {\n        className += ` ms-${size}Pull${config.pull}`;\n      }\n\n      if (config.push != null) {\n        className += ` ms-${size}Push${config.push}`;\n      }\n\n      if (config.offset != null) {\n        className += ` ms-${size}Offset${config.offset}`;\n      }\n\n      if (config.order != null) {\n        className += ` grid-flex-order-${size}-${config.order}`;\n      }\n    }\n\n    return className;\n  }\n\n  buildClassNameString() {\n    let className = \"ms-Grid-col\";\n\n    if (this.props.className != null) {\n      className += ` ${this.props.className}`;\n    }\n\n    if (this.props.hidden != null) {\n      className += ` ms-hidden${this.props.hidden}`;\n    }\n\n    if (this.props.order != null) {\n      className += ` grid-flex-order-${this.props.order}`;\n    }\n\n    className += this.buildGridColConfigClassNames(\"sm\", this.props.sm);\n    className += this.buildGridColConfigClassNames(\"md\", this.props.md);\n    className += this.buildGridColConfigClassNames(\"lg\", this.props.lg);\n    className += this.buildGridColConfigClassNames(\"xl\", this.props.xl);\n    className += this.buildGridColConfigClassNames(\"xxl\", this.props.xxl);\n    className += this.buildGridColConfigClassNames(\"xxxl\", this.props.xxxl);\n\n    return className;\n  }\n}\n","import \"./PropertyTable.scss\";\nimport \"react-bootstrap-table-next/dist/react-bootstrap-table2.min.css\";\nimport React from \"react\";\nimport { PropertyType } from \"../../infrastructure/models/PropertyType\";\nimport { DefaultPortModel } from \"../../infrastructure/models/DefaultPortModel\";\nimport BootstrapTable from \"react-bootstrap-table-next\";\nimport { DefaultNodeModel } from \"../../infrastructure/models/DefaultNodeModel\";\nimport { DiagramEngine } from \"@projectstorm/react-diagrams\";\nimport { AdvancedPortModel } from \"../../infrastructure/models/ArrowPortModel\";\nimport styled from \"@emotion/styled\";\nimport { DarkInput } from \"../DarkInput\";\nimport { Toolkit } from \"../../infrastructure/Toolkit\";\nimport { DefaultLinkModel } from \"../../infrastructure/models/DefaultLinkModel\";\nimport { DefaultLabelModel } from \"../../infrastructure/models/DefaultLabelModel\";\nimport _ from \"lodash\";\n\nnamespace S {\n  export const AddNewAtributeButton = styled.p`\n    cursor: cell\n  `;\n}\n\nclass Props {\n  relationName?: string;\n  update: () => void;\n  selectedItem: DefaultNodeModel;\n  diagramEngine: DiagramEngine;\n  relView?: boolean;\n  link?: DefaultLinkModel;\n  isLogic: boolean;\n}\n\nexport function useForceUpdate() {\n  const [, setValue] = React.useState(0);\n  return () => setValue((value) => ++value);\n}\n\nexport const PropertyTable = (props: Props) => {\n  const [updatedItem, setUpdatedItem] = React.useState(null);\n\n  const forceUpdate = useForceUpdate();\n\n  React.useEffect(() => {\n   return () => {\n     updateOptionsLabel();\n     updateAttributesTypes();\n    }\n  })\n\n  React.useMemo(() => {\n    setUpdatedItem(props.selectedItem);\n  }, [props.selectedItem]);\n\n  const clearPartialKeys = () => {\n    let ports =\n      updatedItem &&\n      updatedItem.ports &&\n      (updatedItem.ports as { [s: string]: DefaultPortModel });\n\n    Object.keys(ports).map((p) => console.log((ports[p].isPartialKey = false)));\n  };\n\n  const handleChangePK = (\n    event: React.ChangeEvent<HTMLInputElement>,\n    row: DefaultPortModel\n  ) => {\n    event.persist();\n    (updatedItem.getPortFromID(\n      row.getOptions().id\n    ) as DefaultPortModel).isPrimaryKey = !row.isPrimaryKey;\n\n    (updatedItem.getPortFromID(\n      row.getOptions().id\n    ) as DefaultPortModel).isNotNull = row.isPrimaryKey ? true : false;\n\n    (updatedItem.getPortFromID(\n      row.getOptions().id\n    ) as DefaultPortModel).isAutoincremented = row.isPrimaryKey ? true : false;\n\n    (updatedItem.getPortFromID(\n      row.getOptions().id\n    ) as DefaultPortModel).isUnique = row.isPrimaryKey ? true : false;\n\n    clearPartialKeys();\n    forceUpdate();\n  };\n\n  const handleChangeFK = (\n    event: React.ChangeEvent<HTMLInputElement>,\n    row: DefaultPortModel\n  ) => {\n    event.persist();\n    (updatedItem.getPortFromID(\n      row.getOptions().id\n    ) as DefaultPortModel).isForeignKey = !row.isForeignKey;\n\n    (updatedItem.getPortFromID(\n      row.getOptions().id\n    ) as DefaultPortModel).isNotNull = row.isForeignKey ? true : false;\n\n    forceUpdate();\n  };\n\n  const handleChangeNull = (\n    event: React.ChangeEvent<HTMLInputElement>,\n    row: DefaultPortModel\n  ) => {\n    event.persist();\n    (updatedItem.getPortFromID(\n      row.getOptions().id\n    ) as DefaultPortModel).isNotNull = !row.isNotNull;\n    forceUpdate();\n  };\n\n  const handleChangePartialKey = (\n    event: React.ChangeEvent<HTMLInputElement>,\n    row: DefaultPortModel\n  ) => {\n    event.persist();\n    (updatedItem.getPortFromID(\n      row.getOptions().id\n    ) as DefaultPortModel).isPartialKey = !row.isPartialKey;\n\n    (updatedItem.getPortFromID(\n      row.getOptions().id\n    ) as DefaultPortModel).isNotNull = row.isPartialKey ? true : false;\n    forceUpdate();\n  };\n\n  const handleChangeUnique = (\n    event: React.ChangeEvent<HTMLInputElement>,\n    row: DefaultPortModel\n  ) => {\n    event.persist();\n    (updatedItem.getPortFromID(\n      row.getOptions().id\n    ) as DefaultPortModel).isUnique = !row.isUnique;\n    forceUpdate();\n  };\n\n  const handleChangeAutoInc = (\n    event: React.ChangeEvent<HTMLInputElement>,\n    row: DefaultPortModel\n  ) => {\n    event.persist();\n    (updatedItem.getPortFromID(\n      row.getOptions().id\n    ) as DefaultPortModel).isAutoincremented = !row.isAutoincremented;\n    forceUpdate();\n  };\n\n  const updateOptionsLabel = () => {\n    let allPorts = props.selectedItem.getPorts() as {[s: string]: DefaultPortModel};\n\n    let names = Object.values(allPorts).map((port) =>\n      (\n        {\n        label: port.label,\n        id: port.getOptions().id\n      }\n\n    ));\n\n    let optionsNames = Object.values(allPorts).map((port) =>\n      (\n        {\n        label:  port.getOptions().label,\n        id: port.getOptions().id\n      }\n\n    )\n    );\n\n    optionsNames.forEach((element, index) => {\n      element = names[index];\n      (props.selectedItem.getPortFromID(element.id) as DefaultPortModel).updateOptionsLabel(names[index].label)\n      // props.selectedItem.getPortFromID(element.id).getOptions().name = names[index].label\n    });\n  }\n\n  const updateAttributesTypes = () => {\n    let allPorts = props.selectedItem.getPorts() as {[s: string]: DefaultPortModel};\n\n    let names = Object.values(allPorts).map((port) =>\n      (\n        {\n        label: port.propertyType,\n        id: port.getOptions().id\n      }\n\n    ));\n\n    let optionsNames = Object.values(allPorts).map((port) =>\n      (\n        {\n        label:  port.getOptions().propertyType,\n        id: port.getOptions().id\n      }\n\n    )\n    );\n    names.forEach((element, index) => {\n      console.log(element.label, element.label.endsWith(')'),element.label[element.label.length - 1], element.label[element.label.length - 1] === '(');\n\n      if(element.label.endsWith(')') && element.label[element.label.length - 2] === '(') {\n        (props.selectedItem.getPortFromID(element.id) as DefaultPortModel).propertyType = optionsNames[index].label;\n      }\n      // element = names[index];\n      // (props.selectedItem.getPortFromID(element.id) as DefaultPortModel).updateOptionsPropertyType(names[index].label)\n    });\n\n    optionsNames.forEach((element, index) => {\n      element = names[index];\n      (props.selectedItem.getPortFromID(element.id) as DefaultPortModel).updateOptionsPropertyType(names[index].label)\n    });\n\n    forceUpdate();\n    console.log(names, optionsNames);\n  }\n\n  const handleChangepPropType = (\n    event: React.ChangeEvent<HTMLInputElement>,\n    row: DefaultPortModel\n  ) => {\n    event.persist();\n\n    (updatedItem.getPortFromID(\n      row.getOptions().id\n    ) as DefaultPortModel).propertyType = event.target.value;\n  };\n\n  const handleChangePortLabel = (\n    event: React.ChangeEvent<HTMLInputElement>,\n    row: DefaultPortModel\n  ) => {\n    event.persist();\n\n    let allPorts = props.selectedItem.getPorts() as {[s: string]: DefaultPortModel};\n\n    let names = Object.values(allPorts).map((port) =>\n      port.label.toLowerCase().trim()\n    );\n\n    var propertiesCount = _.keys(\n      props.selectedItem.getPorts() \n    ).length;\n\n\n    names.includes(event.target.value.toLowerCase().trim())\n    ? ((updatedItem.getPortFromID(row.getOptions().id) as DefaultPortModel).label = ((updatedItem.getPortFromID(row.getOptions().id)) as DefaultPortModel).getOptions().label)// `${defaultName} ${propertiesCount - 4}`)\n    : (updatedItem.getPortFromID(row.getOptions().id) as DefaultPortModel).label = event.target.value.trim();\n\n    if(props.relView) {\n      let relationAtributes = props.link.properties !== null && props.link.properties.getPorts() as {[s: string]: DefaultPortModel};\n      let attString = '';\n  \n      if(Object.keys(relationAtributes).length > 0) {\n        Object.keys(relationAtributes).map(id => attString += `${relationAtributes[id].label} ${relationAtributes[id].propertyType} \\n`);\n        \n  \n        let labels = props.link.getLabels() as DefaultLabelModel[];\n        labels[1].getOptions().label = `${props.relationName}\\n${attString}`;\n    \n      }\n    }\n  };\n\n  const addNewPort = (newPortNumber: number) => {\n    (updatedItem as DefaultNodeModel).addPort(\n      new AdvancedPortModel(\n        `new atribute ${newPortNumber}`,\n        false,\n        false,\n        false,\n        false,\n        false,\n        false,\n        false,\n        \"INT\",\n        Toolkit.UID()\n      )\n    );\n\n    if(props.relView) {\n      let {link} = props;\n      let labels = link.getLabels() as DefaultLabelModel[];\n      \n      labels[1].getOptions().label += `${`new atribute ${newPortNumber}`} INT \\n`;\n    }\n\n    forceUpdate();\n  };\n\n  const removePort = (port: DefaultPortModel) => {\n    console.log('port: ', port);\n    updatedItem.removePort(port);\n\n    if(props.link) {\n    console.log('linkports: ', props.link);\n\n      let relationAtributes = props.link.properties !== null && props.link.properties.getPorts() as {[s: string]: DefaultPortModel};\n      let attString = '';\n  \n      if(Object.keys(relationAtributes).length > 0) {\n        Object.keys(relationAtributes).filter(id => id !== port.getID()).map(id => attString += `${relationAtributes[id].label} ${relationAtributes[id].propertyType} \\n`);\n        \n        let labels = props.link.getLabels() as DefaultLabelModel[];\n        let oldLabel = labels[1].getOptions().label;\n        labels[1].getOptions().label = oldLabel.slice(0, oldLabel.indexOf('\\n'));\n        labels[1].getOptions().label += `\\n${attString}`;\n      }\n    }\n\n    forceUpdate();\n  };\n\n  const preparePropertyTypes = () => {\n    return Object.values(PropertyType).map((obj) => (\n      <option key={obj} value={obj}>\n        {obj}\n      </option>\n    ));\n  };\n\n  const columns: any[] = [\n    {\n      key: \"Property Name\",\n      dataField: \"label\",\n      text: \"Property Name\",\n      formatter: (cellContent: any, row: DefaultPortModel) => (\n        <div className=\"input\">\n          {/* Emotion test - plan is to replace all .scss styles with emotion styled components */}\n          {/* <DarkInput \n            type=\"text\" \n            defaultValue={row.label} \n            onChange={(event) => handleChangePortLabel(event, row)}\n          ></DarkInput> */}\n\n          <input\n            style={{ width: \"100px\" }}\n            className=\"darkInput\"\n            type=\"text\"\n            defaultValue={row.label}\n            onChange={(event) => handleChangePortLabel(event, row)}\n          ></input>\n        </div>\n      ),\n    },\n    {\n      style: { paddingLeft: 0 },\n      dataField: \"propertyType\",\n      text: \"Property Type\",\n      key: \"Property Type\",\n      formatter: (cellContent: any, row: DefaultPortModel) => (\n        <div className=\"input\">\n          <input\n            style={{ width: \"100px\" }}\n            type=\"text\"\n            list=\"types\"\n            className=\"darkInput\"\n            onChange={(event) => handleChangepPropType(event, row)}\n            defaultValue={row.propertyType}\n          />\n          <datalist id=\"types\">{preparePropertyTypes()}</datalist>\n        </div>\n      ),\n    },\n    {\n      dataField: \"isPrimaryKey\",\n      text: \"Is Primary Key\",\n      key: \"Is Primary Key\",\n      formatter: (cellContent: any, row: DefaultPortModel) => (\n        <div className=\"checkbox\">\n          <label>\n            <input\n              type=\"checkbox\"\n              checked={row.isPrimaryKey}\n              onChange={(event) => handleChangePK(event, row)}\n            />\n          </label>\n        </div>\n      ),\n    },\n    {\n      dataField: \"isForeignKey\",\n      text: \"Is Foreign Key\",\n      key: \"Is Foreign Key\",\n      formatter: (cellContent: any, row: DefaultPortModel) => (\n        <div className=\"checkbox\">\n          <label>\n            <input\n              type=\"checkbox\"\n              checked={row.isForeignKey}\n              onChange={(event) => handleChangeFK(event, row)}\n            />\n          </label>\n        </div>\n      ),\n    },\n    {\n      dataField: \"isPartialKey\",\n      text: \"Is Partial Key\",\n      key: \"Is Partial Key\",\n      formatter: (cellContent: any, row: DefaultPortModel) => (\n        <div className=\"checkbox\">\n          <label>\n            <input\n              type=\"checkbox\"\n              checked={row.isPartialKey}\n              onChange={(event) => handleChangePartialKey(event, row)}\n            />\n          </label>\n        </div>\n      ),\n    },\n    {\n      dataField: \"isNotNull\",\n      text: \"Not Null\",\n      key: \"Not Null\",\n      formatter: (cellContent: any, row: DefaultPortModel) => (\n        <div className=\"checkbox\">\n          <label>\n            <input\n              disabled={row.isPrimaryKey || row.isForeignKey}\n              type=\"checkbox\"\n              checked={row.isNotNull}\n              onChange={(event) => handleChangeNull(event, row)}\n            />\n          </label>\n        </div>\n      ),\n    },\n    {\n      dataField: \"isAutoincremented\",\n      text: \"Is Auto Incremented\",\n      key: \"Is Auto Incremented\",\n      formatter: (cellContent: any, row: DefaultPortModel) => (\n        <div className=\"checkbox\">\n          <label>\n            <input\n              disabled={row.isPrimaryKey}\n              type=\"checkbox\"\n              checked={row.isAutoincremented}\n              onChange={(event) => handleChangeAutoInc(event, row)}\n            />\n          </label>\n        </div>\n      ),\n    },\n    {\n      dataField: \"isUnique\",\n      text: \"Is Unique\",\n      key: \"Is Unique\",\n      formatter: (cellContent: any, row: DefaultPortModel) => (\n        <div className=\"checkbox\">\n          <label>\n            <input\n              disabled={row.isPrimaryKey}\n              type=\"checkbox\"\n              checked={row.isUnique}\n              onChange={(event) => handleChangeUnique(event, row)}\n            />\n          </label>\n        </div>\n      ),\n    },\n    {\n      dataField: \"remove\",\n      text: \"Remove\",\n      key: \"Remove\",\n      formatter: (cellContent: any, row: DefaultPortModel) => (\n        <div className=\"checkbox\">\n          <label>\n            <span\n              onClick={() => removePort(row)}\n              className=\"mi mi-Delete red onhoverPointer\"\n            />\n          </label>\n        </div>\n      ),\n    },\n  ];\n\n  let ports =\n    updatedItem &&\n    updatedItem.ports &&\n    (updatedItem.ports as { [s: string]: DefaultPortModel });\n\n  let portsTable: DefaultPortModel[] =\n    ports &&\n    Object.keys(ports)\n      .map((x) => {\n        return ports[x];\n      })\n      .filter((p) => !p.isNamePort);\n\n  let ispk =\n    portsTable && portsTable.find((p) => p.isPrimaryKey) ? true : false;\n\n  let cols = columns;\n\n  if (ispk) {\n    cols = cols.filter((col) => col.dataField !== \"isPartialKey\");\n  }\n\n  if (!props.isLogic) {\n    cols = cols.filter((c) => c.dataField !== \"isForeignKey\");\n  }\n\n  return (\n    <div className={`${!props.relView && 'relView'}`}>\n      <BootstrapTable\n        keyField=\"id\"\n        data={portsTable}\n        columns={\n          props.relView\n            ? cols.filter(\n                (col) =>\n                  col.dataField !== \"isPrimaryKey\" &&\n                  col.dataField !== \"isPartialKey\"\n              )\n            : cols\n        }\n        bordered={false}\n      />\n      <S.AddNewAtributeButton onClick={() => addNewPort(portsTable.length)}>\n        Add new atribute\n        </S.AddNewAtributeButton>\n    </div>\n  );\n};\n","import * as React from \"react\";\nimport styled from \"@emotion/styled\";\nimport { css } from \"@emotion/core\";\n\nexport interface DarkInputProps {\n    fontSize?: number\n    type: string\n    defaultValue: string\n    onChange: (event) => void;\n}\nnamespace S {\n  export const Input = styled.input<{fontSize?: number}>`\n    background-color: #3E3E3E;\n    color: #E9F7F7;\n    margin-top: 7px;\n    width: 150px;\n    margin-right: 0px;\n    padding-right: 0px;\n\n    ${({fontSize}) => \n    css`\n        font-size: ${fontSize}px;\n        margin-top: 15px;\n        width: 90%;\n    `}\n  `;\n}\n\nexport class DarkInput extends React.Component<DarkInputProps> {\n  render() {\n\n    return (\n      <S.Input\n        {...this.props}\n      >\n        {this.props.children}\n      </S.Input>\n    );\n  }\n}\n","import \"./NodeProperties.scss\";\nimport * as React from \"react\";\n\nimport { Col, Row, Grid } from \"../grid\";\nimport { DiagramEngine } from \"@projectstorm/react-diagrams\";\nimport { DefaultNodeModel } from \"../../infrastructure/models/DefaultNodeModel\";\nimport { PropertyTable } from \"../PropertyTable/PropertyTable\";\nimport { DarkInput } from \"../DarkInput\";\n\nclass Props {\n  update: () => void;\n\n  selectedItem: DefaultNodeModel;\n  isLogic: boolean;\n  diagramEngine: DiagramEngine;\n}\n\nexport function useForceUpdate() {\n  const [, setValue] = React.useState(0);\n  return () => setValue((value) => ++value);\n}\n\nexport const NodeProperties = (props: Props) => {\n  const [updatedItem, setUpdatedItem] = React.useState(null);\n  const [defaultName, setDefaultName] = React.useState(\"\");\n\n  const [name, setName] = React.useState(\"\");\n  const [showInput, setShowInput] = React.useState(false);\n\n  const forceUpdate = useForceUpdate();\n\n  React.useMemo(() => {\n    setUpdatedItem(props.selectedItem);\n    setName(props.selectedItem.getOptions().name);\n    setDefaultName(props.selectedItem.getOptions().name);\n  }, [props.selectedItem]);\n\n  React.useEffect(() => {\n    props.selectedItem.setLocked();\n\n    return () => {\n      props.selectedItem.setLocked(false);\n    };\n  });\n\n  const handleNameChange = (\n    event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>\n  ) => {\n    event.persist();\n    if(event.target.value != \"\") {\n      let allNodes = props.diagramEngine\n        .getModel()\n        .getNodes() as DefaultNodeModel[];\n  \n      let names = allNodes.map((node) =>\n        node.getOptions().name.toLowerCase().trim()\n      );\n  \n      names.includes(event.target.value.toLowerCase().trim())\n        ? (updatedItem.getOptions().name = defaultName)\n        : (updatedItem.getOptions().name = event.target.value.trim());\n    }\n    forceUpdate();\n  };\n\n  // const iconStyles: React.CSSProperties = {\n  //   display: \"flex\",\n  //   flexDirection: \"row\",\n  //   flexFlow: \"row-reverse\",\n  //   position: \"absolute\",\n  //   right: \"0\",\n  //   top: \"10px\",\n  //   zIndex: 9999,\n  // };\n\n  // const acceptStyle: React.CSSProperties = {\n  //   marginRight: 5,\n  //   backgroundColor: \"green\",\n  //   borderRadius: \"90px\",\n  //   padding: \"10px\",\n  // };\n\n  // const declineStyle: React.CSSProperties = {\n  //   marginRight: \"20px\",\n  //   backgroundColor: \"red\",\n  //   borderRadius: \"90px\",\n  //   padding: \"10px\",\n  // };\n\n  if (!updatedItem) return null;\n  else\n    return (\n      <div className=\"trayBottom\">\n        {/* <div style={iconStyles}>\n              <span\n                style={declineStyle}\n                className={`mi ${\n                  \"mi-Cancel\"\n                }`}\n              />\n                <span\n                  style={acceptStyle}\n                  className={`mi ${\n                    \"mi-Accept\"\n                  }`}\n                />\n            </div> */}\n        <Grid>\n          <Row>\n            <Col>\n              {!showInput ? (\n                <h1\n                  style={{ wordBreak: \"break-all\" }}\n                  onDoubleClick={() => setShowInput(true)}\n                >\n                  {name}\n                </h1>\n              ) : props.selectedItem.isLabel ? (\n                <textarea\n                  style={{ height: \"200px\" }}\n                  className=\"darkInput fs-28\"\n                  defaultValue={name}\n                  onChange={(event) => handleNameChange(event)}\n                ></textarea>\n              ) : (\n                // Emotion test - plan is to replace all .scss styles with emotion styled components\n                 <DarkInput\n                  fontSize={28}\n                  type=\"text\"\n                  defaultValue={name}\n                  onChange={(event) => handleNameChange(event)}\n                  ></DarkInput> \n              )}\n            </Col>\n\n            {!updatedItem.isLabel ? (\n              <PropertyTable\n              update={props.update}\n                selectedItem={props.selectedItem}\n                diagramEngine={props.diagramEngine}\n                isLogic={props.isLogic}\n              />\n            ) : null}\n          </Row>\n        </Grid>\n      </div>\n    );\n};\n","import \"./ResultPopup.scss\";\nimport React, { useState } from \"react\";\nimport Popup from \"reactjs-popup\";\nimport sqlFormatter from \"sql-formatter\";\nimport FileSaver from \"file-saver\";\n\nclass Props {\n  isOpen: boolean;\n  generateScript?: (name: string, dbms: string) => void;\n  mssqlString: string;\n  mysqlString: string;\n  update: () => void;\n}\n\nexport const ResultPopup = (props: Props) => {\n  const [dbName, setDbName] = useState(\"DatabaseName\");\n  const [mySQLView, setmySQLView] = useState(false);\n\n  let formatedMSSQL =\n    props.mssqlString &&\n    sqlFormatter.format(props.mssqlString, {\n      language: \"sql\", // Defaults to \"sql\"\n      indent: \"  \", // Defaults to two spaces\n    });\n\n  let formatedMySQL =\n    props.mysqlString &&\n    sqlFormatter.format(props.mysqlString, {\n      language: \"db2\", // Defaults to \"sql\"\n      indent: \"  \", // Defaults to two spaces\n    });\n\n  // useEffect(() => {\n  //   formatedMSSQL = '';\n  //   formatedMySQL = '';\n  // }, [props.mssqlString, props.mysqlString])\n\n  const downloadMSSQL = () => {\n    var blob = new Blob([formatedMSSQL], { type: \"text/plain;charset=utf-8\" });\n    FileSaver.saveAs(blob, `${dbName}.sql`);\n    props.update();\n  };\n\n  const downloadMYSQL = () => {\n    var blob = new Blob([formatedMySQL], { type: \"text/plain;charset=utf-8\" });\n    FileSaver.saveAs(blob, `${dbName}.sql`);\n    props.update();\n  };\n\n  return (\n    <Popup modal closeOnDocumentClick open={props.isOpen} closeOnEscape>\n      <div className=\"sql-result-dialog\">\n        <input\n          style={{ marginRight: \"10px\" }}\n          type=\"text\"\n          onChange={(event) => setDbName(event.target.value)}\n          value={dbName}\n        />\n\n        <button\n          style={{ marginRight: \"10px\" }}\n          onClick={() => {\n            console.log(mySQLView);\n            props.generateScript(dbName, !mySQLView ? 'mssql' : 'mysql');\n          }}\n        >\n          Generate\n        </button>\n\n        <button\n          className={`${mySQLView ? \"\" : \"selected-sql\"}`}\n          onClick={() => {\n            setmySQLView(false);\n          }}\n        >\n          MSSQL\n        </button>\n\n        <button\n          className={`${mySQLView ? \"selected-sql\" : \"\"}`}\n          onClick={() => {\n            setmySQLView(true);\n          }}\n        >\n          MySQL\n        </button>\n\n        <textarea\n          style={{ marginTop: \"5px\" }}\n          readOnly={true}\n          value={mySQLView ? formatedMySQL : formatedMSSQL}\n          contentEditable={false}\n        ></textarea>\n\n        <button style={{ marginRight: \"10px\" }} disabled={!props.mssqlString} onClick={downloadMSSQL}>\n          Download MSSQL\n        </button>\n        <button style={{ marginRight: \"10px\" }} disabled={!props.mysqlString} onClick={downloadMYSQL}>\n          Download mySQL\n        </button>\n      </div>\n    </Popup>\n  );\n};\n","import { ResultPopup } from \"../components/popups/ResultPopup/ResultPopup\";\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\n\nclass Props {\n  isUml: boolean;\n  isLogic: boolean;\n  isOpen: boolean;\n  serializeDiagram: () => any;\n  update: () => void;\n}\n\nexport const GenerationHandler = (props: Props) => {\n  const [sqlString, setSqlString] = useState(\"\");\n  const [mysqlString, setMySqlString] = useState(\"\");\n\n  useEffect(() => setSqlString(\"\"), [props.isOpen]);\n\n  const generateScript = async (name: string, dbms: string) => {\n    const serDiagram = props.serializeDiagram();\n    const dNodes = serDiagram[\"layers\"][1][\"models\"];\n\n    const nodes = Object.keys(dNodes).map((id) => {\n      return dNodes[id];\n    });\n\n    const dLinks = serDiagram[\"layers\"][0][\"models\"];\n    const links = Object.keys(dLinks).map((id) => {\n      return dLinks[id];\n    });\n\n    const diagramJson = {\n      nodes,\n      links,\n    };\n    const diagram = JSON.stringify(diagramJson, null, 2);\n\n    if(dbms === 'mssql') {\n      console.log('mssql')\n      const response = await axios.post(\n        \"https://sql-generator.pl/api/setjob/mssql\",\n        {\n          SerializedModel: diagram,\n          DatabaseName: name,\n          RelationType: props.isUml ? \"UML\" : \"CHEN\"\n        }\n      );\n\n      if (response.status === 200) {\n        setSqlString(response.data);\n      } else {\n        const errorMessage = 'There was an error while processing your request';\n        setSqlString(errorMessage);\n  \n        console.log(errorMessage);\n      }\n    } else {\n      console.log('mysql')\n\n      const responseMy = await axios.post(\n        \"https://sql-generator.pl/api/setjob/mysql\",\n        {\n          SerializedModel: diagram,\n          DatabaseName: name,\n          RelationType: props.isUml ? \"UML\" : \"CHEN\"\n        }\n      );\n\n      if (responseMy.status === 200) {\n        setMySqlString(responseMy.data);\n      } else {\n        const errorMessage = 'There was an error while processing your request';\n        setMySqlString(errorMessage);\n  \n        console.log(errorMessage);\n      }\n    }\n  };\n\n  return (\n    <ResultPopup\n      update={props.update}\n      mssqlString={sqlString}\n      mysqlString={mysqlString}\n      generateScript={(name: string, dbms: string) => generateScript(name, dbms)}\n      isOpen={props.isOpen}\n    />\n  );\n};\n","import \"./LoadFilePopup.scss\";\nimport React, { useState } from \"react\";\nimport Popup from \"reactjs-popup\";\n\nclass Props {\n  isOpen: boolean;\n  loadDiagram?: (name: string) => void;\n  update: () => void;\n}\n\nexport const LoadFilePopup = (props: Props) => {\n  let fileReader: FileReader;\n\n  const [fileContent, setFileContent] = useState(\"\");\n\n  const handleFileRead = (e: any) => {\n    const content = fileReader.result;\n    setFileContent(content as string);\n  };\n\n  const handleFileChosen = (name: any) => {\n    fileReader = new FileReader();\n    fileReader.onloadend = handleFileRead;\n    fileReader.readAsText(name);\n  };\n\n  return (\n    <Popup\n      modal\n      closeOnDocumentClick\n      open={props.isOpen}\n      closeOnEscape\n      onClose={() => props.update()}\n    >\n      <div className=\"sql-result-dialog\">\n        <input\n          type=\"file\"\n          onChange={(event) => handleFileChosen(event.target.files[0])}\n          accept=\".dbjson\"\n        />\n        <button onClick={() => props.loadDiagram(fileContent)}>Load</button>\n      </div>\n    </Popup>\n  );\n};\n","import React from \"react\";\nimport { LoadFilePopup } from \"../components/popups/LoadFilePopup/LoadFilePopup\";\nimport { Application } from \"../components/Application\";\nimport { DiagramModel } from \"@projectstorm/react-diagrams\";\n\nclass Props {\n  isOpen: boolean;\n  app: Application;\n  update: () => void;\n  setIsUml: (isUml: boolean) => void;\n  setIsLogic: (isLogic: boolean) => void;\n}\n\nexport const LoadFileHandler = (props: Props) => {\n  const loadDiagram = (name: string) => {\n    const engine = props.app.getDiagramEngine();\n    try {\n      const obj: {\n        conceptualDiagram: ReturnType<DiagramModel[\"serialize\"]>;\n        logicalDiagram: ReturnType<DiagramModel[\"serialize\"]>;\n        isUml: boolean;\n      } = JSON.parse(name);\n      console.log(obj);\n\n      props.setIsUml(obj.isUml);\n\n      let consceptual = new DiagramModel();\n      let logic = new DiagramModel();\n\n      if(obj.conceptualDiagram) {\n        consceptual.deserializeModel(obj.conceptualDiagram, engine);\n        \n        consceptual.getLinks().forEach((link) => {\n          link.getLabels().splice(0, 3);\n        });\n\n        props.app.loadConceptualModel(consceptual);\n        props.setIsLogic(false);\n      }\n\n      // if(logic.getNodes().keys.length > 0) {\n        if(obj.logicalDiagram) {\n          logic.deserializeModel(obj.logicalDiagram, engine);\n          \n  \n        logic.getLinks().forEach((link) => {\n          link.getLabels().splice(0, 3);\n        });\n\n        props.app.loadLogicModel(logic);\n        props.setIsLogic(true);\n      }\n\n      engine.repaintCanvas();\n      props.update();\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  return (\n    <LoadFilePopup\n      update={props.update}\n      loadDiagram={(name) => loadDiagram(name)}\n      isOpen={props.isOpen}\n    />\n  );\n};\n","import \"./SaveToFilePopup.scss\";\nimport React, { useState } from \"react\";\nimport Popup from \"reactjs-popup\";\nimport FileSaver from \"file-saver\";\nimport { DiagramModel } from \"@projectstorm/react-diagrams\";\n\nimport * as _ from 'lodash';\n\nclass Props {\n  isUml: boolean;\n  secondModel: DiagramModel;\n  isOpen: boolean;\n  diagramModel: DiagramModel;\n  update: () => void;\n}\n\nexport const SaveToFilePopup = (props: Props) => {\n  const [fileName, setFileName] = useState(\"diagram\");\n\n  const download = () => {\n    const diagramJson = JSON.stringify({\n      conceptualDiagram: props.diagramModel.serialize(),\n      logicalDiagram: _.isEmpty(props.secondModel.getActiveNodeLayer().getNodes()) ? null : props.secondModel.serialize(),\n\n      isUml: props.isUml,\n    });\n\n    console.log('do zapisu', props.secondModel, props.secondModel.getActiveNodeLayer().getNodes() );\n\n    let blob = new Blob([diagramJson], { type: \"text/plain;charset=utf-8\" });\n    FileSaver.saveAs(blob, `${fileName}.dbjson`);\n    props.update();\n  };\n\n  return (\n    <Popup\n      modal\n      closeOnDocumentClick\n      open={props.isOpen}\n      closeOnEscape\n      onClose={() => props.update()}\n    >\n      <div className=\"sql-result-dialog\">\n        <input\n          type=\"text\"\n          onChange={(event) => setFileName(event.target.value)}\n          value={fileName}\n        />\n        <button onClick={download}>save</button>\n      </div>\n    </Popup>\n  );\n};\n","import \"./SaveToJpegPopup.scss\";\nimport React, { useState } from \"react\";\nimport Popup from \"reactjs-popup\";\nimport domtoimage from \"dom-to-image\";\nimport { DiagramModel } from \"@projectstorm/react-diagrams\";\n\nclass Props {\n  isOpen: boolean;\n  diagramModel: DiagramModel;\n  update: () => void;\n}\n\nexport const SaveToJpegPopup = (props: Props) => {\n  const [fileName, setFileName] = useState(\"diagram\");\n\n  const download = () => {\n    domtoimage\n      .toJpeg(document.getElementById(\"diagram-layer\"), { quality: 0.95 })\n      .then((dataUrl: any) => {\n        let link = document.createElement(\"a\");\n        link.download = `${fileName}.jpeg`;\n        link.href = dataUrl;\n        link.click();\n        props.update();\n      });\n  };\n\n  return (\n    <Popup\n      modal\n      closeOnDocumentClick\n      open={props.isOpen}\n      closeOnEscape\n      onClose={() => props.update()}\n    >\n      <div className=\"sql-result-dialog\">\n        <input\n          type=\"text\"\n          onChange={(event) => setFileName(event.target.value)}\n          value={fileName}\n        />\n        <button onClick={download}>save</button>\n      </div>\n    </Popup>\n  );\n};\n","import React, { useState } from \"react\";\nimport Popup from \"reactjs-popup\";\nimport { DefaultLinkModel } from \"../../../infrastructure/models/DefaultLinkModel\";\nimport { DefaultLabelModel } from \"../../../infrastructure/models/DefaultLabelModel\";\nimport { DefaultNodeModel } from \"../../../infrastructure/models/DefaultNodeModel\";\nimport { AdvancedPortModel } from \"../../../infrastructure/models/ArrowPortModel\";\nimport { DiagramEngine } from \"@projectstorm/react-diagrams\";\nimport { PropertyTable } from \"../../PropertyTable/PropertyTable\";\nimport { DefaultPortModel } from \"../../../infrastructure/models/DefaultPortModel\";\nimport { ArrowLinkModel } from \"../../../infrastructure/models/ArrowLinkModel\";\nimport { Toolkit } from \"../../../infrastructure/Toolkit\";\nimport styled from \"@emotion/styled\";\n\nnamespace S {\n  export const GridContainer = styled.div`\n    display: grid;\n    grid-template-columns: auto auto auto;\n  `;\n\n  export const GridItem = styled.div`\n    background-color: rgba(255, 255, 255, 0.274);\n    padding: 10px;\n    text-align: center;\n  `;\n}\nclass Props {\n  isOpen: boolean;\n  link: DefaultLinkModel;\n  update: () => void;\n  diagramEngine: DiagramEngine;\n  isLogic: boolean;\n}\nexport const RelationPopup = (props: Props) => {\n  const [left, setLeft] = useState(\"1, N\");\n\n  const [right, setRight] = useState(\"1, N\");\n\n  const [relationAtributes, setRelationAtributes] = useState(\"\");\n  const [relationNameOnly, setRelationNameOnly] = useState(\"relation name\");\n\n\n  React.useEffect(() => {\n    let leftLabel =\n      props.link &&\n      props.link.getLabels().length > 2 &&\n      (props.link.getLabels()[0] as DefaultLabelModel).getOptions().label;\n    let relLabel =\n      props.link &&\n      props.link.getLabels().length > 2 &&\n      (props.link.getLabels()[1] as DefaultLabelModel).getOptions().label;\n    let rightLabel =\n      props.link &&\n      props.link.getLabels().length > 2 &&\n      (props.link.getLabels()[2] as DefaultLabelModel).getOptions().label;\n\n    setLeft(leftLabel ? leftLabel : \"1, N\");\n\n    setRight(rightLabel ? rightLabel : \"1, N\");\n  }, [props.link]);\n\n  let update = () => {\n    let x = handleRelationNameChenge();\n    let labels = props.link.getLabels() as DefaultLabelModel[];\n    labels[0].getOptions().label = left;\n    labels[2].getOptions().label = right;\n    labels[1].getOptions().label = relationNameOnly + x;\n\n    props.link.relName = relationNameOnly;\n\n\n    let points = props.link.getPoints();\n    for (let index = 1; index < points.length - 1; index++) {\n      const element = points[index];\n      element.remove();\n    }\n\n    setRelationAtributes(x);\n    props.update();\n  };\n\n  const handleRelationNameChenge = () => {\n    console.log(props.link.relName);\n\n    let relationAtributes = props.link.properties !== null && props.link.properties.getPorts() as {[s: string]: DefaultPortModel};\n    let attString = '';\n\n    if(Object.keys(relationAtributes).length > 0) {\n      Object.keys(relationAtributes).map(id => attString += `${relationAtributes[id].label} ${relationAtributes[id].propertyType} \\n`);\n      \n      const newRelName = '\\n' + attString;\n      return newRelName;\n    }\n      else {\n        return '';\n      }\n\n\n  }\n\n  const sourcePort =\n    props.link &&\n    props.link.getSourcePort() &&\n    (props.link.getSourcePort().getParent() as DefaultNodeModel);\n  const targetPort =\n    props.link &&\n    props.link.getTargetPort() &&\n    (props.link.getTargetPort().getParent() as DefaultNodeModel);\n\n  const remove = () => {\n    const sourceP = props.link && props.link.getSourcePort();\n    const targetP = props.link && props.link.getTargetPort();\n    sourceP.removeLink(props.link);\n    targetP.removeLink(props.link);\n\n    props.diagramEngine.getModel().removeLink(props.link);\n\n    if (props.isLogic) {\n      let thisParent = props.link\n        .getTargetPort()\n        .getParent() as DefaultNodeModel;\n      let portNode = props.link.getSourcePort().getParent() as DefaultNodeModel;\n\n      let portNodePorts = portNode.getPorts() as {\n        [s: string]: AdvancedPortModel;\n      };\n      let thisParentPorts = thisParent.getPorts() as {\n        [s: string]: AdvancedPortModel;\n      };\n\n      let czyMaPortZPKjakoFk = Object.keys(thisParentPorts).filter(\n        (id) => thisParentPorts[id].fkPortId === portNode.getOptions().id\n      )[0];\n      let czyMaPortZPKjakoFk2 = Object.keys(portNodePorts).filter(\n        (id) => portNodePorts[id].fkPortId === thisParent.getOptions().id\n      )[0];\n\n      if (czyMaPortZPKjakoFk) {\n        thisParent.removePort(thisParentPorts[czyMaPortZPKjakoFk]);\n      } else {\n        portNode.removePort(portNodePorts[czyMaPortZPKjakoFk2]);\n      }\n    }\n\n    props.update();\n  };\n\n  const options = (\n    <>\n      <option value=\"0, N\">0, N</option>\n      <option value=\"1, N\">1, N</option>\n      <option value=\"0, 1\">0, 1</option>\n      <option value=\"1, 1\">1, 1</option>\n      <option value=\"N, N\">N, N</option>\n    </>\n  );\n\n  const renderOptionPicker = (side: string) => {\n    return (\n      // <div className=\"grid-item\">\n      <S.GridItem>\n\n        <select\n          className=\"darkSelect\"\n          onChange={(event) =>\n            side === \"left\"\n              ? setLeft(event.target.value)\n              : setRight(event.target.value)\n          }\n          value={side === \"left\" ? left : right}\n        >\n          {options}\n        </select>\n      </S.GridItem>\n      // </div>\n    );\n  };\n\n  const reverseLink = () => {\n    let thisParent = props.link.getTargetPort().getParent() as DefaultNodeModel;\n    let portNode = props.link.getSourcePort().getParent() as DefaultNodeModel;\n\n    let portNodePorts = portNode.getPorts() as {\n      [s: string]: DefaultPortModel;\n    };\n    let thisParentPorts = thisParent.getPorts() as {\n      [s: string]: DefaultPortModel;\n    };\n\n    // let portNodePorts = portNode.getPorts() as {[s: string]: LogicPort};\n    // let thisParentPorts = thisParent.getPorts() as {[s: string]: LogicPort};\n\n    let czyMaPortZPKjakoFk = Object.keys(thisParentPorts).filter(\n      (id) => thisParentPorts[id].fkPortId === portNode.getOptions().id\n    )[0];\n    let czyMaPortZPKjakoFk2 = Object.keys(portNodePorts).filter(\n      (id) => portNodePorts[id].fkPortId === thisParent.getOptions().id\n    )[0];\n\n    if (czyMaPortZPKjakoFk) {\n      thisParent.removePort(thisParentPorts[czyMaPortZPKjakoFk]);\n      let pk = Object.keys(thisParentPorts).filter(\n        (id) => thisParentPorts[id].isPrimaryKey\n      )[0];\n      portNode.addPort(\n        new AdvancedPortModel(\n          // true,\n          thisParent.getOptions().name + thisParentPorts[pk].getOptions().name,\n          false,\n          false,\n          false,\n          true,\n          false,\n          true,\n          true,\n          \"INT\",\n          Toolkit.UID(),\n          thisParent.getOptions().id\n        )\n      );\n    } else {\n      portNode.removePort(portNodePorts[czyMaPortZPKjakoFk2]);\n\n      let pk = Object.keys(portNodePorts).filter(\n        (id) => portNodePorts[id].isPrimaryKey\n      )[0];\n      portNode.addPort(\n        new AdvancedPortModel(\n          // true,\n\n          portNode.getOptions().name + portNodePorts[pk].getOptions().name,\n          false,\n          false,\n          false,\n          true,\n          false,\n          true,\n          true,\n          \"INT\",\n          Toolkit.UID(),\n          portNode.getOptions().id\n        )\n      );\n    }\n\n    let newSourceP = props.link.getTargetPort();\n    let newTargetP = props.link.getSourcePort();\n    let model = props.diagramEngine.getModel();\n\n    model.removeLink(props.link);\n\n    let link = new ArrowLinkModel({ type: \"arrow\" });\n\n    link.setSourcePort(newSourceP);\n    link.setTargetPort(newTargetP);\n    model.addLink(link);\n\n    props.update();\n  };\n\n  if (props.isLogic) {\n    return (\n      <Popup modal closeOnDocumentClick open={props.isOpen} closeOnEscape>\n        <>\n          <S.GridItem>\n            <button onClick={remove}>Remove</button>\n          </S.GridItem>\n          <S.GridItem>\n            <button onClick={reverseLink}>Reverse</button>\n          </S.GridItem>\n        </>\n      </Popup>\n    );\n  } else\n    return (\n      <Popup modal closeOnDocumentClick open={props.isOpen} closeOnEscape onClose={props.update}>\n        <>\n          <S.GridContainer>\n            <S.GridItem>\n\n              <p>{sourcePort && sourcePort.getOptions().name}</p>\n            </S.GridItem>\n\n            <S.GridItem>\n              <input\n                type=\"text\"\n                defaultValue={relationNameOnly}\n                onChange={(event) => setRelationNameOnly(event.target.value)}\n              ></input>\n            </S.GridItem>\n            <S.GridItem>\n\n              <p>{targetPort && targetPort.getOptions().name}</p>\n            </S.GridItem>\n            {renderOptionPicker(\"left\")}\n            <S.GridItem>\n\n              <button onClick={update}>SAVE</button>\n            </S.GridItem>\n            {renderOptionPicker(\"right\")}\n            <S.GridItem></S.GridItem>\n            <S.GridItem>\n\n              <button onClick={remove}>Remove</button>\n            </S.GridItem>\n            </S.GridContainer>\n          {props.link && (\n            <div>\n              <h3 style={{ margin: 0 }}>Atributes:</h3>\n              <PropertyTable\n              relationName={relationNameOnly}\n                update={update}\n                relView={true}\n                link={props.link}\n                diagramEngine={props.diagramEngine}\n                selectedItem={props.link.properties}\n                isLogic={props.isLogic}\n              />\n            </div>\n          )}\n        </>\n      </Popup>\n    );\n};\n","import * as React from \"react\";\nimport * as _ from \"lodash\";\nimport { TrayWidget } from \"./TrayWidget\";\nimport { TrayItemWidget } from \"./TrayItemWidget\";\nimport { PointModel } from \"@projectstorm/react-diagrams\";\nimport { CanvasWidget } from \"@projectstorm/react-canvas-core\";\nimport styled from \"@emotion/styled\";\nimport { DemoCanvasWidget } from \"../helpers/DemoCanvasWidget\";\nimport { Application } from \"./Application\";\nimport { AdvancedPortModel } from \"../infrastructure/models/ArrowPortModel\";\nimport { TrayItemDiv } from \"./TrayItemDiv\";\nimport {\n  NodeProperties,\n  useForceUpdate,\n} from \"./NodeProperties/NodeProperties\";\nimport { DefaultLinkModel } from \"../infrastructure/models/DefaultLinkModel\";\nimport { GenerationHandler } from \"../handlers/GenerationHandler\";\nimport { LoadFileHandler } from \"../handlers/LoadFileHandler\";\nimport { SaveToFilePopup } from \"./popups/SaveToFilePopup/SaveToFilePopup\";\nimport { SaveToJpegPopup } from \"./popups/SaveToJpegPopup/SaveToJpegPopup\";\nimport { RelationPopup } from \"./popups/RealtionPopup/RelationPopup\";\nimport { DefaultPortModel } from \"../infrastructure/models/DefaultPortModel\";\nimport { DefaultLabelModel } from \"../infrastructure/models/DefaultLabelModel\";\nimport { DefaultNodeModel } from \"../infrastructure/models/DefaultNodeModel\";\n\nexport interface BodyWidgetProps {\n  app: Application;\n}\nnamespace S {\n  export const Body = styled.div`\n    flex-grow: 1;\n    display: flex;\n    flex-direction: column;\n    min-height: 100%;\n  `;\n\n  export const Header = styled.div`\n    display: flex;\n    background: rgb(30, 30, 30);\n    flex-grow: 0;\n    flex-shrink: 0;\n    color: white;\n    font-family: Helvetica, Arial, sans-serif;\n    padding: 12px;\n    align-items: center;\n  `;\n\n  export const Content = styled.div`\n    display: flex;\n    flex-grow: 1;\n  `;\n\n  export const Layer = styled.div`\n    position: relative;\n    flex-grow: 1;\n  `;\n\n  export const DropdownIcon = styled.span`\n    display: inline-block;\n    padding-top: 3px;\n    padding-right: 5px;\n  `;\n}\n\nexport const BodyWidget = (props: BodyWidgetProps) => {\n  const [showDialog, setShowDialog] = React.useState(false);\n  const [showRelationDialog, setShowRelationDialog] = React.useState(false);\n  const [showLoadFileDialog, setShowLoadFileDialog] = React.useState(false);\n  const [showSaveFileDialog, setSaveFileDialog] = React.useState(false);\n  const [showSaveJPEGDialog, setSaveJPEGDialog] = React.useState(false);\n  const [showSaveOptions, setSaveOptions] = React.useState(false);\n\n  const [selectedNode, setSelectedNode] = React.useState(null);\n  const [selectedLink, setSelectedLink] = React.useState(null);\n\n  const [isUml, setIsUml] = React.useState(true);\n\n  const [isLogicModel, setIsLogicModel] = React.useState(false);\n\n  const forceUpdate = useForceUpdate();\n\n  React.useEffect(() => {\n    setSelectedNode(null);\n    setSelectedLink(null);\n  }, []);\n\n  const changeRelation = () => {\n    let links = props.app.getDiagramEngine().getModel().getLinks();\n    links.forEach((link) => {\n      let temp = (link.getLabels()[0] as DefaultLabelModel)\n        .getOptions()\n        .label.substring(0, 1);\n      let temp2 = (link.getLabels()[2] as DefaultLabelModel)\n        .getOptions()\n        .label.substring(0, 1);\n\n      (link.getLabels()[0] as DefaultLabelModel).getOptions().label =\n        temp2 +\n        (link.getLabels()[0] as DefaultLabelModel)\n          .getOptions()\n          .label.substring(1);\n      (link.getLabels()[2] as DefaultLabelModel).getOptions().label =\n        temp +\n        (link.getLabels()[2] as DefaultLabelModel)\n          .getOptions()\n          .label.substring(1);\n    });\n  };\n\n  const refreshPopups = () => {\n    setSelectedLink(null);\n    setSelectedNode(null);\n\n    setShowDialog(false);\n    setSaveFileDialog(false);\n    setSaveJPEGDialog(false);\n    setSaveOptions(false);\n    setShowLoadFileDialog(false);\n    setShowRelationDialog(false);\n  };\n\n  const getDiagramLogicModel = () => {\n    if(isLogicModel) {\n      return props.app.getDiagramEngine().getModel().serialize();\n    }\n    else {\n      props.app.setLogicModel();\n\n      setIsLogicModel(true);\n      return props.app.getDiagramEngine().getModel().serialize();\n    }\n  }\n\n  return (\n    <S.Body>\n      <S.Header>DB Diagram Scripter</S.Header>\n      <S.Content>\n        <TrayWidget>\n          <TrayItemWidget\n            model={{ type: \"default\" }}\n            name={isLogicModel ? \"Relation\" : \"Entity\"}\n            color=\"rgb(0,192,255)\"\n          />\n          <TrayItemWidget\n            model={{ type: \"label\" }}\n            name=\"Label\"\n            color=\"rgb(192,255,0)\"\n          />\n\n          <TrayItemDiv\n            name=\"Load Diagram\"\n            color=\"rgb(255,123,0)\"\n            marginTop=\"75px\"\n            onClick={() => {\n              setShowLoadFileDialog(true);\n              setSelectedNode(null);\n            }}\n          />\n\n          <TrayItemDiv\n            color=\"rgb(255,123,0)\"\n            onClick={() => {\n              setSaveOptions(!showSaveOptions);\n              setSelectedNode(null);\n            }}\n          >\n            <>\n              Save\n              <S.DropdownIcon\n                className={`mi ${\n                  !showSaveOptions ? \"mi-ArrowDown8\" : \"mi-ArrowUp8\"\n                }`}\n              />\n            </>\n          </TrayItemDiv>\n\n          {showSaveOptions && (\n            <TrayItemDiv\n              name=\"File\"\n              color=\"rgb(255,123,0)\"\n              onClick={() => {\n                setSaveFileDialog(true);\n                setSelectedNode(null);\n              }}\n            />\n          )}\n          {showSaveOptions && (\n            <TrayItemDiv\n              name=\"JPEG\"\n              color=\"rgb(255,123,0)\"\n              onClick={() => {\n                setSaveJPEGDialog(true);\n                setSelectedNode(null);\n              }}\n            />\n          )}\n\n          <TrayItemDiv\n            isSelected={!isLogicModel}\n            name=\"Conceptual View\"\n            color=\"rgb(0,50,100)\"\n            marginTop=\"75px\"\n            onClick={() => {\n              if (isLogicModel) {\n                props.app.setConceptualModel();\n                setIsLogicModel(false);\n              }\n            }}\n          />\n\n          <TrayItemDiv\n            isSelected={isLogicModel}\n            name=\"Logical View\"\n            color=\"rgb(0,50,100)\"\n            onClick={() => {\n              if (!isLogicModel) {\n                props.app.setLogicModel();\n                setIsLogicModel(true);\n              }\n            }}\n          />\n\n          <TrayItemDiv\n            isDisabled={isLogicModel}\n            isSelected={isUml}\n            name=\"UML\"\n            color=\"rgb(152,50,100)\"\n            marginTop=\"75px\"\n            onClick={() => {\n              if (!isLogicModel && !isUml) {\n                changeRelation();\n                setIsUml(true);\n              }\n            }}\n          />\n\n          <TrayItemDiv\n            isDisabled={isLogicModel}\n            isSelected={!isUml}\n            name=\"Chen\"\n            color=\"rgb(152,50,100)\"\n            onClick={() => {\n              if (!isLogicModel && isUml) {\n                changeRelation();\n                setIsUml(false);\n              }\n            }}\n          />\n\n          <TrayItemDiv\n            name=\"Create DB Code\"\n            color=\"rgb(255,0,0)\"\n            marginTop=\"60px\"\n            onClick={() => {\n              setShowDialog(true);\n              setSelectedNode(null);\n            }}\n          />\n        </TrayWidget>\n        <S.Layer\n          id=\"diagram-layer\"\n          onDrop={(event) => {\n            var data = JSON.parse(\n              event.dataTransfer.getData(\"storm-diagram-node\")\n            );\n\n            let allNodes = props.app\n              .getDiagramEngine()\n              .getModel()\n              .getNodes() as DefaultNodeModel[];\n\n            let names = allNodes.map((node) =>\n              node.getOptions().name.toLowerCase().trim()\n            );\n\n            var nodesCount = _.keys(\n              props.app.getDiagramEngine().getModel().getNodes()\n            ).length;\n\n            let newNodeName = names.includes(\n              `Entity${nodesCount + 1}`.toLowerCase().trim()\n            )\n              ? `Entity${nodesCount + 1}_${nodesCount + 1}`\n              : `Entity${nodesCount + 1}`;\n\n            var node: DefaultNodeModel;\n            if (data.type === \"default\") {\n              node = new DefaultNodeModel(false, newNodeName, \"rgb(0,192,255)\");\n\n              if (isLogicModel) {\n                node.addPort(\n                  new AdvancedPortModel(\n                    \"Id\",\n                    false,\n                    true,\n                    false,\n                    false,\n                    true,\n                    true,\n                    true,\n                    \"INT\"\n                  )\n                );\n                node.addPort(\n                  new AdvancedPortModel(\n                    \"\",\n                    true,\n                    false,\n                    false,\n                    false,\n                    false,\n                    false,\n                    false,\n                    \"INT\"\n                  )\n                );\n                node.addPort(\n                  new AdvancedPortModel(\n                    \"1\",\n                    true,\n                    false,\n                    false,\n                    false,\n                    false,\n                    false,\n                    false,\n                    \"INT\"\n                  )\n                );\n              } else {\n                node.addPort(\n                  new DefaultPortModel(\n                    isLogicModel,\n                    \"Id\",\n                    false,\n                    true,\n                    false,\n                    false,\n                    true,\n                    true,\n                    true,\n                    \"INT\",\n                    props.app.getDiagramEngine()\n                  )\n                );\n                node.addPort(\n                  new DefaultPortModel(\n                    isLogicModel,\n                    \"\",\n                    true,\n                    false,\n                    false,\n                    false,\n                    false,\n                    false,\n                    false,\n                    \"INT\",\n                    props.app.getDiagramEngine()\n                  )\n                );\n                node.addPort(\n                  new DefaultPortModel(\n                    isLogicModel,\n                    \"1\",\n                    true,\n                    false,\n                    false,\n                    false,\n                    false,\n                    false,\n                    false,\n                    \"INT\",\n                    props.app.getDiagramEngine()\n                  )\n                );\n              }\n            } else {\n              node = new DefaultNodeModel(true, \"Label \", \"rgb(192,255,0)\");\n            }\n\n            var point = props.app\n              .getDiagramEngine()\n              .getRelativeMousePoint(event);\n            node.setPosition(point);\n            props.app.getDiagramEngine().getModel().addNode(node);\n\n            forceUpdate();\n          }}\n          onDragOver={(event) => {\n            event.preventDefault();\n          }}\n          onClick={(event) => {\n            event.preventDefault();\n            if (\n              event.ctrlKey &&\n              props.app\n                .getDiagramEngine()\n                .getModel()\n                .getSelectedEntities()[0] instanceof PointModel\n            ) {\n              const pointToRemove = props.app\n                .getDiagramEngine()\n                .getModel()\n                .getSelectedEntities()[0] as PointModel;\n\n              pointToRemove.remove();\n              forceUpdate();\n            }\n            refreshPopups();\n          }}\n          onDoubleClick={(event) => {\n            event.preventDefault();\n            if (\n              props.app\n                .getDiagramEngine()\n                .getModel()\n                .getSelectedEntities()[0] instanceof PointModel\n            ) {\n              setSelectedLink(\n                props.app\n                  .getDiagramEngine()\n                  .getModel()\n                  .getSelectedEntities()[0]\n                  .getParent() as DefaultLinkModel\n              );\n              setShowRelationDialog(true);\n              setSelectedNode(null);\n            } else if (\n              props.app\n                .getDiagramEngine()\n                .getModel()\n                .getSelectedEntities()[0] instanceof DefaultNodeModel\n            ) {\n              refreshPopups();\n              let selectedNode = props.app\n                .getDiagramEngine()\n                .getModel()\n                .getSelectedEntities()[0] as DefaultNodeModel;\n\n              setSelectedNode(selectedNode);\n            }\n          }}\n        >\n          <DemoCanvasWidget>\n            <CanvasWidget\n              className=\"srd-demo-canvas\"\n              engine={props.app.getDiagramEngine()}\n            />\n          </DemoCanvasWidget>\n        </S.Layer>\n        {selectedNode != null ? (\n          <NodeProperties\n            update={refreshPopups}\n\n            isLogic={isLogicModel}\n            selectedItem={selectedNode}\n            diagramEngine={props.app.getDiagramEngine()}\n          />\n        ) : null}\n        <GenerationHandler\n          isUml={isUml}\n          isLogic={isLogicModel}\n          update={refreshPopups}\n          isOpen={showDialog}\n          serializeDiagram={() =>  getDiagramLogicModel()}\n          \n        />\n        <LoadFileHandler\n          update={refreshPopups}\n          isOpen={showLoadFileDialog}\n          app={props.app}\n          setIsUml={setIsUml}\n          setIsLogic={setIsLogicModel}\n        />\n        <SaveToFilePopup\n          update={refreshPopups}\n          diagramModel={props.app.getActiveDiagram()}\n          secondModel={props.app.getLogicDiagram()}\n          isOpen={showSaveFileDialog}\n          isUml={isUml}\n        />\n        <SaveToJpegPopup\n          update={refreshPopups}\n          diagramModel={props.app.getActiveDiagram()}\n          isOpen={showSaveJPEGDialog}\n        />\n\n        <RelationPopup\n          diagramEngine={props.app.getDiagramEngine()}\n          update={refreshPopups}\n          isOpen={showRelationDialog}\n          link={selectedLink}\n          isLogic={isLogicModel}\n        />\n      </S.Content>\n    </S.Body>\n  );\n};\n","import {\n  DefaultLinkWidget,\n  PointModel,\n  LinkWidget,\n} from \"@projectstorm/react-diagrams\";\nimport React from \"react\";\n\nconst CustomLinkArrowWidget = (props: any) => {\n  const { point, previousPoint } = props;\n  const [, setSelected] = React.useState(false);\n  const angle =\n    90 +\n    (Math.atan2(\n      point.getPosition().y - previousPoint.getPosition().y,\n      point.getPosition().x - previousPoint.getPosition().x\n    ) *\n      180) /\n      Math.PI;\n\n  //translate(50, -10),\n  return (\n    <g\n      className=\"arrow\"\n      transform={\n        \"translate(\" +\n        point.getPosition().x +\n        \", \" +\n        point.getPosition().y +\n        \")\"\n      }\n    >\n      <g style={{ transform: \"rotate(\" + angle + \"deg)\" }}>\n        <g transform={\"translate(0, -3)\"}>\n          <polygon\n            points=\"0,10 8,30 -8,30\"\n            fill={props.color}\n            onMouseLeave={() => setSelected(false)}\n            onMouseEnter={() => setSelected(true)}\n            data-id={point.getID()}\n            data-linkid={point.getLink().getID()}\n          ></polygon>\n        </g>\n      </g>\n    </g>\n  );\n};\n\nexport class ArrowLinkWidget extends DefaultLinkWidget {\n  generateArrow(point: PointModel, previousPoint: PointModel): JSX.Element {\n    return (\n      <CustomLinkArrowWidget\n        key={point.getID()}\n        point={point as any}\n        previousPoint={previousPoint as any}\n        colorSelected={this.props.link.getOptions().selectedColor}\n        color={this.props.link.getOptions().color}\n      />\n    );\n  }\n\n  render() {\n    //ensure id is present for all points on the path\n    var points = this.props.link.getPoints();\n    var paths = [];\n    this.refPaths = [];\n\n    //draw the multiple anchors and complex line instead\n    for (let j = 0; j < points.length - 1; j++) {\n      paths.push(\n        this.generateLink(\n          LinkWidget.generateLinePath(points[j], points[j + 1]),\n          {\n            \"data-linkid\": this.props.link.getID(),\n            \"data-point\": j,\n            onMouseDown: (event: MouseEvent) => {\n              this.addPointToLink(event as any, j + 1);\n            },\n          },\n          j\n        )\n      );\n    }\n\n    paths.push(this.generateArrow(points[0], points[1]));\n\n    \t//render the circles\n\t\tfor (let i = 1; i < points.length - 1; i++) {\n\t\t\tpaths.push(this.generatePoint(points[i]));\n\t\t}\n\n\t\t\tpaths.push(this.generatePoint(points[points.length - 1]));\n\n\t\treturn <g data-default-link-test={this.props.link.getOptions().testName}>{paths}</g>;\n  }\n}\n","import React from \"react\";\nimport { DefaultLinkFactory } from \"@projectstorm/react-diagrams\";\n\nimport { ArrowLinkModel } from \"../models/ArrowLinkModel\";\nimport { ArrowLinkWidget } from \"../widgets/ArrowLinkWidget\";\n\nexport class ArrowLinkFactory extends DefaultLinkFactory {\n  constructor() {\n    super(\"arrow\");\n  }\n\n  generateModel(): ArrowLinkModel {\n    return new ArrowLinkModel();\n  }\n\n  generateReactWidget(event: any): JSX.Element {\n    return <ArrowLinkWidget link={event.model} diagramEngine={this.engine} />;\n  }\n}\n","import * as React from \"react\";\nimport { DiagramEngine, PortWidget } from \"@projectstorm/react-diagrams-core\";\nimport { DefaultPortModel } from \"../models/DefaultPortModel\";\nimport styled from \"@emotion/styled\";\n\nexport interface DefaultPortLabelProps {\n  port: DefaultPortModel;\n  engine: DiagramEngine;\n}\n\nnamespace S {\n  export const PortLabel = styled.div`\n  display: flex;\n  margin-top: 1px;\n  align-items: center;\n`;\n\n  export const Label = styled.div`\n  flex-grow: 1;\n`;\n\n  export const Port = styled.div`\n  width: 15px;\n  height: 15px;\n  background: rgba(255, 255, 255, 0.1);\n\n  &:hover {\n    background: rgb(192, 255, 0);\n  }\n  `;\n\n  export const PrimaryKeyIcon = styled.span`\n    padding:  3px 5px;\n    color: black;\n    font-weight: 800;\n  `;\n\n  export const PortContainer = styled.div`\n    display: flex;\n    justify-content: flex-end;\n  `;\n\n  export const PortItem = styled.div`\n    display: inline-block;\n    margin-right: 5px;\n  `;\n\n  export const HiddenPort = styled(PortItem)`\n    display: none;\n  `;\n\n  export const NamedPort = styled(PortItem)`\n   margin-right: 5px;\n  `;\n}\n\nexport const DefaultPortLabel = (props: DefaultPortLabelProps) => {\n  let { port, engine } = props;\n\n  if (!port.isNamePort) {\n    port.setLocked();\n  }\n\n  let portJSX: JSX.Element = (\n    <PortWidget engine={engine} port={port}>\n      <S.Port />\n    </PortWidget>\n  );\n\n  const label: JSX.Element = (\n    <S.PortLabel>\n      <div>\n        {port.label}\n        {' '}\n        {port.propertyType}\n      </div>\n    </S.PortLabel>\n  );\n\n  const isPrimaryKey = port.isPrimaryKey &&\n    <S.PrimaryKeyIcon className=\"mi mi-Permissions\"></S.PrimaryKeyIcon>\n\n  if (port.isNamePort) {\n    return <S.NamedPort>{portJSX}</S.NamedPort>;\n  } else {\n    return (\n      <S.PortContainer>\n        <S.PortItem>{isPrimaryKey}</S.PortItem>\n        <S.PortItem>{label}</S.PortItem>\n        <S.HiddenPort>{portJSX}</S.HiddenPort>\n      </S.PortContainer>\n    );\n  }\n}\n","import * as React from \"react\";\nimport * as _ from \"lodash\";\nimport { DiagramEngine } from \"@projectstorm/react-diagrams-core\";\nimport { DefaultNodeModel } from \"../models/DefaultNodeModel\";\nimport { DefaultPortLabel } from \"../widgets/DefaultPortLabelWidget\";\nimport styled from \"@emotion/styled\";\nimport { DefaultPortModel } from \"../models/DefaultPortModel\";\n\n\nnamespace S {\n  export const Node = styled.div<{ background: string; selected: boolean }>`\n    background-color: ${(p) => p.background};\n    border-radius: 5px;\n    font-family: sans-serif;\n    color: white;\n    border: solid 2px black;\n    overflow: visible;\n    font-size: 11px;\n    border: solid 2px ${(p) => (p.selected ? \"rgb(0,192,255)\" : \"black\")};\n  `;\n\n  export const Title = styled.div`\n    background: rgba(0, 0, 0, 0.3);\n    display: flex;\n    white-space: nowrap;\n\n    justify-items: center;\n  `;\n\n  export const TitleName = styled.div`\n    flex-grow: 1;\n    padding: 5px 5px;\n  `;\n\n  export const Ports = styled.div`\n    display: flex;\n    background-image: linear-gradient(rgba(0, 0, 0, 0.1), rgba(0, 0, 0, 0.2));\n  `;\n\n  export const PortsContainer = styled.div`\n    flex-grow: 1;\n    display: flex;\n    flex-direction: column;\n\n    &:first-of-type {\n      margin-right: 10px;\n    }\n\n    &:only-child {\n      margin-right: 0px;\n    }\n  `;\n\n  export const NamedPortLeft = styled.div`\n    margin-top: 5px;\n    margin-left: 5px\n  `;\n\n  export const NamedPortRight = styled.div`\n    margin-top: 5px\n  `;\n}\n\n\nexport interface DefaultNodeProps {\n  node: DefaultNodeModel;\n  engine: DiagramEngine;\n}\n\nexport const DefaultNodeWidget = (props: DefaultNodeProps) => {\n  const generatePort = (port) => {\n    return (\n      <DefaultPortLabel\n        engine={props.engine}\n        port={port}\n        key={port.options.id}\n      />\n    );\n  };\n\n    let { node } = props;\n    let ports = node.getPorts() as { [s: string]: DefaultPortModel };\n    let portsJSX = _.map(ports, generatePort);\n    let namedPortsJSX = portsJSX.filter((p) => p.props.port.isNamePort);\n    let notNamedPortsJSX = portsJSX.filter((p) => !p.props.port.isNamePort);\n\n    return (\n      <S.Node\n        data-default-node-name={node.getOptions().name}\n        selected={node.isSelected()}\n        background={node.getOptions().color}\n      >\n        <S.Title>\n          {namedPortsJSX.length !== 0 && (\n            <S.NamedPortLeft>\n              {generatePort(namedPortsJSX[1].props.port)}\n            </S.NamedPortLeft>\n          )}\n\n          <S.TitleName>{node.getOptions().name}</S.TitleName>\n\n          {namedPortsJSX.length !== 0 && (\n            <S.NamedPortRight>\n              {generatePort(namedPortsJSX[0].props.port)}\n            </S.NamedPortRight>\n          )}\n        </S.Title>\n        <S.Ports>\n          <S.PortsContainer>{notNamedPortsJSX}</S.PortsContainer>\n        </S.Ports>\n      </S.Node>\n    );\n}\n","import * as React from \"react\";\nimport { DefaultNodeModel } from \"../models/DefaultNodeModel\";\nimport { DefaultNodeWidget } from \"../widgets/DefaultNodeWidget\";\nimport { AbstractReactFactory } from \"@projectstorm/react-canvas-core\";\nimport { DiagramEngine } from \"@projectstorm/react-diagrams-core\";\n\nexport class DefaultNodeFactory extends AbstractReactFactory<\n  DefaultNodeModel,\n  DiagramEngine\n> {\n  constructor() {\n    super(\"default\");\n  }\n\n  generateReactWidget(event): JSX.Element {\n    return <DefaultNodeWidget engine={this.engine} node={event.model} />;\n  }\n\n  generateModel(event): DefaultNodeModel {\n    return new DefaultNodeModel(false, \"Entity\", \"rgb(0,192,255)\");\n  }\n}\n","import * as React from \"react\";\nimport { DefaultLabelModel } from \"../models/DefaultLabelModel\";\nimport styled from \"@emotion/styled\";\n\nexport interface DefaultLabelWidgetProps {\n  model: DefaultLabelModel;\n}\n\nnamespace S {\n  export const Label = styled.div`\n  background: rgba(0, 0, 0, 0.8);\n  border-radius: 5px;\n  color: white;\n  font-size: 12px;\n  padding: 4px 8px;\n  font-family: sans-serif;\n  user-select: none;\n\n  max-width: 200px;\n  white-space: pre-wrap;\n`;\n}\n\n\nexport class DefaultLabelWidget extends React.Component<\n  DefaultLabelWidgetProps\n> {\n  render() {\n    return <S.Label>{this.props.model.getOptions().label}</S.Label>;\n  }\n}\n","import * as React from \"react\";\nimport { DefaultLabelModel } from \"../models/DefaultLabelModel\";\nimport { DefaultLabelWidget } from \"../widgets/DefaultLabelWidget\";\nimport { AbstractReactFactory } from \"@projectstorm/react-canvas-core\";\nimport { DiagramEngine } from \"@projectstorm/react-diagrams-core\";\n\nexport class DefaultLabelFactory extends AbstractReactFactory<\n  DefaultLabelModel,\n  DiagramEngine\n> {\n  constructor() {\n    super(\"default\");\n  }\n\n  generateReactWidget(event): JSX.Element {\n    return <DefaultLabelWidget model={event.model} />;\n  }\n\n  generateModel(event): DefaultLabelModel {\n    return new DefaultLabelModel();\n  }\n}\n","import { DefaultPortModel } from \"../models/DefaultPortModel\";\nimport { AbstractModelFactory } from \"@projectstorm/react-canvas-core\";\nimport { DiagramEngine } from \"@projectstorm/react-diagrams-core\";\n\nexport class DefaultPortFactory extends AbstractModelFactory<\n  DefaultPortModel,\n  DiagramEngine\n> {\n  constructor() {\n    super(\"default\");\n  }\n\n  generateModel(): DefaultPortModel {\n    return new DefaultPortModel(false, \"port\", true, false);\n  }\n}\n","import * as React from \"react\";\nimport { PointModel } from \"@projectstorm/react-diagrams-core\";\nimport styled from \"@emotion/styled\";\n\nexport interface DefaultLinkPointWidgetProps {\n  point: PointModel;\n  color?: string;\n  colorSelected: string;\n}\n\nexport interface DefaultLinkPointWidgetState {\n  selected: boolean;\n}\n\nexport const PointTop = styled.circle`\n  pointer-events: all;\n`;\n\nexport class DefaultLinkPointWidget extends React.Component<\n  DefaultLinkPointWidgetProps,\n  DefaultLinkPointWidgetState\n> {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selected: false,\n    };\n  }\n\n  render() {\n    const { point } = this.props;\n    return (\n      <g>\n        <circle\n          cx={point.getPosition().x}\n          cy={point.getPosition().y}\n          r={5}\n          fill={\n            this.state.selected || this.props.point.isSelected()\n              ? this.props.colorSelected\n              : this.props.color\n          }\n        />\n        <PointTop\n          className=\"point\"\n          onMouseLeave={() => {\n            this.setState({ selected: false });\n          }}\n          onMouseEnter={() => {\n            this.setState({ selected: true });\n          }}\n          data-id={point.getID()}\n          data-linkid={point.getLink().getID()}\n          cx={point.getPosition().x}\n          cy={point.getPosition().y}\n          r={15}\n          opacity={0.0}\n        />\n      </g>\n    );\n  }\n}\n","import * as React from \"react\";\nimport { DefaultLinkFactory } from \"../factories/DefaultLinkFactory\";\nimport { DiagramEngine } from \"@projectstorm/react-diagrams-core\";\nimport { DefaultLinkModel } from \"../models/DefaultLinkModel\";\n\nexport interface DefaultLinkSegmentWidgetProps {\n  path: string;\n  link: DefaultLinkModel;\n  selected: boolean;\n  forwardRef: React.RefObject<SVGPathElement>;\n  factory: DefaultLinkFactory;\n  diagramEngine: DiagramEngine;\n  onSelection: (selected: boolean) => any;\n  extras: object;\n}\n\nexport class DefaultLinkSegmentWidget extends React.Component<\n  DefaultLinkSegmentWidgetProps\n> {\n  render() {\n    const Bottom = React.cloneElement(\n      this.props.factory.generateLinkSegment(\n        this.props.link,\n        this.props.selected || this.props.link.isSelected(),\n        this.props.path\n      ),\n      {\n        ref: this.props.forwardRef,\n      }\n    );\n\n    const Top = React.cloneElement(Bottom, {\n      strokeLinecap: \"round\",\n      onMouseLeave: () => {\n        this.props.onSelection(false);\n      },\n      onMouseEnter: () => {\n        this.props.onSelection(true);\n      },\n      ...this.props.extras,\n      ref: null,\n      \"data-linkid\": this.props.link.getID(),\n      strokeOpacity: this.props.selected ? 0.1 : 0,\n      strokeWidth: 20,\n      fill: \"none\",\n      onContextMenu: (event) => {\n        if (!this.props.link.isLocked()) {\n          event && event.preventDefault();\n          this.props.link.remove();\n        }\n      },\n    });\n\n    return (\n      <g>\n        {Bottom}\n        {Top}\n      </g>\n    );\n  }\n}\n","import * as React from \"react\";\nimport {\n  DiagramEngine,\n  LinkWidget,\n  PointModel,\n} from \"@projectstorm/react-diagrams-core\";\nimport { DefaultLinkModel } from \"../models/DefaultLinkModel\";\nimport { DefaultLinkPointWidget } from \"./DefaultLinkPointWidget\";\nimport { DefaultLinkSegmentWidget } from \"./DefaultLinkSegmentWidget\";\nimport { MouseEvent } from \"react\";\n\nexport interface DefaultLinkProps {\n  link: DefaultLinkModel;\n  diagramEngine: DiagramEngine;\n  pointAdded?: (point: PointModel, event: MouseEvent) => any;\n}\n\nexport interface DefaultLinkState {\n  selected: boolean;\n}\n\nexport class DefaultLinkWidget extends React.Component<\n  DefaultLinkProps,\n  DefaultLinkState\n> {\n  refPaths: React.RefObject<SVGPathElement>[];\n\n  constructor(props: DefaultLinkProps) {\n    super(props);\n    this.refPaths = [];\n    this.state = {\n      selected: false,\n    };\n  }\n\n  componentDidUpdate(): void {\n    this.props.link.setRenderedPaths(\n      this.refPaths.map((ref) => {\n        return ref.current;\n      })\n    );\n  }\n\n  componentDidMount(): void {\n    this.props.link.setRenderedPaths(\n      this.refPaths.map((ref) => {\n        return ref.current;\n      })\n    );\n  }\n\n  componentWillUnmount(): void {\n    this.props.link.setRenderedPaths([]);\n  }\n\n  addPointToLink(event: MouseEvent, index: number) {\n    if (\n      !event.shiftKey &&\n      !this.props.link.isLocked() &&\n      this.props.link.getPoints().length - 1 <=\n        this.props.diagramEngine.getMaxNumberPointsPerLink()\n    ) {\n      const point = new PointModel({\n        link: this.props.link,\n        position: this.props.diagramEngine.getRelativeMousePoint(event),\n      });\n      this.props.link.addPoint(point, index);\n      event.persist();\n      event.stopPropagation();\n      this.forceUpdate(() => {\n        this.props.diagramEngine.getActionEventBus().fireAction({\n          event,\n          model: point,\n        });\n      });\n    }\n  }\n\n  generatePoint(point: PointModel): JSX.Element {\n    return (\n      <DefaultLinkPointWidget\n        key={point.getID()}\n        point={point as any}\n        colorSelected={this.props.link.getOptions().selectedColor}\n        color={this.props.link.getOptions().color}\n      />\n    );\n  }\n\n  generateLink(\n    path: string,\n    extraProps: any,\n    id: string | number\n  ): JSX.Element {\n    const ref = React.createRef<SVGPathElement>();\n    this.refPaths.push(ref);\n    return (\n      <DefaultLinkSegmentWidget\n        key={`link-${id}`}\n        path={path}\n        selected={this.state.selected}\n        diagramEngine={this.props.diagramEngine}\n        factory={this.props.diagramEngine.getFactoryForLink(this.props.link)}\n        link={this.props.link}\n        forwardRef={ref}\n        onSelection={(selected) => {\n          this.setState({ selected: selected });\n        }}\n        extras={extraProps}\n      />\n    );\n  }\n\n  render() {\n    //ensure id is present for all points on the path\n    var points = this.props.link.getPoints();\n    var paths = [];\n    this.refPaths = [];\n\n    if (points.length === 2) {\n      paths.push(\n        this.generateLink(\n          this.props.link.getSVGPath(),\n          {\n            onMouseDown: (event) => {\n              this.addPointToLink(event, 1);\n            },\n          },\n          \"0\"\n        )\n      );\n\n      // draw the link as dangeling\n      if (this.props.link.getTargetPort() == null) {\n        paths.push(this.generatePoint(points[1]));\n      }\n    } else {\n      //draw the multiple anchors and complex line instead\n      for (let j = 0; j < points.length - 1; j++) {\n        paths.push(\n          this.generateLink(\n            LinkWidget.generateLinePath(points[j], points[j + 1]),\n            {\n              \"data-linkid\": this.props.link.getID(),\n              \"data-point\": j,\n              onMouseDown: (event: MouseEvent) => {\n                this.addPointToLink(event, j + 1);\n              },\n            },\n            j\n          )\n        );\n      }\n\n      //render the circles\n      for (let i = 1; i < points.length - 1; i++) {\n        paths.push(this.generatePoint(points[i]));\n      }\n\n      if (this.props.link.getTargetPort() == null) {\n        paths.push(this.generatePoint(points[points.length - 1]));\n      }\n    }\n\n    return (\n      <g data-default-link-test={this.props.link.getOptions().testName}>\n        {paths}\n      </g>\n    );\n  }\n}\n","import * as React from \"react\";\nimport { DefaultLinkModel } from \"../models/DefaultLinkModel\";\nimport { DefaultLinkWidget } from \"../widgets/DefaultLinkWidget\";\nimport styled from \"@emotion/styled\";\nimport { css, keyframes } from \"@emotion/core\";\nimport { AbstractReactFactory } from \"@projectstorm/react-canvas-core\";\nimport { DiagramEngine } from \"@projectstorm/react-diagrams-core\";\n\nexport const Keyframes = keyframes`\n\t\tfrom {\n\t\t\tstroke-dashoffset: 24;\n\t\t}\n\t\tto {\n\t\t\tstroke-dashoffset: 0;\n\t\t}\n\t`;\n\nconst selected = css`\n  stroke-dasharray: 10, 2;\n  animation: ${Keyframes} 1s linear infinite;\n`;\n\nexport const Path = styled.path<{ selected: boolean }>`\n  ${(p) => p.selected && selected};\n  fill: none;\n  pointer-events: all;\n`;\n\nexport class DefaultLinkFactory<\n  Link extends DefaultLinkModel = DefaultLinkModel\n> extends AbstractReactFactory<Link, DiagramEngine> {\n  constructor(type = \"default\") {\n    super(type);\n  }\n\n  generateReactWidget(event): JSX.Element {\n    return <DefaultLinkWidget link={event.model} diagramEngine={this.engine} />;\n  }\n\n  generateModel(event): Link {\n    return new DefaultLinkModel() as Link;\n  }\n\n  generateLinkSegment(model: Link, selected: boolean, path: string) {\n    return (\n      <Path\n        selected={selected}\n        stroke={\n          selected ? model.getOptions().selectedColor : model.getOptions().color\n        }\n        strokeWidth={model.getOptions().width}\n        d={path}\n      />\n    );\n  }\n}\n","import * as React from \"react\";\nimport { DiagramEngine } from \"@projectstorm/react-diagrams-core\";\nimport { DefaultNodeModel } from \"../models/DefaultNodeModel\";\nimport styled from \"@emotion/styled\";\n\nnamespace S {\n  export const Node = styled.div<{ background: string; selected: boolean }>`\n  background-color: ${(p) => p.background};\n  border-radius: 5px;\n  font-family: sans-serif;\n  color: white;\n  border: solid 2px black;\n  overflow: visible;\n  font-size: 11px;\n  border: solid 2px ${(p) => (p.selected ? \"rgb(0,192,255)\" : \"black\")};\n`;\n\n  export const Title = styled.div`\n  background: rgba(0, 0, 0, 0.3);\n  display: flex;\n  white-space: nowrap;\n  justify-items: center;\n`;\n\n  export const TitleName = styled.div`\n  flex-grow: 1;\n  padding: 5px 5px;\n`;\n}\n\nexport interface DefaultNodeProps {\n  node: DefaultNodeModel;\n  engine: DiagramEngine;\n}\n\nexport const CustomLabelWidget = (props: DefaultNodeProps) => {\n  let { node } = props;\n  \n  return (\n    <S.Node\n      data-default-node-name={node.getOptions().name}\n      selected={node.isSelected()}\n      background={node.getOptions().color}\n    >\n      <S.Title>\n        <S.TitleName>{node.getOptions().name}</S.TitleName>\n      </S.Title>\n    </S.Node>\n  );\n}\n","import * as React from \"react\";\nimport { DefaultNodeModel } from \"../models/DefaultNodeModel\";\nimport { CustomLabelWidget } from \"../widgets/CustomLabelWidget\";\nimport { AbstractReactFactory } from \"@projectstorm/react-canvas-core\";\nimport { DiagramEngine } from \"@projectstorm/react-diagrams-core\";\n\nexport class CustomLabelFactory extends AbstractReactFactory<\n  DefaultNodeModel,\n  DiagramEngine\n> {\n  constructor() {\n    super(\"label\");\n  }\n\n  generateReactWidget(event): JSX.Element {\n    return <CustomLabelWidget engine={this.engine} node={event.model} />;\n  }\n\n  generateModel(event): DefaultNodeModel {\n    return new DefaultNodeModel(true, \"Label\", \"rgb(192,255,0)\");\n  }\n}\n","import { AbstractModelFactory } from \"@projectstorm/react-canvas-core\";\nimport { DiagramEngine } from \"@projectstorm/react-diagrams-core\";\nimport { AdvancedPortModel } from \"../models/ArrowPortModel\";\n\nexport class ArrowPortFactory extends AbstractModelFactory<\n  AdvancedPortModel,\n  DiagramEngine\n> {\n  constructor() {\n    super(\"arrow\");\n  }\n\n  generateModel(): AdvancedPortModel {\n    return new AdvancedPortModel(\"port\", true, false);\n  }\n}\n","import createEngine, {\n  DiagramModel,\n  DiagramEngine,\n  LinkModel,\n  LinkModelGenerics,\n} from \"@projectstorm/react-diagrams\";\nimport { ArrowLinkFactory } from \"../infrastructure/factories/ArrowLinkFactory\";\nimport { DefaultNodeFactory } from \"../infrastructure/factories/DefaultNodeFactory\";\nimport { DefaultLabelFactory } from \"../infrastructure/factories/DefaultLabelFactory\";\nimport { DefaultPortFactory } from \"../infrastructure/factories/DefaultPortFactory\";\nimport { DefaultLinkFactory } from \"../infrastructure/factories/DefaultLinkFactory\";\nimport { CustomLabelFactory } from \"../infrastructure/factories/CustomLabelFactory\";\nimport { DefaultPortModel } from \"../infrastructure/models/DefaultPortModel\";\nimport { ArrowLinkModel } from \"../infrastructure/models/ArrowLinkModel\";\nimport { AdvancedPortModel } from \"../infrastructure/models/ArrowPortModel\";\nimport { DefaultNodeModel } from \"../infrastructure/models/DefaultNodeModel\";\nimport { DefaultLabelModel } from \"../infrastructure/models/DefaultLabelModel\";\nimport { DefaultLinkModel } from \"../infrastructure/models/DefaultLinkModel\";\nimport { DefaultDiagramState } from \"@projectstorm/react-diagrams\";\nimport { ArrowPortFactory } from \"../infrastructure/factories/ArrowPortFactory\";\nimport { Toolkit } from \"../infrastructure/Toolkit\";\nimport _ from \"lodash\";\n\nexport class Application {\n  protected activeModel!: DiagramModel;\n  protected logicModel!: DiagramModel;\n\n  protected diagramEngine: DiagramEngine;\n\n  constructor() {\n    this.diagramEngine = createEngine();\n\n    this.diagramEngine\n      .getNodeFactories()\n      .registerFactory(new CustomLabelFactory());\n    this.diagramEngine\n      .getNodeFactories()\n      .registerFactory(new DefaultNodeFactory());\n\n    this.diagramEngine\n      .getLabelFactories()\n      .registerFactory(new DefaultLabelFactory());\n\n    this.diagramEngine\n      .getPortFactories()\n      .registerFactory(new DefaultPortFactory());\n    this.diagramEngine\n      .getPortFactories()\n      .registerFactory(new ArrowPortFactory());\n\n    this.diagramEngine\n      .getLinkFactories()\n      .registerFactory(new ArrowLinkFactory());\n    this.diagramEngine\n      .getLinkFactories()\n      .registerFactory(new DefaultLinkFactory());\n\n    const state = this.diagramEngine.getStateMachine().getCurrentState();\n\n    if (state instanceof DefaultDiagramState) {\n      state.dragNewLink.config.allowLooseLinks = false;\n    }\n\n    this.newModel();\n  }\n\n  public newModel() {\n    this.activeModel = new DiagramModel();\n    this.logicModel = new DiagramModel();\n\n    this.diagramEngine.setModel(this.activeModel);\n  }\n\n  public getActiveDiagram(): DiagramModel {\n    return this.activeModel;\n  }\n\n  public getLogicDiagram(): DiagramModel {\n    return this.logicModel;\n  }\n\n  public getDiagramEngine(): DiagramEngine {\n    return this.diagramEngine;\n  }\n\n  public setLogicModel() {\n    let concNodes = this.activeModel.getNodes();\n\n    Object.keys(concNodes).forEach((k) => {\n      let node = concNodes[k].clone() as DefaultNodeModel;\n\n      let nodePorts = concNodes[k].getPorts();\n\n      Object.keys(nodePorts).filter(id => nodePorts[id].isNamePort).forEach((k) => {\n        let port = nodePorts[k] as DefaultPortModel;\n        let logicPort = new AdvancedPortModel(\n          port.label,\n          port.isNamePort,\n          port.isPrimaryKey,\n          port.isForeignKey,\n          port.isPartialKey,\n          port.isNotNull,\n          port.isAutoincremented,\n          port.isUnique,\n          port.propertyType\n        );\n        node.addPort(logicPort);\n      });\n\n      this.logicModel.addNode(node);\n    });\n\n    let nodes = this.logicModel.getNodes();\n\n    let nodesWithoutPK: DefaultNodeModel[] = [];\n    nodes.map(n => {\n      let ports = n.getPorts() as { [s: string]: DefaultPortModel; }\n\n      let portsWithPK = _.values(ports).filter(port => port.isPrimaryKey);\n\n      if (portsWithPK.length === 0) {\n        nodesWithoutPK.push(n as DefaultNodeModel);\n      }\n    })\n\n\n    let links = this.activeModel.getLinks();\n\n    let priorityLinks = [];\n\n    links.filter(link => {\n      let sourceNode = link.getSourcePort().getParent() as DefaultNodeModel\n      let targetNode = link.getTargetPort().getParent() as DefaultNodeModel\n\n      if (nodesWithoutPK.map(node => node.getOptions().name).includes(sourceNode.getOptions().name) || nodesWithoutPK.map(node => node.getOptions().name).includes(targetNode.getOptions().name)) {\n        priorityLinks.push(link);\n      }\n    })\n\n    console.log('priorityLinks ', priorityLinks)\n\n    let priom2mLinks = priorityLinks.filter(link => {\n      let sourceLabel = (link\n        .getLabels()[0] as DefaultLabelModel).getOptions().label;\n      let targetLabel = (link\n        .getLabels()[2] as DefaultLabelModel).getOptions().label;\n\n      return sourceLabel.includes('N') && targetLabel.includes('N')\n    })\n\n    let priosourceLinks = priorityLinks.filter(link => {\n      let sourceLabel = (link\n        .getLabels()[0] as DefaultLabelModel).getOptions().label;\n      let targetLabel = (link\n        .getLabels()[2] as DefaultLabelModel).getOptions().label;\n\n      return sourceLabel.includes('N') && !targetLabel.includes('N')\n    })\n\n    let priotargetLinks = priorityLinks.filter(link => {\n      let sourceLabel = (link\n        .getLabels()[0] as DefaultLabelModel).getOptions().label;\n      let targetLabel = (link\n        .getLabels()[2] as DefaultLabelModel).getOptions().label;\n\n      return !sourceLabel.includes('N') && targetLabel.includes('N')\n    })\n\n    let priooneToOneLinks = priorityLinks.filter(link => {\n      let sourceLabel = (link\n        .getLabels()[0] as DefaultLabelModel).getOptions().label;\n      let targetLabel = (link\n        .getLabels()[2] as DefaultLabelModel).getOptions().label;\n\n      return !sourceLabel.includes('N') && !targetLabel.includes('N')\n    })\n\n\n    // targetLinks\n    this.convertTargetPorts(priotargetLinks);\n\n    // sourceLinks\n    this.convertSourceLinks(priosourceLinks);\n\n    // M2M LINKS\n    this.convertM2MLink(priom2mLinks);\n\n    this.convertSourceLinks(priooneToOneLinks);\n\n    let concLinks = this.activeModel.getLinks().filter(link => !priorityLinks.includes(link));\n\n\n    let m2mLinks = concLinks.filter(link => {\n      let sourceLabel = (link\n        .getLabels()[0] as DefaultLabelModel).getOptions().label;\n      let targetLabel = (link\n        .getLabels()[2] as DefaultLabelModel).getOptions().label;\n\n      return sourceLabel.includes('N') && targetLabel.includes('N')\n    })\n\n    let sourceLinks = concLinks.filter(link => {\n      let sourceLabel = (link\n        .getLabels()[0] as DefaultLabelModel).getOptions().label;\n      let targetLabel = (link\n        .getLabels()[2] as DefaultLabelModel).getOptions().label;\n\n      return sourceLabel.includes('N') && !targetLabel.includes('N')\n    })\n\n    let targetLinks = concLinks.filter(link => {\n      let sourceLabel = (link\n        .getLabels()[0] as DefaultLabelModel).getOptions().label;\n      let targetLabel = (link\n        .getLabels()[2] as DefaultLabelModel).getOptions().label;\n\n      return !sourceLabel.includes('N') && targetLabel.includes('N')\n    })\n\n    let oneToOneLinks = concLinks.filter(link => {\n      let sourceLabel = (link\n        .getLabels()[0] as DefaultLabelModel).getOptions().label;\n      let targetLabel = (link\n        .getLabels()[2] as DefaultLabelModel).getOptions().label;\n\n      return !sourceLabel.includes('N') && !targetLabel.includes('N')\n    })\n\n\n\n    // targetLinks\n    this.convertTargetPorts(targetLinks);\n\n    // sourceLinks\n    this.convertSourceLinks(sourceLinks);\n\n    // M2M LINKS\n    this.convertM2MLink(m2mLinks);\n\n    this.convertSourceLinks(oneToOneLinks);\n\n\n    this.diagramEngine.setModel(this.logicModel);\n  }\n\n  public setConceptualModel() {\n    this.logicModel = null;\n    this.logicModel = new DiagramModel();\n\n    let activeModelCopy = new DiagramModel();\n\n    let nodes = this.activeModel.getNodes();\n\n    Object.keys(nodes).forEach((k) => {\n      activeModelCopy.addNode(nodes[k]);\n    });\n\n    let links = this.activeModel.getLinks();\n\n    Object.keys(links).forEach((k) => {\n      activeModelCopy.addLink(links[k]);\n    });\n\n    this.activeModel = activeModelCopy;\n\n    this.diagramEngine.setModel(this.activeModel);\n  }\n\n  public loadConceptualModel(model: DiagramModel) {\n    this.activeModel = model;\n\n    this.diagramEngine.setModel(this.activeModel);\n  }\n\n  public loadLogicModel(model: DiagramModel) {\n    this.logicModel = model;\n    this.diagramEngine.setModel(this.logicModel);\n  }\n\n  public convertM2MLink(m2mLinks: LinkModel<LinkModelGenerics>[]) {\n    Object.keys(m2mLinks).forEach((k) => {\n      let logicNodes = this.logicModel.getNodes() as DefaultNodeModel[];\n\n      let sourceNode = m2mLinks[k].sourcePort.getParent() as DefaultNodeModel;\n      let sourceNodeId = logicNodes\n        .filter(\n          (node) =>\n            (node as DefaultNodeModel).getOptions().name ===\n            sourceNode.getOptions().name\n        )[0]\n        .getOptions().id;\n\n      let targetNode = m2mLinks[k].targetPort.getParent() as DefaultNodeModel;\n      let targetNodeId = logicNodes\n        .filter(\n          (node) =>\n            (node as DefaultNodeModel).getOptions().name ===\n            targetNode.getOptions().name\n        )[0]\n        .getOptions().id;\n\n      let relNode = ((m2mLinks[k] as DefaultLinkModel)\n        .properties as DefaultNodeModel).clone() as DefaultNodeModel;\n\n      relNode.getOptions().name = relNode.getOptions().name = m2mLinks[k].relName;\n\n      relNode.setPosition(\n        sourceNode.getPosition().x + 150,\n        sourceNode.getPosition().y - 100\n      );\n\n      relNode.addPort(\n        new AdvancedPortModel(\n          \"Id\",\n          false,\n          true,\n          false,\n          false,\n          true,\n          true,\n          true,\n          \"INT\"\n        )\n      );\n      relNode.addPort(\n        new AdvancedPortModel(\n          \"\",\n          true,\n          false,\n          false,\n          false,\n          false,\n          false,\n          false,\n          \"INT\"\n        )\n      );\n      relNode.addPort(\n        new AdvancedPortModel(\n          \"1\",\n          true,\n          false,\n          false,\n          false,\n          false,\n          false,\n          false,\n          \"INT\"\n        )\n      );\n\n      let sourceNodeLogic = logicNodes.filter(\n        (n) => n.getOptions().id === sourceNodeId\n      )[0];\n      let sourceNodePorts = sourceNodeLogic.getPorts() as {\n        [s: string]: DefaultPortModel;\n      }\n      let sourceNodePKPort = _.keys(sourceNodePorts).filter(key => sourceNodePorts[key].isPrimaryKey || sourceNodePorts[key].isPartialKey).map(key => sourceNodePorts[key]);\n\n      let targetNodeLogic = logicNodes.filter(\n        (n) => n.getOptions().id === targetNodeId\n      )[0];\n      let targetNodePorts = targetNodeLogic.getPorts() as {\n        [s: string]: DefaultPortModel;\n      }\n      let targetNodePKPort = _.keys(targetNodePorts).filter(key => targetNodePorts[key].isPrimaryKey || targetNodePorts[key].isPartialKey).map(key => targetNodePorts[key]);\n\n      let targetNodePrimaryKeysPorts = _.keys(targetNodePorts).filter(key => targetNodePorts[key].isPrimaryKey).map(key => targetNodePorts[key]);\n      let sourceNodePrimaryKeysPorts = _.keys(sourceNodePorts).filter(key => sourceNodePorts[key].isPrimaryKey).map(key => sourceNodePorts[key]);\n\n      let x = 1\n      sourceNodePKPort.forEach(port => {\n        relNode.addPort(\n          new AdvancedPortModel(\n            sourceNode.getOptions().name + port.label + `${sourceNode === targetNode ? x : ''}`,\n            false,\n            sourceNodePrimaryKeysPorts.length > 0 ? false : true,\n            sourceNodePrimaryKeysPorts.length > 0 ? true : false,\n            false, // partial\n            true,\n            false,\n            false,\n            \"INT\",\n            Toolkit.UID(),\n            sourceNodeId\n          )\n        )\n        x++;\n      }\n      );\n\n\n      targetNodePKPort.forEach(port => {\n        relNode.addPort(\n          new AdvancedPortModel(\n            targetNode.getOptions().name + port.label,\n            false,\n            targetNodePrimaryKeysPorts.length > 0 ? false : true,\n            targetNodePrimaryKeysPorts.length > 0 ? true : false,\n            false,// partial\n            true,\n            false,\n            false,\n            \"INT\",\n            Toolkit.UID(),\n            targetNodeId\n          )\n        );\n      });\n\n      this.logicModel.addNode(relNode);\n\n      let node = logicNodes.filter(\n        (n) => n.getOptions().id === sourceNodeId\n      )[0];\n      let sourceP = node.getPorts()[\"1\"];\n      let targetP = relNode.getPorts()[\"\"];\n\n      let link = new ArrowLinkModel({ type: \"arrow\" });\n\n      link.setSourcePort(sourceP);\n      link.setTargetPort(targetP);\n\n      let node2 = logicNodes.filter(\n        (n) => n.getOptions().id === targetNodeId\n      )[0];\n      let targetP2 = relNode.getPorts()[\"1\"];\n      let sourceP2 = node2.getPorts()[\"\"];\n\n      let link2 = new ArrowLinkModel({ type: \"arrow\" });\n\n      link2.setSourcePort(sourceP2);\n      link2.setTargetPort(targetP2);\n\n      this.logicModel.addAll(link, link2);\n\n    });\n  }\n\n  public convertSourceLinks(sourceLinks: LinkModel<LinkModelGenerics>[]) {\n    Object.keys(sourceLinks).forEach((k) => {\n      let logicNodes = this.logicModel.getNodes() as DefaultNodeModel[];\n\n      let sourceNode = sourceLinks[k].sourcePort.getParent() as DefaultNodeModel;\n      let sourceNodeId = logicNodes\n        .filter(\n          (node) =>\n            (node as DefaultNodeModel).getOptions().name ===\n            sourceNode.getOptions().name\n        )[0]\n        .getOptions().id;\n\n      let targetNode = sourceLinks[k].targetPort.getParent() as DefaultNodeModel;\n      let targetNodeId = logicNodes\n        .filter(\n          (node) =>\n            (node as DefaultNodeModel).getOptions().name ===\n            targetNode.getOptions().name\n        )[0]\n        .getOptions().id;\n\n\n      /// source\n      let sourceNodeLogic = logicNodes.filter(\n        (n) => n.getOptions().id === targetNodeId\n      )[0];\n      let sourceNodePorts = sourceNodeLogic.getPorts() as {\n        [s: string]: DefaultPortModel;\n      }\n      let sourceNodePKPort = _.keys(sourceNodePorts).filter(key => sourceNodePorts[key].isPrimaryKey || sourceNodePorts[key].isPartialKey).map(key => sourceNodePorts[key]);\n      ///\n\n      /// target\n      let node = logicNodes.filter(\n        (n) => n.getOptions().id === sourceNodeId\n      )[0];\n\n      let targetNodePorts = node.getPorts() as {\n        [s: string]: DefaultPortModel;\n      }\n      let targetNodePrimaryKeysPorts = _.keys(targetNodePorts).filter(key => targetNodePorts[key].isPrimaryKey).map(key => targetNodePorts[key]);\n      ///\n      sourceNodePKPort.forEach(port => {\n        node.addPort(\n          new AdvancedPortModel(\n            targetNode.getOptions().name + port.label,\n            false,\n            targetNodePrimaryKeysPorts.length > 0 ? false : true,\n            targetNodePrimaryKeysPorts.length > 0 ? true : false,\n            false,//PARTIAL\n            true,\n            false,\n            false,\n            \"INT\",\n            Toolkit.UID(),\n            targetNodeId\n          )\n        );\n      })\n      let nodePorts = node.getPorts() as { [s: string]: DefaultPortModel; }\n      let newPKPorts = _.keys(nodePorts).filter(key => nodePorts[key].isPartialKey).map(key => nodePorts[key]);\n\n      newPKPorts.map(port => port.isPrimaryKey = true);\n\n      let relNode = ((sourceLinks[k] as DefaultLinkModel)\n      .properties as DefaultNodeModel).clone() as DefaultNodeModel;\n\n      let relPorts = relNode.getPorts() as { [s: string]: DefaultPortModel; }\n\n      _.values(relPorts).map(port => {\n        let logicPort = new AdvancedPortModel(\n          port.label,\n          port.isNamePort,\n          port.isPrimaryKey,\n          port.isForeignKey,\n          port.isPartialKey,\n          port.isNotNull,\n          port.isAutoincremented,\n          port.isUnique,\n          port.propertyType\n        );\n        node.addPort(logicPort);\n      })\n\n      let tNode = logicNodes.filter(\n        (n) => n.getOptions().id === targetNodeId\n      )[0];\n\n      let targetP = node.getPorts()[\"1\"];\n      let sourceP = tNode.getPorts()[\"\"];\n\n      let link = new ArrowLinkModel({ type: \"arrow\" });\n\n      link.setSourcePort(sourceP);\n      link.setTargetPort(targetP);\n      this.logicModel.addLink(link);\n    });\n  }\n\n  public convertTargetPorts(targetLinks: LinkModel<LinkModelGenerics>[]) {\n    Object.keys(targetLinks).forEach((k) => {\n      let logicNodes = this.logicModel.getNodes() as DefaultNodeModel[];\n\n      let sourceNode = targetLinks[k].sourcePort.getParent() as DefaultNodeModel;\n      let sourceNodeId = logicNodes\n        .filter(\n          (node) =>\n            (node as DefaultNodeModel).getOptions().name ===\n            sourceNode.getOptions().name\n        )[0]\n        .getOptions().id;\n\n      let targetNode = targetLinks[k].targetPort.getParent() as DefaultNodeModel;\n      let targetNodeId = logicNodes\n        .filter(\n          (node) =>\n            (node as DefaultNodeModel).getOptions().name ===\n            targetNode.getOptions().name\n        )[0]\n        .getOptions().id;\n\n\n\n      /// source\n      let sourceNodeLogic = logicNodes.filter(\n        (n) => n.getOptions().id === sourceNodeId\n      )[0];\n      let sourceNodePorts = sourceNodeLogic.getPorts() as {\n        [s: string]: DefaultPortModel;\n      }\n      let sourceNodePKPort = _.keys(sourceNodePorts).filter(key => sourceNodePorts[key].isPrimaryKey || sourceNodePorts[key].isPartialKey).map(key => sourceNodePorts[key]);\n\n      /// target\n      let node = logicNodes.filter(\n        (n) => n.getOptions().id === targetNodeId\n      )[0];\n\n      let targetNodePorts = node.getPorts() as {\n        [s: string]: DefaultPortModel;\n      }\n      let targetNodePrimaryKeysPorts = _.keys(targetNodePorts).filter(key => targetNodePorts[key].isPrimaryKey).map(key => targetNodePorts[key]);\n      ///\n\n      sourceNodePKPort.forEach(port => {\n        node.addPort(\n          new AdvancedPortModel(\n            sourceNode.getOptions().name + port.label,\n            false,\n            targetNodePrimaryKeysPorts.length > 0 ? false : true,\n            targetNodePrimaryKeysPorts.length > 0 ? true : false,\n            false,//PARTIAL\n            true,\n            false,\n            false,\n            \"INT\",\n            Toolkit.UID(),\n            sourceNodeId\n          )\n        );\n      })\n\n      let nodePorts = node.getPorts() as { [s: string]: DefaultPortModel; }\n      let newPKPorts = _.keys(nodePorts).filter(key => nodePorts[key].isPartialKey).map(key => nodePorts[key]);\n\n      newPKPorts.map(port => port.isPrimaryKey = true);\n\n      let relNode = ((targetLinks[k] as DefaultLinkModel)\n      .properties as DefaultNodeModel).clone() as DefaultNodeModel;\n\n      let relPorts = relNode.getPorts() as { [s: string]: DefaultPortModel; }\n\n      _.values(relPorts).map(port => {\n        let logicPort = new AdvancedPortModel(\n          port.label,\n          port.isNamePort,\n          port.isPrimaryKey,\n          port.isForeignKey,\n          port.isPartialKey,\n          port.isNotNull,\n          port.isAutoincremented,\n          port.isUnique,\n          port.propertyType\n        );\n        node.addPort(logicPort);\n      })\n\n      let tNode = logicNodes.filter(\n        (n) => n.getOptions().id === sourceNodeId\n      )[0];\n\n      let targetP = node.getPorts()[\"\"];\n      let sourceP = tNode.getPorts()[\"1\"];\n\n      let link = new ArrowLinkModel({ type: \"arrow\" });\n\n      link.setSourcePort(sourceP);\n      link.setTargetPort(targetP);\n      this.logicModel.addLink(link);\n    });\n  }\n}\n","import * as React from \"react\";\nimport { BodyWidget } from \"./components/BodyWidget\";\nimport { Application } from \"./components/Application\";\n\nexport default () => {\n  var app = new Application();\n  return (\n    <div className=\"content\">\n      <BodyWidget app={app} />\n    </div>\n  );\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import \"./icons/micon/css/micon.min.css\";\nimport \"react-bootstrap-table-next/dist/react-bootstrap-table2.min.css\";\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\n\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}