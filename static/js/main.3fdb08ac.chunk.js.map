{"version":3,"sources":["infrastructure/models/PropertyType.ts","infrastructure/models/Label.ts","infrastructure/models/Link.ts","infrastructure/models/Port.ts","infrastructure/models/Node.ts","infrastructure/widgets/CustomLabelWidget.tsx","infrastructure/factories/CustomLabelFactory.ts","infrastructure/factories/CustomPortFactory.tsx","infrastructure/widgets/CustomPortLabelWidget.tsx","infrastructure/widgets/CustomNodeWidget.tsx","infrastructure/factories/CustomNodeFactory.tsx","infrastructure/widgets/CustomLinkLabelWidget.tsx","infrastructure/factories/CustomLinkLabelFactory.ts","infrastructure/factories/CustomLinkFactory.tsx","components/dragAndDrop/Application.ts","components/dragAndDrop/TrayItemWidget.tsx","components/dragAndDrop/TrayWidget.tsx","components/grid/Grid.tsx","components/grid/Row.tsx","components/grid/Col.tsx","components/nodeProperties/NodeProperties.tsx","components/popups/ResultPopup/ResultPopup.tsx","handlers/GenerationHandler.tsx","components/popups/RealtionPopup/RelationPopup.tsx","context/appContext/AppContext.ts","components/popups/LoadFilePopup/LoadFilePopup.tsx","handlers/LoadFileHandler.tsx","components/popups/SaveToFilePopup/SaveToFilePopup.tsx","components/popups/SaveToJpegPopup/SaveToJpegPopup.tsx","AppView.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["PropertyType","Label","_LabelModel","label","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","offsetY","inherits","createClass","key","value","ob","engine","get","prototype","_","LabelModel","Link","_LinkModel","type","arguments","length","undefined","width","color","curvyness","addLabel","labelOb","setLabel","iterateListeners","listener","event","widthChanged","objectSpread","colorChanged","LinkModel","Port","_PortModel","diagramEngine","isInput","name","isNamePort","isPrimaryKey","isForeignKey","isNotNull","isAutoincremented","isUnique","propertyType","id","in","links","firstTime","object","port","node","getParent","nodeCords","x","y","nodeCords2","link","createLinkModel","setSourcePort","setTargetPort","addPoint","PointModel","setLocked","addListener","selectionChanged","console","log","diagramModel","addLink","repaintCanvas","PortModel","Node","_NodeModel","isLabel","ports","isNamedPort","isPK","isFK","isAuto","addPort","Toolkit","UID","portModel","NodeModel","CustomLabelWidget","_BaseWidget","props","state","react","assign","getProps","style","background","className","bem","BaseWidget","CustomLabelFactory","_AbstractNodeFactory","React","initialConfig","AbstractNodeFactory","CustomPortFactory","_AbstractPortFactory","AbstractPortFactory","CustomPortLabelWidget","model","itemStyles","display","marginRight","react_default","a","createElement","main","paddingLeft","paddingRight","fontWeight","justifyContent","CustomNodeWidget","CustomPortLabelWidget_CustomPortLabelWidget","getPorts","portsJSX","generatePort","bind","namedPort","filter","p","notnamedPort","marginLeft","CustomNodeFactory","CustomLinkLabelWidget","CustomLinkLabelFactory","_AbstractLabelFactory","AbstractLabelFactory","CustomLinkFactory","_AbstractLinkFactory","DefaultLinkWidget","widget","selected","path","strokeWidth","stroke","d","AbstractLinkFactory","Application","activeModel","SRD","registerNodeFactory","registerLinkFactory","registerLabelFactory","registerPortFactory","installDefaultFactories","newModel","setDiagramModel","TrayItemWidget","_React$Component","_this2","borderColor","draggable","onDragStart","dataTransfer","setData","JSON","stringify","TrayWidget","children","defaultProps","Grid","buildClassNameString","concat","Row","flex","Col","onDoubleClick","size","config","pull","push","offset","order","hidden","buildGridColConfigClassNames","sm","md","lg","xl","xxl","xxxl","useForceUpdate","_React$useState","_React$useState2","slicedToArray","setValue","NodeProperties","_React$useState3","_React$useState4","updatedItem","setUpdatedItem","_React$useState5","_React$useState6","setName","_React$useState7","_React$useState8","showInput","setShowInput","forceUpdate","selectedItem","columns","dataField","text","formatter","cellContent","row","defaultValue","onChange","persist","getPortFromID","target","handleChangePortLabel","handleChangepRropType","checked","handleChangePK","handleChangeNull","handleChangeAutoInc","handleChangeUnique","onClick","entries","constructor","keys","map","forEach","getDiagramModel","removeLink","removePort","portsTable","Grid_Grid","Row_Row","Col_Col","allNodes","getNodes","names","values","includes","handleNameChange","lib_default","keyField","data","bordered","newPortNumber","addInPort","INT","ResultPopup","_useState","useState","_useState2","dbName","setDbName","formatedSQL","mssqlString","sqlFormatter","format","language","indent","reactjs_popup_es","modal","closeOnDocumentClick","open","isOpen","closeOnEscape","generateScript","marginTop","readOnly","contentEditable","blob","Blob","FileSaver","saveAs","update","GenerationHandler","sqlString","setSqlString","ResultPopup_ResultPopup_ResultPopup","diagram","serializeDiagram","axios","post","SerializedModel","DatabaseName","then","response","catch","error","RelationPopup","left","setLeft","_useState3","_useState4","right","setRight","_useState5","_useState6","relationName","setRelationName","sourcePort","parent","targetPort","options","Fragment","renderOptionPicker","side","labels","points","index","remove","createContext","app","newApplication","LoadFilePopup","fileReader","fileContent","setFileContent","handleFileRead","e","content","result","onClose","files","FileReader","onloadend","readAsText","accept","loadDiagram","LoadFileHandler","LoadFilePopup_LoadFilePopup_LoadFilePopup","getDiagramEngine","obj","parse","model2","DiagramModel","deSerializeDiagram","splice","SaveToFilePopup","fileName","setFileName","diagramJson","SaveToJpegPopup","domtoimage","toJpeg","document","getElementById","quality","dataUrl","download","href","click","require","AppView","showDialog","setShowDialog","showRelationDialog","setShowRelationDialog","showLoadFileDialog","setShowLoadFileDialog","showSaveFileDialog","setSaveFileDialog","_React$useState9","_React$useState10","showSaveJPEGDialog","setSaveJPEGDialog","_React$useState11","_React$useState12","showSaveOptions","setSaveOptions","_React$useState13","_React$useState14","selectedNode","setSelectedNode","_React$useState15","_React$useState16","selectedLink","setSelectedLink","refreshPopups","ref","TrayWidget_TrayWidget","TrayItemWidget_TrayItemWidget","paddingTop","onDrop","preventDefault","getData","nodesCount","getRelativeMousePoint","addNode","onDragOver","getSelectedItems","allowLooseLinks","deleteKeys","NodeProperties_NodeProperties","GenerationHandler_GenerationHandler","getActiveDiagram","LoadFileHandler_LoadFileHandler","SaveToFilePopup_SaveToFilePopup_SaveToFilePopup","SaveToJpegPopup_SaveToJpegPopup_SaveToJpegPopup","RelationPopup_RelationPopup","App","application","setApplication","AppContext","Provider","AppView_AppView","Boolean","window","location","hostname","match","ReactDOM","App_App","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3fdb08ac.chunk.js","sourcesContent":["export enum PropertyType {\n    BIT = 'BIT',\n    TINYINT   = 'TINYINT',\n    SMALLINT = 'SMALLINT',\n    INT = 'INT',\n    BIGINT = 'BIGINT',\n    DECIMAL = 'DECIMAL',\n    NUMERIC = 'NUMERIC',\n    FLOAT = 'FLOAT',\n    REAL = 'REAL',\n\n    DATE = 'DATE',\n    TIME = 'TIME',\n    DATETIME = 'DATETIME',\n    TIMESTAMP = 'TIMESTAMP',\n    YEAR = 'YEAR',\n \n    CHAR = 'CHAR',\n    VARCHAR = 'VARCHAR',\n    VARCHARMAX = 'VARCHARMAX',\n    TEXT = 'TEXT',\n\n    NCHAR = 'NCHAR',\n    NVARCHAR = 'NVARCHAR',\n    NVARCHARMAX = 'NVARCHARMAX',\n    NTEXT = 'NTEXT',\n \n    BINARY = 'BINARY',\n    VARBINARY = 'VARBINARY',\n    VARBINARYMAX = 'VARBINARYMAX',\n    IMAGE = 'IMAGE',\n\n    CLOB = 'CLOB',\n    BLOB = 'BLOB',\n    XML = 'XML',\n    JSON = 'JSON'\n} ","\nimport * as _ from \"lodash\";\nimport { LabelModel, DiagramEngine } from \"storm-react-diagrams\";\n\nexport class Label extends LabelModel {\n\tlabel: string;\n\n\tconstructor(label: string) {\n\t\tsuper(\"custom\");\n\t\tthis.label = label;\n\t\tthis.offsetY = -23;\n\t}\n\n\tsetLabel(label: string) {\n\t\tthis.label = label;\n\t}\n\n\tdeSerialize(ob: any, engine: DiagramEngine) {\n\t\tsuper.deSerialize(ob, engine);\n\t\tthis.label = ob.label;\n\t}\n\n\tserialize() {\n\t\treturn _.merge(super.serialize(), {\n\t\t\tlabel: this.label\n\t\t});\n\t}\n}","\nimport * as _ from \"lodash\";\nimport { LinkModelListener, BaseEvent, LinkModel, DefaultLinkModel, DiagramEngine, LabelModel } from \"storm-react-diagrams\";\nimport { Label } from \"./Label\";\n\nexport interface DefaultLinkModelListener extends LinkModelListener {\n\tcolorChanged?(event: BaseEvent<DefaultLinkModel> & { color: null | string }): void;\n\n\twidthChanged?(event: BaseEvent<DefaultLinkModel> & { width: 0 | number }): void;\n}\n\nexport class Link extends LinkModel<DefaultLinkModelListener> {\n\twidth: number;\n\tcolor: string;\n\tcurvyness: number;\n\n\tconstructor(type: string = \"custom\") {\n\t\tsuper(type);\n\t\tthis.color = \"rgba(255,255,255,0.5)\";\n\t\tthis.width = 3;\n\t\tthis.curvyness = 300;\n\t\tthis.addLabel('0,N');\n\t\tthis.addLabel('relation name');\n\t\tthis.addLabel('0,N');\n\t}\n\n\tserialize() {\n\t\treturn _.merge(super.serialize(), {\n\t\t\twidth: this.width,\n\t\t\tcolor: this.color,\n\t\t\tcurvyness: this.curvyness\n\t\t});\n\t}\n\n\tdeSerialize(ob: any, engine: DiagramEngine) {\n\t\tsuper.deSerialize(ob, engine);\n\t\tthis.color = ob.color;\n\t\tthis.width = ob.width;\n\t\tthis.curvyness = ob.curvyness;\n\t}\n\n\taddLabel(label: LabelModel | string) {\n\t\tif (label instanceof LabelModel) {\n\t\t\treturn super.addLabel(label);\n\t\t}\n\t\tlet labelOb = new Label('custom');\n\t\tlabelOb.setLabel(label);\n\t\treturn super.addLabel(labelOb);\n\t}\n\n\tsetWidth(width: number) {\n\t\tthis.width = width;\n\t\tthis.iterateListeners((listener: DefaultLinkModelListener, event: BaseEvent) => {\n\t\t\tif (listener.widthChanged) {\n\t\t\t\tlistener.widthChanged({ ...event, width: width });\n\t\t\t}\n\t\t});\n\t}\n\n\tsetColor(color: string) {\n\t\tthis.color = color;\n\t\tthis.iterateListeners((listener: DefaultLinkModelListener, event: BaseEvent) => {\n\t\t\tif (listener.colorChanged) {\n\t\t\t\tlistener.colorChanged({ ...event, color: color });\n\t\t\t}\n\t\t});\n\t}\n}","import * as _ from \"lodash\";\nimport { Link } from \"./Link\";\nimport { Node } from \"./Node\";\nimport { PortModel, DiagramEngine, PointModel } from \"storm-react-diagrams\";\nimport { PropertyType } from \"./PropertyType\";\n\nexport class Port extends PortModel {\n\tisNamePort: boolean;\n\n\tin: boolean;\n\tlabel: string;\n\tlinks: { [id: string]: Link };\n\tfirstTime: boolean = true;\n\tisPrimaryKey: boolean;\n\tisForeignKey: boolean;\n\tisAutoincremented: boolean;\n\tisNotNull: boolean;\n\tisUnique: boolean;\n\tpropertyType: PropertyType;\n\n\tdiagramEngine: DiagramEngine;\n\n\tconstructor(diagramEngine: DiagramEngine, isInput: boolean, name: string, isNamePort: boolean, isPrimaryKey?: boolean, isForeignKey?: boolean, isNotNull?: boolean, isAutoincremented?: boolean, isUnique?: boolean, propertyType?: PropertyType, id?: string) {\n\t\tsuper(name, \"custom\", id);\n\t\tthis.in = isInput;\n\t\tthis.label = name;\n\t\tthis.isNamePort = isNamePort;\n\t\tthis.links = {};\n\n\t\tthis.isPrimaryKey = isPrimaryKey;\n\t\tthis.isForeignKey = isForeignKey;\n\n\t\tthis.isNotNull = isNotNull;\n\t\tthis.isUnique = isUnique;\n\t\tthis.isAutoincremented = isAutoincremented;\n\n\t\tthis.propertyType = propertyType;\n\n\t\tthis.diagramEngine = diagramEngine;\n\t}\n\n\tdeSerialize(object: any, engine: DiagramEngine) {\n\t\tsuper.deSerialize(object, engine);\n\t\tthis.in = object.in;\n\t\tthis.label = object.label;\n\t\tthis.isNamePort = object.isNamePort;\n\n\t\tthis.isPrimaryKey= object.isPrimaryKey;\n\t\tthis.isForeignKey= object.isForeignKey;\n\t\tthis.isNotNull= object.isNotNull;\n\t\tthis.isUnique= object.isUnique;\n\t\tthis.isAutoincremented= object.isAutoincremented;\n\t\tthis.propertyType= object.propertyType;\n\t}\n\n\tserialize() {\n\t\treturn _.merge(super.serialize(), {\n\t\t\tin: this.in,\n\t\t\tlabel: this.label,\n\t\t\tlinks: this.links,\n\t\t\tisNamePort: this.isNamePort,\n\t\t\tisPrimaryKey: this.isPrimaryKey,\n\t\t\tisForeignKey: this.isForeignKey,\n\t\t\tisNotNull: this.isNotNull,\n\t\t\tisUnique: this.isUnique,\n\t\t\tisAutoincremented: this.isAutoincremented,\n\t\t\tpropertyType: this.propertyType,\n\t\t});\n\t}\n\n\n\n\tlink(port: Port): boolean {\n\t\t// if(!this.firstTime) {\n\t\t// \treturn true;\n\t\t// } else {\n\t\t\t\n\t\t\tlet node = port.getParent() as Node;\n\t\t\tlet nodeCords = {x: node.x-50, y: node.y  -50};\n\t\t\tlet nodeCords2 = {x: node.x+ 50, y: node.y  -50};\n\t\n\t\t\tlet link = this.createLinkModel();\n\t\n\t\t\tlink.setSourcePort(port);\n\t\t\tlink.setTargetPort(port);\n\t\t\tlink.addPoint(new PointModel(link, nodeCords));\n\t\t\tlink.addPoint(new PointModel(link, nodeCords2));\n\t\t\t\n\t\t\tlink.setLocked(false);\n\t\t\tlink.addListener({\n\t\t\t\tselectionChanged: () => {console.log('asdasdas')}\n\t\t\t});\n\t\t\t\n\t\t\tthis.diagramEngine.diagramModel.addLink(link);\n\t\t\tthis.diagramEngine.repaintCanvas();\n\t\t\tthis.firstTime = false;\n\n\t\t\treturn false;\n\t\t// }\n\t}\n\n\tcanLinkToPort(port: Port): boolean {\n\t\t\tconsole.log('tosamo', port=== this, this.firstTime);\n\t\tif(port === this) {\n\t\t\treturn this.link(port);\n\t\t}\n\t\t// this.diagramEngine.recalculatePortsVisually();\n\t\treturn true;\n\t}\n\n\tcreateLinkModel(): Link {\n\t\treturn new Link('custom');\n\t}\n}","import * as _ from \"lodash\";\nimport { NodeModel, Toolkit, DiagramEngine } from \"storm-react-diagrams\";\nimport { Port } from \"./Port\";\nimport { PropertyType } from \"./PropertyType\";\n\nexport class Node extends NodeModel {\n\tname: string;\n\tcolor: string;\n\tports: { [s: string]: Port };\n\tengine: DiagramEngine\n\tisLabel: boolean;\n\n\tconstructor(isLabel: boolean, engine: DiagramEngine, name: string = \"Untitled\", color: string = \"rgb(0,192,255)\") {\n\t\tsuper(\"custom\");\n\t\tthis.name = name;\n\t\tthis.color = color;\n\t\tthis.ports = {};\n\t\tthis.engine = engine;\n\t\tthis.isLabel = isLabel;\n\t}\n\n\taddInPort(isNamedPort: boolean, label: string, isPK: boolean, isFK: boolean, isUnique: boolean, isAuto: boolean, isNotNull: boolean, propertyType: PropertyType): Port {\n\t\treturn this.addPort(new Port(this.engine, true, label, isNamedPort, isPK, isFK, isNotNull, isAuto, isUnique, propertyType, Toolkit.UID()));\n\t}\n\n\taddOutPort(isNamedPort: boolean,label: string, isPK: boolean, isFK: boolean, isUnique: boolean, isAuto: boolean, isNotNull: boolean, propertyType: PropertyType): Port {\n\t\treturn this.addPort(new Port(this.engine, true, label, isNamedPort, isPK, isFK, isNotNull, isAuto, isUnique, propertyType, Toolkit.UID()));\n\t}\n\n\tdeSerialize(object: any, engine: DiagramEngine) {\n\t\tsuper.deSerialize(object, engine);\n\t\tthis.name = object.name;\n\t\tthis.color = object.color;\n\t}\n\n\tserialize() {\n\t\treturn _.merge(super.serialize(), {\n\t\t\tname: this.name,\n\t\t\tcolor: this.color\n\t\t});\n\t}\n\n\tgetInPorts(): Port[] {\n\t\treturn _.filter(this.ports, portModel => {\n\t\t\treturn portModel.in;\n\t\t});\n\t}\n\n\tgetOutPorts(): Port[] {\n\t\treturn _.filter(this.ports, portModel => {\n\t\t\treturn !portModel.in;\n\t\t});\n\t}\n}","import { BaseWidgetProps, DiagramEngine, BaseWidget, DefaultPortLabel } from \"storm-react-diagrams\";\nimport { Node } from '../models/Node';\nimport * as React from \"react\";\n\nexport interface NodeProps extends BaseWidgetProps {\n\tnode: Node;\n\tdiagramEngine: DiagramEngine;\n}\n\nexport interface DefaultNodeState {}\n\nexport class CustomLabelWidget extends BaseWidget<NodeProps, DefaultNodeState> {\n\tconstructor(props: NodeProps) {\n\t\tsuper(\"srd-default-node\", props);\n\t\tthis.state = {};\n\t}\n\n\trender() {\n\t\treturn (\n\t\t<div {...this.getProps()} style={{ background: this.props.node.color}}>\n\t\t\t\t<div className={this.bem(\"__title\")}>\n\t\t\t\t\t<div className={this.bem(\"__name\")}>{this.props.node.name}</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}","import { Node } from \"../models/Node\";\nimport * as React from \"react\";\nimport { CustomLabelWidget } from \"../widgets/CustomLabelWidget\";\nimport { AbstractNodeFactory, DiagramEngine } from \"storm-react-diagrams\";\n\nexport class CustomLabelFactory extends AbstractNodeFactory<Node> {\n\tconstructor() {\n\t\tsuper(\"label\");\n\t}\n\n\tgenerateReactWidget(diagramEngine: DiagramEngine, node: Node): JSX.Element {\n\t\treturn React.createElement(CustomLabelWidget, {\n\t\t\tnode: node,\n\t\t\tdiagramEngine: diagramEngine\n\t\t});\n\t}\n\n\tgetNewInstance(initialConfig?: any): Node {\n\t\treturn new Node(false, null, \"label\");\n\t}\n}","import { AbstractPortFactory } from \"storm-react-diagrams\";\nimport { Port } from \"../models/Port\";\n\nexport class CustomPortFactory extends AbstractPortFactory<Port> {\n\tconstructor() {\n\t\tsuper(\"custom\");\n\t}\n\n\tgetNewInstance(initialConfig?: any): Port {\n\t\treturn new Port(null, true, \"custom\", false);\n\t}\n}","import { Port } from \"../models/Port\";\nimport { BaseWidgetProps, BaseWidget, PortWidget } from \"storm-react-diagrams\";\nimport React, { CSSProperties } from \"react\";\nimport { PropertyType } from \"../models/PropertyType\";\n\nexport interface DefaultPortLabelProps extends BaseWidgetProps {\n\tmodel: Port;\n}\n\nexport interface DefaultPortLabelState { }\n\nexport class CustomPortLabelWidget extends BaseWidget<DefaultPortLabelProps, DefaultPortLabelState> {\n\tconstructor(props: DefaultPortLabelProps) {\n\t\tsuper(\"custom\", props);\n\t}\n\n\tgetClassName() {\n\t\treturn super.getClassName() + (this.props.model.in ? this.bem(\"--in\") : this.bem(\"--in\"));\n\t}\n\n\trender() {\n\t\tlet port: JSX.Element;\n\t\tconst style: CSSProperties = {\n\t\t\tpaddingLeft: 5, paddingRight: 5, color: 'black', fontWeight: 800\n\t\t}\n\t\tconst containerStyles: CSSProperties = {\n\t\t\tdisplay: 'flex',\n\t\t\tjustifyContent: 'flex-end'\n\n\t\t}\n\t\tconst itemStyles: CSSProperties = {\n\t\t\tdisplay: 'inline-block',\n\t\t\tmarginRight: '5px'\n\t\t}\n\n\t\tconst portStyles: CSSProperties = {\n\t\t\tdisplay: 'none'\n\t\t}\n\n\t\tconst namedPortStyles: CSSProperties = {\n\t\t\tmarginRight: '5px'\n\n\t\t}\n\n\n\t\tif (!this.props.model.isNamePort) { // || !this.props.model.isNamePort\n\t\t\tthis.props.model.setLocked();\n\t\t\tport = <PortWidget node={this.props.model.getParent()} name={this.props.model.name} />;\n\t\t} else {\n\n\t\t\tport = <PortWidget node={this.props.model.getParent()} name={this.props.model.name} />;\n\t\t}\n\n\t\tconst label: JSX.Element = <div className=\"name\">\n\t\t\t<div>\n\t\t\t\t{this.props.model.label} {this.props.model.propertyType !== undefined ? PropertyType[this.props.model.propertyType] : null}\n\t\t\t</div>\n\t\t</div>;\n\t\tconst isPrimaryKey = this.props.model.isPrimaryKey ? <span className=\"mi mi-Permissions\" style={style}></span> : null;//<span className=\"mi mi-Permissions green\" /> : null\n\n\t\tif (this.props.model.isNamePort) {\n\t\t\treturn (\n\t\t\t\t<div style={namedPortStyles}>\n\t\t\t\t\t{port}\n\t\t\t\t</div>\n\t\t\t)\n\t\t} else {\n\t\t\treturn (\n\t\t\t\t<div style={containerStyles} {...this.getProps()}>\n\t\t\t\t\t<div style={itemStyles}>\n\t\t\t\t\t\t{isPrimaryKey}\n\t\t\t\t\t</div>\n\t\t\t\t\t<div style={itemStyles}>\n\t\t\t\t\t\t{label}\n\t\t\t\t\t</div>\n\t\t\t\t\t<div style={portStyles}>\n\t\t\t\t\t\t{port}\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t);\n\t\t}\n\n\n\t}\n}","import { CustomPortLabelWidget } from \"./CustomPortLabelWidget\";\nimport React, { CSSProperties } from \"react\";\nimport { BaseWidget, DiagramEngine, BaseWidgetProps } from \"storm-react-diagrams\";\nimport { Port } from \"../models/Port\";\nimport { Node } from \"../models/Node\";\nimport * as _ from \"lodash\";\nimport { PropertyType } from \"../models/PropertyType\";\n\nexport interface DefaultNodeProps extends BaseWidgetProps {\n\tnode: Node;\n\tdiagramEngine: DiagramEngine;\n}\n\nexport interface DefaultNodeState {}\n\nexport class CustomNodeWidget extends BaseWidget<DefaultNodeProps, DefaultNodeState> {\n\tconstructor(props: DefaultNodeProps) {\n\t\tsuper(\"srd-default-node\", props);\n\t\tthis.state = {};\n\t}\n\n\tgeneratePort(port: Port) {\n\t\treturn <CustomPortLabelWidget model={port} key={port.id} />;\n\t}\n\n\t\n\n\trender() {\n\t\tconst namedPortStyles: CSSProperties = {\n\t\t\tmarginLeft: '5px'\n\t\t}\n\t\t\n\t\tlet ports = this.props.node.getPorts() as { [s: string]: Port };\n\t\tlet portsJSX = _.map(ports, this.generatePort.bind(this));\n\t\tlet namedPort = portsJSX.filter(p => p.props.model.isNamePort);\n\t\tconsole.log('QQQQQQ',portsJSX, namedPort);\n\t\tlet notnamedPort = portsJSX.filter(p => !p.props.model.isNamePort);\n\n\t\treturn (\n\t\t\t<div {...this.getProps()} style={{ background: this.props.node.color }}>\n\t\t\t\t<div className={this.bem(\"__title\")}>\n\t\t\t\t\t{<div style={namedPortStyles}>{this.generatePort(namedPort[1].props.model)}</div>}\n\t\t\t\t\t<div className={this.bem(\"__name\")}>{this.props.node.name}</div>\n\t\t\t\t\t{this.generatePort(namedPort[0].props.model)}\n\t\t\t\t</div>\n\t\t\t\t<div className={this.bem(\"__ports\")}>\n\t\t\t\t\t<div className={this.bem(\"__in\")}>\n\t\t\t\t\t\t{notnamedPort}\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}","import { AbstractNodeFactory, DiagramEngine } from \"storm-react-diagrams\";\nimport React from \"react\";\nimport { CustomNodeWidget } from \"../widgets/CustomNodeWidget\";\nimport { Node } from '../models/Node';\n\nexport class CustomNodeFactory extends AbstractNodeFactory<Node> {\n\tconstructor() {\n\t\tsuper(\"custom\");\n\t}\n\n\tgenerateReactWidget(diagramEngine: DiagramEngine, node: Node): JSX.Element {\n\t\treturn React.createElement(CustomNodeWidget, {\n\t\t\tnode: node,\n\t\t\tdiagramEngine: diagramEngine\n\t\t});\n\t}\n\n\tgetNewInstance(initialConfig?: any): Node {\n\t\treturn new Node(false, null, \"custom\");\n\t}\n}","import * as React from \"react\";\nimport { BaseWidgetProps, BaseWidget } from \"storm-react-diagrams\";\nimport { Label } from \"../models/Label\";\n\nexport interface DefaultLabelWidgetProps extends BaseWidgetProps {\n  model: Label;\n}\n\nexport class CustomLinkLabelWidget extends BaseWidget<DefaultLabelWidgetProps> {\n  constructor(props: DefaultLabelWidgetProps) {\n    super(\"srd-default-label\", props);\n  }\n\n  render() {\n    return <div {...this.getProps()}>{this.props.model.label}</div>;\n  }\n}\n","import * as React from \"react\";\nimport { AbstractLabelFactory, DiagramEngine } from \"storm-react-diagrams\";\nimport { Label } from \"../models/Label\";\nimport { CustomLinkLabelWidget } from \"../widgets/CustomLinkLabelWidget\";\n\n\nexport class CustomLinkLabelFactory extends AbstractLabelFactory<Label> {\n\tconstructor() {\n\t\tsuper(\"custom\");\n\t}\n\n\tgenerateReactWidget(diagramEngine: DiagramEngine, label: Label): JSX.Element {\n\t\treturn React.createElement(CustomLinkLabelWidget, {\n\t\t\tmodel: label\n\t\t});\n\t}\n\n\tgetNewInstance(initialConfig?: any): Label {\n\t\treturn new Label('');\n\t}\n}","import * as React from \"react\";\nimport { AbstractLinkFactory, DiagramEngine, DefaultLinkModel, DefaultLinkWidget } from \"storm-react-diagrams\";\nimport { Link } from \"../models/Link\";\n\nexport class CustomLinkFactory extends AbstractLinkFactory<Link> {\n\tconstructor() {\n\t\tsuper(\"custom\");\n\t}\n\n\tgenerateReactWidget(diagramEngine: DiagramEngine, link: DefaultLinkModel): JSX.Element {\n\t\treturn React.createElement(DefaultLinkWidget, {\n\t\t\tlink: link,\n\t\t\tdiagramEngine: diagramEngine\n\t\t});\n\t}\n\n\tgetNewInstance(initialConfig?: any): Link {\n\t\treturn new Link('custom');\n\t}\n\n\tgenerateLinkSegment(model: Link, widget: DefaultLinkWidget, selected: boolean, path: string) {\n\t\treturn (\n\t\t\t<path\n\t\t\t\tclassName={selected ? widget.bem(\"--path-selected\") : \"\"}\n\t\t\t\tstrokeWidth={model.width}\n\t\t\t\tstroke={model.color}\n\t\t\t\td={path}\n\t\t\t/>\n\t\t);\n\t}\n}\n","import * as SRD from \"storm-react-diagrams\";\nimport { CustomLabelFactory } from \"../../infrastructure/factories/CustomLabelFactory\";\nimport { CustomPortFactory } from \"../../infrastructure/factories/CustomPortFactory\";\nimport { CustomNodeFactory } from \"../../infrastructure/factories/CustomNodeFactory\";\nimport { CustomLinkLabelFactory } from \"../../infrastructure/factories/CustomLinkLabelFactory\";\nimport { CustomLinkFactory } from \"../../infrastructure/factories/CustomLinkFactory\";\n\nexport class Application {\n\tprotected activeModel: SRD.DiagramModel;\n\tprotected diagramEngine: SRD.DiagramEngine;\n\n\tconstructor() {\n\t\tthis.diagramEngine = new SRD.DiagramEngine();\n\t\tthis.diagramEngine.registerNodeFactory(new CustomLabelFactory());\n\t\tthis.diagramEngine.registerLinkFactory(new CustomLinkFactory());\n\t\tthis.diagramEngine.registerLabelFactory(new CustomLinkLabelFactory());\n\t\tthis.diagramEngine.registerNodeFactory(new CustomNodeFactory());\n\t\tthis.diagramEngine.registerPortFactory(new CustomPortFactory());\n\t\tthis.diagramEngine.installDefaultFactories();\n\t\tthis.newModel();\n\t}\n\n\tpublic newModel() {\n\t\tthis.activeModel = new SRD.DiagramModel();\n\t\tthis.diagramEngine.setDiagramModel(this.activeModel);\n\t}\n\n\tpublic getActiveDiagram(): SRD.DiagramModel {\n\t\treturn this.activeModel;\n\t}\n\n\tpublic getDiagramEngine(): SRD.DiagramEngine {\n\t\treturn this.diagramEngine;\n\t}\n}","import * as React from \"react\";\n\nexport interface TrayItemWidgetProps {\n\tmodel: any;\n\tcolor?: string;\n\tname: string;\n}\n\nexport interface TrayItemWidgetState {}\n\nexport class TrayItemWidget extends React.Component<TrayItemWidgetProps, TrayItemWidgetState> {\n\tconstructor(props: TrayItemWidgetProps) {\n\t\tsuper(props);\n\t\tthis.state = {};\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div\n\t\t\t\tstyle={{ borderColor: this.props.color }}\n\t\t\t\tdraggable={true}\n\t\t\t\tonDragStart={event => {\n\t\t\t\t\tevent.dataTransfer.setData(\"storm-diagram-node\", JSON.stringify(this.props.model));\n\t\t\t\t}}\n\t\t\t\tclassName=\"tray-item\"\n\t\t\t>\n\t\t\t\t{this.props.name}\n\t\t\t</div>\n\t\t);\n\t}\n}\n","import * as React from \"react\";\n\nexport interface TrayWidgetProps {}\n\nexport interface TrayWidgetState {}\n\nexport class TrayWidget extends React.Component<TrayWidgetProps, TrayWidgetState> {\n\tpublic static defaultProps: TrayWidgetProps = {};\n\n\tconstructor(props: TrayWidgetProps) {\n\t\tsuper(props);\n\t\tthis.state = {};\n\t}\n\n\trender() {\n\t\treturn <div className=\"tray\">{this.props.children}</div>;\n\t}\n}\n","import * as React from 'react';\n\nimport { GridProps } from './';\n\nexport default class Grid extends React.Component<GridProps> {\n  render() {\n    return (\n      <div style={this.props.style} className={this.buildClassNameString()}>\n        {this.props.children}\n      </div>\n    );\n  }\n\n  buildClassNameString() {\n    let className = 'ms-Grid';\n\n    if (this.props.className != null) {\n      className += ` ${this.props.className}`;\n    }\n\n    return className;\n  }\n}\n","import * as React from 'react';\n\nimport { GridRowProps } from './';\n\nexport default class Row extends React.Component<GridRowProps> {\n  render() {\n    return <div className={this.buildClassNameString()}>{this.props.children}</div>;\n  }\n\n  buildClassNameString() {\n    let className = 'ms-Grid-row';\n\n    if (this.props.flex) {\n      className += ' grid-row-flex';\n    }\n\n    if (this.props.className != null) {\n      className += ` ${this.props.className}`;\n    }\n\n    return className;\n  }\n}\n","import * as React from 'react';\n\nimport { GridColProps, GridColConfigProp } from './';\n\nexport default class Col extends React.Component<GridColProps> {\n  render() {\n    return <div className={this.buildClassNameString()} onDoubleClick={this.props.onDoubleClick}>{this.props.children}</div>;\n  }\n\n  buildGridColConfigClassNames(size: string, config: GridColConfigProp) {\n    if (config == null) return '';\n\n    let className = ` ms-${size}`;\n\n    if (typeof config === 'string') {\n      className += config;\n    } else {\n      className += config.size;\n\n      if (config.pull != null) {\n        className += ` ms-${size}Pull${config.pull}`;\n      }\n\n      if (config.push != null) {\n        className += ` ms-${size}Push${config.push}`;\n      }\n\n      if (config.offset != null) {\n        className += ` ms-${size}Offset${config.offset}`;\n      }\n\n      if (config.order != null) {\n        className += ` grid-flex-order-${size}-${config.order}`;\n      }\n    }\n\n    return className;\n  }\n\n  buildClassNameString() {\n    let className = 'ms-Grid-col';\n\n    if (this.props.className != null) {\n      className += ` ${this.props.className}`;\n    }\n\n    if (this.props.hidden != null) {\n      className += ` ms-hidden${this.props.hidden}`;\n    }\n\n    if (this.props.order != null) {\n      className += ` grid-flex-order-${this.props.order}`;\n    }\n\n    className += this.buildGridColConfigClassNames('sm', this.props.sm);\n    className += this.buildGridColConfigClassNames('md', this.props.md);\n    className += this.buildGridColConfigClassNames('lg', this.props.lg);\n    className += this.buildGridColConfigClassNames('xl', this.props.xl);\n    className += this.buildGridColConfigClassNames('xxl', this.props.xxl);\n    className += this.buildGridColConfigClassNames('xxxl', this.props.xxxl);\n\n    return className;\n  }\n}\n","import './NodeProperties.scss';\nimport * as React from \"react\";\nimport { DiagramEngine } from 'storm-react-diagrams';\nimport { Link } from '../../infrastructure/models/Link';\nimport { Port } from '../../infrastructure/models/Port';\nimport { Node } from '../../infrastructure/models/Node';\n\nimport BootstrapTable from 'react-bootstrap-table-next';\nimport 'react-bootstrap-table-next/dist/react-bootstrap-table2.min.css';\nimport { PropertyType } from '../../infrastructure/models/PropertyType';\nimport { Col, Row, Grid } from '../grid';\n\nclass OwnProps {\n  selectedItem: Node;\n  diagramEngine: DiagramEngine;\n  selectedLink: Link;\n}\n\ntype Props = OwnProps;\n\nexport function useForceUpdate(){\n  const [value, setValue] = React.useState(0);\n  return () => setValue(value => ++value);\n}\n\nexport const NodeProperties = (props: Props) => {\n  const [updatedItem, setUpdatedItem] = React.useState(null);\n  const [name, setName] = React.useState('');\n  const [showInput, setShowInput] = React.useState(false);\n\n  const forceUpdate = useForceUpdate();\n\n  React.useMemo(() => {\n    setUpdatedItem(props.selectedItem);\n    setName(props.selectedItem.name);\n  }, [props.selectedItem]);\n\n  const handleChangePK = (event: React.ChangeEvent<HTMLInputElement>, row: Port) => {\n    event.persist();\n    (updatedItem.getPortFromID(row.id) as Port).isPrimaryKey = !row.isPrimaryKey;\n    forceUpdate()\n  }\n\n  const handleChangeNull = (event: React.ChangeEvent<HTMLInputElement>, row: Port) => {\n    event.persist();\n    (updatedItem.getPortFromID(row.id) as Port).isNotNull = !row.isNotNull;\n    forceUpdate()\n  }\n\n  const handleChangeUnique = (event: React.ChangeEvent<HTMLInputElement>, row: Port) => {\n    event.persist();\n    (updatedItem.getPortFromID(row.id) as Port).isUnique = !row.isUnique;\n    forceUpdate()\n  }\n\n  const handleChangeAutoInc = (event: React.ChangeEvent<HTMLInputElement>, row: Port) => {\n    event.persist();\n    (updatedItem.getPortFromID(row.id) as Port).isAutoincremented = !row.isAutoincremented;\n    forceUpdate()\n  }\n\n  const handleChangepRropType = (event: React.ChangeEvent<HTMLSelectElement>, row: Port) => {\n    event.persist();\n    (updatedItem.getPortFromID(row.id) as Port).propertyType = event.target.value as PropertyType;\n    forceUpdate()\n  }\n\n  const handleChangePortLabel = (event: React.ChangeEvent<HTMLInputElement>, row: Port) => {\n    event.persist();\n    (updatedItem.getPortFromID(row.id) as Port).label = event.target.value;\n  }\n\n  const handleNameChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    event.persist();\n    let allNodes = props.diagramEngine.diagramModel.getNodes() as {[id: string]: Node}\n    let names = Object.values(allNodes).map(node => allNodes[node.id].name);\n    \n    updatedItem.name = names.includes(event.target.value) ? event.target.value +' ALREADY TAKEN!!' : event.target.value;\n    forceUpdate();\n  }\n\n\n  const addNewPort = (newPortNumber: number) => {\n    updatedItem.addInPort(false,`new port ${newPortNumber}`, false, false, false, false, false, PropertyType.INT)\n    forceUpdate()\n  }\n\n  const removePort = (port: Port) => {\n    if (Object.entries(port.links).length !== 0 && port.links.constructor === Object) {\n      let portLinks: Link[] = Object.keys(port.links).map(x => {\n        return port.links[x];\n      });\n      portLinks.forEach(p => props.diagramEngine.getDiagramModel().removeLink(p));\n    }\n    updatedItem.removePort(port);\n    forceUpdate()\n  }\n\n  const columns: any[] = [{\n    dataField: 'label',\n    text: 'Property Name',\n    formatter: (cellContent: any, row: Port) => (\n      <div className=\"input\">\n        <input className=\"darkInput\" type=\"text\" defaultValue={row.label} onChange={(event) => handleChangePortLabel(event, row)}></input>\n      </div>\n    )\n  }, {\n    style: { paddingLeft: 0 },\n    dataField: 'propertyType',\n    text: 'Property Type',\n    formatter: (cellContent: any, row: Port) => (\n      <div className=\"checkbox\">\n        <label>\n          <select className=\"darkSelect\" onChange={(event) => handleChangepRropType(event, row)} value={PropertyType[row.propertyType]}>\n            <option value=\"BIT\">BIT</option>\n            <option value=\"TINYINT\">TINYINT</option>\n            <option value=\"SMALLINT\">SMALLINT</option>\n            <option value=\"INT\">INT</option>\n            <option value=\"BIGINT\">BIGINT</option>\n            <option value=\"DECIMAL\">DECIMAL</option>\n            <option value=\"NUMERIC\">NUMERIC</option>\n            <option value=\"FLOAT\">FLOAT</option>\n            <option value=\"REAL\">REAL</option>\n\n            <option value=\"DATE\">DATE</option>\n            <option value=\"TIME\">TIME</option>\n            <option value=\"DATETIME\">DATETIME</option>\n            <option value=\"TIMESTAMP\">TIMESTAMP</option>\n            <option value=\"YEAR\">YEAR</option>\n\n            <option value=\"CHAR\">CHAR</option>\n            <option value=\"VARCHAR\">VARCHAR</option>\n            <option value=\"VARCHARMAX\">VARCHARMAX</option>\n            <option value=\"TEXT\">TEXT</option>\n\n            <option value=\"NCHAR\">NCHAR</option>\n            <option value=\"NVARCHAR\">NVARCHAR</option>\n            <option value=\"NVARCHARMAX\">NVARCHARMAX</option>\n            <option value=\"NTEXT\">NTEXT</option>\n            <option value=\"BINARY\">BINARY</option>\n            <option value=\"VARBINARY\">VARBINARY</option>\n            <option value=\"VARBINARYMAX\">VARBINARYMAX</option>\n            <option value=\"IMAGE\">IMAGE</option>\n            <option value=\"CLOB\">CLOB</option>\n            <option value=\"BLOB\">BLOB</option>\n            <option value=\"XML\">XML</option>\n            <option value=\"JSON\">JSON</option>\n\n          </select>\n        </label>\n      </div>\n    )\n  }, {\n    dataField: 'isPrimaryKey',\n    text: 'Is Primary Key',\n    formatter: (cellContent: any, row: Port) => (\n      <div className=\"checkbox\">\n        <label>\n          <input type=\"checkbox\" checked={row.isPrimaryKey} onChange={(event) => handleChangePK(event, row)} />\n        </label>\n      </div>\n    )\n  }\n    ,\n  {\n    dataField: 'isNotNull',\n    text: 'Is Nullable',\n    formatter: (cellContent: any, row: Port) => (\n      <div className=\"checkbox\">\n        <label>\n          <input type=\"checkbox\" checked={row.isNotNull} onChange={(event) => handleChangeNull(event, row)} />\n        </label>\n      </div>\n    )\n  }, {\n    dataField: 'isAutoincremented',\n    text: 'Is Auto Incremented',\n    formatter: (cellContent: any, row: Port) => (\n      <div className=\"checkbox\">\n        <label>\n          <input type=\"checkbox\" checked={row.isAutoincremented} onChange={(event) => handleChangeAutoInc(event, row)} />\n        </label>\n      </div>\n    )\n  }, {\n    dataField: 'isUnique',\n    text: 'Is Unique',\n    formatter: (cellContent: any, row: Port) => (\n      <div className=\"checkbox\">\n        <label>\n          <input type=\"checkbox\" checked={row.isUnique} onChange={(event) => handleChangeUnique(event, row)} />\n        </label>\n      </div>\n    )\n  }, {\n    dataField: 'remove',\n    text: 'Remove',\n    formatter: (cellContent: any, row: Port) => (\n      <div className=\"checkbox\">\n        <label>\n          <span onClick={() => removePort(row)} className=\"mi mi-Delete red\" />\n        </label>\n      </div>\n    )\n  }];\n\n\n  let ports = updatedItem && updatedItem.ports && updatedItem.ports as { [s: string]: Port };\n  let portsTable: Port[] = ports && Object.keys(ports).map(x => {\n    return ports[x];\n  }).filter(p => !p.isNamePort);\n\n  if (!updatedItem) return null;\n  else\n    return (\n      <div className=\"trayBottom\">\n        <Grid>\n          <Row>\n            <Col>\n              {!showInput ? <h1 onDoubleClick={() => setShowInput(true)}>{name}</h1> : <input className=\"darkInput fs-24\" defaultValue={name} onChange={(event) => handleNameChange(event)} />}\n            </Col>\n            {!updatedItem.isLabel ?\n              <Col className=\"tableFixHead\">\n                <BootstrapTable\n                  keyField=\"id\"\n                  data={portsTable}\n                  columns={columns}\n                  bordered={false}\n                />\n                <p className=\"mouse-cursor\" onClick={() => addNewPort(portsTable.length)}>Add new prop</p>\n              </Col> : null}\n          </Row>\n        </Grid>\n\n      </div>\n    )\n\n\n}","import './ResultPopup.scss';\nimport React, { useState } from 'react'\nimport Popup from 'reactjs-popup'\nimport sqlFormatter from \"sql-formatter\";\nimport FileSaver from 'file-saver';\n\nclass Props {\n  isOpen: boolean;\n  generateScript?: (name: string) => void;\n  mssqlString?: string;\n  update: () => void;\n}\n\nexport const ResultPopup = (props: Props) => {\n  const [dbName, setDbName] = useState(\n    'DatabaseName'\n  );\n\n  const formatedSQL = props.mssqlString && sqlFormatter.format(props.mssqlString, {\n    language: \"sql\", // Defaults to \"sql\"\n    indent: \"  \"   // Defaults to two spaces\n  });\n\n\n  const downloadMSSQL = () => {\n    var blob = new Blob([formatedSQL], {type: \"text/plain;charset=utf-8\"});\n    FileSaver.saveAs(blob, `${dbName}.sql`);\n    props.update();\n  }\n  \n  return (\n    <Popup\n      modal\n      closeOnDocumentClick\n      open={props.isOpen}\n      closeOnEscape\n    >\n      <div className=\"sql-result-dialog\">\n        <input style={{marginRight: '10px'}} type=\"text\" onChange={event => setDbName(event.target.value)} value={dbName}/>\n        <button onClick={() => props.generateScript(dbName)}>Generate</button>\n        <textarea style={{marginTop: '5px'}} readOnly={true} value={formatedSQL} contentEditable={false}></textarea>\n        <button style={{marginRight: '10px'}} onClick={downloadMSSQL}>Download MSSQL</button>\n      </div>\n    </Popup>)\n}","import { ResultPopup } from '../components/popups/ResultPopup/ResultPopup';\nimport React, { useState, useMemo } from 'react'\nimport axios from 'axios';\n\nclass Props {\n  isOpen: boolean;\n  serializeDiagram: any;\n  update: () => void;\n}\n\nexport const GenerationHandler = (props: Props) => {\n  const [sqlString, setSqlString] = useState('');\n\n  const generateScript = (name: string) => {\n    let diagram = JSON.stringify(props.serializeDiagram, null, 2);\n    console.log('QQQQQdiagram', diagram);\n    axios.post('http://localhost:5000/api/setjob', { SerializedModel: diagram, DatabaseName: name })\n      .then((response) => {\n        setSqlString(response.data);\n      })\n      .catch(function (error) {\n        console.log(error);\n      })\n  };\n\n  return (\n    <ResultPopup update={props.update} mssqlString={sqlString} generateScript={(name) => generateScript(name)} isOpen={props.isOpen} />\n  )\n}\n","import './RelationPopup.scss';\nimport React, { useState } from 'react'\nimport Popup from 'reactjs-popup'\nimport { Link } from '../../../infrastructure/models/Link';\nimport { Label } from '../../../infrastructure/models/Label';\nimport { Node } from '../../../infrastructure/models/Node';\nimport { DiagramModel } from 'storm-react-diagrams';\n\nclass Props {\n  isOpen: boolean;\n  link: Link;\n  update: () => void;\n  diagramModel: DiagramModel;\n}\nexport const RelationPopup = (props: Props) => {\n\n  const [left, setLeft] = useState(\n    '0, N'\n  );\n\n  const [right, setRight] = useState(\n    '0, N'\n  );\n\n  const [relationName, setRelationName] = useState(\n    'relation name'\n  );\n\n  let update = () => {\n    let labels = props.link.labels as Label[];\n    labels[0].label = left;\n    labels[2].label = right;\n    labels[1].label = relationName;\n    let points = props.link.points;\n    for (let index = 1; index < points.length - 1; index++) {\n      const element = points[index];\n      element.remove();\n    }\n    props.update()\n  }\n\n  const sourcePort = props.link && props.link.sourcePort && props.link.sourcePort.parent as Node;\n  const targetPort = props.link && props.link.targetPort && props.link.targetPort.parent as Node;\n\n  const remove = () => {\n    props.diagramModel.removeLink(props.link);\n    props.update();\n  }\n\n  const options = <>\n    <option value=\"1, N\">1, N</option>\n    <option value=\"0, N\">0, N</option>\n    <option value=\"0, 1\">0, 1</option>\n    <option value=\"1, 1\">1, 1</option>\n    <option value=\"N, N\">N, N</option>\n  </>;\n\n  const renderOptionPicker = (side: string) => {\n    return (\n      <div className=\"grid-item\"><select className=\"darkSelect\"\n        onChange={(event) => side === 'left' ? setLeft(event.target.value) : setRight(event.target.value)}\n        value={side === 'left' ? left : right}>\n        {options}\n      </select>\n      </div>\n    );\n  }\n\n  return (\n    <Popup\n      modal\n      closeOnDocumentClick\n      open={props.isOpen}\n      closeOnEscape\n    >\n      <div className=\"SQLResultDialog\">\n        <div className=\"grid-container\">\n          <div className=\"grid-item\"><p>{sourcePort && sourcePort.name}</p></div>\n          <div className=\"grid-item\"><input className=\"darkInput\" type=\"text\" defaultValue={relationName} onChange={(event) => setRelationName(event.target.value)}></input></div>\n          <div className=\"grid-item\"><p>{targetPort && targetPort.name}</p></div>\n          {renderOptionPicker('left')}\n          <div className=\"grid-item\"><button onClick={update}>SAVE</button></div>\n          {renderOptionPicker('right')}\n          <div className=\"grid-item\" />\n          <div className=\"grid-item\"><button onClick={remove}>Remove</button></div>\n          <div className=\"grid-item\" />\n        </div>\n      </div>\n    </Popup>)\n}\n","import React from 'react';\n\nexport default React.createContext({\n    app: null,\n    newApplication: () => {}\n});","import './LoadFilePopup.scss';\nimport React, { useState } from 'react'\nimport Popup from 'reactjs-popup'\n\nclass Props {\n  isOpen: boolean;\n  loadDiagram?: (name: string) => void;\n  update: () => void\n}\n\nexport const LoadFilePopup = (props: Props) => {\n  let fileReader: FileReader;\n\n  const [fileContent, setFileContent] = useState(\n    ''\n  );\n\n  const handleFileRead = (e: any) => {\n    const content = fileReader.result\n    setFileContent(content as string);\n  }\n\n  const handleFileChosen = (name: any) => {\n    fileReader = new FileReader()\n    fileReader.onloadend = handleFileRead\n    fileReader.readAsText(name)\n  } \n\n  return (\n    <Popup\n      modal\n      closeOnDocumentClick\n      open={props.isOpen}\n      closeOnEscape\n      onClose={() => props.update()}\n    >\n      <div className=\"sql-result-dialog\">\n        <input type=\"file\" onChange={event => handleFileChosen(event.target.files[0])} accept=\".dbjson\" />\n        <button onClick={() => props.loadDiagram(fileContent)}>Load</button>\n      </div>\n    </Popup>)\n}","import { LoadFilePopup } from '../components/popups/LoadFilePopup/LoadFilePopup';\nimport React from 'react'\nimport { Application } from '../components/dragAndDrop/Application';\nimport { DiagramModel } from 'storm-react-diagrams';\n\nclass Props {\n  isOpen: boolean;\n  app: Application;\n  update: () => void;\n}\n\nexport const LoadFileHandler = (props: Props) =>{\n   const loadDiagram = (name: string) => {\n        let engine  = props.app.getDiagramEngine();\n        let obj: ReturnType<DiagramModel['serialize']> = JSON.parse(name);\n        let model2 = new DiagramModel();\n        model2.deSerializeDiagram(obj, engine);\n        let newLinks: any[] = Object.keys(model2.links).map(x => {\n            return model2.links[x];\n        });\n\n        newLinks.forEach(link => {\n            link.labels.splice(0,3)\n        })\n        engine.setDiagramModel(model2)\n        engine.repaintCanvas()\n        props.update()\n  }\n\n  \n    return (\n      <LoadFilePopup update={props.update} loadDiagram={(name) => loadDiagram(name)} isOpen={props.isOpen} />\n    )\n  \n}\n","import './SaveToFilePopup.scss';\nimport React, { useState } from 'react'\nimport Popup from 'reactjs-popup'\nimport { DiagramModel } from 'storm-react-diagrams';\nimport FileSaver from 'file-saver';\n\nclass Props {\n  isOpen: boolean;\n  diagramModel: DiagramModel;\n  update: () => void;\n}\n\nexport const SaveToFilePopup = (props: Props) => {\n  const [fileName, setFileName] = useState(\n    'diagram'\n  );\n\n  const download = () => {\n    const diagramJson = JSON.stringify(props.diagramModel.serializeDiagram());\n    let blob = new Blob([diagramJson], {type: \"text/plain;charset=utf-8\"});\n    FileSaver.saveAs(blob, `${fileName}.dbjson`);\n    props.update();\n  }\n  \n  return (\n    <Popup\n      modal\n      closeOnDocumentClick\n      open={props.isOpen}\n      closeOnEscape\n      onClose={() => props.update()}\n    >\n      <div className=\"sql-result-dialog\">\n        <input type=\"text\" onChange={event => setFileName(event.target.value)} value={fileName}/>\n        <button onClick={download}>save</button>\n      </div>\n    </Popup>)\n}","import './SaveToJpegPopup.scss';\nimport React, { useState } from 'react'\nimport Popup from 'reactjs-popup'\nimport { DiagramModel } from 'storm-react-diagrams';\nimport domtoimage from 'dom-to-image';\n\nclass Props {\n  isOpen: boolean;\n  diagramModel: DiagramModel;\n  update: () => void;\n}\n\nexport const SaveToJpegPopup = (props: Props) => {\n  const [fileName, setFileName] = useState(\n    'diagram'\n  );\n\n  const download = () => {\n    domtoimage.toJpeg(document.getElementById('diagram-layer'), { quality: 0.95 })\n    .then((dataUrl: any) => {\n        let link = document.createElement('a');\n        link.download = `${fileName}.jpeg`;\n        link.href = dataUrl;\n        link.click();\n        props.update();\n    });\n  }\n  \n  return (\n    <Popup\n      modal\n      closeOnDocumentClick\n      open={props.isOpen}\n      closeOnEscape\n      onClose={() => props.update()}\n    >\n      <div className=\"sql-result-dialog\">\n        <input type=\"text\" onChange={event => setFileName(event.target.value)} value={fileName}/>\n        <button onClick={download}>save</button>\n      </div>\n    </Popup>)\n}","import * as React from \"react\";\n\nimport { DiagramWidget, PointModel } from \"storm-react-diagrams\";\nimport { TrayItemWidget } from \"./components/dragAndDrop/TrayItemWidget\";\nimport { TrayWidget } from \"./components/dragAndDrop/TrayWidget\";\nimport { Application } from \"./components/dragAndDrop/Application\";\nimport { Node } from \"./infrastructure/models/Node\";\nimport { Link } from \"./infrastructure/models/Link\";\nimport { PropertyType } from \"./infrastructure/models/PropertyType\";\nimport { NodeProperties, useForceUpdate } from \"./components/nodeProperties/NodeProperties\";\nimport { GenerationHandler } from \"./handlers/GenerationHandler\";\nimport { RelationPopup } from \"./components/popups/RealtionPopup/RelationPopup\";\nimport AppContext from \"./context/appContext/AppContext\";\nimport { LoadFileHandler } from \"./handlers/LoadFileHandler\";\nimport { SaveToFilePopup } from \"./components/popups/SaveToFilePopup/SaveToFilePopup\";\nimport { CSSProperties } from \"react\";\nimport { SaveToJpegPopup } from \"./components/popups/SaveToJpegPopup/SaveToJpegPopup\";\nimport _ from \"lodash\";\n\nrequire(\"storm-react-diagrams/dist/style.min.css\");\nrequire('react-bootstrap-table-next/dist/react-bootstrap-table2.min.css');\n\ninterface Props {\n  app: Application;\n}\n\nexport const AppView = (props: Props) => {\n  const contextType = AppContext; // co zrobic z kontekstem\n  const jpegFileTarget: React.RefObject<any> = null;\n\n  const [showDialog, setShowDialog] = React.useState(false);\n  const [showRelationDialog, setShowRelationDialog] = React.useState(false);\n  const [showLoadFileDialog, setShowLoadFileDialog] = React.useState(false);\n  const [showSaveFileDialog, setSaveFileDialog] = React.useState(false);\n  const [showSaveJPEGDialog, setSaveJPEGDialog] = React.useState(false);\n  const [showSaveOptions, setSaveOptions] = React.useState(false);\n\n  const [selectedNode, setSelectedNode] = React.useState(null);\n  const [selectedLink, setSelectedLink] = React.useState(null);\n\n  const forceUpdate = useForceUpdate();\n\n  React.useEffect(() => {\n    setSelectedNode(null);\n    setSelectedLink(null);\n  }, []);\n\n  const refreshPopups = () => {\n    setSelectedLink(null);\n    setSelectedNode(null);\n\n    setShowDialog(false);\n    setSaveFileDialog(false);\n    setSaveJPEGDialog(false);\n    setSaveOptions(false);\n    setShowLoadFileDialog(false);\n    setShowRelationDialog(false);\n  }\n\n  // render() {\n  const containerStyles: CSSProperties = {\n    display: 'flex',\n    justifyContent: 'space-between',\n    borderColor: \"rgb(255,123,0)\"\n  }\n  const itemStyles: CSSProperties = {\n    display: 'inline-block',\n    paddingTop: 3,\n    paddingRight: 5\n  }\n\n  return (\n    <div className=\"body\">\n      <div className=\"header\">\n        <div className=\"title\">DB Diagram Scripter</div>\n      </div>\n      <div className=\"content\" ref={jpegFileTarget}>\n        <TrayWidget>\n          <TrayItemWidget model={{ type: \"table\" }} name=\"Entity\" color=\"rgb(0,192,255)\" />\n          <TrayItemWidget model={{ type: \"label\" }} name=\"Label\" color=\"rgb(192,255,0)\" />\n\n          <div\n            style={{ borderColor: \"rgb(255,123,0)\", marginTop: '100px' }}\n            className=\"tray-item\"\n            onClick={() => { \n              setShowLoadFileDialog(true); \n              setSelectedNode(null) \n            }}\n          >\n            Load Diagram\n\t\t\t\t\t\t</div>\n          <div\n            style={containerStyles}\n            className=\"tray-item\"\n            onClick={() => { \n              setSaveOptions(!showSaveOptions); \n              setSelectedNode(null);\n            }}\n          >\n            Save\n\t\t\t\t\t\t\t<span style={itemStyles} className={`mi ${!showSaveOptions ? 'mi-ArrowDown8' : 'mi-ArrowUp8'}`} />\n          </div>\n          {showSaveOptions && <div\n            style={{ borderColor: \"rgb(255,123,0)\" }}\n            className=\"tray-item\"\n            onClick={() => { \n              setSaveFileDialog(true); \n              setSelectedNode(null);\n            }}\n          >\n            File\n\t\t\t\t\t\t</div>}\n          {showSaveOptions && <div\n            style={{ borderColor: \"rgb(255,123,0)\" }}\n            className=\"tray-item\"\n            onClick={() => { \n              setSaveJPEGDialog(true); \n              setSelectedNode(null);\n            }}\n          >\n            JPEG\n\t\t\t\t\t\t</div>}\n          <div\n            style={{ borderColor: \"rgb(255,0,0)\", marginTop: '100px' }}\n            className=\"tray-item\"\n            onClick={() => { \n              setShowDialog(true); \n              setSelectedNode(null);\n            }}\n          >\n            Create DB Code\n\t\t\t\t\t\t</div>\n\n\n        </TrayWidget>\n\n        <div\n          id='diagram-layer'\n          className=\"diagram-layer\"\n          onDrop={event => {\n            console.log('on drop')\nevent.preventDefault();\n            var data = JSON.parse(event.dataTransfer.getData(\"storm-diagram-node\"));\n            var nodesCount = _.keys(\n              props.app\n                .getDiagramEngine()\n                .getDiagramModel()\n                .getNodes()\n            ).length;\n\n            var node = null;\n            if (data.type === \"table\") {\n              \n              node = new Node(false, props.app.getDiagramEngine(), `Entity${nodesCount + 1}`, \"rgb(0,192,255)\");\n              node.addInPort(false, \"Id\", true, false, false, false, false, PropertyType.INT);\n             node.addInPort(true, \"\", false, false, false, false, false, PropertyType.INT);\n             node.addInPort(true, \"1\", false, false, false, false, false, PropertyType.INT);\n\n\n              node.addListener({\n                selectionChanged: () => { console.log(\"selectionChanged\") }\n             });\n\n            } else {\n              node = new Node(true, props.app.getDiagramEngine(), \"Label \", \"rgb(192,255,0)\");\n            }\n\n            var points = props.app.getDiagramEngine().getRelativeMousePoint(event);\n            node.x = points.x;\n            node.y = points.y;\n            props.app\n              .getDiagramEngine()\n              .getDiagramModel()\n              .addNode(node);\n\n            forceUpdate();\n          }}\n          onDragOver={event => {\n            event.preventDefault();\n          }}\n\n          onClick={event => {\n            console.log('on cxlikc')\n            event.preventDefault();\n            refreshPopups();\n          }}\n          onDoubleClick={event => {\n            console.log('on dbl cxlikc')\n\n            console.log('WWWWif', props.app.getDiagramEngine().getDiagramModel().getSelectedItems());\n\n            console.log('WWWWif', props.app.getDiagramEngine().getDiagramModel().getSelectedItems()[0] instanceof Node);\n\n            event.preventDefault();\n            if (props.app.getDiagramEngine().getDiagramModel().getSelectedItems()[0] instanceof PointModel) {\n              setSelectedLink(props.app\n                .getDiagramEngine()\n                .getDiagramModel().getSelectedItems()[0].parent as Link);\n              setShowRelationDialog(true);\n              setSelectedNode(null);\n              \n            } else if (props.app.getDiagramEngine().getDiagramModel().getSelectedItems()[0] instanceof Node) {\n              console.log('WWWWel', props.app.getDiagramEngine().getDiagramModel().getSelectedItems());\n              refreshPopups();\n              setSelectedNode(props.app\n                .getDiagramEngine()\n                .getDiagramModel()\n                .getSelectedItems()[0] as Node);\n            }\n          }}\n        >\n          <DiagramWidget allowLooseLinks={true} deleteKeys={[46]} className=\"srd-demo-canvas\" diagramEngine={props.app.getDiagramEngine()} />\n        </div>\n        {selectedNode != null ? <NodeProperties selectedLink={selectedLink} selectedItem={selectedNode} diagramEngine={props.app.getDiagramEngine()} /> : null}\n        <GenerationHandler update={refreshPopups} isOpen={showDialog} serializeDiagram={props.app.getActiveDiagram().serializeDiagram()} />\n        <LoadFileHandler update={refreshPopups} isOpen={showLoadFileDialog} app={props.app} />\n        <SaveToFilePopup update={refreshPopups} diagramModel={props.app.getActiveDiagram()} isOpen={showSaveFileDialog} />\n        <SaveToJpegPopup update={refreshPopups} diagramModel={props.app.getActiveDiagram()} isOpen={showSaveJPEGDialog} />\n\n\n        <RelationPopup diagramModel={props.app.getActiveDiagram()} update={refreshPopups} isOpen={showRelationDialog} link={selectedLink} />\n      </div>\n    </div >\n  );\n}\n","\nimport * as React from \"react\";\nimport { Application } from \"./components/dragAndDrop/Application\";\nimport { AppView } from \"./AppView\";\nimport AppContext from \"./context/appContext/AppContext\";\nrequire('react-bootstrap-table-next/dist/react-bootstrap-table2.min.css');\nrequire(\"storm-react-diagrams/dist/style.min.css\");\n\nexport const App = () => {\n  const [application, setApplication] = React.useState(new Application());\n\n  const newApplication = () => {\n    setApplication(new Application());\n  }\n\n  return (\n    <AppContext.Provider\n      value={{\n        app: application,\n        newApplication: newApplication\n      }}\n    >\n      <AppView app={application}  />\n    </AppContext.Provider>\n  );\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import './styles/index.scss';\nimport './styles/App.scss';\nimport './styles/dragAndDrop.scss';\nimport './icons/micon/css/micon.min.css';\nimport 'react-bootstrap-table-next/dist/react-bootstrap-table2.min.css';\nimport { App } from './App';\nimport * as ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\nimport * as React from 'react';\n\n\n\nReactDOM.render(\n        <App />,\ndocument.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}