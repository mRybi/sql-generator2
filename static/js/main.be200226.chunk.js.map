{"version":3,"sources":["components/TrayWidget.tsx","components/TrayItemWidget.tsx","helpers/DemoCanvasWidget.tsx","infrastructure/models/ArrowLinkModel.ts","infrastructure/models/DefaultLabelModel.tsx","infrastructure/models/DefaultNodeModel.ts","infrastructure/models/DefaultLinkModel.ts","infrastructure/Toolkit.ts","infrastructure/models/DefaultPortModel.ts","infrastructure/models/ArrowPortModel.ts","components/TrayItemDiv.tsx","infrastructure/models/PropertyType.ts","components/grid/Grid.tsx","components/grid/Row.tsx","components/grid/Col.tsx","components/PropertyTable/PropertyTable.tsx","components/DarkInput.tsx","components/NodeProperties/NodeProperties.tsx","components/popups/ResultPopup/ResultPopup.tsx","handlers/GenerationHandler.tsx","components/popups/LoadFilePopup/LoadFilePopup.tsx","handlers/LoadFileHandler.tsx","components/popups/SaveToFilePopup/SaveToFilePopup.tsx","components/popups/SaveToJpegPopup/SaveToJpegPopup.tsx","components/popups/RealtionPopup/RelationPopup.tsx","components/BodyWidget.tsx","infrastructure/widgets/ArrowLinkWidget.tsx","infrastructure/factories/ArrowLinkFactory.tsx","infrastructure/widgets/DefaultPortLabelWidget.tsx","infrastructure/widgets/DefaultNodeWidget.tsx","infrastructure/factories/DefaultNodeFactory.tsx","infrastructure/widgets/DefaultLabelWidget.tsx","infrastructure/factories/DefaultLabelFactory.tsx","infrastructure/factories/DefaultPortFactory.tsx","infrastructure/widgets/DefaultLinkPointWidget.tsx","infrastructure/widgets/DefaultLinkSegmentWidget.tsx","infrastructure/widgets/DefaultLinkWidget.tsx","infrastructure/factories/DefaultLinkFactory.tsx","infrastructure/widgets/CustomLabelWidget.tsx","infrastructure/factories/CustomLabelFactory.tsx","infrastructure/factories/ArrowPortFactory.tsx","components/Application.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["S","styled","div","TrayWidget","Tray","this","props","children","React","p","color","TrayItemWidget","draggable","onDragStart","event","dataTransfer","setData","JSON","stringify","model","name","Container","background","DemoCanvasWidget","ArrowLinkModel","options","type","width","selectedColor","curvyness","DefaultLinkModel","DefaultLabelModel","offsetY","label","data","LabelModel","DefaultNodeModel","isLabel","portsIn","lookupTable","clone","portsOut","port","getOptions","in","indexOf","push","_","portsInOrder","id","getPortFromID","NodeModel","withPoint","addLabel","point","PointModel","link","setPosition","position","x","y","addPoint","relName","properties","alignment","PortModelAlignment","RIGHT","LEFT","TOP","points","length","curve","BezierCurve","setSource","getFirstPoint","getPosition","setTarget","getLastPoint","setSourceControl","setTargetControl","sourcePort","getSourceControl","translate","calculateControlOffset","getSourcePort","targetPort","getTargetControl","getTargetPort","getSVGCurve","relPorts","getPorts","Object","values","map","a","propertyType","isPrimaryKey","isNotNull","isAutoincremented","isUnique","propertiesNode","forEach","rel","addPort","DefaultPortModel","labelOb","setLabel","fireEvent","LinkModel","Toolkit","TESTING","TESTING_UID","replace","c","r","Math","random","toString","element","selector","document","body","closest","logic","isNamePort","isForeignKey","isPartialKey","fkPortId","alignemnt","UID","links","factory","createLinkModel","setSourcePort","setTargetPort","removeMiddlePoints","getParent","recursiveRelation","generateModel","PortModel","AdvancedPortModel","thisParent","portNode","portNodePorts","thisParentPorts","czyMaPortZPKjakoFk","keys","find","czyMaPortZPKjakoFk2","pk","marginTop","isSelected","css","isDisabled","PropertyType","TrayItemDiv","Grid","style","className","buildClassNameString","Row","flex","Col","onDoubleClick","size","config","pull","offset","order","hidden","buildGridColConfigClassNames","sm","md","lg","xl","xxl","xxxl","PropertyTable","useState","updatedItem","setUpdatedItem","defaultName","forceUpdate","setValue","value","useForceUpdate","useMemo","selectedItem","handleChangePK","row","persist","ports","console","log","clearPartialKeys","columns","key","dataField","text","formatter","cellContent","defaultValue","onChange","allPorts","toLowerCase","trim","includes","target","relView","relationAtributes","attString","getLabels","relationName","handleChangePortLabel","paddingLeft","list","handleChangepPropType","obj","checked","handleChangeFK","handleChangePartialKey","disabled","handleChangeNull","handleChangeAutoInc","handleChangeUnique","onClick","removePort","filter","getID","labels","oldLabel","slice","portsTable","cols","col","isLogic","keyField","bordered","AddNewAtributeButton","newPortNumber","addNewPort","input","fontSize","DarkInput","Input","NodeProperties","setDefaultName","setName","showInput","setShowInput","setLocked","handleNameChange","diagramEngine","getModel","getNodes","node","height","wordBreak","update","ResultPopup","dbName","setDbName","mySQLView","setmySQLView","formatedMSSQL","mssqlString","sqlFormatter","format","language","indent","formatedMySQL","mysqlString","modal","closeOnDocumentClick","open","isOpen","closeOnEscape","marginRight","generateScript","readOnly","contentEditable","blob","Blob","FileSaver","saveAs","GenerationHandler","sqlString","setSqlString","setMySqlString","useEffect","serDiagram","serializeDiagram","dNodes","nodes","dLinks","diagramJson","diagram","axios","post","SerializedModel","DatabaseName","RelationType","isUml","response","responseMy","status","errorMessage","LoadFilePopup","fileReader","fileContent","setFileContent","handleFileRead","e","content","result","onClose","files","FileReader","onloadend","readAsText","accept","loadDiagram","LoadFileHandler","engine","app","getDiagramEngine","parse","setIsUml","consceptual","DiagramModel","conceptualDiagram","deserializeModel","getLinks","splice","loadConceptualModel","setIsLogic","logicalDiagram","loadLogicModel","repaintCanvas","error","SaveToFilePopup","fileName","setFileName","diagramModel","serialize","secondModel","getActiveNodeLayer","SaveToJpegPopup","domtoimage","toJpeg","getElementById","quality","then","dataUrl","createElement","download","href","click","RelationPopup","left","setLeft","right","setRight","setRelationAtributes","relationNameOnly","setRelationNameOnly","leftLabel","rightLabel","handleRelationNameChenge","getPoints","index","remove","sourceP","targetP","removeLink","renderOptionPicker","side","GridItem","newSourceP","newTargetP","addLink","GridContainer","margin","span","BodyWidget","showDialog","setShowDialog","showRelationDialog","setShowRelationDialog","showLoadFileDialog","setShowLoadFileDialog","showSaveFileDialog","setSaveFileDialog","showSaveJPEGDialog","setSaveJPEGDialog","showSaveOptions","setSaveOptions","selectedNode","setSelectedNode","selectedLink","setSelectedLink","isLogicModel","setIsLogicModel","changeRelation","temp","substring","temp2","refreshPopups","Body","Header","Content","DropdownIcon","setConceptualModel","setLogicModel","Layer","onDrop","getData","names","nodesCount","newNodeName","getRelativeMousePoint","addNode","onDragOver","preventDefault","ctrlKey","getSelectedEntities","getActiveDiagram","getLogicDiagram","CustomLinkArrowWidget","previousPoint","setSelected","angle","atan2","PI","transform","fill","onMouseLeave","onMouseEnter","data-id","data-linkid","getLink","ArrowLinkWidget","colorSelected","paths","refPaths","j","generateLink","LinkWidget","generateLinePath","onMouseDown","addPointToLink","generateArrow","i","generatePoint","data-default-link-test","testName","DefaultLinkWidget","ArrowLinkFactory","DefaultLinkFactory","PortItem","DefaultPortLabel","portJSX","Port","PortLabel","PrimaryKeyIcon","NamedPort","PortContainer","HiddenPort","selected","DefaultNodeWidget","generatePort","portsJSX","namedPortsJSX","notNamedPortsJSX","Node","data-default-node-name","Title","NamedPortLeft","TitleName","NamedPortRight","Ports","PortsContainer","DefaultNodeFactory","AbstractReactFactory","DefaultLabelWidget","Label","DefaultLabelFactory","DefaultPortFactory","AbstractModelFactory","PointTop","circle","DefaultLinkPointWidget","state","cx","cy","setState","opacity","DefaultLinkSegmentWidget","Bottom","generateLinkSegment","path","ref","forwardRef","Top","strokeLinecap","onSelection","extras","strokeOpacity","strokeWidth","onContextMenu","isLocked","setRenderedPaths","current","shiftKey","getMaxNumberPointsPerLink","stopPropagation","getActionEventBus","fireAction","extraProps","getFactoryForLink","getSVGPath","Keyframes","keyframes","Path","stroke","d","CustomLabelWidget","CustomLabelFactory","ArrowPortFactory","Application","createEngine","getNodeFactories","registerFactory","getLabelFactories","getPortFactories","getLinkFactories","getStateMachine","getCurrentState","DefaultDiagramState","dragNewLink","allowLooseLinks","newModel","activeModel","logicModel","setModel","concNodes","k","nodePorts","logicPort","nodesWithoutPK","n","priorityLinks","sourceNode","targetNode","priom2mLinks","sourceLabel","targetLabel","priosourceLinks","priotargetLinks","priooneToOneLinks","convertTargetPorts","convertSourceLinks","convertM2MLink","concLinks","m2mLinks","sourceLinks","targetLinks","oneToOneLinks","activeModelCopy","logicNodes","sourceNodeId","targetNodeId","relNode","sourceNodePorts","sourceNodePKPort","targetNodePorts","targetNodePKPort","targetNodePrimaryKeysPorts","sourceNodePrimaryKeysPorts","node2","targetP2","sourceP2","link2","addAll","tNode","Boolean","window","location","hostname","match","ReactDOM","render","App","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.be200226.chunk.js","sourcesContent":["import * as React from \"react\";\nimport styled from \"@emotion/styled\";\n\nnamespace S {\n  export const Tray = styled.div`\n  min-width: 200px;\n  background: rgb(20, 20, 20);\n  flex-grow: 0;\n  flex-shrink: 0;\n`;\n}\n\nexport class TrayWidget extends React.Component {\n  render() {\n    return <S.Tray>{this.props.children}</S.Tray>;\n  }\n}\n","import * as React from \"react\";\nimport styled from \"@emotion/styled\";\n\nexport interface TrayItemWidgetProps {\n  model: any;\n  color: string;\n  name: string;\n}\nnamespace S {\n  export const Tray = styled.div<{ color: string }>`\n  color: white;\n  font-family: Helvetica, Arial;\n  padding: 5px;\n  margin: 0px 10px;\n  border: solid 1px ${(p) => p.color};\n  border-radius: 5px;\n  margin-bottom: 2px;\n  cursor: pointer;\n`;\n}\n\nexport class TrayItemWidget extends React.Component<TrayItemWidgetProps> {\n  render() {\n    return (\n      <S.Tray\n        color={this.props.color}\n        draggable={true}\n        onDragStart={(event) => {\n          event.dataTransfer.setData(\n            \"storm-diagram-node\",\n            JSON.stringify(this.props.model)\n          );\n        }}\n      >\n        {this.props.name}\n      </S.Tray>\n    );\n  }\n}\n","import * as React from \"react\";\nimport styled from \"@emotion/styled\";\n\nexport interface DemoCanvasWidgetProps {\n  color?: string;\n  background?: string;\n}\n\nexport const Container = styled.div<{ color: string; background: string }>`\n  height: 100%;\n  background-color: ${(p) => p.background};\n  background-size: 50px 50px;\n  display: flex;\n  > * {\n    height: 100%;\n    min-height: 100%;\n    width: 100%;\n  }\n  background-image: linear-gradient(\n      0deg,\n      transparent 24%,\n      ${(p) => p.color} 25%,\n      ${(p) => p.color} 26%,\n      transparent 27%,\n      transparent 74%,\n      ${(p) => p.color} 75%,\n      ${(p) => p.color} 76%,\n      transparent 77%,\n      transparent\n    ),\n    linear-gradient(\n      90deg,\n      transparent 24%,\n      ${(p) => p.color} 25%,\n      ${(p) => p.color} 26%,\n      transparent 27%,\n      transparent 74%,\n      ${(p) => p.color} 75%,\n      ${(p) => p.color} 76%,\n      transparent 77%,\n      transparent\n    );\n`;\n\nexport class DemoCanvasWidget extends React.Component<DemoCanvasWidgetProps> {\n  render() {\n    return (\n      <Container\n        background={this.props.background || \"rgb(60, 60, 60)\"}\n        color={this.props.color || \"rgba(255,255,255, 0.05)\"}\n      >\n        {this.props.children}\n      </Container>\n    );\n  }\n}\n","import { DefaultLinkModelOptions } from \"./DefaultLinkModel\";\nimport { DefaultLinkModel } from \"@projectstorm/react-diagrams\";\n\nexport class ArrowLinkModel extends DefaultLinkModel {\n  constructor(options: DefaultLinkModelOptions = {}) {\n    super({\n      type: \"arrow\",\n      width: options.width || 3,\n      color: options.color || \"gray\",\n      selectedColor: options.selectedColor || \"rgb(0,192,255)\",\n      curvyness: 0,\n      ...options,\n    });\n    \n    \n  }\n}\n","import {\n  LabelModel,\n  LabelModelGenerics,\n  LabelModelOptions,\n} from \"@projectstorm/react-diagrams-core\";\nimport { DeserializeEvent } from \"@projectstorm/react-canvas-core\";\n\nexport interface DefaultLabelModelOptions extends LabelModelOptions {\n  label?: string;\n}\n\nexport interface DefaultLabelModelGenerics extends LabelModelGenerics {\n  OPTIONS: DefaultLabelModelOptions;\n}\n\nexport class DefaultLabelModel extends LabelModel<DefaultLabelModelGenerics> {\n  constructor(options: DefaultLabelModelOptions = {}) {\n    super({\n      offsetY: options.offsetY == null ? -23 : options.offsetY,\n      type: \"default\",\n      ...options,\n    });\n  }\n\n  setLabel(label: string) {\n    this.options.label = label;\n  }\n\n  deserialize(event: DeserializeEvent<this>) {\n    super.deserialize(event);\n    this.options.label = event.data.label;\n  }\n\n  serialize() {\n    return {\n      ...super.serialize(),\n      label: this.options.label,\n    };\n  }\n}\n","import * as _ from \"lodash\";\nimport { DefaultPortModel } from \"../models/DefaultPortModel\";\nimport {\n  NodeModel,\n  NodeModelGenerics,\n} from \"@projectstorm/react-diagrams-core\";\nimport {\n  BasePositionModelOptions,\n  DeserializeEvent,\n} from \"@projectstorm/react-canvas-core\";\n\nexport interface DefaultNodeModelOptions extends BasePositionModelOptions {\n  name?: string;\n  color?: string;\n}\n\nexport interface DefaultNodeModelGenerics extends NodeModelGenerics {\n  OPTIONS: DefaultNodeModelOptions;\n}\n\nexport class DefaultNodeModel extends NodeModel<DefaultNodeModelGenerics> {\n  isLabel: boolean;\n\n  protected portsIn: DefaultPortModel[];\n\n  constructor(isLabel: boolean, name: string, color: string) {\n    super({\n      type: \"default\",\n      name,\n      color,\n    });\n    this.isLabel = isLabel;\n    this.portsIn = [];\n  }\n\n  doClone(lookupTable: {}, clone: any): void {\n    clone.portsIn = [];\n    clone.portsOut = [];\n    super.doClone(lookupTable, clone);\n  }\n\n  removePort<T extends DefaultPortModel>(port: T): void {\n    super.removePort(port);\n  }\n\n  addPort<T extends DefaultPortModel>(port: T): T {\n    super.addPort(port);\n    if (port.getOptions().in) {\n      if (this.portsIn.indexOf(port) === -1) {\n        this.portsIn.push(port);\n      }\n    }\n    return port;\n  }\n\n  deserialize(event: DeserializeEvent<this>) {\n    super.deserialize(event);\n    this.options.name = event.data.name;\n    this.options.color = event.data.color;\n    this.portsIn = _.map(event.data.portsInOrder, (id) => {\n      return this.getPortFromID(id);\n    }) as DefaultPortModel[];\n    this.isLabel = event.data.isLabel;\n  }\n\n  serialize(): any {\n    return {\n      ...super.serialize(),\n      name: this.options.name,\n      color: this.options.color,\n      isLabel: this.isLabel\n    };\n  }\n\n  getInPorts(): DefaultPortModel[] {\n    return this.portsIn;\n  }\n}\n","import {\n  LabelModel,\n  LinkModel,\n  LinkModelGenerics,\n  LinkModelListener,\n  PortModel,\n  PortModelAlignment,\n  PointModel,\n} from \"@projectstorm/react-diagrams-core\";\nimport { DefaultLabelModel } from \"../models/DefaultLabelModel\";\nimport { BezierCurve } from \"@projectstorm/geometry\";\nimport {\n  BaseEntityEvent,\n  BaseModelOptions,\n  DeserializeEvent,\n} from \"@projectstorm/react-canvas-core\";\nimport { DefaultNodeModel } from \"./DefaultNodeModel\";\nimport { PropertyType } from \"./PropertyType\";\nimport { DefaultPortModel } from \"./DefaultPortModel\";\n\nexport interface DefaultLinkModelListener extends LinkModelListener {\n  colorChanged?(\n    event: BaseEntityEvent<DefaultLinkModel> & { color: null | string }\n  ): void;\n\n  widthChanged?(\n    event: BaseEntityEvent<DefaultLinkModel> & { width: 0 | number }\n  ): void;\n}\n\nexport interface LinkWithPointOptions extends BaseModelOptions {\n  position: {x: number, y: number};\n}\n\n\nexport interface DefaultLinkModelOptions extends BaseModelOptions {\n  width?: number;\n  color?: string;\n  selectedColor?: string;\n  curvyness?: number;\n  type?: string;\n  testName?: string;\n}\n\nexport interface DefaultLinkModelGenerics extends LinkModelGenerics {\n  LISTENER: DefaultLinkModelListener;\n  OPTIONS: DefaultLinkModelOptions;\n}\n\nclass RelationProperties {\n  label: string;\n  isPrimaryKey: boolean;\n  isAutoincremented: boolean;\n  isNotNull: boolean;\n  isUnique: boolean;\n  propertyType: PropertyType;\n}\n\nexport class DefaultLinkModel extends LinkModel<DefaultLinkModelGenerics> {\n  properties: DefaultNodeModel;\n  relName: string;\n\n  constructor(options: DefaultLinkModelOptions = {}, withPoint?: LinkWithPointOptions) {\n    super({\n      type: \"default\",\n      width: options.width || 3,\n      color: options.color || \"gray\",\n      selectedColor: options.selectedColor || \"rgb(0,192,255)\",\n      curvyness: 0,\n      ...options,\n    });\n\n    this.addLabel(\"0,N\");\n    this.addLabel(\"relation name\\n\");\n    this.addLabel(\"0,N\");\n\n\n    if(withPoint) {\n      let point = new PointModel({link: this});\n      point.setPosition(withPoint.position.x ,withPoint.position.y)\n      this.addPoint(point);\n    }\n\n\n    this.relName = \"relation name\";\n\n    this.properties = new DefaultNodeModel(false, \"relNode\", \"rgb(0,192,255)\");\n  }\n\n  calculateControlOffset(port: PortModel): [number, number] {\n    if (port.getOptions().alignment === PortModelAlignment.RIGHT) {\n      return [this.options.curvyness, 0];\n    } else if (port.getOptions().alignment === PortModelAlignment.LEFT) {\n      return [-this.options.curvyness, 0];\n    } else if (port.getOptions().alignment === PortModelAlignment.TOP) {\n      return [0, -this.options.curvyness];\n    }\n    return [0, this.options.curvyness];\n  }\n\n  getSVGPath(): string {\n\n    if (this.points.length === 2) {\n      const curve = new BezierCurve();\n      curve.setSource(this.getFirstPoint().getPosition());\n      curve.setTarget(this.getLastPoint().getPosition());\n      curve.setSourceControl(this.getFirstPoint().getPosition().clone());\n      curve.setTargetControl(this.getLastPoint().getPosition().clone());\n\n      if (this.sourcePort) {\n        curve\n          .getSourceControl()\n          .translate(...this.calculateControlOffset(this.getSourcePort()));\n      }\n\n      if (this.targetPort) {\n        curve\n          .getTargetControl()\n          .translate(...this.calculateControlOffset(this.getTargetPort()));\n      }\n      return curve.getSVGCurve();\n    }\n  }\n\n  serialize() {\n    let relPorts =\n      this.properties &&\n      this.properties.getPorts() &&\n      Object.values(this.properties.getPorts());\n    let properties =\n      relPorts &&\n      relPorts.map((a: DefaultPortModel) => {\n        return {\n          label: a.label,\n          propertyType: a.propertyType,\n          isPrimaryKey: a.isPrimaryKey,\n          isNotNull: a.isNotNull,\n          isAutoincremented: a.isAutoincremented,\n          isUnique: a.isUnique,\n        };\n      });\n\n    return {\n      ...super.serialize(),\n      width: this.options.width,\n      color: this.options.color,\n      curvyness: this.options.curvyness,\n      selectedColor: this.options.selectedColor,\n      relName: this.relName,\n      properties,\n    };\n  }\n\n  deserialize(event: DeserializeEvent<this>) {\n    let propertiesNode = new DefaultNodeModel(\n      false,\n      \"relNode\",\n      \"rgb(0,192,255)\"\n    );\n    event.data.properties.forEach((rel: RelationProperties) => {\n      propertiesNode.addPort(\n        new DefaultPortModel(\n          false,\n          rel.label,\n          false,\n          rel.isPrimaryKey,\n          false,\n          false,\n          rel.isNotNull,\n          rel.isAutoincremented,\n          rel.isUnique,\n          rel.propertyType\n        )\n      );\n    });\n\n    super.deserialize(event);\n    this.options.color = event.data.color;\n    this.options.width = event.data.width;\n    this.options.curvyness = event.data.curvyness;\n    this.options.selectedColor = event.data.selectedColor;\n    this.properties = propertiesNode;\n    this.relName = event.data.relName;\n  }\n\n  addLabel(label: LabelModel | string) {\n    if (label instanceof LabelModel) {\n      return super.addLabel(label);\n    }\n    let labelOb = new DefaultLabelModel();\n    labelOb.setLabel(label);\n    return super.addLabel(labelOb);\n  }\n\n  setWidth(width: number) {\n    this.options.width = width;\n    this.fireEvent({ width }, \"widthChanged\");\n  }\n\n  setColor(color: string) {\n    this.options.color = color;\n    this.fireEvent({ color }, \"colorChanged\");\n  }\n}\n","import * as closest from \"closest\";\n\nexport class Toolkit {\n  static TESTING: boolean = false;\n  static TESTING_UID = 0;\n\n  /**\n   * Generats a unique ID (thanks Stack overflow :3)\n   * @returns {String}\n   */\n  public static UID(): string {\n    if (Toolkit.TESTING) {\n      Toolkit.TESTING_UID++;\n      return `${Toolkit.TESTING_UID}`;\n    }\n    return \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, (c) => {\n      const r = (Math.random() * 16) | 0;\n      const v = c === \"x\" ? r : (r & 0x3) | 0x8;\n      return v.toString(16);\n    });\n  }\n\n  /**\n   * Finds the closest element as a polyfill\n   */\n  public static closest(element: Element, selector: string) {\n    if (document.body.closest) {\n      return element.closest(selector);\n    }\n    return closest(element, selector);\n  }\n}\n","import {\n  LinkModel,\n  PortModel,\n  PortModelAlignment,\n  PortModelGenerics,\n  PortModelOptions,\n  PointModel,\n} from \"@projectstorm/react-diagrams-core\";\nimport { DefaultLinkModel } from \"../models/DefaultLinkModel\";\nimport { AbstractModelFactory } from \"@projectstorm/react-canvas-core\";\nimport { Toolkit } from \"../Toolkit\";\n\nexport interface DefaultPortModelOptions extends PortModelOptions {\n  label?: string;\n  in?: boolean;\n}\n\nexport interface DefaultPortModelGenerics extends PortModelGenerics {\n  OPTIONS: DefaultPortModelOptions;\n}\n\nexport class DefaultPortModel extends PortModel<DefaultPortModelGenerics> {\n  in: boolean;\n  isNamePort: boolean;\n  label: string;\n  isPrimaryKey: boolean;\n  isPartialKey: boolean;\n  isForeignKey: boolean;\n  isAutoincremented: boolean;\n  isNotNull: boolean;\n  isUnique: boolean;\n  propertyType: string;\n  fkPortId: string;\n\n  constructor(\n    logic: boolean,\n    name: string,\n    isNamePort: boolean,\n    isPrimaryKey?: boolean,\n    isForeignKey?: boolean,\n    isPartialKey?: boolean,\n    isNotNull?: boolean,\n    isAutoincremented?: boolean,\n    isUnique?: boolean,\n    propertyType?: string,\n    id?: string,\n    fkPortId?: string,\n    alignemnt?: PortModelAlignment\n  ) {\n    super({\n      id: id || Toolkit.UID(),\n      in: true,\n      name,\n      label: name,\n      alignment: alignemnt,\n      type: logic ? \"arrow\" : \"default\",\n    });\n\n    this.label = name;\n    this.isNamePort = isNamePort;\n    this.links = {};\n\n    this.isPrimaryKey = isPrimaryKey;\n    this.isForeignKey = isForeignKey;\n    this.isPartialKey = isPartialKey;\n\n    this.isNotNull = isNotNull;\n    this.isUnique = isUnique;\n    this.isAutoincremented = isAutoincremented;\n\n    this.propertyType = propertyType;\n    this.fkPortId = fkPortId;\n  }\n\n  deserialize(event: any) {\n    super.deserialize(event);\n    this.options.in = event.data.in;\n    this.options.label = event.data.label;\n\n    this.label = event.data.label;\n    this.isNamePort = event.data.isNamePort;\n\n    this.isPrimaryKey = event.data.isPrimaryKey;\n    this.isPartialKey = event.data.isPartialKey;\n\n    this.isForeignKey = event.data.isForeignKey;\n    this.isNotNull = event.data.isNotNull;\n    this.isUnique = event.data.isUnique;\n    this.isAutoincremented = event.data.isAutoincremented;\n    this.propertyType = event.data.propertyType;\n    this.fkPortId = event.data.fkPortId;\n  }\n\n  serialize() {\n    return {\n      ...super.serialize(),\n      in: this.in,\n      label: this.label,\n      isNamePort: this.isNamePort,\n      isPrimaryKey: this.isPrimaryKey,\n      isPartialKey: this.isPartialKey,\n\n      isForeignKey: this.isForeignKey,\n      isNotNull: this.isNotNull,\n      isUnique: this.isUnique,\n      isAutoincremented: this.isAutoincremented,\n      propertyType: this.propertyType,\n      fkPortId: this.fkPortId,\n    };\n  }\n\n  link<T extends LinkModel>(\n    port: PortModel,\n    factory?: AbstractModelFactory<T>\n  ): T {\n    let link = this.createLinkModel(factory);\n    link.setSourcePort(this);\n    link.setTargetPort(port);\n    link.removeMiddlePoints()\n    return link as T;\n  }\n\n  canLinkToPort(port: PortModel): boolean {\n    if (port === this) {\n      return false;\n    }\n    if( port.getParent() === this.getParent()) {\n      this.recursiveRelation(port);\n    }\n\n    return true;\n  }\n\n  createLinkModel(factory?: AbstractModelFactory<LinkModel>): LinkModel {\n    let link = super.createLinkModel();\n    if (!link && factory) {\n      return factory.generateModel({});\n    }\n    return link || new DefaultLinkModel({}, {position: {x: this.getPosition().x + 40, y: this.getPosition().y - 100 }});\n  }\n\n  recursiveRelation(port: PortModel) {\n    this.link(port);\n\n    return false;\n  }\n}\n","import {\n  LinkModel,\n  LinkModelGenerics,\n  PortModel,\n  PortModelAlignment,\n} from \"@projectstorm/react-diagrams\";\nimport { ArrowLinkModel } from \"./ArrowLinkModel\";\nimport { DefaultPortModel } from \"./DefaultPortModel\";\nimport { DefaultNodeModel } from \"./DefaultNodeModel\";\nimport { Toolkit } from \"../Toolkit\";\nimport { AbstractModelFactory } from \"@projectstorm/react-canvas-core\";\n\nexport class AdvancedPortModel extends DefaultPortModel {\n  constructor(\n    name: string,\n    isNamePort: boolean,\n    isPrimaryKey?: boolean,\n    isForeignKey?: boolean,\n    isPartialKey?: boolean,\n    isNotNull?: boolean,\n    isAutoincremented?: boolean,\n    isUnique?: boolean,\n    propertyType?: string,\n    id?: string,\n    fkPortId?: string,\n    alignemnt?: PortModelAlignment\n  ) {\n    super(\n      true,\n      name,\n      isNamePort,\n      isPrimaryKey,\n      isForeignKey,\n      isPartialKey,\n      isNotNull,\n      isAutoincremented,\n      isUnique,\n      propertyType,\n      id,\n      fkPortId,\n      alignemnt\n    );\n  }\n\n  link<T extends LinkModel>(\n    port: PortModel,\n    \n    factory?: AbstractModelFactory<T>\n  ): T {\n    let link = this.createLinkModel();\n    link.setSourcePort(port);\n    link.setTargetPort(this);\n    return link as T;\n  }\n\n  canLinkToPort(port: PortModel): boolean {\n    if (port === this) {\n      return false;\n    }\n\n    let thisParent = this.getParent() as DefaultNodeModel;\n    let portNode = port.getParent() as DefaultNodeModel;\n\n    let portNodePorts = portNode.getPorts() as {\n      [s: string]: AdvancedPortModel;\n    };\n    let thisParentPorts = thisParent.getPorts() as {\n      [s: string]: AdvancedPortModel;\n    };\n\n    let czyMaPortZPKjakoFk = Object.keys(thisParentPorts).find(\n      (id) => thisParentPorts[id].fkPortId === portNode.getOptions().id\n    );\n    let czyMaPortZPKjakoFk2 = Object.keys(portNodePorts).find(\n      (id) => portNodePorts[id].fkPortId === thisParent.getOptions().id\n    );\n\n    let pk =\n      Object.keys(thisParentPorts).find(\n        (id) => thisParentPorts[id].isPrimaryKey\n      ) || \"Id\";\n\n    if (!czyMaPortZPKjakoFk && !czyMaPortZPKjakoFk2) {\n      if (pk) {\n        portNode.addPort(\n          new AdvancedPortModel(\n            thisParent.getOptions().name +\n              thisParentPorts[pk].getOptions().name,\n            false,\n            false,\n            true,\n            true,\n            true,\n            false,\n            false,\n            \"INT\",\n            Toolkit.UID(),\n            thisParent.getOptions().id\n          )\n        );\n      } else {\n        portNode.addPort(\n          new AdvancedPortModel(\n            thisParent.getOptions().name + \"Id\",\n            false,\n            false,\n            true,\n            true,\n            true,\n            false,\n            false,\n            \"INT\",\n            Toolkit.UID(),\n            thisParent.getOptions().id\n          )\n        );\n      }\n    }\n\n    return true;\n  }\n\n  createLinkModel(): ArrowLinkModel | LinkModel<LinkModelGenerics> {\n    return new ArrowLinkModel();\n  }\n}\n","import * as React from \"react\";\nimport styled from \"@emotion/styled\";\nimport { css } from \"@emotion/core\";\n\nexport interface TrayItemDivProps {\n  color: string;\n  name?: string;\n  onClick: () => void;\n  marginTop?: string;\n  isSelected?: boolean;\n  isDisabled?: boolean;\n}\nnamespace S {\n  export const Tray = styled.div<{\n    color: string;\n    marginTop: string;\n    isSelected: boolean;\n    isDisabled: boolean;\n  }>`\n    color: white;\n    font-family: Helvetica, Arial;\n    padding: 5px;\n    margin: 0px 10px;\n    border: solid 1px ${({color}) => color};\n    border-radius: 5px;\n    margin-bottom: 2px;\n    cursor: pointer;\n    margin-top: ${({marginTop}) => marginTop};\n\n    display: flex;\n    justify-content: space-between;\n  \n    ${({isSelected}) =>\n      isSelected &&\n      css`\n        background-color: black;\n        border-width: 4px !important;\n      `}\n  \n    ${({isDisabled}) =>\n      isDisabled &&\n      css`\n        cursor: not-allowed !important;\n      `}\n  `;\n}\n\nexport class TrayItemDiv extends React.Component<TrayItemDivProps> {\n  render() {\n    let { isDisabled,isSelected, marginTop, color, name } = this.props;\n\n    return (\n      <S.Tray\n        {...this.props}\n        isDisabled={isDisabled}\n        isSelected={isSelected}\n        marginTop={marginTop}\n        color={color}\n      >\n        {this.props.children ?? name}\n      </S.Tray>\n    );\n  }\n}\n","export enum PropertyType {\n  BIT = \"BIT\",\n  TINYINT = \"TINYINT\",\n  SMALLINT = \"SMALLINT\",\n  INT = \"INT\",\n  BIGINT = \"BIGINT\",\n  \"DECIMAL()\" = \"DECIMAL()\",\n  \"NUMERIC()\" = \"NUMERIC()\",\n  \"FLOAT()\" = \"FLOAT()\",\n  REAL = \"REAL\",\n  DATE = \"DATE\",\n  TIME = \"TIME\",\n  DATETIME = \"DATETIME\",\n  TIMESTAMP = \"TIMESTAMP\",\n  YEAR = \"YEAR\",\n  \"CHAR()\" = \"CHAR()\",\n  \"VARCHAR()\" = \"VARCHAR()\",\n  TEXT = \"TEXT\",\n  \"NCHAR()\" = \"NCHAR()\",\n  \"NVARCHAR()\" = \"NVARCHAR()\",\n  NTEXT = \"NTEXT\",\n  \"BINARY()\" = \"BINARY()\",\n  \"VARBINARY()\" = \"VARBINARY()\",\n  IMAGE = \"IMAGE\",\n  CLOB = \"CLOB\",\n  BLOB = \"BLOB\",\n  XML = \"XML\",\n  JSON = \"JSON\",\n  MONEY = \"MONEY\",\n}\n","import * as React from \"react\";\n\nimport { GridProps } from \"./\";\n\nexport default class Grid extends React.Component<GridProps> {\n  render() {\n    return (\n      <div style={this.props.style} className={this.buildClassNameString()}>\n        {this.props.children}\n      </div>\n    );\n  }\n\n  buildClassNameString() {\n    let className = \"ms-Grid\";\n\n    if (this.props.className != null) {\n      className += ` ${this.props.className}`;\n    }\n\n    return className;\n  }\n}\n","import * as React from \"react\";\n\nimport { GridRowProps } from \"./\";\n\nexport default class Row extends React.Component<GridRowProps> {\n  render() {\n    return (\n      <div className={this.buildClassNameString()}>{this.props.children}</div>\n    );\n  }\n\n  buildClassNameString() {\n    let className = \"ms-Grid-row\";\n\n    if (this.props.flex) {\n      className += \" grid-row-flex\";\n    }\n\n    if (this.props.className != null) {\n      className += ` ${this.props.className}`;\n    }\n\n    return className;\n  }\n}\n","import * as React from \"react\";\n\nimport { GridColProps, GridColConfigProp } from \"./\";\n\nexport default class Col extends React.Component<GridColProps> {\n  render() {\n    return (\n      <div\n        className={this.buildClassNameString()}\n        onDoubleClick={this.props.onDoubleClick}\n      >\n        {this.props.children}\n      </div>\n    );\n  }\n\n  buildGridColConfigClassNames(size: string, config: GridColConfigProp) {\n    if (config == null) return \"\";\n\n    let className = ` ms-${size}`;\n\n    if (typeof config === \"string\") {\n      className += config;\n    } else {\n      className += config.size;\n\n      if (config.pull != null) {\n        className += ` ms-${size}Pull${config.pull}`;\n      }\n\n      if (config.push != null) {\n        className += ` ms-${size}Push${config.push}`;\n      }\n\n      if (config.offset != null) {\n        className += ` ms-${size}Offset${config.offset}`;\n      }\n\n      if (config.order != null) {\n        className += ` grid-flex-order-${size}-${config.order}`;\n      }\n    }\n\n    return className;\n  }\n\n  buildClassNameString() {\n    let className = \"ms-Grid-col\";\n\n    if (this.props.className != null) {\n      className += ` ${this.props.className}`;\n    }\n\n    if (this.props.hidden != null) {\n      className += ` ms-hidden${this.props.hidden}`;\n    }\n\n    if (this.props.order != null) {\n      className += ` grid-flex-order-${this.props.order}`;\n    }\n\n    className += this.buildGridColConfigClassNames(\"sm\", this.props.sm);\n    className += this.buildGridColConfigClassNames(\"md\", this.props.md);\n    className += this.buildGridColConfigClassNames(\"lg\", this.props.lg);\n    className += this.buildGridColConfigClassNames(\"xl\", this.props.xl);\n    className += this.buildGridColConfigClassNames(\"xxl\", this.props.xxl);\n    className += this.buildGridColConfigClassNames(\"xxxl\", this.props.xxxl);\n\n    return className;\n  }\n}\n","import \"./PropertyTable.scss\";\nimport \"react-bootstrap-table-next/dist/react-bootstrap-table2.min.css\";\nimport React from \"react\";\nimport { PropertyType } from \"../../infrastructure/models/PropertyType\";\nimport { DefaultPortModel } from \"../../infrastructure/models/DefaultPortModel\";\nimport BootstrapTable from \"react-bootstrap-table-next\";\nimport { DefaultNodeModel } from \"../../infrastructure/models/DefaultNodeModel\";\nimport { DiagramEngine } from \"@projectstorm/react-diagrams\";\nimport { AdvancedPortModel } from \"../../infrastructure/models/ArrowPortModel\";\nimport styled from \"@emotion/styled\";\nimport { DarkInput } from \"../DarkInput\";\nimport { Toolkit } from \"../../infrastructure/Toolkit\";\nimport { DefaultLinkModel } from \"../../infrastructure/models/DefaultLinkModel\";\nimport { DefaultLabelModel } from \"../../infrastructure/models/DefaultLabelModel\";\n\nnamespace S {\n  export const AddNewAtributeButton = styled.p`\n    cursor: cell\n  `;\n}\n\nclass Props {\n  relationName?: string;\n  update: () => void;\n  selectedItem: DefaultNodeModel;\n  diagramEngine: DiagramEngine;\n  relView?: boolean;\n  link?: DefaultLinkModel;\n  isLogic: boolean;\n}\n\nexport function useForceUpdate() {\n  const [, setValue] = React.useState(0);\n  return () => setValue((value) => ++value);\n}\n\nexport const PropertyTable = (props: Props) => {\n  const [updatedItem, setUpdatedItem] = React.useState(null);\n  const [defaultName, setDefaultName] = React.useState('already exists');\n\n  const forceUpdate = useForceUpdate();\n\n  React.useMemo(() => {\n    setUpdatedItem(props.selectedItem);\n  }, [props.selectedItem]);\n\n  const clearPartialKeys = () => {\n    let ports =\n      updatedItem &&\n      updatedItem.ports &&\n      (updatedItem.ports as { [s: string]: DefaultPortModel });\n\n    Object.keys(ports).map((p) => console.log((ports[p].isPartialKey = false)));\n  };\n\n  const handleChangePK = (\n    event: React.ChangeEvent<HTMLInputElement>,\n    row: DefaultPortModel\n  ) => {\n    event.persist();\n    (updatedItem.getPortFromID(\n      row.getOptions().id\n    ) as DefaultPortModel).isPrimaryKey = !row.isPrimaryKey;\n\n    (updatedItem.getPortFromID(\n      row.getOptions().id\n    ) as DefaultPortModel).isNotNull = row.isPrimaryKey ? true : false;\n\n    (updatedItem.getPortFromID(\n      row.getOptions().id\n    ) as DefaultPortModel).isAutoincremented = row.isPrimaryKey ? true : false;\n\n    (updatedItem.getPortFromID(\n      row.getOptions().id\n    ) as DefaultPortModel).isUnique = row.isPrimaryKey ? true : false;\n\n    clearPartialKeys();\n    forceUpdate();\n  };\n\n  const handleChangeFK = (\n    event: React.ChangeEvent<HTMLInputElement>,\n    row: DefaultPortModel\n  ) => {\n    event.persist();\n    (updatedItem.getPortFromID(\n      row.getOptions().id\n    ) as DefaultPortModel).isForeignKey = !row.isForeignKey;\n\n    (updatedItem.getPortFromID(\n      row.getOptions().id\n    ) as DefaultPortModel).isNotNull = row.isForeignKey ? true : false;\n\n    forceUpdate();\n  };\n\n  const handleChangeNull = (\n    event: React.ChangeEvent<HTMLInputElement>,\n    row: DefaultPortModel\n  ) => {\n    event.persist();\n    (updatedItem.getPortFromID(\n      row.getOptions().id\n    ) as DefaultPortModel).isNotNull = !row.isNotNull;\n    forceUpdate();\n  };\n\n  const handleChangePartialKey = (\n    event: React.ChangeEvent<HTMLInputElement>,\n    row: DefaultPortModel\n  ) => {\n    event.persist();\n    (updatedItem.getPortFromID(\n      row.getOptions().id\n    ) as DefaultPortModel).isPartialKey = !row.isPartialKey;\n\n    (updatedItem.getPortFromID(\n      row.getOptions().id\n    ) as DefaultPortModel).isNotNull = row.isPartialKey ? true : false;\n    forceUpdate();\n  };\n\n  const handleChangeUnique = (\n    event: React.ChangeEvent<HTMLInputElement>,\n    row: DefaultPortModel\n  ) => {\n    event.persist();\n    (updatedItem.getPortFromID(\n      row.getOptions().id\n    ) as DefaultPortModel).isUnique = !row.isUnique;\n    forceUpdate();\n  };\n\n  const handleChangeAutoInc = (\n    event: React.ChangeEvent<HTMLInputElement>,\n    row: DefaultPortModel\n  ) => {\n    event.persist();\n    (updatedItem.getPortFromID(\n      row.getOptions().id\n    ) as DefaultPortModel).isAutoincremented = !row.isAutoincremented;\n    forceUpdate();\n  };\n\n  const handleChangepPropType = (\n    event: React.ChangeEvent<HTMLInputElement>,\n    row: DefaultPortModel\n  ) => {\n    event.persist();\n\n    (updatedItem.getPortFromID(\n      row.getOptions().id\n    ) as DefaultPortModel).propertyType = event.target.value;\n  };\n\n  const handleChangePortLabel = (\n    event: React.ChangeEvent<HTMLInputElement>,\n    row: DefaultPortModel\n  ) => {\n    event.persist();\n\n    let allPorts = props.selectedItem.getPorts() as {[s: string]: DefaultPortModel};\n\n    let names = Object.values(allPorts).map((port) =>\n      port.label.toLowerCase().trim()\n    );\n\n\n\n    names.includes(event.target.value.toLowerCase().trim())\n    ? ((updatedItem.getPortFromID(row.getOptions().id) as DefaultPortModel).label = defaultName)\n    : (updatedItem.getPortFromID(row.getOptions().id) as DefaultPortModel).label = event.target.value.trim();\n\n    // (updatedItem.getPortFromID(row.getOptions().id) as DefaultPortModel).label =\n    //   event.target.value;\n\n    if(props.relView) {\n      let relationAtributes = props.link.properties !== null && props.link.properties.getPorts() as {[s: string]: DefaultPortModel};\n      let attString = '';\n  \n      if(Object.keys(relationAtributes).length > 0) {\n        Object.keys(relationAtributes).map(id => attString += `${relationAtributes[id].label} ${relationAtributes[id].propertyType} \\n`);\n        \n  \n        let labels = props.link.getLabels() as DefaultLabelModel[];\n        labels[1].getOptions().label = `${props.relationName}\\n${attString}`;\n    \n      }\n    }\n  };\n\n  const addNewPort = (newPortNumber: number) => {\n    (updatedItem as DefaultNodeModel).addPort(\n      new AdvancedPortModel(\n        `new atribute ${newPortNumber}`,\n        false,\n        false,\n        false,\n        false,\n        false,\n        false,\n        false,\n        \"INT\",\n        Toolkit.UID()\n      )\n    );\n\n    if(props.relView) {\n      let {link} = props;\n      let labels = link.getLabels() as DefaultLabelModel[];\n      \n      labels[1].getOptions().label += `${`new atribute ${newPortNumber}`} INT \\n`;\n    }\n\n    forceUpdate();\n  };\n\n  const removePort = (port: DefaultPortModel) => {\n    console.log('port: ', port);\n    updatedItem.removePort(port);\n\n    if(props.link) {\n    console.log('linkports: ', props.link);\n\n      let relationAtributes = props.link.properties !== null && props.link.properties.getPorts() as {[s: string]: DefaultPortModel};\n      let attString = '';\n  \n      if(Object.keys(relationAtributes).length > 0) {\n        Object.keys(relationAtributes).filter(id => id !== port.getID()).map(id => attString += `${relationAtributes[id].label} ${relationAtributes[id].propertyType} \\n`);\n        \n        let labels = props.link.getLabels() as DefaultLabelModel[];\n        let oldLabel = labels[1].getOptions().label;\n        labels[1].getOptions().label = oldLabel.slice(0, oldLabel.indexOf('\\n'));\n        labels[1].getOptions().label += `\\n${attString}`;\n      }\n    }\n\n    forceUpdate();\n  };\n\n  const preparePropertyTypes = () => {\n    return Object.values(PropertyType).map((obj) => (\n      <option key={obj} value={obj}>\n        {obj}\n      </option>\n    ));\n  };\n\n  const columns: any[] = [\n    {\n      key: \"Property Name\",\n      dataField: \"label\",\n      text: \"Property Name\",\n      formatter: (cellContent: any, row: DefaultPortModel) => (\n        <div className=\"input\">\n          {/* Emotion test - plan is to replace all .scss styles with emotion styled components */}\n          {/* <DarkInput \n            type=\"text\" \n            defaultValue={row.label} \n            onChange={(event) => handleChangePortLabel(event, row)}\n          ></DarkInput> */}\n\n          <input\n            style={{ width: \"100px\" }}\n            className=\"darkInput\"\n            type=\"text\"\n            defaultValue={row.label}\n            onChange={(event) => handleChangePortLabel(event, row)}\n          ></input>\n        </div>\n      ),\n    },\n    {\n      style: { paddingLeft: 0 },\n      dataField: \"propertyType\",\n      text: \"Property Type\",\n      key: \"Property Type\",\n      formatter: (cellContent: any, row: DefaultPortModel) => (\n        <div className=\"input\">\n          <input\n            style={{ width: \"100px\" }}\n            type=\"text\"\n            list=\"types\"\n            className=\"darkInput\"\n            onChange={(event) => handleChangepPropType(event, row)}\n            defaultValue={row.propertyType}\n          />\n          <datalist id=\"types\">{preparePropertyTypes()}</datalist>\n        </div>\n      ),\n    },\n    {\n      dataField: \"isPrimaryKey\",\n      text: \"Is Primary Key\",\n      key: \"Is Primary Key\",\n      formatter: (cellContent: any, row: DefaultPortModel) => (\n        <div className=\"checkbox\">\n          <label>\n            <input\n              type=\"checkbox\"\n              checked={row.isPrimaryKey}\n              onChange={(event) => handleChangePK(event, row)}\n            />\n          </label>\n        </div>\n      ),\n    },\n    {\n      dataField: \"isForeignKey\",\n      text: \"Is Foreign Key\",\n      key: \"Is Foreign Key\",\n      formatter: (cellContent: any, row: DefaultPortModel) => (\n        <div className=\"checkbox\">\n          <label>\n            <input\n              type=\"checkbox\"\n              checked={row.isForeignKey}\n              onChange={(event) => handleChangeFK(event, row)}\n            />\n          </label>\n        </div>\n      ),\n    },\n    {\n      dataField: \"isPartialKey\",\n      text: \"Is Partial Key\",\n      key: \"Is Partial Key\",\n      formatter: (cellContent: any, row: DefaultPortModel) => (\n        <div className=\"checkbox\">\n          <label>\n            <input\n              type=\"checkbox\"\n              checked={row.isPartialKey}\n              onChange={(event) => handleChangePartialKey(event, row)}\n            />\n          </label>\n        </div>\n      ),\n    },\n    {\n      dataField: \"isNotNull\",\n      text: \"Not Null\",\n      key: \"Not Null\",\n      formatter: (cellContent: any, row: DefaultPortModel) => (\n        <div className=\"checkbox\">\n          <label>\n            <input\n              disabled={row.isPrimaryKey || row.isForeignKey}\n              type=\"checkbox\"\n              checked={row.isNotNull}\n              onChange={(event) => handleChangeNull(event, row)}\n            />\n          </label>\n        </div>\n      ),\n    },\n    {\n      dataField: \"isAutoincremented\",\n      text: \"Is Auto Incremented\",\n      key: \"Is Auto Incremented\",\n      formatter: (cellContent: any, row: DefaultPortModel) => (\n        <div className=\"checkbox\">\n          <label>\n            <input\n              disabled={row.isPrimaryKey}\n              type=\"checkbox\"\n              checked={row.isAutoincremented}\n              onChange={(event) => handleChangeAutoInc(event, row)}\n            />\n          </label>\n        </div>\n      ),\n    },\n    {\n      dataField: \"isUnique\",\n      text: \"Is Unique\",\n      key: \"Is Unique\",\n      formatter: (cellContent: any, row: DefaultPortModel) => (\n        <div className=\"checkbox\">\n          <label>\n            <input\n              disabled={row.isPrimaryKey}\n              type=\"checkbox\"\n              checked={row.isUnique}\n              onChange={(event) => handleChangeUnique(event, row)}\n            />\n          </label>\n        </div>\n      ),\n    },\n    {\n      dataField: \"remove\",\n      text: \"Remove\",\n      key: \"Remove\",\n      formatter: (cellContent: any, row: DefaultPortModel) => (\n        <div className=\"checkbox\">\n          <label>\n            <span\n              onClick={() => removePort(row)}\n              className=\"mi mi-Delete red onhoverPointer\"\n            />\n          </label>\n        </div>\n      ),\n    },\n  ];\n\n  let ports =\n    updatedItem &&\n    updatedItem.ports &&\n    (updatedItem.ports as { [s: string]: DefaultPortModel });\n\n  let portsTable: DefaultPortModel[] =\n    ports &&\n    Object.keys(ports)\n      .map((x) => {\n        return ports[x];\n      })\n      .filter((p) => !p.isNamePort);\n\n  let ispk =\n    portsTable && portsTable.find((p) => p.isPrimaryKey) ? true : false;\n\n  let cols = columns;\n\n  if (ispk) {\n    cols = cols.filter((col) => col.dataField !== \"isPartialKey\");\n  }\n\n  if (!props.isLogic) {\n    cols = cols.filter((c) => c.dataField !== \"isForeignKey\");\n  }\n\n  return (\n    <div className={`${!props.relView && 'relView'}`}>\n      <BootstrapTable\n        keyField=\"id\"\n        data={portsTable}\n        columns={\n          props.relView\n            ? cols.filter(\n                (col) =>\n                  col.dataField !== \"isPrimaryKey\" &&\n                  col.dataField !== \"isPartialKey\"\n              )\n            : cols\n        }\n        bordered={false}\n      />\n      <S.AddNewAtributeButton onClick={() => addNewPort(portsTable.length)}>\n        Add new atribute\n        </S.AddNewAtributeButton>\n    </div>\n  );\n};\n","import * as React from \"react\";\nimport styled from \"@emotion/styled\";\nimport { css } from \"@emotion/core\";\n\nexport interface DarkInputProps {\n    fontSize?: number\n    type: string\n    defaultValue: string\n    onChange: (event) => void;\n}\nnamespace S {\n  export const Input = styled.input<{fontSize?: number}>`\n    background-color: #3E3E3E;\n    color: #E9F7F7;\n    margin-top: 7px;\n    width: 150px;\n    margin-right: 0px;\n    padding-right: 0px;\n\n    ${({fontSize}) => \n    css`\n        font-size: ${fontSize}px;\n        margin-top: 15px;\n        width: 90%;\n    `}\n  `;\n}\n\nexport class DarkInput extends React.Component<DarkInputProps> {\n  render() {\n\n    return (\n      <S.Input\n        {...this.props}\n      >\n        {this.props.children}\n      </S.Input>\n    );\n  }\n}\n","import \"./NodeProperties.scss\";\nimport * as React from \"react\";\n\nimport { Col, Row, Grid } from \"../grid\";\nimport { DiagramEngine } from \"@projectstorm/react-diagrams\";\nimport { DefaultNodeModel } from \"../../infrastructure/models/DefaultNodeModel\";\nimport { PropertyTable } from \"../PropertyTable/PropertyTable\";\nimport { DarkInput } from \"../DarkInput\";\n\nclass Props {\n  update: () => void;\n\n  selectedItem: DefaultNodeModel;\n  isLogic: boolean;\n  diagramEngine: DiagramEngine;\n}\n\nexport function useForceUpdate() {\n  const [, setValue] = React.useState(0);\n  return () => setValue((value) => ++value);\n}\n\nexport const NodeProperties = (props: Props) => {\n  const [updatedItem, setUpdatedItem] = React.useState(null);\n  const [defaultName, setDefaultName] = React.useState(\"\");\n\n  const [name, setName] = React.useState(\"\");\n  const [showInput, setShowInput] = React.useState(false);\n\n  const forceUpdate = useForceUpdate();\n\n  React.useMemo(() => {\n    setUpdatedItem(props.selectedItem);\n    setName(props.selectedItem.getOptions().name);\n    setDefaultName(props.selectedItem.getOptions().name);\n  }, [props.selectedItem]);\n\n  React.useEffect(() => {\n    props.selectedItem.setLocked();\n\n    return () => {\n      props.selectedItem.setLocked(false);\n    };\n  });\n\n  const handleNameChange = (\n    event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>\n  ) => {\n    event.persist();\n    if(event.target.value != \"\") {\n      let allNodes = props.diagramEngine\n        .getModel()\n        .getNodes() as DefaultNodeModel[];\n  \n      let names = allNodes.map((node) =>\n        node.getOptions().name.toLowerCase().trim()\n      );\n  \n      names.includes(event.target.value.toLowerCase().trim())\n        ? (updatedItem.getOptions().name = defaultName)\n        : (updatedItem.getOptions().name = event.target.value.trim());\n    }\n    forceUpdate();\n  };\n\n  // const iconStyles: React.CSSProperties = {\n  //   display: \"flex\",\n  //   flexDirection: \"row\",\n  //   flexFlow: \"row-reverse\",\n  //   position: \"absolute\",\n  //   right: \"0\",\n  //   top: \"10px\",\n  //   zIndex: 9999,\n  // };\n\n  // const acceptStyle: React.CSSProperties = {\n  //   marginRight: 5,\n  //   backgroundColor: \"green\",\n  //   borderRadius: \"90px\",\n  //   padding: \"10px\",\n  // };\n\n  // const declineStyle: React.CSSProperties = {\n  //   marginRight: \"20px\",\n  //   backgroundColor: \"red\",\n  //   borderRadius: \"90px\",\n  //   padding: \"10px\",\n  // };\n\n  if (!updatedItem) return null;\n  else\n    return (\n      <div className=\"trayBottom\">\n        {/* <div style={iconStyles}>\n              <span\n                style={declineStyle}\n                className={`mi ${\n                  \"mi-Cancel\"\n                }`}\n              />\n                <span\n                  style={acceptStyle}\n                  className={`mi ${\n                    \"mi-Accept\"\n                  }`}\n                />\n            </div> */}\n        <Grid>\n          <Row>\n            <Col>\n              {!showInput ? (\n                <h1\n                  style={{ wordBreak: \"break-all\" }}\n                  onDoubleClick={() => setShowInput(true)}\n                >\n                  {name}\n                </h1>\n              ) : props.selectedItem.isLabel ? (\n                <textarea\n                  style={{ height: \"200px\" }}\n                  className=\"darkInput fs-28\"\n                  defaultValue={name}\n                  onChange={(event) => handleNameChange(event)}\n                ></textarea>\n              ) : (\n                // Emotion test - plan is to replace all .scss styles with emotion styled components\n                 <DarkInput\n                  fontSize={28}\n                  type=\"text\"\n                  defaultValue={name}\n                  onChange={(event) => handleNameChange(event)}\n                  ></DarkInput> \n              )}\n            </Col>\n\n            {!updatedItem.isLabel ? (\n              <PropertyTable\n              update={props.update}\n                selectedItem={props.selectedItem}\n                diagramEngine={props.diagramEngine}\n                isLogic={props.isLogic}\n              />\n            ) : null}\n          </Row>\n        </Grid>\n      </div>\n    );\n};\n","import \"./ResultPopup.scss\";\nimport React, { useState } from \"react\";\nimport Popup from \"reactjs-popup\";\nimport sqlFormatter from \"sql-formatter\";\nimport FileSaver from \"file-saver\";\n\nclass Props {\n  isOpen: boolean;\n  generateScript?: (name: string) => void;\n  mssqlString: string;\n  mysqlString: string;\n  update: () => void;\n}\n\nexport const ResultPopup = (props: Props) => {\n  const [dbName, setDbName] = useState(\"DatabaseName\");\n  const [mySQLView, setmySQLView] = useState(false);\n\n  let formatedMSSQL =\n    props.mssqlString &&\n    sqlFormatter.format(props.mssqlString, {\n      language: \"sql\", // Defaults to \"sql\"\n      indent: \"  \", // Defaults to two spaces\n    });\n\n  let formatedMySQL =\n    props.mysqlString &&\n    sqlFormatter.format(props.mysqlString, {\n      language: \"db2\", // Defaults to \"sql\"\n      indent: \"  \", // Defaults to two spaces\n    });\n\n  // useEffect(() => {\n  //   formatedMSSQL = '';\n  //   formatedMySQL = '';\n  // }, [props.mssqlString, props.mysqlString])\n\n  const downloadMSSQL = () => {\n    var blob = new Blob([formatedMSSQL], { type: \"text/plain;charset=utf-8\" });\n    FileSaver.saveAs(blob, `${dbName}.sql`);\n    props.update();\n  };\n\n  const downloadMYSQL = () => {\n    var blob = new Blob([formatedMySQL], { type: \"text/plain;charset=utf-8\" });\n    FileSaver.saveAs(blob, `${dbName}.sql`);\n    props.update();\n  };\n\n  return (\n    <Popup modal closeOnDocumentClick open={props.isOpen} closeOnEscape>\n      <div className=\"sql-result-dialog\">\n        <input\n          style={{ marginRight: \"10px\" }}\n          type=\"text\"\n          onChange={(event) => setDbName(event.target.value)}\n          value={dbName}\n        />\n\n        <button\n          style={{ marginRight: \"10px\" }}\n          onClick={() => {\n            props.generateScript(dbName);\n          }}\n        >\n          Generate\n        </button>\n\n        <button\n          className={`${mySQLView ? \"\" : \"selected-sql\"}`}\n          onClick={() => {\n            setmySQLView(false);\n          }}\n        >\n          MSSQL\n        </button>\n\n        <button\n          className={`${mySQLView ? \"selected-sql\" : \"\"}`}\n          onClick={() => {\n            setmySQLView(true);\n          }}\n        >\n          MySQL\n        </button>\n\n        <textarea\n          style={{ marginTop: \"5px\" }}\n          readOnly={true}\n          value={mySQLView ? formatedMySQL : formatedMSSQL}\n          contentEditable={false}\n        ></textarea>\n\n        <button style={{ marginRight: \"10px\" }} onClick={downloadMSSQL}>\n          Download MSSQL\n        </button>\n        <button style={{ marginRight: \"10px\" }} onClick={downloadMYSQL}>\n          Download mySQL\n        </button>\n      </div>\n    </Popup>\n  );\n};\n","import { ResultPopup } from \"../components/popups/ResultPopup/ResultPopup\";\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\n\nclass Props {\n  isUml: boolean;\n  isLogic: boolean;\n  isOpen: boolean;\n  serializeDiagram: () => any;\n  update: () => void;\n}\n\nexport const GenerationHandler = (props: Props) => {\n  const [sqlString, setSqlString] = useState(\"\");\n  const [mysqlString, setMySqlString] = useState(\"\");\n\n  useEffect(() => setSqlString(\"\"), [props.isOpen]);\n\n  const generateScript = async (name: string) => {\n    const serDiagram = props.serializeDiagram();\n    const dNodes = serDiagram[\"layers\"][1][\"models\"];\n\n    const nodes = Object.keys(dNodes).map((id) => {\n      return dNodes[id];\n    });\n\n    const dLinks = serDiagram[\"layers\"][0][\"models\"];\n    const links = Object.keys(dLinks).map((id) => {\n      return dLinks[id];\n    });\n\n    const diagramJson = {\n      nodes,\n      links,\n    };\n    const diagram = JSON.stringify(diagramJson, null, 2);\n\n    const response = await axios.post(\n      \"https://sql-generator.pl/api/setjob/mssql\",\n      {\n        SerializedModel: diagram,\n        DatabaseName: name,\n        RelationType: props.isUml ? \"UML\" : \"CHEN\"\n      }\n    );\n\n    const responseMy = await axios.post(\n      \"https://sql-generator.pl/api/setjob/mysql\",\n      {\n        SerializedModel: diagram,\n        DatabaseName: name,\n        RelationType: props.isUml ? \"UML\" : \"CHEN\"\n      }\n    );\n\n    if (response.status === 200 && responseMy.status === 200) {\n      setSqlString(response.data);\n      setMySqlString(responseMy.data);\n    } else {\n      const errorMessage = 'There was an error while processing your request';\n      setSqlString(errorMessage);\n      setMySqlString(errorMessage);\n\n      console.log(errorMessage);\n    }\n  };\n\n  return (\n    <ResultPopup\n      update={props.update}\n      mssqlString={sqlString}\n      mysqlString={mysqlString}\n      generateScript={(name) => generateScript(name)}\n      isOpen={props.isOpen}\n    />\n  );\n};\n","import \"./LoadFilePopup.scss\";\nimport React, { useState } from \"react\";\nimport Popup from \"reactjs-popup\";\n\nclass Props {\n  isOpen: boolean;\n  loadDiagram?: (name: string) => void;\n  update: () => void;\n}\n\nexport const LoadFilePopup = (props: Props) => {\n  let fileReader: FileReader;\n\n  const [fileContent, setFileContent] = useState(\"\");\n\n  const handleFileRead = (e: any) => {\n    const content = fileReader.result;\n    setFileContent(content as string);\n  };\n\n  const handleFileChosen = (name: any) => {\n    fileReader = new FileReader();\n    fileReader.onloadend = handleFileRead;\n    fileReader.readAsText(name);\n  };\n\n  return (\n    <Popup\n      modal\n      closeOnDocumentClick\n      open={props.isOpen}\n      closeOnEscape\n      onClose={() => props.update()}\n    >\n      <div className=\"sql-result-dialog\">\n        <input\n          type=\"file\"\n          onChange={(event) => handleFileChosen(event.target.files[0])}\n          accept=\".dbjson\"\n        />\n        <button onClick={() => props.loadDiagram(fileContent)}>Load</button>\n      </div>\n    </Popup>\n  );\n};\n","import React from \"react\";\nimport { LoadFilePopup } from \"../components/popups/LoadFilePopup/LoadFilePopup\";\nimport { Application } from \"../components/Application\";\nimport { DiagramModel } from \"@projectstorm/react-diagrams\";\n\nclass Props {\n  isOpen: boolean;\n  app: Application;\n  update: () => void;\n  setIsUml: (isUml: boolean) => void;\n  setIsLogic: (isLogic: boolean) => void;\n}\n\nexport const LoadFileHandler = (props: Props) => {\n  const loadDiagram = (name: string) => {\n    const engine = props.app.getDiagramEngine();\n    try {\n      const obj: {\n        conceptualDiagram: ReturnType<DiagramModel[\"serialize\"]>;\n        logicalDiagram: ReturnType<DiagramModel[\"serialize\"]>;\n        isUml: boolean;\n      } = JSON.parse(name);\n      console.log(obj);\n\n      props.setIsUml(obj.isUml);\n\n      let consceptual = new DiagramModel();\n      let logic = new DiagramModel();\n\n      if(obj.conceptualDiagram) {\n        consceptual.deserializeModel(obj.conceptualDiagram, engine);\n        \n        consceptual.getLinks().forEach((link) => {\n          link.getLabels().splice(0, 3);\n        });\n\n        props.app.loadConceptualModel(consceptual);\n        props.setIsLogic(false);\n      }\n\n      // if(logic.getNodes().keys.length > 0) {\n        if(obj.logicalDiagram) {\n          logic.deserializeModel(obj.logicalDiagram, engine);\n          \n  \n        logic.getLinks().forEach((link) => {\n          link.getLabels().splice(0, 3);\n        });\n\n        props.app.loadLogicModel(logic);\n        props.setIsLogic(true);\n      }\n\n      engine.repaintCanvas();\n      props.update();\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  return (\n    <LoadFilePopup\n      update={props.update}\n      loadDiagram={(name) => loadDiagram(name)}\n      isOpen={props.isOpen}\n    />\n  );\n};\n","import \"./SaveToFilePopup.scss\";\nimport React, { useState } from \"react\";\nimport Popup from \"reactjs-popup\";\nimport FileSaver from \"file-saver\";\nimport { DiagramModel } from \"@projectstorm/react-diagrams\";\n\nimport * as _ from 'lodash';\n\nclass Props {\n  isUml: boolean;\n  secondModel: DiagramModel;\n  isOpen: boolean;\n  diagramModel: DiagramModel;\n  update: () => void;\n}\n\nexport const SaveToFilePopup = (props: Props) => {\n  const [fileName, setFileName] = useState(\"diagram\");\n\n  const download = () => {\n    const diagramJson = JSON.stringify({\n      conceptualDiagram: props.diagramModel.serialize(),\n      logicalDiagram: _.isEmpty(props.secondModel.getActiveNodeLayer().getNodes()) ? null : props.secondModel.serialize(),\n\n      isUml: props.isUml,\n    });\n\n    console.log('do zapisu', props.secondModel, props.secondModel.getActiveNodeLayer().getNodes() );\n\n    let blob = new Blob([diagramJson], { type: \"text/plain;charset=utf-8\" });\n    FileSaver.saveAs(blob, `${fileName}.dbjson`);\n    props.update();\n  };\n\n  return (\n    <Popup\n      modal\n      closeOnDocumentClick\n      open={props.isOpen}\n      closeOnEscape\n      onClose={() => props.update()}\n    >\n      <div className=\"sql-result-dialog\">\n        <input\n          type=\"text\"\n          onChange={(event) => setFileName(event.target.value)}\n          value={fileName}\n        />\n        <button onClick={download}>save</button>\n      </div>\n    </Popup>\n  );\n};\n","import \"./SaveToJpegPopup.scss\";\nimport React, { useState } from \"react\";\nimport Popup from \"reactjs-popup\";\nimport domtoimage from \"dom-to-image\";\nimport { DiagramModel } from \"@projectstorm/react-diagrams\";\n\nclass Props {\n  isOpen: boolean;\n  diagramModel: DiagramModel;\n  update: () => void;\n}\n\nexport const SaveToJpegPopup = (props: Props) => {\n  const [fileName, setFileName] = useState(\"diagram\");\n\n  const download = () => {\n    domtoimage\n      .toJpeg(document.getElementById(\"diagram-layer\"), { quality: 0.95 })\n      .then((dataUrl: any) => {\n        let link = document.createElement(\"a\");\n        link.download = `${fileName}.jpeg`;\n        link.href = dataUrl;\n        link.click();\n        props.update();\n      });\n  };\n\n  return (\n    <Popup\n      modal\n      closeOnDocumentClick\n      open={props.isOpen}\n      closeOnEscape\n      onClose={() => props.update()}\n    >\n      <div className=\"sql-result-dialog\">\n        <input\n          type=\"text\"\n          onChange={(event) => setFileName(event.target.value)}\n          value={fileName}\n        />\n        <button onClick={download}>save</button>\n      </div>\n    </Popup>\n  );\n};\n","import React, { useState } from \"react\";\nimport Popup from \"reactjs-popup\";\nimport { DefaultLinkModel } from \"../../../infrastructure/models/DefaultLinkModel\";\nimport { DefaultLabelModel } from \"../../../infrastructure/models/DefaultLabelModel\";\nimport { DefaultNodeModel } from \"../../../infrastructure/models/DefaultNodeModel\";\nimport { AdvancedPortModel } from \"../../../infrastructure/models/ArrowPortModel\";\nimport { DiagramEngine } from \"@projectstorm/react-diagrams\";\nimport { PropertyTable } from \"../../PropertyTable/PropertyTable\";\nimport { DefaultPortModel } from \"../../../infrastructure/models/DefaultPortModel\";\nimport { ArrowLinkModel } from \"../../../infrastructure/models/ArrowLinkModel\";\nimport { Toolkit } from \"../../../infrastructure/Toolkit\";\nimport styled from \"@emotion/styled\";\n\nnamespace S {\n  export const GridContainer = styled.div`\n    display: grid;\n    grid-template-columns: auto auto auto;\n  `;\n\n  export const GridItem = styled.div`\n    background-color: rgba(255, 255, 255, 0.274);\n    padding: 10px;\n    text-align: center;\n  `;\n}\nclass Props {\n  isOpen: boolean;\n  link: DefaultLinkModel;\n  update: () => void;\n  diagramEngine: DiagramEngine;\n  isLogic: boolean;\n}\nexport const RelationPopup = (props: Props) => {\n  const [left, setLeft] = useState(\"1, N\");\n\n  const [right, setRight] = useState(\"1, N\");\n\n  const [relationAtributes, setRelationAtributes] = useState(\"\");\n  const [relationNameOnly, setRelationNameOnly] = useState(\"relation name\");\n\n\n  React.useEffect(() => {\n    let leftLabel =\n      props.link &&\n      props.link.getLabels().length > 2 &&\n      (props.link.getLabels()[0] as DefaultLabelModel).getOptions().label;\n    let relLabel =\n      props.link &&\n      props.link.getLabels().length > 2 &&\n      (props.link.getLabels()[1] as DefaultLabelModel).getOptions().label;\n    let rightLabel =\n      props.link &&\n      props.link.getLabels().length > 2 &&\n      (props.link.getLabels()[2] as DefaultLabelModel).getOptions().label;\n\n    setLeft(leftLabel ? leftLabel : \"1, N\");\n\n    setRight(rightLabel ? rightLabel : \"1, N\");\n  }, [props.link]);\n\n  let update = () => {\n    let x = handleRelationNameChenge();\n    let labels = props.link.getLabels() as DefaultLabelModel[];\n    labels[0].getOptions().label = left;\n    labels[2].getOptions().label = right;\n    labels[1].getOptions().label = relationNameOnly + x;\n\n    props.link.relName = relationNameOnly;\n\n\n    let points = props.link.getPoints();\n    for (let index = 1; index < points.length - 1; index++) {\n      const element = points[index];\n      element.remove();\n    }\n\n    setRelationAtributes(x);\n    props.update();\n  };\n\n  const handleRelationNameChenge = () => {\n    console.log(props.link.relName);\n\n    let relationAtributes = props.link.properties !== null && props.link.properties.getPorts() as {[s: string]: DefaultPortModel};\n    let attString = '';\n\n    if(Object.keys(relationAtributes).length > 0) {\n      Object.keys(relationAtributes).map(id => attString += `${relationAtributes[id].label} ${relationAtributes[id].propertyType} \\n`);\n      \n      const newRelName = '\\n' + attString;\n      return newRelName;\n    }\n      else {\n        return '';\n      }\n\n\n  }\n\n  const sourcePort =\n    props.link &&\n    props.link.getSourcePort() &&\n    (props.link.getSourcePort().getParent() as DefaultNodeModel);\n  const targetPort =\n    props.link &&\n    props.link.getTargetPort() &&\n    (props.link.getTargetPort().getParent() as DefaultNodeModel);\n\n  const remove = () => {\n    const sourceP = props.link && props.link.getSourcePort();\n    const targetP = props.link && props.link.getTargetPort();\n    sourceP.removeLink(props.link);\n    targetP.removeLink(props.link);\n\n    props.diagramEngine.getModel().removeLink(props.link);\n\n    if (props.isLogic) {\n      let thisParent = props.link\n        .getTargetPort()\n        .getParent() as DefaultNodeModel;\n      let portNode = props.link.getSourcePort().getParent() as DefaultNodeModel;\n\n      let portNodePorts = portNode.getPorts() as {\n        [s: string]: AdvancedPortModel;\n      };\n      let thisParentPorts = thisParent.getPorts() as {\n        [s: string]: AdvancedPortModel;\n      };\n\n      let czyMaPortZPKjakoFk = Object.keys(thisParentPorts).filter(\n        (id) => thisParentPorts[id].fkPortId === portNode.getOptions().id\n      )[0];\n      let czyMaPortZPKjakoFk2 = Object.keys(portNodePorts).filter(\n        (id) => portNodePorts[id].fkPortId === thisParent.getOptions().id\n      )[0];\n\n      if (czyMaPortZPKjakoFk) {\n        thisParent.removePort(thisParentPorts[czyMaPortZPKjakoFk]);\n      } else {\n        portNode.removePort(portNodePorts[czyMaPortZPKjakoFk2]);\n      }\n    }\n\n    props.update();\n  };\n\n  const options = (\n    <>\n      <option value=\"0, N\">0, N</option>\n      <option value=\"1, N\">1, N</option>\n      <option value=\"0, 1\">0, 1</option>\n      <option value=\"1, 1\">1, 1</option>\n      <option value=\"N, N\">N, N</option>\n    </>\n  );\n\n  const renderOptionPicker = (side: string) => {\n    return (\n      // <div className=\"grid-item\">\n      <S.GridItem>\n\n        <select\n          className=\"darkSelect\"\n          onChange={(event) =>\n            side === \"left\"\n              ? setLeft(event.target.value)\n              : setRight(event.target.value)\n          }\n          value={side === \"left\" ? left : right}\n        >\n          {options}\n        </select>\n      </S.GridItem>\n      // </div>\n    );\n  };\n\n  const reverseLink = () => {\n    let thisParent = props.link.getTargetPort().getParent() as DefaultNodeModel;\n    let portNode = props.link.getSourcePort().getParent() as DefaultNodeModel;\n\n    let portNodePorts = portNode.getPorts() as {\n      [s: string]: DefaultPortModel;\n    };\n    let thisParentPorts = thisParent.getPorts() as {\n      [s: string]: DefaultPortModel;\n    };\n\n    // let portNodePorts = portNode.getPorts() as {[s: string]: LogicPort};\n    // let thisParentPorts = thisParent.getPorts() as {[s: string]: LogicPort};\n\n    let czyMaPortZPKjakoFk = Object.keys(thisParentPorts).filter(\n      (id) => thisParentPorts[id].fkPortId === portNode.getOptions().id\n    )[0];\n    let czyMaPortZPKjakoFk2 = Object.keys(portNodePorts).filter(\n      (id) => portNodePorts[id].fkPortId === thisParent.getOptions().id\n    )[0];\n\n    if (czyMaPortZPKjakoFk) {\n      thisParent.removePort(thisParentPorts[czyMaPortZPKjakoFk]);\n      let pk = Object.keys(thisParentPorts).filter(\n        (id) => thisParentPorts[id].isPrimaryKey\n      )[0];\n      portNode.addPort(\n        new AdvancedPortModel(\n          // true,\n          thisParent.getOptions().name + thisParentPorts[pk].getOptions().name,\n          false,\n          false,\n          false,\n          true,\n          false,\n          true,\n          true,\n          \"INT\",\n          Toolkit.UID(),\n          thisParent.getOptions().id\n        )\n      );\n    } else {\n      portNode.removePort(portNodePorts[czyMaPortZPKjakoFk2]);\n\n      let pk = Object.keys(portNodePorts).filter(\n        (id) => portNodePorts[id].isPrimaryKey\n      )[0];\n      portNode.addPort(\n        new AdvancedPortModel(\n          // true,\n\n          portNode.getOptions().name + portNodePorts[pk].getOptions().name,\n          false,\n          false,\n          false,\n          true,\n          false,\n          true,\n          true,\n          \"INT\",\n          Toolkit.UID(),\n          portNode.getOptions().id\n        )\n      );\n    }\n\n    let newSourceP = props.link.getTargetPort();\n    let newTargetP = props.link.getSourcePort();\n    let model = props.diagramEngine.getModel();\n\n    model.removeLink(props.link);\n\n    let link = new ArrowLinkModel({ type: \"arrow\" });\n\n    link.setSourcePort(newSourceP);\n    link.setTargetPort(newTargetP);\n    model.addLink(link);\n\n    props.update();\n  };\n\n  if (props.isLogic) {\n    return (\n      <Popup modal closeOnDocumentClick open={props.isOpen} closeOnEscape>\n        <>\n          <S.GridItem>\n            <button onClick={remove}>Remove</button>\n          </S.GridItem>\n          <S.GridItem>\n            <button onClick={reverseLink}>Reverse</button>\n          </S.GridItem>\n        </>\n      </Popup>\n    );\n  } else\n    return (\n      <Popup modal closeOnDocumentClick open={props.isOpen} closeOnEscape onClose={props.update}>\n        <>\n          <S.GridContainer>\n            <S.GridItem>\n\n              <p>{sourcePort && sourcePort.getOptions().name}</p>\n            </S.GridItem>\n\n            <S.GridItem>\n              <input\n                type=\"text\"\n                defaultValue={relationNameOnly}\n                onChange={(event) => setRelationNameOnly(event.target.value)}\n              ></input>\n            </S.GridItem>\n            <S.GridItem>\n\n              <p>{targetPort && targetPort.getOptions().name}</p>\n            </S.GridItem>\n            {renderOptionPicker(\"left\")}\n            <S.GridItem>\n\n              <button onClick={update}>SAVE</button>\n            </S.GridItem>\n            {renderOptionPicker(\"right\")}\n            <S.GridItem></S.GridItem>\n            <S.GridItem>\n\n              <button onClick={remove}>Remove</button>\n            </S.GridItem>\n            </S.GridContainer>\n          {props.link && (\n            <div>\n              <h3 style={{ margin: 0 }}>Atributes:</h3>\n              <PropertyTable\n              relationName={relationNameOnly}\n                update={update}\n                relView={true}\n                link={props.link}\n                diagramEngine={props.diagramEngine}\n                selectedItem={props.link.properties}\n                isLogic={props.isLogic}\n              />\n            </div>\n          )}\n        </>\n      </Popup>\n    );\n};\n","import * as React from \"react\";\nimport * as _ from \"lodash\";\nimport { TrayWidget } from \"./TrayWidget\";\nimport { TrayItemWidget } from \"./TrayItemWidget\";\nimport { PointModel } from \"@projectstorm/react-diagrams\";\nimport { CanvasWidget } from \"@projectstorm/react-canvas-core\";\nimport styled from \"@emotion/styled\";\nimport { DemoCanvasWidget } from \"../helpers/DemoCanvasWidget\";\nimport { Application } from \"./Application\";\nimport { AdvancedPortModel } from \"../infrastructure/models/ArrowPortModel\";\nimport { TrayItemDiv } from \"./TrayItemDiv\";\nimport {\n  NodeProperties,\n  useForceUpdate,\n} from \"./NodeProperties/NodeProperties\";\nimport { DefaultLinkModel } from \"../infrastructure/models/DefaultLinkModel\";\nimport { GenerationHandler } from \"../handlers/GenerationHandler\";\nimport { LoadFileHandler } from \"../handlers/LoadFileHandler\";\nimport { SaveToFilePopup } from \"./popups/SaveToFilePopup/SaveToFilePopup\";\nimport { SaveToJpegPopup } from \"./popups/SaveToJpegPopup/SaveToJpegPopup\";\nimport { RelationPopup } from \"./popups/RealtionPopup/RelationPopup\";\nimport { DefaultPortModel } from \"../infrastructure/models/DefaultPortModel\";\nimport { DefaultLabelModel } from \"../infrastructure/models/DefaultLabelModel\";\nimport { DefaultNodeModel } from \"../infrastructure/models/DefaultNodeModel\";\n\nexport interface BodyWidgetProps {\n  app: Application;\n}\nnamespace S {\n  export const Body = styled.div`\n    flex-grow: 1;\n    display: flex;\n    flex-direction: column;\n    min-height: 100%;\n  `;\n\n  export const Header = styled.div`\n    display: flex;\n    background: rgb(30, 30, 30);\n    flex-grow: 0;\n    flex-shrink: 0;\n    color: white;\n    font-family: Helvetica, Arial, sans-serif;\n    padding: 12px;\n    align-items: center;\n  `;\n\n  export const Content = styled.div`\n    display: flex;\n    flex-grow: 1;\n  `;\n\n  export const Layer = styled.div`\n    position: relative;\n    flex-grow: 1;\n  `;\n\n  export const DropdownIcon = styled.span`\n    display: inline-block;\n    padding-top: 3px;\n    padding-right: 5px;\n  `;\n}\n\nexport const BodyWidget = (props: BodyWidgetProps) => {\n  const [showDialog, setShowDialog] = React.useState(false);\n  const [showRelationDialog, setShowRelationDialog] = React.useState(false);\n  const [showLoadFileDialog, setShowLoadFileDialog] = React.useState(false);\n  const [showSaveFileDialog, setSaveFileDialog] = React.useState(false);\n  const [showSaveJPEGDialog, setSaveJPEGDialog] = React.useState(false);\n  const [showSaveOptions, setSaveOptions] = React.useState(false);\n\n  const [selectedNode, setSelectedNode] = React.useState(null);\n  const [selectedLink, setSelectedLink] = React.useState(null);\n\n  const [isUml, setIsUml] = React.useState(true);\n\n  const [isLogicModel, setIsLogicModel] = React.useState(false);\n\n  const forceUpdate = useForceUpdate();\n\n  React.useEffect(() => {\n    setSelectedNode(null);\n    setSelectedLink(null);\n  }, []);\n\n  const changeRelation = () => {\n    let links = props.app.getDiagramEngine().getModel().getLinks();\n    links.forEach((link) => {\n      let temp = (link.getLabels()[0] as DefaultLabelModel)\n        .getOptions()\n        .label.substring(0, 1);\n      let temp2 = (link.getLabels()[2] as DefaultLabelModel)\n        .getOptions()\n        .label.substring(0, 1);\n\n      (link.getLabels()[0] as DefaultLabelModel).getOptions().label =\n        temp2 +\n        (link.getLabels()[0] as DefaultLabelModel)\n          .getOptions()\n          .label.substring(1);\n      (link.getLabels()[2] as DefaultLabelModel).getOptions().label =\n        temp +\n        (link.getLabels()[2] as DefaultLabelModel)\n          .getOptions()\n          .label.substring(1);\n    });\n  };\n\n  const refreshPopups = () => {\n    setSelectedLink(null);\n    setSelectedNode(null);\n\n    setShowDialog(false);\n    setSaveFileDialog(false);\n    setSaveJPEGDialog(false);\n    setSaveOptions(false);\n    setShowLoadFileDialog(false);\n    setShowRelationDialog(false);\n  };\n\n  const getDiagramLogicModel = () => {\n    if(isLogicModel) {\n      return props.app.getDiagramEngine().getModel().serialize();\n    }\n    else {\n      props.app.setLogicModel();\n\n      setIsLogicModel(true);\n      return props.app.getDiagramEngine().getModel().serialize();\n    }\n  }\n\n  return (\n    <S.Body>\n      <S.Header>DB Diagram Scripter</S.Header>\n      <S.Content>\n        <TrayWidget>\n          <TrayItemWidget\n            model={{ type: \"default\" }}\n            name={isLogicModel ? \"Relation\" : \"Entity\"}\n            color=\"rgb(0,192,255)\"\n          />\n          <TrayItemWidget\n            model={{ type: \"label\" }}\n            name=\"Label\"\n            color=\"rgb(192,255,0)\"\n          />\n\n          <TrayItemDiv\n            name=\"Load Diagram\"\n            color=\"rgb(255,123,0)\"\n            marginTop=\"75px\"\n            onClick={() => {\n              setShowLoadFileDialog(true);\n              setSelectedNode(null);\n            }}\n          />\n\n          <TrayItemDiv\n            color=\"rgb(255,123,0)\"\n            onClick={() => {\n              setSaveOptions(!showSaveOptions);\n              setSelectedNode(null);\n            }}\n          >\n            <>\n              Save\n              <S.DropdownIcon\n                className={`mi ${\n                  !showSaveOptions ? \"mi-ArrowDown8\" : \"mi-ArrowUp8\"\n                }`}\n              />\n            </>\n          </TrayItemDiv>\n\n          {showSaveOptions && (\n            <TrayItemDiv\n              name=\"File\"\n              color=\"rgb(255,123,0)\"\n              onClick={() => {\n                setSaveFileDialog(true);\n                setSelectedNode(null);\n              }}\n            />\n          )}\n          {showSaveOptions && (\n            <TrayItemDiv\n              name=\"JPEG\"\n              color=\"rgb(255,123,0)\"\n              onClick={() => {\n                setSaveJPEGDialog(true);\n                setSelectedNode(null);\n              }}\n            />\n          )}\n\n          <TrayItemDiv\n            isSelected={!isLogicModel}\n            name=\"Conceptual View\"\n            color=\"rgb(0,50,100)\"\n            marginTop=\"75px\"\n            onClick={() => {\n              if (isLogicModel) {\n                props.app.setConceptualModel();\n                setIsLogicModel(false);\n              }\n            }}\n          />\n\n          <TrayItemDiv\n            isSelected={isLogicModel}\n            name=\"Logical View\"\n            color=\"rgb(0,50,100)\"\n            onClick={() => {\n              if (!isLogicModel) {\n                props.app.setLogicModel();\n                setIsLogicModel(true);\n              }\n            }}\n          />\n\n          <TrayItemDiv\n            isDisabled={isLogicModel}\n            isSelected={isUml}\n            name=\"UML\"\n            color=\"rgb(152,50,100)\"\n            marginTop=\"75px\"\n            onClick={() => {\n              if (!isLogicModel && !isUml) {\n                changeRelation();\n                setIsUml(true);\n              }\n            }}\n          />\n\n          <TrayItemDiv\n            isDisabled={isLogicModel}\n            isSelected={!isUml}\n            name=\"Chen\"\n            color=\"rgb(152,50,100)\"\n            onClick={() => {\n              if (!isLogicModel && isUml) {\n                changeRelation();\n                setIsUml(false);\n              }\n            }}\n          />\n\n          <TrayItemDiv\n            name=\"Create DB Code\"\n            color=\"rgb(255,0,0)\"\n            marginTop=\"60px\"\n            onClick={() => {\n              setShowDialog(true);\n              setSelectedNode(null);\n            }}\n          />\n        </TrayWidget>\n        <S.Layer\n          id=\"diagram-layer\"\n          onDrop={(event) => {\n            var data = JSON.parse(\n              event.dataTransfer.getData(\"storm-diagram-node\")\n            );\n\n            let allNodes = props.app\n              .getDiagramEngine()\n              .getModel()\n              .getNodes() as DefaultNodeModel[];\n\n            let names = allNodes.map((node) =>\n              node.getOptions().name.toLowerCase().trim()\n            );\n\n            var nodesCount = _.keys(\n              props.app.getDiagramEngine().getModel().getNodes()\n            ).length;\n\n            let newNodeName = names.includes(\n              `Entity${nodesCount + 1}`.toLowerCase().trim()\n            )\n              ? `Entity${nodesCount + 1}_${nodesCount + 1}`\n              : `Entity${nodesCount + 1}`;\n\n            var node: DefaultNodeModel;\n            if (data.type === \"default\") {\n              node = new DefaultNodeModel(false, newNodeName, \"rgb(0,192,255)\");\n\n              if (isLogicModel) {\n                node.addPort(\n                  new AdvancedPortModel(\n                    \"Id\",\n                    false,\n                    true,\n                    false,\n                    false,\n                    true,\n                    true,\n                    true,\n                    \"INT\"\n                  )\n                );\n                node.addPort(\n                  new AdvancedPortModel(\n                    \"\",\n                    true,\n                    false,\n                    false,\n                    false,\n                    false,\n                    false,\n                    false,\n                    \"INT\"\n                  )\n                );\n                node.addPort(\n                  new AdvancedPortModel(\n                    \"1\",\n                    true,\n                    false,\n                    false,\n                    false,\n                    false,\n                    false,\n                    false,\n                    \"INT\"\n                  )\n                );\n              } else {\n                node.addPort(\n                  new DefaultPortModel(\n                    isLogicModel,\n                    \"Id\",\n                    false,\n                    true,\n                    false,\n                    false,\n                    true,\n                    true,\n                    true,\n                    \"INT\"\n                  )\n                );\n                node.addPort(\n                  new DefaultPortModel(\n                    isLogicModel,\n                    \"\",\n                    true,\n                    false,\n                    false,\n                    false,\n                    false,\n                    false,\n                    false,\n                    \"INT\"\n                  )\n                );\n                node.addPort(\n                  new DefaultPortModel(\n                    isLogicModel,\n                    \"1\",\n                    true,\n                    false,\n                    false,\n                    false,\n                    false,\n                    false,\n                    false,\n                    \"INT\"\n                  )\n                );\n              }\n            } else {\n              node = new DefaultNodeModel(true, \"Label \", \"rgb(192,255,0)\");\n            }\n\n            var point = props.app\n              .getDiagramEngine()\n              .getRelativeMousePoint(event);\n            node.setPosition(point);\n            props.app.getDiagramEngine().getModel().addNode(node);\n\n            forceUpdate();\n          }}\n          onDragOver={(event) => {\n            event.preventDefault();\n          }}\n          onClick={(event) => {\n            event.preventDefault();\n            if (\n              event.ctrlKey &&\n              props.app\n                .getDiagramEngine()\n                .getModel()\n                .getSelectedEntities()[0] instanceof PointModel\n            ) {\n              const pointToRemove = props.app\n                .getDiagramEngine()\n                .getModel()\n                .getSelectedEntities()[0] as PointModel;\n\n              pointToRemove.remove();\n              forceUpdate();\n            }\n            refreshPopups();\n          }}\n          onDoubleClick={(event) => {\n            event.preventDefault();\n            if (\n              props.app\n                .getDiagramEngine()\n                .getModel()\n                .getSelectedEntities()[0] instanceof PointModel\n            ) {\n              setSelectedLink(\n                props.app\n                  .getDiagramEngine()\n                  .getModel()\n                  .getSelectedEntities()[0]\n                  .getParent() as DefaultLinkModel\n              );\n              setShowRelationDialog(true);\n              setSelectedNode(null);\n            } else if (\n              props.app\n                .getDiagramEngine()\n                .getModel()\n                .getSelectedEntities()[0] instanceof DefaultNodeModel\n            ) {\n              refreshPopups();\n              let selectedNode = props.app\n                .getDiagramEngine()\n                .getModel()\n                .getSelectedEntities()[0] as DefaultNodeModel;\n\n              setSelectedNode(selectedNode);\n            }\n          }}\n        >\n          <DemoCanvasWidget>\n            <CanvasWidget\n              className=\"srd-demo-canvas\"\n              engine={props.app.getDiagramEngine()}\n            />\n          </DemoCanvasWidget>\n        </S.Layer>\n        {selectedNode != null ? (\n          <NodeProperties\n            update={refreshPopups}\n\n            isLogic={isLogicModel}\n            selectedItem={selectedNode}\n            diagramEngine={props.app.getDiagramEngine()}\n          />\n        ) : null}\n        <GenerationHandler\n          isUml={isUml}\n          isLogic={isLogicModel}\n          update={refreshPopups}\n          isOpen={showDialog}\n          serializeDiagram={() =>  getDiagramLogicModel()}\n          \n        />\n        <LoadFileHandler\n          update={refreshPopups}\n          isOpen={showLoadFileDialog}\n          app={props.app}\n          setIsUml={setIsUml}\n          setIsLogic={setIsLogicModel}\n        />\n        <SaveToFilePopup\n          update={refreshPopups}\n          diagramModel={props.app.getActiveDiagram()}\n          secondModel={props.app.getLogicDiagram()}\n          isOpen={showSaveFileDialog}\n          isUml={isUml}\n        />\n        <SaveToJpegPopup\n          update={refreshPopups}\n          diagramModel={props.app.getActiveDiagram()}\n          isOpen={showSaveJPEGDialog}\n        />\n\n        <RelationPopup\n          diagramEngine={props.app.getDiagramEngine()}\n          update={refreshPopups}\n          isOpen={showRelationDialog}\n          link={selectedLink}\n          isLogic={isLogicModel}\n        />\n      </S.Content>\n    </S.Body>\n  );\n};\n","import {\n  DefaultLinkWidget,\n  PointModel,\n  LinkWidget,\n} from \"@projectstorm/react-diagrams\";\nimport React from \"react\";\n\nconst CustomLinkArrowWidget = (props: any) => {\n  const { point, previousPoint } = props;\n  const [, setSelected] = React.useState(false);\n  const angle =\n    90 +\n    (Math.atan2(\n      point.getPosition().y - previousPoint.getPosition().y,\n      point.getPosition().x - previousPoint.getPosition().x\n    ) *\n      180) /\n      Math.PI;\n\n  //translate(50, -10),\n  return (\n    <g\n      className=\"arrow\"\n      transform={\n        \"translate(\" +\n        point.getPosition().x +\n        \", \" +\n        point.getPosition().y +\n        \")\"\n      }\n    >\n      <g style={{ transform: \"rotate(\" + angle + \"deg)\" }}>\n        <g transform={\"translate(0, -3)\"}>\n          <polygon\n            points=\"0,10 8,30 -8,30\"\n            fill={props.color}\n            onMouseLeave={() => setSelected(false)}\n            onMouseEnter={() => setSelected(true)}\n            data-id={point.getID()}\n            data-linkid={point.getLink().getID()}\n          ></polygon>\n        </g>\n      </g>\n    </g>\n  );\n};\n\nexport class ArrowLinkWidget extends DefaultLinkWidget {\n  generateArrow(point: PointModel, previousPoint: PointModel): JSX.Element {\n    return (\n      <CustomLinkArrowWidget\n        key={point.getID()}\n        point={point as any}\n        previousPoint={previousPoint as any}\n        colorSelected={this.props.link.getOptions().selectedColor}\n        color={this.props.link.getOptions().color}\n      />\n    );\n  }\n\n  render() {\n    //ensure id is present for all points on the path\n    var points = this.props.link.getPoints();\n    var paths = [];\n    this.refPaths = [];\n\n    //draw the multiple anchors and complex line instead\n    for (let j = 0; j < points.length - 1; j++) {\n      paths.push(\n        this.generateLink(\n          LinkWidget.generateLinePath(points[j], points[j + 1]),\n          {\n            \"data-linkid\": this.props.link.getID(),\n            \"data-point\": j,\n            onMouseDown: (event: MouseEvent) => {\n              this.addPointToLink(event as any, j + 1);\n            },\n          },\n          j\n        )\n      );\n    }\n\n    paths.push(this.generateArrow(points[0], points[1]));\n\n    \t//render the circles\n\t\tfor (let i = 1; i < points.length - 1; i++) {\n\t\t\tpaths.push(this.generatePoint(points[i]));\n\t\t}\n\n\t\t\tpaths.push(this.generatePoint(points[points.length - 1]));\n\n\t\treturn <g data-default-link-test={this.props.link.getOptions().testName}>{paths}</g>;\n  }\n}\n","import React from \"react\";\nimport { DefaultLinkFactory } from \"@projectstorm/react-diagrams\";\n\nimport { ArrowLinkModel } from \"../models/ArrowLinkModel\";\nimport { ArrowLinkWidget } from \"../widgets/ArrowLinkWidget\";\n\nexport class ArrowLinkFactory extends DefaultLinkFactory {\n  constructor() {\n    super(\"arrow\");\n  }\n\n  generateModel(): ArrowLinkModel {\n    return new ArrowLinkModel();\n  }\n\n  generateReactWidget(event: any): JSX.Element {\n    return <ArrowLinkWidget link={event.model} diagramEngine={this.engine} />;\n  }\n}\n","import * as React from \"react\";\nimport { DiagramEngine, PortWidget } from \"@projectstorm/react-diagrams-core\";\nimport { DefaultPortModel } from \"../models/DefaultPortModel\";\nimport styled from \"@emotion/styled\";\n\nexport interface DefaultPortLabelProps {\n  port: DefaultPortModel;\n  engine: DiagramEngine;\n}\n\nnamespace S {\n  export const PortLabel = styled.div`\n  display: flex;\n  margin-top: 1px;\n  align-items: center;\n`;\n\n  export const Label = styled.div`\n  flex-grow: 1;\n`;\n\n  export const Port = styled.div`\n  width: 15px;\n  height: 15px;\n  background: rgba(255, 255, 255, 0.1);\n\n  &:hover {\n    background: rgb(192, 255, 0);\n  }\n  `;\n\n  export const PrimaryKeyIcon = styled.span`\n    padding:  3px 5px;\n    color: black;\n    font-weight: 800;\n  `;\n\n  export const PortContainer = styled.div`\n    display: flex;\n    justify-content: flex-end;\n  `;\n\n  export const PortItem = styled.div`\n    display: inline-block;\n    margin-right: 5px;\n  `;\n\n  export const HiddenPort = styled(PortItem)`\n    display: none;\n  `;\n\n  export const NamedPort = styled(PortItem)`\n   margin-right: 5px;\n  `;\n}\n\nexport const DefaultPortLabel = (props: DefaultPortLabelProps) => {\n  let { port, engine } = props;\n\n  if (!port.isNamePort) {\n    port.setLocked();\n  }\n\n  let portJSX: JSX.Element = (\n    <PortWidget engine={engine} port={port}>\n      <S.Port />\n    </PortWidget>\n  );\n\n  const label: JSX.Element = (\n    <S.PortLabel>\n      <div>\n        {port.label}\n        {' '}\n        {port.propertyType}\n      </div>\n    </S.PortLabel>\n  );\n\n  const isPrimaryKey = port.isPrimaryKey &&\n    <S.PrimaryKeyIcon className=\"mi mi-Permissions\"></S.PrimaryKeyIcon>\n\n  if (port.isNamePort) {\n    return <S.NamedPort>{portJSX}</S.NamedPort>;\n  } else {\n    return (\n      <S.PortContainer>\n        <S.PortItem>{isPrimaryKey}</S.PortItem>\n        <S.PortItem>{label}</S.PortItem>\n        <S.HiddenPort>{portJSX}</S.HiddenPort>\n      </S.PortContainer>\n    );\n  }\n}\n","import * as React from \"react\";\nimport * as _ from \"lodash\";\nimport { DiagramEngine } from \"@projectstorm/react-diagrams-core\";\nimport { DefaultNodeModel } from \"../models/DefaultNodeModel\";\nimport { DefaultPortLabel } from \"../widgets/DefaultPortLabelWidget\";\nimport styled from \"@emotion/styled\";\nimport { DefaultPortModel } from \"../models/DefaultPortModel\";\n\n\nnamespace S {\n  export const Node = styled.div<{ background: string; selected: boolean }>`\n    background-color: ${(p) => p.background};\n    border-radius: 5px;\n    font-family: sans-serif;\n    color: white;\n    border: solid 2px black;\n    overflow: visible;\n    font-size: 11px;\n    border: solid 2px ${(p) => (p.selected ? \"rgb(0,192,255)\" : \"black\")};\n  `;\n\n  export const Title = styled.div`\n    background: rgba(0, 0, 0, 0.3);\n    display: flex;\n    white-space: nowrap;\n\n    justify-items: center;\n  `;\n\n  export const TitleName = styled.div`\n    flex-grow: 1;\n    padding: 5px 5px;\n  `;\n\n  export const Ports = styled.div`\n    display: flex;\n    background-image: linear-gradient(rgba(0, 0, 0, 0.1), rgba(0, 0, 0, 0.2));\n  `;\n\n  export const PortsContainer = styled.div`\n    flex-grow: 1;\n    display: flex;\n    flex-direction: column;\n\n    &:first-of-type {\n      margin-right: 10px;\n    }\n\n    &:only-child {\n      margin-right: 0px;\n    }\n  `;\n\n  export const NamedPortLeft = styled.div`\n    margin-top: 5px;\n    margin-left: 5px\n  `;\n\n  export const NamedPortRight = styled.div`\n    margin-top: 5px\n  `;\n}\n\n\nexport interface DefaultNodeProps {\n  node: DefaultNodeModel;\n  engine: DiagramEngine;\n}\n\nexport const DefaultNodeWidget = (props: DefaultNodeProps) => {\n  const generatePort = (port) => {\n    return (\n      <DefaultPortLabel\n        engine={props.engine}\n        port={port}\n        key={port.options.id}\n      />\n    );\n  };\n\n    let { node } = props;\n    let ports = node.getPorts() as { [s: string]: DefaultPortModel };\n    let portsJSX = _.map(ports, generatePort);\n    let namedPortsJSX = portsJSX.filter((p) => p.props.port.isNamePort);\n    let notNamedPortsJSX = portsJSX.filter((p) => !p.props.port.isNamePort);\n\n    return (\n      <S.Node\n        data-default-node-name={node.getOptions().name}\n        selected={node.isSelected()}\n        background={node.getOptions().color}\n      >\n        <S.Title>\n          {namedPortsJSX.length !== 0 && (\n            <S.NamedPortLeft>\n              {generatePort(namedPortsJSX[1].props.port)}\n            </S.NamedPortLeft>\n          )}\n\n          <S.TitleName>{node.getOptions().name}</S.TitleName>\n\n          {namedPortsJSX.length !== 0 && (\n            <S.NamedPortRight>\n              {generatePort(namedPortsJSX[0].props.port)}\n            </S.NamedPortRight>\n          )}\n        </S.Title>\n        <S.Ports>\n          <S.PortsContainer>{notNamedPortsJSX}</S.PortsContainer>\n        </S.Ports>\n      </S.Node>\n    );\n}\n","import * as React from \"react\";\nimport { DefaultNodeModel } from \"../models/DefaultNodeModel\";\nimport { DefaultNodeWidget } from \"../widgets/DefaultNodeWidget\";\nimport { AbstractReactFactory } from \"@projectstorm/react-canvas-core\";\nimport { DiagramEngine } from \"@projectstorm/react-diagrams-core\";\n\nexport class DefaultNodeFactory extends AbstractReactFactory<\n  DefaultNodeModel,\n  DiagramEngine\n> {\n  constructor() {\n    super(\"default\");\n  }\n\n  generateReactWidget(event): JSX.Element {\n    return <DefaultNodeWidget engine={this.engine} node={event.model} />;\n  }\n\n  generateModel(event): DefaultNodeModel {\n    return new DefaultNodeModel(false, \"Entity\", \"rgb(0,192,255)\");\n  }\n}\n","import * as React from \"react\";\nimport { DefaultLabelModel } from \"../models/DefaultLabelModel\";\nimport styled from \"@emotion/styled\";\n\nexport interface DefaultLabelWidgetProps {\n  model: DefaultLabelModel;\n}\n\nnamespace S {\n  export const Label = styled.div`\n  background: rgba(0, 0, 0, 0.8);\n  border-radius: 5px;\n  color: white;\n  font-size: 12px;\n  padding: 4px 8px;\n  font-family: sans-serif;\n  user-select: none;\n\n  max-width: 200px;\n  white-space: pre-wrap;\n`;\n}\n\n\nexport class DefaultLabelWidget extends React.Component<\n  DefaultLabelWidgetProps\n> {\n  render() {\n    return <S.Label>{this.props.model.getOptions().label}</S.Label>;\n  }\n}\n","import * as React from \"react\";\nimport { DefaultLabelModel } from \"../models/DefaultLabelModel\";\nimport { DefaultLabelWidget } from \"../widgets/DefaultLabelWidget\";\nimport { AbstractReactFactory } from \"@projectstorm/react-canvas-core\";\nimport { DiagramEngine } from \"@projectstorm/react-diagrams-core\";\n\nexport class DefaultLabelFactory extends AbstractReactFactory<\n  DefaultLabelModel,\n  DiagramEngine\n> {\n  constructor() {\n    super(\"default\");\n  }\n\n  generateReactWidget(event): JSX.Element {\n    return <DefaultLabelWidget model={event.model} />;\n  }\n\n  generateModel(event): DefaultLabelModel {\n    return new DefaultLabelModel();\n  }\n}\n","import { DefaultPortModel } from \"../models/DefaultPortModel\";\nimport { AbstractModelFactory } from \"@projectstorm/react-canvas-core\";\nimport { DiagramEngine } from \"@projectstorm/react-diagrams-core\";\n\nexport class DefaultPortFactory extends AbstractModelFactory<\n  DefaultPortModel,\n  DiagramEngine\n> {\n  constructor() {\n    super(\"default\");\n  }\n\n  generateModel(): DefaultPortModel {\n    return new DefaultPortModel(false, \"port\", true, false);\n  }\n}\n","import * as React from \"react\";\nimport { PointModel } from \"@projectstorm/react-diagrams-core\";\nimport styled from \"@emotion/styled\";\n\nexport interface DefaultLinkPointWidgetProps {\n  point: PointModel;\n  color?: string;\n  colorSelected: string;\n}\n\nexport interface DefaultLinkPointWidgetState {\n  selected: boolean;\n}\n\nexport const PointTop = styled.circle`\n  pointer-events: all;\n`;\n\nexport class DefaultLinkPointWidget extends React.Component<\n  DefaultLinkPointWidgetProps,\n  DefaultLinkPointWidgetState\n> {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selected: false,\n    };\n  }\n\n  render() {\n    const { point } = this.props;\n    return (\n      <g>\n        <circle\n          cx={point.getPosition().x}\n          cy={point.getPosition().y}\n          r={5}\n          fill={\n            this.state.selected || this.props.point.isSelected()\n              ? this.props.colorSelected\n              : this.props.color\n          }\n        />\n        <PointTop\n          className=\"point\"\n          onMouseLeave={() => {\n            this.setState({ selected: false });\n          }}\n          onMouseEnter={() => {\n            this.setState({ selected: true });\n          }}\n          data-id={point.getID()}\n          data-linkid={point.getLink().getID()}\n          cx={point.getPosition().x}\n          cy={point.getPosition().y}\n          r={15}\n          opacity={0.0}\n        />\n      </g>\n    );\n  }\n}\n","import * as React from \"react\";\nimport { DefaultLinkFactory } from \"../factories/DefaultLinkFactory\";\nimport { DiagramEngine } from \"@projectstorm/react-diagrams-core\";\nimport { DefaultLinkModel } from \"../models/DefaultLinkModel\";\n\nexport interface DefaultLinkSegmentWidgetProps {\n  path: string;\n  link: DefaultLinkModel;\n  selected: boolean;\n  forwardRef: React.RefObject<SVGPathElement>;\n  factory: DefaultLinkFactory;\n  diagramEngine: DiagramEngine;\n  onSelection: (selected: boolean) => any;\n  extras: object;\n}\n\nexport class DefaultLinkSegmentWidget extends React.Component<\n  DefaultLinkSegmentWidgetProps\n> {\n  render() {\n    const Bottom = React.cloneElement(\n      this.props.factory.generateLinkSegment(\n        this.props.link,\n        this.props.selected || this.props.link.isSelected(),\n        this.props.path\n      ),\n      {\n        ref: this.props.forwardRef,\n      }\n    );\n\n    const Top = React.cloneElement(Bottom, {\n      strokeLinecap: \"round\",\n      onMouseLeave: () => {\n        this.props.onSelection(false);\n      },\n      onMouseEnter: () => {\n        this.props.onSelection(true);\n      },\n      ...this.props.extras,\n      ref: null,\n      \"data-linkid\": this.props.link.getID(),\n      strokeOpacity: this.props.selected ? 0.1 : 0,\n      strokeWidth: 20,\n      fill: \"none\",\n      onContextMenu: (event) => {\n        if (!this.props.link.isLocked()) {\n          event && event.preventDefault();\n          this.props.link.remove();\n        }\n      },\n    });\n\n    return (\n      <g>\n        {Bottom}\n        {Top}\n      </g>\n    );\n  }\n}\n","import * as React from \"react\";\nimport {\n  DiagramEngine,\n  LinkWidget,\n  PointModel,\n} from \"@projectstorm/react-diagrams-core\";\nimport { DefaultLinkModel } from \"../models/DefaultLinkModel\";\nimport { DefaultLinkPointWidget } from \"./DefaultLinkPointWidget\";\nimport { DefaultLinkSegmentWidget } from \"./DefaultLinkSegmentWidget\";\nimport { MouseEvent } from \"react\";\n\nexport interface DefaultLinkProps {\n  link: DefaultLinkModel;\n  diagramEngine: DiagramEngine;\n  pointAdded?: (point: PointModel, event: MouseEvent) => any;\n}\n\nexport interface DefaultLinkState {\n  selected: boolean;\n}\n\nexport class DefaultLinkWidget extends React.Component<\n  DefaultLinkProps,\n  DefaultLinkState\n> {\n  refPaths: React.RefObject<SVGPathElement>[];\n\n  constructor(props: DefaultLinkProps) {\n    super(props);\n    this.refPaths = [];\n    this.state = {\n      selected: false,\n    };\n  }\n\n  componentDidUpdate(): void {\n    this.props.link.setRenderedPaths(\n      this.refPaths.map((ref) => {\n        return ref.current;\n      })\n    );\n  }\n\n  componentDidMount(): void {\n    this.props.link.setRenderedPaths(\n      this.refPaths.map((ref) => {\n        return ref.current;\n      })\n    );\n  }\n\n  componentWillUnmount(): void {\n    this.props.link.setRenderedPaths([]);\n  }\n\n  addPointToLink(event: MouseEvent, index: number) {\n    if (\n      !event.shiftKey &&\n      !this.props.link.isLocked() &&\n      this.props.link.getPoints().length - 1 <=\n        this.props.diagramEngine.getMaxNumberPointsPerLink()\n    ) {\n      const point = new PointModel({\n        link: this.props.link,\n        position: this.props.diagramEngine.getRelativeMousePoint(event),\n      });\n      this.props.link.addPoint(point, index);\n      event.persist();\n      event.stopPropagation();\n      this.forceUpdate(() => {\n        this.props.diagramEngine.getActionEventBus().fireAction({\n          event,\n          model: point,\n        });\n      });\n    }\n  }\n\n  generatePoint(point: PointModel): JSX.Element {\n    return (\n      <DefaultLinkPointWidget\n        key={point.getID()}\n        point={point as any}\n        colorSelected={this.props.link.getOptions().selectedColor}\n        color={this.props.link.getOptions().color}\n      />\n    );\n  }\n\n  generateLink(\n    path: string,\n    extraProps: any,\n    id: string | number\n  ): JSX.Element {\n    const ref = React.createRef<SVGPathElement>();\n    this.refPaths.push(ref);\n    return (\n      <DefaultLinkSegmentWidget\n        key={`link-${id}`}\n        path={path}\n        selected={this.state.selected}\n        diagramEngine={this.props.diagramEngine}\n        factory={this.props.diagramEngine.getFactoryForLink(this.props.link)}\n        link={this.props.link}\n        forwardRef={ref}\n        onSelection={(selected) => {\n          this.setState({ selected: selected });\n        }}\n        extras={extraProps}\n      />\n    );\n  }\n\n  render() {\n    //ensure id is present for all points on the path\n    var points = this.props.link.getPoints();\n    var paths = [];\n    this.refPaths = [];\n\n    if (points.length === 2) {\n      paths.push(\n        this.generateLink(\n          this.props.link.getSVGPath(),\n          {\n            onMouseDown: (event) => {\n              this.addPointToLink(event, 1);\n            },\n          },\n          \"0\"\n        )\n      );\n\n      // draw the link as dangeling\n      if (this.props.link.getTargetPort() == null) {\n        paths.push(this.generatePoint(points[1]));\n      }\n    } else {\n      //draw the multiple anchors and complex line instead\n      for (let j = 0; j < points.length - 1; j++) {\n        paths.push(\n          this.generateLink(\n            LinkWidget.generateLinePath(points[j], points[j + 1]),\n            {\n              \"data-linkid\": this.props.link.getID(),\n              \"data-point\": j,\n              onMouseDown: (event: MouseEvent) => {\n                this.addPointToLink(event, j + 1);\n              },\n            },\n            j\n          )\n        );\n      }\n\n      //render the circles\n      for (let i = 1; i < points.length - 1; i++) {\n        paths.push(this.generatePoint(points[i]));\n      }\n\n      if (this.props.link.getTargetPort() == null) {\n        paths.push(this.generatePoint(points[points.length - 1]));\n      }\n    }\n\n    return (\n      <g data-default-link-test={this.props.link.getOptions().testName}>\n        {paths}\n      </g>\n    );\n  }\n}\n","import * as React from \"react\";\nimport { DefaultLinkModel } from \"../models/DefaultLinkModel\";\nimport { DefaultLinkWidget } from \"../widgets/DefaultLinkWidget\";\nimport styled from \"@emotion/styled\";\nimport { css, keyframes } from \"@emotion/core\";\nimport { AbstractReactFactory } from \"@projectstorm/react-canvas-core\";\nimport { DiagramEngine } from \"@projectstorm/react-diagrams-core\";\n\nexport const Keyframes = keyframes`\n\t\tfrom {\n\t\t\tstroke-dashoffset: 24;\n\t\t}\n\t\tto {\n\t\t\tstroke-dashoffset: 0;\n\t\t}\n\t`;\n\nconst selected = css`\n  stroke-dasharray: 10, 2;\n  animation: ${Keyframes} 1s linear infinite;\n`;\n\nexport const Path = styled.path<{ selected: boolean }>`\n  ${(p) => p.selected && selected};\n  fill: none;\n  pointer-events: all;\n`;\n\nexport class DefaultLinkFactory<\n  Link extends DefaultLinkModel = DefaultLinkModel\n> extends AbstractReactFactory<Link, DiagramEngine> {\n  constructor(type = \"default\") {\n    super(type);\n  }\n\n  generateReactWidget(event): JSX.Element {\n    return <DefaultLinkWidget link={event.model} diagramEngine={this.engine} />;\n  }\n\n  generateModel(event): Link {\n    return new DefaultLinkModel() as Link;\n  }\n\n  generateLinkSegment(model: Link, selected: boolean, path: string) {\n    return (\n      <Path\n        selected={selected}\n        stroke={\n          selected ? model.getOptions().selectedColor : model.getOptions().color\n        }\n        strokeWidth={model.getOptions().width}\n        d={path}\n      />\n    );\n  }\n}\n","import * as React from \"react\";\nimport { DiagramEngine } from \"@projectstorm/react-diagrams-core\";\nimport { DefaultNodeModel } from \"../models/DefaultNodeModel\";\nimport styled from \"@emotion/styled\";\n\nnamespace S {\n  export const Node = styled.div<{ background: string; selected: boolean }>`\n  background-color: ${(p) => p.background};\n  border-radius: 5px;\n  font-family: sans-serif;\n  color: white;\n  border: solid 2px black;\n  overflow: visible;\n  font-size: 11px;\n  border: solid 2px ${(p) => (p.selected ? \"rgb(0,192,255)\" : \"black\")};\n`;\n\n  export const Title = styled.div`\n  background: rgba(0, 0, 0, 0.3);\n  display: flex;\n  white-space: nowrap;\n  justify-items: center;\n`;\n\n  export const TitleName = styled.div`\n  flex-grow: 1;\n  padding: 5px 5px;\n`;\n}\n\nexport interface DefaultNodeProps {\n  node: DefaultNodeModel;\n  engine: DiagramEngine;\n}\n\nexport const CustomLabelWidget = (props: DefaultNodeProps) => {\n  let { node } = props;\n  \n  return (\n    <S.Node\n      data-default-node-name={node.getOptions().name}\n      selected={node.isSelected()}\n      background={node.getOptions().color}\n    >\n      <S.Title>\n        <S.TitleName>{node.getOptions().name}</S.TitleName>\n      </S.Title>\n    </S.Node>\n  );\n}\n","import * as React from \"react\";\nimport { DefaultNodeModel } from \"../models/DefaultNodeModel\";\nimport { CustomLabelWidget } from \"../widgets/CustomLabelWidget\";\nimport { AbstractReactFactory } from \"@projectstorm/react-canvas-core\";\nimport { DiagramEngine } from \"@projectstorm/react-diagrams-core\";\n\nexport class CustomLabelFactory extends AbstractReactFactory<\n  DefaultNodeModel,\n  DiagramEngine\n> {\n  constructor() {\n    super(\"label\");\n  }\n\n  generateReactWidget(event): JSX.Element {\n    return <CustomLabelWidget engine={this.engine} node={event.model} />;\n  }\n\n  generateModel(event): DefaultNodeModel {\n    return new DefaultNodeModel(true, \"Label\", \"rgb(192,255,0)\");\n  }\n}\n","import { AbstractModelFactory } from \"@projectstorm/react-canvas-core\";\nimport { DiagramEngine } from \"@projectstorm/react-diagrams-core\";\nimport { AdvancedPortModel } from \"../models/ArrowPortModel\";\n\nexport class ArrowPortFactory extends AbstractModelFactory<\n  AdvancedPortModel,\n  DiagramEngine\n> {\n  constructor() {\n    super(\"arrow\");\n  }\n\n  generateModel(): AdvancedPortModel {\n    return new AdvancedPortModel(\"port\", true, false);\n  }\n}\n","import createEngine, {\n  DiagramModel,\n  DiagramEngine,\n  LinkModel,\n  LinkModelGenerics,\n} from \"@projectstorm/react-diagrams\";\nimport { ArrowLinkFactory } from \"../infrastructure/factories/ArrowLinkFactory\";\nimport { DefaultNodeFactory } from \"../infrastructure/factories/DefaultNodeFactory\";\nimport { DefaultLabelFactory } from \"../infrastructure/factories/DefaultLabelFactory\";\nimport { DefaultPortFactory } from \"../infrastructure/factories/DefaultPortFactory\";\nimport { DefaultLinkFactory } from \"../infrastructure/factories/DefaultLinkFactory\";\nimport { CustomLabelFactory } from \"../infrastructure/factories/CustomLabelFactory\";\nimport { DefaultPortModel } from \"../infrastructure/models/DefaultPortModel\";\nimport { ArrowLinkModel } from \"../infrastructure/models/ArrowLinkModel\";\nimport { AdvancedPortModel } from \"../infrastructure/models/ArrowPortModel\";\nimport { DefaultNodeModel } from \"../infrastructure/models/DefaultNodeModel\";\nimport { DefaultLabelModel } from \"../infrastructure/models/DefaultLabelModel\";\nimport { DefaultLinkModel } from \"../infrastructure/models/DefaultLinkModel\";\nimport { DefaultDiagramState } from \"@projectstorm/react-diagrams\";\nimport { ArrowPortFactory } from \"../infrastructure/factories/ArrowPortFactory\";\nimport { Toolkit } from \"../infrastructure/Toolkit\";\nimport _ from \"lodash\";\n\nexport class Application {\n  protected activeModel!: DiagramModel;\n  protected logicModel!: DiagramModel;\n\n  protected diagramEngine: DiagramEngine;\n\n  constructor() {\n    this.diagramEngine = createEngine();\n\n    this.diagramEngine\n      .getNodeFactories()\n      .registerFactory(new CustomLabelFactory());\n    this.diagramEngine\n      .getNodeFactories()\n      .registerFactory(new DefaultNodeFactory());\n\n    this.diagramEngine\n      .getLabelFactories()\n      .registerFactory(new DefaultLabelFactory());\n\n    this.diagramEngine\n      .getPortFactories()\n      .registerFactory(new DefaultPortFactory());\n    this.diagramEngine\n      .getPortFactories()\n      .registerFactory(new ArrowPortFactory());\n\n    this.diagramEngine\n      .getLinkFactories()\n      .registerFactory(new ArrowLinkFactory());\n    this.diagramEngine\n      .getLinkFactories()\n      .registerFactory(new DefaultLinkFactory());\n\n    const state = this.diagramEngine.getStateMachine().getCurrentState();\n\n    if (state instanceof DefaultDiagramState) {\n      state.dragNewLink.config.allowLooseLinks = false;\n    }\n\n    this.newModel();\n  }\n\n  public newModel() {\n    this.activeModel = new DiagramModel();\n    this.logicModel = new DiagramModel();\n\n    this.diagramEngine.setModel(this.activeModel);\n  }\n\n  public getActiveDiagram(): DiagramModel {\n    return this.activeModel;\n  }\n\n  public getLogicDiagram(): DiagramModel {\n    return this.logicModel;\n  }\n\n  public getDiagramEngine(): DiagramEngine {\n    return this.diagramEngine;\n  }\n\n  public setLogicModel() {\n    let concNodes = this.activeModel.getNodes();\n\n    Object.keys(concNodes).forEach((k) => {\n      let node = concNodes[k].clone() as DefaultNodeModel;\n\n      let nodePorts = concNodes[k].getPorts();\n\n      Object.keys(nodePorts).filter(id => nodePorts[id].isNamePort).forEach((k) => {\n        let port = nodePorts[k] as DefaultPortModel;\n        let logicPort = new AdvancedPortModel(\n          port.label,\n          port.isNamePort,\n          port.isPrimaryKey,\n          port.isForeignKey,\n          port.isPartialKey,\n          port.isNotNull,\n          port.isAutoincremented,\n          port.isUnique,\n          port.propertyType\n        );\n        node.addPort(logicPort);\n      });\n\n      this.logicModel.addNode(node);\n    });\n\n    let nodes = this.logicModel.getNodes();\n\n    let nodesWithoutPK: DefaultNodeModel[] = [];\n    nodes.map(n => {\n      let ports = n.getPorts() as { [s: string]: DefaultPortModel; }\n\n      let portsWithPK = _.values(ports).filter(port => port.isPrimaryKey);\n\n      if (portsWithPK.length === 0) {\n        nodesWithoutPK.push(n as DefaultNodeModel);\n      }\n    })\n\n\n    let links = this.activeModel.getLinks();\n\n    let priorityLinks = [];\n\n    links.filter(link => {\n      let sourceNode = link.getSourcePort().getParent() as DefaultNodeModel\n      let targetNode = link.getTargetPort().getParent() as DefaultNodeModel\n\n      if (nodesWithoutPK.map(node => node.getOptions().name).includes(sourceNode.getOptions().name) || nodesWithoutPK.map(node => node.getOptions().name).includes(targetNode.getOptions().name)) {\n        priorityLinks.push(link);\n      }\n    })\n\n    console.log('priorityLinks ', priorityLinks)\n\n    let priom2mLinks = priorityLinks.filter(link => {\n      let sourceLabel = (link\n        .getLabels()[0] as DefaultLabelModel).getOptions().label;\n      let targetLabel = (link\n        .getLabels()[2] as DefaultLabelModel).getOptions().label;\n\n      return sourceLabel.includes('N') && targetLabel.includes('N')\n    })\n\n    let priosourceLinks = priorityLinks.filter(link => {\n      let sourceLabel = (link\n        .getLabels()[0] as DefaultLabelModel).getOptions().label;\n      let targetLabel = (link\n        .getLabels()[2] as DefaultLabelModel).getOptions().label;\n\n      return sourceLabel.includes('N') && !targetLabel.includes('N')\n    })\n\n    let priotargetLinks = priorityLinks.filter(link => {\n      let sourceLabel = (link\n        .getLabels()[0] as DefaultLabelModel).getOptions().label;\n      let targetLabel = (link\n        .getLabels()[2] as DefaultLabelModel).getOptions().label;\n\n      return !sourceLabel.includes('N') && targetLabel.includes('N')\n    })\n\n    let priooneToOneLinks = priorityLinks.filter(link => {\n      let sourceLabel = (link\n        .getLabels()[0] as DefaultLabelModel).getOptions().label;\n      let targetLabel = (link\n        .getLabels()[2] as DefaultLabelModel).getOptions().label;\n\n      return !sourceLabel.includes('N') && !targetLabel.includes('N')\n    })\n\n\n    // targetLinks\n    this.convertTargetPorts(priotargetLinks);\n\n    // sourceLinks\n    this.convertSourceLinks(priosourceLinks);\n\n    // M2M LINKS\n    this.convertM2MLink(priom2mLinks);\n\n    this.convertSourceLinks(priooneToOneLinks);\n\n    let concLinks = this.activeModel.getLinks().filter(link => !priorityLinks.includes(link));\n\n\n    let m2mLinks = concLinks.filter(link => {\n      let sourceLabel = (link\n        .getLabels()[0] as DefaultLabelModel).getOptions().label;\n      let targetLabel = (link\n        .getLabels()[2] as DefaultLabelModel).getOptions().label;\n\n      return sourceLabel.includes('N') && targetLabel.includes('N')\n    })\n\n    let sourceLinks = concLinks.filter(link => {\n      let sourceLabel = (link\n        .getLabels()[0] as DefaultLabelModel).getOptions().label;\n      let targetLabel = (link\n        .getLabels()[2] as DefaultLabelModel).getOptions().label;\n\n      return sourceLabel.includes('N') && !targetLabel.includes('N')\n    })\n\n    let targetLinks = concLinks.filter(link => {\n      let sourceLabel = (link\n        .getLabels()[0] as DefaultLabelModel).getOptions().label;\n      let targetLabel = (link\n        .getLabels()[2] as DefaultLabelModel).getOptions().label;\n\n      return !sourceLabel.includes('N') && targetLabel.includes('N')\n    })\n\n    let oneToOneLinks = concLinks.filter(link => {\n      let sourceLabel = (link\n        .getLabels()[0] as DefaultLabelModel).getOptions().label;\n      let targetLabel = (link\n        .getLabels()[2] as DefaultLabelModel).getOptions().label;\n\n      return !sourceLabel.includes('N') && !targetLabel.includes('N')\n    })\n\n\n\n    // targetLinks\n    this.convertTargetPorts(targetLinks);\n\n    // sourceLinks\n    this.convertSourceLinks(sourceLinks);\n\n    // M2M LINKS\n    this.convertM2MLink(m2mLinks);\n\n    this.convertSourceLinks(oneToOneLinks);\n\n\n    this.diagramEngine.setModel(this.logicModel);\n  }\n\n  public setConceptualModel() {\n    this.logicModel = null;\n    this.logicModel = new DiagramModel();\n\n    let activeModelCopy = new DiagramModel();\n\n    let nodes = this.activeModel.getNodes();\n\n    Object.keys(nodes).forEach((k) => {\n      activeModelCopy.addNode(nodes[k]);\n    });\n\n    let links = this.activeModel.getLinks();\n\n    Object.keys(links).forEach((k) => {\n      activeModelCopy.addLink(links[k]);\n    });\n\n    this.activeModel = activeModelCopy;\n\n    this.diagramEngine.setModel(this.activeModel);\n  }\n\n  public loadConceptualModel(model: DiagramModel) {\n    this.activeModel = model;\n\n    this.diagramEngine.setModel(this.activeModel);\n  }\n\n  public loadLogicModel(model: DiagramModel) {\n    this.logicModel = model;\n    this.diagramEngine.setModel(this.logicModel);\n  }\n\n  public convertM2MLink(m2mLinks: LinkModel<LinkModelGenerics>[]) {\n    Object.keys(m2mLinks).forEach((k) => {\n      let logicNodes = this.logicModel.getNodes() as DefaultNodeModel[];\n\n      let sourceNode = m2mLinks[k].sourcePort.getParent() as DefaultNodeModel;\n      let sourceNodeId = logicNodes\n        .filter(\n          (node) =>\n            (node as DefaultNodeModel).getOptions().name ===\n            sourceNode.getOptions().name\n        )[0]\n        .getOptions().id;\n\n      let targetNode = m2mLinks[k].targetPort.getParent() as DefaultNodeModel;\n      let targetNodeId = logicNodes\n        .filter(\n          (node) =>\n            (node as DefaultNodeModel).getOptions().name ===\n            targetNode.getOptions().name\n        )[0]\n        .getOptions().id;\n\n      let relNode = ((m2mLinks[k] as DefaultLinkModel)\n        .properties as DefaultNodeModel).clone() as DefaultNodeModel;\n\n      relNode.getOptions().name = relNode.getOptions().name = m2mLinks[k].relName;\n\n      relNode.setPosition(\n        sourceNode.getPosition().x + 150,\n        sourceNode.getPosition().y - 100\n      );\n\n      relNode.addPort(\n        new AdvancedPortModel(\n          \"Id\",\n          false,\n          true,\n          false,\n          false,\n          true,\n          true,\n          true,\n          \"INT\"\n        )\n      );\n      relNode.addPort(\n        new AdvancedPortModel(\n          \"\",\n          true,\n          false,\n          false,\n          false,\n          false,\n          false,\n          false,\n          \"INT\"\n        )\n      );\n      relNode.addPort(\n        new AdvancedPortModel(\n          \"1\",\n          true,\n          false,\n          false,\n          false,\n          false,\n          false,\n          false,\n          \"INT\"\n        )\n      );\n\n      let sourceNodeLogic = logicNodes.filter(\n        (n) => n.getOptions().id === sourceNodeId\n      )[0];\n      let sourceNodePorts = sourceNodeLogic.getPorts() as {\n        [s: string]: DefaultPortModel;\n      }\n      let sourceNodePKPort = _.keys(sourceNodePorts).filter(key => sourceNodePorts[key].isPrimaryKey || sourceNodePorts[key].isPartialKey).map(key => sourceNodePorts[key]);\n\n      let targetNodeLogic = logicNodes.filter(\n        (n) => n.getOptions().id === targetNodeId\n      )[0];\n      let targetNodePorts = targetNodeLogic.getPorts() as {\n        [s: string]: DefaultPortModel;\n      }\n      let targetNodePKPort = _.keys(targetNodePorts).filter(key => targetNodePorts[key].isPrimaryKey || targetNodePorts[key].isPartialKey).map(key => targetNodePorts[key]);\n\n      let targetNodePrimaryKeysPorts = _.keys(targetNodePorts).filter(key => targetNodePorts[key].isPrimaryKey).map(key => targetNodePorts[key]);\n      let sourceNodePrimaryKeysPorts = _.keys(sourceNodePorts).filter(key => sourceNodePorts[key].isPrimaryKey).map(key => sourceNodePorts[key]);\n\n      let x = 1\n      sourceNodePKPort.forEach(port => {\n        relNode.addPort(\n          new AdvancedPortModel(\n            sourceNode.getOptions().name + port.label + `${sourceNode === targetNode ? x : ''}`,\n            false,\n            sourceNodePrimaryKeysPorts.length > 0 ? false : true,\n            sourceNodePrimaryKeysPorts.length > 0 ? true : false,\n            false, // partial\n            true,\n            false,\n            false,\n            \"INT\",\n            Toolkit.UID(),\n            sourceNodeId\n          )\n        )\n        x++;\n      }\n      );\n\n\n      targetNodePKPort.forEach(port => {\n        relNode.addPort(\n          new AdvancedPortModel(\n            targetNode.getOptions().name + port.label,\n            false,\n            targetNodePrimaryKeysPorts.length > 0 ? false : true,\n            targetNodePrimaryKeysPorts.length > 0 ? true : false,\n            false,// partial\n            true,\n            false,\n            false,\n            \"INT\",\n            Toolkit.UID(),\n            targetNodeId\n          )\n        );\n      });\n\n      this.logicModel.addNode(relNode);\n\n      let node = logicNodes.filter(\n        (n) => n.getOptions().id === sourceNodeId\n      )[0];\n      let sourceP = node.getPorts()[\"1\"];\n      let targetP = relNode.getPorts()[\"\"];\n\n      let link = new ArrowLinkModel({ type: \"arrow\" });\n\n      link.setSourcePort(sourceP);\n      link.setTargetPort(targetP);\n\n      let node2 = logicNodes.filter(\n        (n) => n.getOptions().id === targetNodeId\n      )[0];\n      let targetP2 = relNode.getPorts()[\"1\"];\n      let sourceP2 = node2.getPorts()[\"\"];\n\n      let link2 = new ArrowLinkModel({ type: \"arrow\" });\n\n      link2.setSourcePort(sourceP2);\n      link2.setTargetPort(targetP2);\n\n      this.logicModel.addAll(link, link2);\n\n    });\n  }\n\n  public convertSourceLinks(sourceLinks: LinkModel<LinkModelGenerics>[]) {\n    Object.keys(sourceLinks).forEach((k) => {\n      let logicNodes = this.logicModel.getNodes() as DefaultNodeModel[];\n\n      let sourceNode = sourceLinks[k].sourcePort.getParent() as DefaultNodeModel;\n      let sourceNodeId = logicNodes\n        .filter(\n          (node) =>\n            (node as DefaultNodeModel).getOptions().name ===\n            sourceNode.getOptions().name\n        )[0]\n        .getOptions().id;\n\n      let targetNode = sourceLinks[k].targetPort.getParent() as DefaultNodeModel;\n      let targetNodeId = logicNodes\n        .filter(\n          (node) =>\n            (node as DefaultNodeModel).getOptions().name ===\n            targetNode.getOptions().name\n        )[0]\n        .getOptions().id;\n\n\n      /// source\n      let sourceNodeLogic = logicNodes.filter(\n        (n) => n.getOptions().id === targetNodeId\n      )[0];\n      let sourceNodePorts = sourceNodeLogic.getPorts() as {\n        [s: string]: DefaultPortModel;\n      }\n      let sourceNodePKPort = _.keys(sourceNodePorts).filter(key => sourceNodePorts[key].isPrimaryKey || sourceNodePorts[key].isPartialKey).map(key => sourceNodePorts[key]);\n      ///\n\n      /// target\n      let node = logicNodes.filter(\n        (n) => n.getOptions().id === sourceNodeId\n      )[0];\n\n      let targetNodePorts = node.getPorts() as {\n        [s: string]: DefaultPortModel;\n      }\n      let targetNodePrimaryKeysPorts = _.keys(targetNodePorts).filter(key => targetNodePorts[key].isPrimaryKey).map(key => targetNodePorts[key]);\n      ///\n      sourceNodePKPort.forEach(port => {\n        node.addPort(\n          new AdvancedPortModel(\n            targetNode.getOptions().name + port.label,\n            false,\n            targetNodePrimaryKeysPorts.length > 0 ? false : true,\n            targetNodePrimaryKeysPorts.length > 0 ? true : false,\n            false,//PARTIAL\n            true,\n            false,\n            false,\n            \"INT\",\n            Toolkit.UID(),\n            targetNodeId\n          )\n        );\n      })\n      let nodePorts = node.getPorts() as { [s: string]: DefaultPortModel; }\n      let newPKPorts = _.keys(nodePorts).filter(key => nodePorts[key].isPartialKey).map(key => nodePorts[key]);\n\n      newPKPorts.map(port => port.isPrimaryKey = true);\n\n      let relNode = ((sourceLinks[k] as DefaultLinkModel)\n      .properties as DefaultNodeModel).clone() as DefaultNodeModel;\n\n      let relPorts = relNode.getPorts() as { [s: string]: DefaultPortModel; }\n\n      _.values(relPorts).map(port => {\n        let logicPort = new AdvancedPortModel(\n          port.label,\n          port.isNamePort,\n          port.isPrimaryKey,\n          port.isForeignKey,\n          port.isPartialKey,\n          port.isNotNull,\n          port.isAutoincremented,\n          port.isUnique,\n          port.propertyType\n        );\n        node.addPort(logicPort);\n      })\n\n      let tNode = logicNodes.filter(\n        (n) => n.getOptions().id === targetNodeId\n      )[0];\n\n      let targetP = node.getPorts()[\"1\"];\n      let sourceP = tNode.getPorts()[\"\"];\n\n      let link = new ArrowLinkModel({ type: \"arrow\" });\n\n      link.setSourcePort(sourceP);\n      link.setTargetPort(targetP);\n      this.logicModel.addLink(link);\n    });\n  }\n\n  public convertTargetPorts(targetLinks: LinkModel<LinkModelGenerics>[]) {\n    Object.keys(targetLinks).forEach((k) => {\n      let logicNodes = this.logicModel.getNodes() as DefaultNodeModel[];\n\n      let sourceNode = targetLinks[k].sourcePort.getParent() as DefaultNodeModel;\n      let sourceNodeId = logicNodes\n        .filter(\n          (node) =>\n            (node as DefaultNodeModel).getOptions().name ===\n            sourceNode.getOptions().name\n        )[0]\n        .getOptions().id;\n\n      let targetNode = targetLinks[k].targetPort.getParent() as DefaultNodeModel;\n      let targetNodeId = logicNodes\n        .filter(\n          (node) =>\n            (node as DefaultNodeModel).getOptions().name ===\n            targetNode.getOptions().name\n        )[0]\n        .getOptions().id;\n\n\n\n      /// source\n      let sourceNodeLogic = logicNodes.filter(\n        (n) => n.getOptions().id === sourceNodeId\n      )[0];\n      let sourceNodePorts = sourceNodeLogic.getPorts() as {\n        [s: string]: DefaultPortModel;\n      }\n      let sourceNodePKPort = _.keys(sourceNodePorts).filter(key => sourceNodePorts[key].isPrimaryKey || sourceNodePorts[key].isPartialKey).map(key => sourceNodePorts[key]);\n\n      /// target\n      let node = logicNodes.filter(\n        (n) => n.getOptions().id === targetNodeId\n      )[0];\n\n      let targetNodePorts = node.getPorts() as {\n        [s: string]: DefaultPortModel;\n      }\n      let targetNodePrimaryKeysPorts = _.keys(targetNodePorts).filter(key => targetNodePorts[key].isPrimaryKey).map(key => targetNodePorts[key]);\n      ///\n\n      sourceNodePKPort.forEach(port => {\n        node.addPort(\n          new AdvancedPortModel(\n            sourceNode.getOptions().name + port.label,\n            false,\n            targetNodePrimaryKeysPorts.length > 0 ? false : true,\n            targetNodePrimaryKeysPorts.length > 0 ? true : false,\n            false,//PARTIAL\n            true,\n            false,\n            false,\n            \"INT\",\n            Toolkit.UID(),\n            sourceNodeId\n          )\n        );\n      })\n\n      let nodePorts = node.getPorts() as { [s: string]: DefaultPortModel; }\n      let newPKPorts = _.keys(nodePorts).filter(key => nodePorts[key].isPartialKey).map(key => nodePorts[key]);\n\n      newPKPorts.map(port => port.isPrimaryKey = true);\n\n      let relNode = ((targetLinks[k] as DefaultLinkModel)\n      .properties as DefaultNodeModel).clone() as DefaultNodeModel;\n\n      let relPorts = relNode.getPorts() as { [s: string]: DefaultPortModel; }\n\n      _.values(relPorts).map(port => {\n        let logicPort = new AdvancedPortModel(\n          port.label,\n          port.isNamePort,\n          port.isPrimaryKey,\n          port.isForeignKey,\n          port.isPartialKey,\n          port.isNotNull,\n          port.isAutoincremented,\n          port.isUnique,\n          port.propertyType\n        );\n        node.addPort(logicPort);\n      })\n\n      let tNode = logicNodes.filter(\n        (n) => n.getOptions().id === sourceNodeId\n      )[0];\n\n      let targetP = node.getPorts()[\"\"];\n      let sourceP = tNode.getPorts()[\"1\"];\n\n      let link = new ArrowLinkModel({ type: \"arrow\" });\n\n      link.setSourcePort(sourceP);\n      link.setTargetPort(targetP);\n      this.logicModel.addLink(link);\n    });\n  }\n}\n","import * as React from \"react\";\nimport { BodyWidget } from \"./components/BodyWidget\";\nimport { Application } from \"./components/Application\";\n\nexport default () => {\n  var app = new Application();\n  return (\n    <div className=\"content\">\n      <BodyWidget app={app} />\n    </div>\n  );\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import \"./icons/micon/css/micon.min.css\";\nimport \"react-bootstrap-table-next/dist/react-bootstrap-table2.min.css\";\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\n\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}