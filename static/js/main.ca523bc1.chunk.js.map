{"version":3,"sources":["infrastructure/models/PropertyType.ts","infrastructure/models/Label.ts","infrastructure/models/Link.ts","infrastructure/models/Port.ts","infrastructure/models/Node.ts","infrastructure/widgets/CustomLabelWidget.tsx","infrastructure/factories/CustomLabelFactory.ts","infrastructure/factories/CustomPortFactory.tsx","infrastructure/widgets/CustomPortLabelWidget.tsx","infrastructure/widgets/CustomNodeWidget.tsx","infrastructure/factories/CustomNodeFactory.tsx","infrastructure/widgets/CustomLinkLabelWidget.tsx","infrastructure/factories/CustomLinkLabelFactory.ts","infrastructure/factories/CustomLinkFactory.tsx","components/dragAndDrop/Application.ts","components/dragAndDrop/TrayItemWidget.tsx","components/dragAndDrop/TrayWidget.tsx","components/grid/Grid.tsx","components/grid/Row.tsx","components/grid/Col.tsx","components/propertyTable/PropertyTable.tsx","components/nodeProperties/NodeProperties.tsx","components/popups/ResultPopup/ResultPopup.tsx","handlers/GenerationHandler.tsx","components/popups/RealtionPopup/RelationPopup.tsx","components/popups/LoadFilePopup/LoadFilePopup.tsx","handlers/LoadFileHandler.tsx","components/popups/SaveToFilePopup/SaveToFilePopup.tsx","components/popups/SaveToJpegPopup/SaveToJpegPopup.tsx","AppView.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["PropertyType","Label","_LabelModel","label","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","offsetY","inherits","createClass","key","value","ob","engine","get","prototype","_","LabelModel","Link","_LinkModel","type","arguments","length","undefined","width","color","curvyness","properties","console","log","addLabel","Node","relPorts","ports","values","map","a","propertyType","isPrimaryKey","isNotNull","isAutoincremented","isUnique","propertiesNode","labelOb","setLabel","iterateListeners","listener","event","widthChanged","objectSpread","colorChanged","LinkModel","Port","_PortModel","name","isNamePort","isForeignKey","id","in","links","isPartialKey","object","port","PortModel","_NodeModel","isLabel","isNamedPort","isPK","isFK","isAuto","addPort","Toolkit","UID","portModel","NodeModel","CustomLabelWidget","_BaseWidget","props","state","react","assign","getProps","style","background","node","className","bem","BaseWidget","CustomLabelFactory","_AbstractNodeFactory","diagramEngine","React","initialConfig","AbstractNodeFactory","CustomPortFactory","_AbstractPortFactory","AbstractPortFactory","CustomPortLabelWidget","model","itemStyles","display","marginRight","react_default","createElement","main","getParent","setLocked","paddingLeft","paddingRight","fontWeight","justifyContent","CustomNodeWidget","CustomPortLabelWidget_CustomPortLabelWidget","getPorts","portsJSX","generatePort","bind","namedPort","filter","p","notNamedPort","wordBreak","maxWidth","marginLeft","CustomNodeFactory","CustomLinkLabelWidget","CustomLinkLabelFactory","_AbstractLabelFactory","AbstractLabelFactory","CustomLinkFactory","_AbstractLinkFactory","link","DefaultLinkWidget","widget","selected","path","strokeWidth","stroke","d","AbstractLinkFactory","Application","activeModel","SRD","registerNodeFactory","registerLinkFactory","registerLabelFactory","registerPortFactory","installDefaultFactories","newModel","setDiagramModel","TrayItemWidget","_React$Component","_this2","borderColor","draggable","onDragStart","dataTransfer","setData","JSON","stringify","TrayWidget","children","defaultProps","Grid","buildClassNameString","concat","Row","flex","Col","onDoubleClick","size","config","pull","push","offset","order","hidden","buildGridColConfigClassNames","sm","md","lg","xl","xxl","xxxl","PropertyTable","_React$useState3","useState","_React$useState4","slicedToArray","updatedItem","setUpdatedItem","forceUpdate","_React$useState","_React$useState2","setValue","useForceUpdate","useMemo","selectedItem","handleChangePK","row","persist","getPortFromID","keys","clearPartialKeys","columns","dataField","text","formatter","cellContent","defaultValue","onChange","target","handleChangePortLabel","list","handleChangepPropType","obj","checked","handleChangePartialKey","disabled","handleChangeNull","handleChangeAutoInc","handleChangeUnique","onClick","entries","constructor","x","forEach","getDiagramModel","removeLink","removePort","portsTable","cols","find","col","lib_default","keyField","data","relView","bordered","newPortNumber","addInPort","INT","NodeProperties","_React$useState5","_React$useState6","defaultName","setDefaultName","_React$useState7","_React$useState8","setName","_React$useState9","_React$useState10","showInput","setShowInput","handleNameChange","allNodes","diagramModel","getNodes","names","toLowerCase","trim","includes","Grid_Grid","Row_Row","Col_Col","height","PropertyTable_PropertyTable","ResultPopup","_useState","_useState2","dbName","setDbName","_useState3","_useState4","mySQLView","setmySQLView","formatedMSSQL","mssqlString","sqlFormatter","format","language","indent","formatedMySQL","mysqlString","reactjs_popup_es","modal","closeOnDocumentClick","open","isOpen","closeOnEscape","generateScript","marginTop","readOnly","contentEditable","blob","Blob","FileSaver","saveAs","update","GenerationHandler","sqlString","setSqlString","setMySqlString","useEffect","_ref","asyncToGenerator","regenerator_default","mark","_callee","serDiagram","diagram","response","responseMy","wrap","_context","prev","next","serializeDiagram","isUml","axios","post","SerializedModel","DatabaseName","RelationType","sent","status","stop","_x","apply","ResultPopup_ResultPopup_ResultPopup","RelationPopup","left","setLeft","right","setRight","_useState5","_useState6","relationName","setRelationName","leftLabel","labels","relLabel","rightLabel","sourcePort","parent","targetPort","options","Fragment","renderOptionPicker","side","points","index","remove","sourceP","targetP","margin","LoadFilePopup","fileReader","fileContent","setFileContent","handleFileRead","e","content","result","onClose","files","FileReader","onloadend","readAsText","accept","loadDiagram","LoadFileHandler","LoadFilePopup_LoadFilePopup_LoadFilePopup","app","getDiagramEngine","parse","setIsUml","model2","DiagramModel","deSerializeDiagram","splice","repaintCanvas","error","SaveToFilePopup","fileName","setFileName","diagramJson","SaveToJpegPopup","domtoimage","toJpeg","document","getElementById","quality","then","dataUrl","download","href","click","require","AppView","showDialog","setShowDialog","showRelationDialog","setShowRelationDialog","showLoadFileDialog","setShowLoadFileDialog","showSaveFileDialog","setSaveFileDialog","showSaveJPEGDialog","setSaveJPEGDialog","_React$useState11","_React$useState12","showSaveOptions","setSaveOptions","_React$useState13","_React$useState14","selectedNode","setSelectedNode","_React$useState15","_React$useState16","selectedLink","setSelectedLink","_React$useState17","_React$useState18","changeRelation","getLinks","temp","substring","temp2","refreshPopups","ref","TrayWidget_TrayWidget","TrayItemWidget_TrayItemWidget","paddingTop","onDrop","preventDefault","getData","nodesCount","newNodeName","addListener","getRelativeMousePoint","y","addNode","onDragOver","ctrlKey","getSelectedItems","PointModel","pointToRemove","pointLink","removePoint","allowLooseLinks","deleteKeys","NodeProperties_NodeProperties","GenerationHandler_GenerationHandler","LoadFileHandler_LoadFileHandler","SaveToFilePopup_SaveToFilePopup_SaveToFilePopup","SaveToJpegPopup_SaveToJpegPopup_SaveToJpegPopup","getActiveDiagram","RelationPopup_RelationPopup","App","AppView_AppView","Boolean","window","location","hostname","match","ReactDOM","App_App","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ca523bc1.chunk.js","sourcesContent":["export enum PropertyType {\n  BIT = \"BIT\",\n  TINYINT = \"TINYINT\",\n  SMALLINT = \"SMALLINT\",\n  INT = \"INT\",\n  BIGINT = \"BIGINT\",\n  'DECIMAL()' = \"DECIMAL()\",\n  'NUMERIC()' = \"NUMERIC()\",\n  'FLOAT()' = \"FLOAT()\",\n  REAL = \"REAL\",\n  DATE = \"DATE\",\n  TIME = \"TIME\",\n  DATETIME = \"DATETIME\",\n  TIMESTAMP = \"TIMESTAMP\",\n  YEAR = \"YEAR\",\n  'CHAR()' = \"CHAR()\",\n  'VARCHAR()' = \"VARCHAR()\",\n  TEXT = \"TEXT\",\n  'NCHAR()' = \"NCHAR()\",\n  'NVARCHAR()' = \"NVARCHAR()\",\n  NTEXT = \"NTEXT\",\n  'BINARY()' = \"BINARY()\",\n  'VARBINARY()' = \"VARBINARY()\",\n  IMAGE = \"IMAGE\",\n  CLOB = \"CLOB\",\n  BLOB = \"BLOB\",\n  XML = \"XML\",\n  JSON = \"JSON\",\n  MONEY = \"MONEY\"\n}\n","import * as _ from \"lodash\";\nimport { LabelModel, DiagramEngine } from \"storm-react-diagrams\";\n\nexport class Label extends LabelModel {\n  label: string;\n\n  constructor(label: string) {\n    super(\"custom\");\n    this.label = label;\n    this.offsetY = -23;\n  }\n\n  setLabel(label: string) {\n    this.label = label;\n  }\n\n  deSerialize(ob: any, engine: DiagramEngine) {\n    super.deSerialize(ob, engine);\n    this.label = ob.label;\n  }\n\n  serialize() {\n    return _.merge(super.serialize(), {\n      label: this.label\n    });\n  }\n}\n","import * as _ from \"lodash\";\nimport {\n  LinkModelListener,\n  BaseEvent,\n  LinkModel,\n  DefaultLinkModel,\n  DiagramEngine,\n  LabelModel,\n  PortModel\n} from \"storm-react-diagrams\";\nimport { Label } from \"./Label\";\nimport { Node } from \"./Node\";\nimport { PropertyType } from \"./PropertyType\";\n\nexport interface DefaultLinkModelListener extends LinkModelListener {\n  colorChanged?(\n    event: BaseEvent<DefaultLinkModel> & { color: null | string }\n  ): void;\n\n  widthChanged?(\n    event: BaseEvent<DefaultLinkModel> & { width: 0 | number }\n  ): void;\n}\nclass RelationProperties {\n  label: string;\n  isPrimaryKey: boolean;\n  isAutoincremented: boolean;\n  isNotNull: boolean;\n  isUnique: boolean;\n  propertyType: PropertyType\n}\nexport class Link extends LinkModel<DefaultLinkModelListener> {\n  width: number;\n  color: string;\n  curvyness: number;\n  properties: Node;\n\n  constructor(type: string = \"custom\") {\n    \n    super(type);\n    console.log('Link -> constructor');\n    this.color = \"rgba(255,255,255,0.5)\";\n    this.width = 3;\n    this.curvyness = 300;\n    this.addLabel(\"0,N\");\n    this.addLabel(\"relation name\");\n    this.addLabel(\"0,N\");\n    this.properties = new Node(false, 'relNode')\n    \n  }\n\n \n  serialize() {\n    let relPorts = this.properties && this.properties.ports && Object.values(this.properties.ports);\n    let properties = relPorts && relPorts.map(a => {\n      return { label: a.label, \n        propertyType: a.propertyType, \n        isPrimaryKey: a.isPrimaryKey ,\n        isNotNull: a.isNotNull,\n        isAutoincremented: a.isAutoincremented,\n        isUnique: a.isUnique \n      }\n    })\n\n    return _.merge(super.serialize(), {\n      width: this.width,\n      color: this.color,\n      curvyness: this.curvyness,\n      properties\n    });\n  }\n\n  deSerialize(ob: any, engine: DiagramEngine) {\n    let propertiesNode = new Node(false, 'relNode');\n    propertiesNode.ports = ob.properties.map((a: RelationProperties) => {\n      return { label: a.label, \n        propertyType: a.propertyType, \n        isPrimaryKey: a.isPrimaryKey ,\n        isNotNull: a.isNotNull,\n        isAutoincremented: a.isAutoincremented,\n        isUnique: a.isUnique \n      }\n    })\n    console.log('obj', ob.properties)\n    super.deSerialize(ob, engine);\n    this.color = ob.color;\n    this.width = ob.width;\n    this.curvyness = ob.curvyness;\n    this.properties = propertiesNode //ob.properties;\n  }\n\n  addLabel(label: LabelModel | string) {\n    if (label instanceof LabelModel) {\n      return super.addLabel(label);\n    }\n    let labelOb = new Label(\"custom\");\n    labelOb.setLabel(label);\n    return super.addLabel(labelOb);\n  }\n\n  setWidth(width: number) {\n    this.width = width;\n    this.iterateListeners(\n      (listener: DefaultLinkModelListener, event: BaseEvent) => {\n        if (listener.widthChanged) {\n          listener.widthChanged({ ...event, width: width });\n        }\n      }\n    );\n  }\n\n  setColor(color: string) {\n    this.color = color;\n    this.iterateListeners(\n      (listener: DefaultLinkModelListener, event: BaseEvent) => {\n        if (listener.colorChanged) {\n          listener.colorChanged({ ...event, color: color });\n        }\n      }\n    );\n  }\n}\n","import * as _ from \"lodash\";\nimport { Link } from \"./Link\";\nimport { PortModel, DiagramEngine } from \"storm-react-diagrams\";\nimport { PropertyType } from \"./PropertyType\";\n\nexport class Port extends PortModel {\n  in: boolean;\n  isNamePort: boolean;\n  label: string;\n  links: { [id: string]: Link };\n  isPrimaryKey: boolean;\n  isPartialKey: boolean;\n  isForeignKey: boolean;\n  isAutoincremented: boolean;\n  isNotNull: boolean;\n  isUnique: boolean;\n  propertyType: string;// PropertyType;\n\n  constructor(\n    name: string,\n    isNamePort: boolean,\n    isPrimaryKey?: boolean,\n    isForeignKey?: boolean,\n    isNotNull?: boolean,\n    isAutoincremented?: boolean,\n    isUnique?: boolean,\n    propertyType?:  string, //PropertyType,\n    id?: string\n  ) {\n    super(name, \"custom\", id);\n    this.label = name;\n    this.isNamePort = isNamePort;\n    this.links = {};\n\n    this.isPrimaryKey = isPrimaryKey;\n    this.isForeignKey = isForeignKey;\n    this.isPartialKey = false;\n\n    this.isNotNull = isNotNull;\n    this.isUnique = isUnique;\n    this.isAutoincremented = isAutoincremented;\n\n    this.propertyType = propertyType;\n  }\n\n  deSerialize(object: any, engine: DiagramEngine) {\n    super.deSerialize(object, engine);\n    this.label = object.label;\n    this.isNamePort = object.isNamePort;\n\n    this.isPrimaryKey = object.isPrimaryKey;\n    this.isPartialKey = object.isPartialKey;\n\n    this.isForeignKey = object.isForeignKey;\n    this.isNotNull = object.isNotNull;\n    this.isUnique = object.isUnique;\n    this.isAutoincremented = object.isAutoincremented;\n    this.propertyType = object.propertyType;\n  }\n\n  serialize() {\n    return _.merge(super.serialize(), {\n      label: this.label,\n      links: this.links,\n      isNamePort: this.isNamePort,\n      isPrimaryKey: this.isPrimaryKey,\n      isPartialKey: this.isPartialKey,\n\n      isForeignKey: this.isForeignKey,\n      isNotNull: this.isNotNull,\n      isUnique: this.isUnique,\n      isAutoincremented: this.isAutoincremented,\n      propertyType: this.propertyType\n    });\n  }\n\n  canLinkToPort(port: Port): boolean {\n    console.log('port -> canLinkToPort')\n    return true;\n  }\n\n  createLinkModel(): Link {\n    console.log('port -> createLinkModel')\n\n    return new Link(\"custom\");\n  }\n}\n","import * as _ from \"lodash\";\nimport { NodeModel, Toolkit, DiagramEngine } from \"storm-react-diagrams\";\nimport { Port } from \"./Port\";\nimport { PropertyType } from \"./PropertyType\";\n\nexport class Node extends NodeModel {\n\tname: string;\n\tcolor: string;\n\tports: { [s: string]: Port };\n\tisLabel: boolean;\n\n\tconstructor(isLabel: boolean, name: string = \"Untitled\", color: string = \"rgb(0,192,255)\") {\n\t\tsuper(\"custom\");\n\t\tthis.name = name;\n\t\tthis.color = color;\n\t\tthis.ports = {};\n\t\tthis.isLabel = isLabel;\n\t}\n\n\taddInPort(isNamedPort: boolean, label: string, isPK: boolean, isFK: boolean, isUnique: boolean, isAuto: boolean, isNotNull: boolean, propertyType: PropertyType): Port {\n\t\treturn this.addPort(new Port(label, isNamedPort, isPK, isFK, isNotNull, isAuto, isUnique, propertyType, Toolkit.UID()));\n\t}\n\n\taddOutPort(isNamedPort: boolean,label: string, isPK: boolean, isFK: boolean, isUnique: boolean, isAuto: boolean, isNotNull: boolean, propertyType: PropertyType): Port {\n\t\treturn this.addPort(new Port(label, isNamedPort, isPK, isFK, isNotNull, isAuto, isUnique, propertyType, Toolkit.UID()));\n\t}\n\n\tdeSerialize(object: any, engine: DiagramEngine) {\n\t\tsuper.deSerialize(object, engine);\n\t\tthis.name = object.name;\n\t\tthis.color = object.color;\n\t\tthis.isLabel = object.isLabel;\n\t}\n\n\tserialize() {\n\t\treturn _.merge(super.serialize(), {\n\t\t\tname: this.name,\n\t\t\tcolor: this.color,\n\t\t\tisLabel: this.isLabel\n\t\t});\n\t}\n\n\tgetInPorts(): Port[] {\n\t\treturn _.filter(this.ports, portModel => {\n\t\t\treturn portModel.in;\n\t\t});\n\t}\n\n\tgetOutPorts(): Port[] {\n\t\treturn _.filter(this.ports, portModel => {\n\t\t\treturn !portModel.in;\n\t\t});\n\t}\n}","import {\n  BaseWidgetProps,\n  DiagramEngine,\n  BaseWidget,\n  DefaultPortLabel\n} from \"storm-react-diagrams\";\nimport { Node } from \"../models/Node\";\nimport * as React from \"react\";\n\nexport interface NodeProps extends BaseWidgetProps {\n  node: Node;\n  diagramEngine: DiagramEngine;\n}\n\nexport interface DefaultNodeState {}\n\nexport class CustomLabelWidget extends BaseWidget<NodeProps, DefaultNodeState> {\n  constructor(props: NodeProps) {\n    super(\"srd-default-node\", props);\n    this.state = {};\n  }\n\n  render() {\n    return (\n      <div {...this.getProps()} style={{ background: this.props.node.color }}>\n        <div className={this.bem(\"__title\")}>\n          <div className={this.bem(\"__name\")}>{this.props.node.name}</div>\n        </div>\n      </div>\n    );\n  }\n}\n","import { Node } from \"../models/Node\";\nimport * as React from \"react\";\nimport { CustomLabelWidget } from \"../widgets/CustomLabelWidget\";\nimport { AbstractNodeFactory, DiagramEngine } from \"storm-react-diagrams\";\n\nexport class CustomLabelFactory extends AbstractNodeFactory<Node> {\n  constructor() {\n    super(\"label\");\n  }\n\n  generateReactWidget(diagramEngine: DiagramEngine, node: Node): JSX.Element {\n    return React.createElement(CustomLabelWidget, {\n      node: node,\n      diagramEngine: diagramEngine\n    });\n  }\n\n  getNewInstance(initialConfig?: any): Node {\n    return new Node(false, null, \"label\");\n  }\n}\n","import { AbstractPortFactory } from \"storm-react-diagrams\";\nimport { Port } from \"../models/Port\";\n\nexport class CustomPortFactory extends AbstractPortFactory<Port> {\n  constructor() {\n    super(\"custom\");\n  }\n\n  getNewInstance(initialConfig?: any): Port {\n    return new Port(\"custom\", true, false);\n  }\n}\n","import { Port } from \"../models/Port\";\nimport { BaseWidgetProps, BaseWidget, PortWidget } from \"storm-react-diagrams\";\nimport React, { CSSProperties } from \"react\";\nimport { PropertyType } from \"../models/PropertyType\";\n\nexport interface DefaultPortLabelProps extends BaseWidgetProps {\n  model: Port;\n}\n\nexport interface DefaultPortLabelState {}\n\nexport class CustomPortLabelWidget extends BaseWidget<\n  DefaultPortLabelProps,\n  DefaultPortLabelState\n> {\n  constructor(props: DefaultPortLabelProps) {\n    super(\"custom\", props);\n  }\n\n  getClassName() {\n    return (\n      super.getClassName() +\n      (this.props.model.in ? this.bem(\"--in\") : this.bem(\"--in\"))\n    );\n  }\n\n  render() {\n    let port: JSX.Element;\n    const style: CSSProperties = {\n      paddingLeft: 5,\n      paddingRight: 5,\n      color: \"black\",\n      fontWeight: 800\n\t};\n\t\n    const containerStyles: CSSProperties = {\n      display: \"flex\",\n      justifyContent: \"flex-end\"\n\t};\n\t\n    const itemStyles: CSSProperties = {\n      display: \"inline-block\",\n      marginRight: \"5px\"\n    };\n\n    const portStyles: CSSProperties = {\n      display: \"none\"\n    };\n\n    const namedPortStyles: CSSProperties = {\n      marginRight: \"5px\"\n    };\n\n    if (!this.props.model.isNamePort) {\n      this.props.model.setLocked();\n      port = (\n        <PortWidget\n          node={this.props.model.getParent()}\n          name={this.props.model.name}\n        />\n      );\n    } else {\n      port = (\n        <PortWidget\n          node={this.props.model.getParent()}\n          name={this.props.model.name}\n        />\n      );\n    }\n\n    const label: JSX.Element = (\n      <div className=\"name\">\n        <div>\n          {this.props.model.label}{\" \"}\n          {this.props.model.propertyType !== undefined\n            ? this.props.model.propertyType\n            : null}\n        </div>\n      </div>\n    );\n    const isPrimaryKey = this.props.model.isPrimaryKey ? (\n      <span className=\"mi mi-Permissions\" style={style}></span>\n    ) : null;\n\n    if (this.props.model.isNamePort) {\n      return <div style={namedPortStyles}>{port}</div>;\n    } else {\n      return (\n        <div style={containerStyles} {...this.getProps()}>\n          <div style={itemStyles}>{isPrimaryKey}</div>\n          <div style={itemStyles}>{label}</div>\n          <div style={portStyles}>{port}</div>\n        </div>\n      );\n    }\n  }\n}\n","import { CustomPortLabelWidget } from \"./CustomPortLabelWidget\";\nimport React, { CSSProperties } from \"react\";\nimport {\n  BaseWidget,\n  DiagramEngine,\n  BaseWidgetProps\n} from \"storm-react-diagrams\";\nimport { Port } from \"../models/Port\";\nimport { Node } from \"../models/Node\";\nimport * as _ from \"lodash\";\n\nexport interface DefaultNodeProps extends BaseWidgetProps {\n  node: Node;\n  diagramEngine: DiagramEngine;\n}\n\nexport interface DefaultNodeState {}\n\nexport class CustomNodeWidget extends BaseWidget<\n  DefaultNodeProps,\n  DefaultNodeState\n> {\n  constructor(props: DefaultNodeProps) {\n    super(\"srd-default-node\", props);\n    this.state = {};\n  }\n\n  generatePort(port: Port) {\n    return <CustomPortLabelWidget model={port} key={port.id} />;\n  }\n\n  render() {\n    const namedPortStyles: CSSProperties = {\n      marginLeft: \"5px\"\n    };\n\n    let ports = this.props.node.getPorts() as { [s: string]: Port };\n    let portsJSX = _.map(ports, this.generatePort.bind(this));\n    let namedPort = portsJSX.filter(p => p.props.model.isNamePort);\n    let notNamedPort = portsJSX.filter(p => !p.props.model.isNamePort);\n\n    return (\n      <div {...this.getProps()} style={{ background: this.props.node.color }}>\n        <div className={this.bem(this.props.node.isLabel ? \"\" : \"__title\")} style={{wordBreak: \"break-word\", maxWidth: '200px'}}>\n          {namedPort.length !== 0 && (\n            <div style={namedPortStyles}>\n              {this.generatePort(namedPort[1].props.model)}\n            </div>\n          )}\n          <div className={this.bem(\"__name\")}>{this.props.node.name}</div>\n          {namedPort.length !== 0 &&\n            this.generatePort(namedPort[0].props.model)}\n        </div>\n        <div className={this.bem(\"__ports\")}>\n          <div className={this.bem(\"__in\")}>{notNamedPort}</div>\n        </div>\n      </div>\n    );\n  }\n}\n","import { AbstractNodeFactory, DiagramEngine } from \"storm-react-diagrams\";\nimport React from \"react\";\nimport { CustomNodeWidget } from \"../widgets/CustomNodeWidget\";\nimport { Node } from \"../models/Node\";\n\nexport class CustomNodeFactory extends AbstractNodeFactory<Node> {\n  constructor() {\n    super(\"custom\");\n  }\n\n  generateReactWidget(diagramEngine: DiagramEngine, node: Node): JSX.Element {\n    return React.createElement(CustomNodeWidget, {\n      node: node,\n      diagramEngine: diagramEngine\n    });\n  }\n\n  getNewInstance(initialConfig?: any): Node {\n    return new Node(false, null, \"custom\");\n  }\n}\n","import * as React from \"react\";\nimport { BaseWidgetProps, BaseWidget } from \"storm-react-diagrams\";\nimport { Label } from \"../models/Label\";\n\nexport interface DefaultLabelWidgetProps extends BaseWidgetProps {\n  model: Label;\n}\n\nexport class CustomLinkLabelWidget extends BaseWidget<DefaultLabelWidgetProps> {\n  constructor(props: DefaultLabelWidgetProps) {\n    super(\"srd-default-label\", props);\n  }\n\n  render() {\n    return <div {...this.getProps()}>{this.props.model.label}</div>;\n  }\n}\n","import * as React from \"react\";\nimport { AbstractLabelFactory, DiagramEngine } from \"storm-react-diagrams\";\nimport { Label } from \"../models/Label\";\nimport { CustomLinkLabelWidget } from \"../widgets/CustomLinkLabelWidget\";\n\nexport class CustomLinkLabelFactory extends AbstractLabelFactory<Label> {\n  constructor() {\n    super(\"custom\");\n  }\n\n  generateReactWidget(diagramEngine: DiagramEngine, label: Label): JSX.Element {\n    return React.createElement(CustomLinkLabelWidget, {\n      model: label\n    });\n  }\n\n  getNewInstance(initialConfig?: any): Label {\n    return new Label(\"\");\n  }\n}\n","import * as React from \"react\";\nimport {\n  AbstractLinkFactory,\n  DiagramEngine,\n  DefaultLinkModel,\n  DefaultLinkWidget\n} from \"storm-react-diagrams\";\nimport { Link } from \"../models/Link\";\n\nexport class CustomLinkFactory extends AbstractLinkFactory<Link> {\n  constructor() {\n    super(\"custom\");\n  }\n\n  generateReactWidget(\n    diagramEngine: DiagramEngine,\n    link: DefaultLinkModel\n  ): JSX.Element {\n    return React.createElement(DefaultLinkWidget, {\n      link: link,\n      diagramEngine: diagramEngine\n    });\n  }\n\n  getNewInstance(initialConfig?: any): Link {\n    return new Link(\"custom\");\n  }\n\n  generateLinkSegment(\n    model: Link,\n    widget: DefaultLinkWidget,\n    selected: boolean,\n    path: string\n  ) {\n    return (\n      <path\n        className={selected ? widget.bem(\"--path-selected\") : \"\"}\n        strokeWidth={model.width}\n        stroke={model.color}\n        d={path}\n      />\n    );\n  }\n}\n","import * as SRD from \"storm-react-diagrams\";\nimport { CustomLabelFactory } from \"../../infrastructure/factories/CustomLabelFactory\";\nimport { CustomPortFactory } from \"../../infrastructure/factories/CustomPortFactory\";\nimport { CustomNodeFactory } from \"../../infrastructure/factories/CustomNodeFactory\";\nimport { CustomLinkLabelFactory } from \"../../infrastructure/factories/CustomLinkLabelFactory\";\nimport { CustomLinkFactory } from \"../../infrastructure/factories/CustomLinkFactory\";\n\nexport class Application {\n  protected activeModel: SRD.DiagramModel;\n  protected diagramEngine: SRD.DiagramEngine;\n\n  constructor() {\n    this.diagramEngine = new SRD.DiagramEngine();\n    this.diagramEngine.registerNodeFactory(new CustomLabelFactory());\n    this.diagramEngine.registerLinkFactory(new CustomLinkFactory());\n    this.diagramEngine.registerLabelFactory(new CustomLinkLabelFactory());\n    this.diagramEngine.registerNodeFactory(new CustomNodeFactory());\n    this.diagramEngine.registerPortFactory(new CustomPortFactory());\n    this.diagramEngine.installDefaultFactories();\n    this.newModel();\n  }\n\n  public newModel() {\n    this.activeModel = new SRD.DiagramModel();\n    this.diagramEngine.setDiagramModel(this.activeModel);\n  }\n\n  public getActiveDiagram(): SRD.DiagramModel {\n    return this.activeModel;\n  }\n\n  public getDiagramEngine(): SRD.DiagramEngine {\n    return this.diagramEngine;\n  }\n}\n","import * as React from \"react\";\n\nexport interface TrayItemWidgetProps {\n  model: any;\n  color?: string;\n  name: string;\n}\n\nexport interface TrayItemWidgetState {}\n\nexport class TrayItemWidget extends React.Component<\n  TrayItemWidgetProps,\n  TrayItemWidgetState\n> {\n  constructor(props: TrayItemWidgetProps) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n    return (\n      <div\n        style={{ borderColor: this.props.color }}\n        draggable={true}\n        onDragStart={event => {\n          event.dataTransfer.setData(\n            \"storm-diagram-node\",\n            JSON.stringify(this.props.model)\n          );\n        }}\n        className=\"tray-item\"\n      >\n        {this.props.name}\n      </div>\n    );\n  }\n}\n","import * as React from \"react\";\n\nexport interface TrayWidgetProps {}\n\nexport interface TrayWidgetState {}\n\nexport class TrayWidget extends React.Component<\n  TrayWidgetProps,\n  TrayWidgetState\n> {\n  public static defaultProps: TrayWidgetProps = {};\n\n  constructor(props: TrayWidgetProps) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n    return <div className=\"tray\">{this.props.children}</div>;\n  }\n}\n","import * as React from \"react\";\n\nimport { GridProps } from \"./\";\n\nexport default class Grid extends React.Component<GridProps> {\n  render() {\n    return (\n      <div style={this.props.style} className={this.buildClassNameString()}>\n        {this.props.children}\n      </div>\n    );\n  }\n\n  buildClassNameString() {\n    let className = \"ms-Grid\";\n\n    if (this.props.className != null) {\n      className += ` ${this.props.className}`;\n    }\n\n    return className;\n  }\n}\n","import * as React from \"react\";\n\nimport { GridRowProps } from \"./\";\n\nexport default class Row extends React.Component<GridRowProps> {\n  render() {\n    return (\n      <div className={this.buildClassNameString()}>{this.props.children}</div>\n    );\n  }\n\n  buildClassNameString() {\n    let className = \"ms-Grid-row\";\n\n    if (this.props.flex) {\n      className += \" grid-row-flex\";\n    }\n\n    if (this.props.className != null) {\n      className += ` ${this.props.className}`;\n    }\n\n    return className;\n  }\n}\n","import * as React from \"react\";\n\nimport { GridColProps, GridColConfigProp } from \"./\";\n\nexport default class Col extends React.Component<GridColProps> {\n  render() {\n    return (\n      <div\n        className={this.buildClassNameString()}\n        onDoubleClick={this.props.onDoubleClick}\n      >\n        {this.props.children}\n      </div>\n    );\n  }\n\n  buildGridColConfigClassNames(size: string, config: GridColConfigProp) {\n    if (config == null) return \"\";\n\n    let className = ` ms-${size}`;\n\n    if (typeof config === \"string\") {\n      className += config;\n    } else {\n      className += config.size;\n\n      if (config.pull != null) {\n        className += ` ms-${size}Pull${config.pull}`;\n      }\n\n      if (config.push != null) {\n        className += ` ms-${size}Push${config.push}`;\n      }\n\n      if (config.offset != null) {\n        className += ` ms-${size}Offset${config.offset}`;\n      }\n\n      if (config.order != null) {\n        className += ` grid-flex-order-${size}-${config.order}`;\n      }\n    }\n\n    return className;\n  }\n\n  buildClassNameString() {\n    let className = \"ms-Grid-col\";\n\n    if (this.props.className != null) {\n      className += ` ${this.props.className}`;\n    }\n\n    if (this.props.hidden != null) {\n      className += ` ms-hidden${this.props.hidden}`;\n    }\n\n    if (this.props.order != null) {\n      className += ` grid-flex-order-${this.props.order}`;\n    }\n\n    className += this.buildGridColConfigClassNames(\"sm\", this.props.sm);\n    className += this.buildGridColConfigClassNames(\"md\", this.props.md);\n    className += this.buildGridColConfigClassNames(\"lg\", this.props.lg);\n    className += this.buildGridColConfigClassNames(\"xl\", this.props.xl);\n    className += this.buildGridColConfigClassNames(\"xxl\", this.props.xxl);\n    className += this.buildGridColConfigClassNames(\"xxxl\", this.props.xxxl);\n\n    return className;\n  }\n}\n","import \"./PropertyTable.scss\";\nimport React, { useState } from \"react\";\nimport { PropertyType } from \"../../infrastructure/models/PropertyType\";\nimport { Port } from \"../../infrastructure/models/Port\";\nimport BootstrapTable from \"react-bootstrap-table-next\";\nimport { DiagramEngine } from \"storm-react-diagrams\";\nimport { Link } from \"../../infrastructure/models/Link\";\nimport { Node } from \"../../infrastructure/models/Node\";\nimport \"react-bootstrap-table-next/dist/react-bootstrap-table2.min.css\";\n\nclass Props {\n\tselectedItem: Node;\n\tdiagramEngine: DiagramEngine;\n\trelView?: boolean;\n}\n\nexport function useForceUpdate() {\n\tconst [value, setValue] = React.useState(0);\n\treturn () => setValue(value => ++value);\n}\n\nexport const PropertyTable = (props: Props) => {\n\tconst [updatedItem, setUpdatedItem] = React.useState(null);\n\n\tconst forceUpdate = useForceUpdate();\n\n\tReact.useMemo(() => {\n\t\tsetUpdatedItem(props.selectedItem);\n\t}, [props.selectedItem]);\n\n\tconst clearPartialKeys = () => {\n\t\tlet ports =\n\t\tupdatedItem &&\n\t\tupdatedItem.ports &&\n\t\t(updatedItem.ports as { [s: string]: Port });\n\n\t\tObject.keys(ports).map(p => console.log(ports[p].isPartialKey = false));\n\t}\n\n\tconst handleChangePK = (\n\t\tevent: React.ChangeEvent<HTMLInputElement>,\n\t\trow: Port\n\t) => {\n\t\tevent.persist();\n\t\t(updatedItem.getPortFromID(\n\t\t\trow.id\n\t\t) as Port).isPrimaryKey = !row.isPrimaryKey;\n\n\t\t(updatedItem.getPortFromID(\n\t\t\trow.id\n\t\t) as Port).isNotNull = row.isPrimaryKey ? true : false;\n\n\t\t(updatedItem.getPortFromID(\n\t\t\trow.id\n\t\t) as Port).isAutoincremented = row.isPrimaryKey ? true : false;\n\n\t\t(updatedItem.getPortFromID(\n\t\t\trow.id\n\t\t) as Port).isUnique = row.isPrimaryKey ? true : false;\n\n\t\tclearPartialKeys();\n\t\tforceUpdate();\n\t};\n\n\tconst handleChangeNull = (\n\t\tevent: React.ChangeEvent<HTMLInputElement>,\n\t\trow: Port\n\t) => {\n\t\tevent.persist();\n\t\t(updatedItem.getPortFromID(row.id) as Port).isNotNull = !row.isNotNull;\n\t\tforceUpdate();\n\t};\n\n\tconst handleChangePartialKey = (\n\t\tevent: React.ChangeEvent<HTMLInputElement>,\n\t\trow: Port\n\t) => {\n\t\tevent.persist();\n\t\t(updatedItem.getPortFromID(row.id) as Port).isPartialKey = !row.isPartialKey;\n\t\tforceUpdate();\n\t};\n\n\tconst handleChangeUnique = (\n\t\tevent: React.ChangeEvent<HTMLInputElement>,\n\t\trow: Port\n\t) => {\n\t\tevent.persist();\n\t\t(updatedItem.getPortFromID(row.id) as Port).isUnique = !row.isUnique;\n\t\tforceUpdate();\n\t};\n\n\tconst handleChangeAutoInc = (\n\t\tevent: React.ChangeEvent<HTMLInputElement>,\n\t\trow: Port\n\t) => {\n\t\tevent.persist();\n\t\t(updatedItem.getPortFromID(\n\t\t\trow.id\n\t\t) as Port).isAutoincremented = !row.isAutoincremented;\n\t\tforceUpdate();\n\t};\n\n\tconst handleChangepPropType = (\n\t\tevent: React.ChangeEvent<HTMLInputElement>,\n\t\trow: Port\n\t) => {\n\t\tevent.persist();\n\t\t(updatedItem.getPortFromID(row.id) as Port).propertyType = event.target\n\t\t\t.value;\n\t};\n\n\tconst handleChangePortLabel = (\n\t\tevent: React.ChangeEvent<HTMLInputElement>,\n\t\trow: Port\n\t) => {\n\t\tevent.persist();\n\t\t(updatedItem.getPortFromID(row.id) as Port).label = event.target.value;\n\t};\n\n\tconst addNewPort = (newPortNumber: number) => {\n\t\tupdatedItem.addInPort(\n\t\t\tfalse,\n\t\t\t`new atribute ${newPortNumber}`,\n\t\t\tfalse,\n\t\t\tfalse,\n\t\t\tfalse,\n\t\t\tfalse,\n\t\t\tfalse,\n\t\t\tPropertyType.INT\n\t\t);\n\t\tforceUpdate();\n\t};\n\n\tconst removePort = (port: Port) => {\n\t\tif (\n\t\t\tObject.entries(port.links).length !== 0 &&\n\t\t\tport.links.constructor === Object\n\t\t) {\n\t\t\tlet portLinks: Link[] = Object.keys(port.links).map(x => {\n\t\t\t\treturn port.links[x];\n\t\t\t});\n\t\t\tportLinks.forEach(p =>\n\t\t\t\tprops.diagramEngine.getDiagramModel().removeLink(p)\n\t\t\t);\n\t\t}\n\t\tupdatedItem.removePort(port);\n\t\tforceUpdate();\n\t};\n\n\tconst preparePropertyTypes = () => {\n\t\treturn Object.values(PropertyType).map(obj => (\n\t\t\t<option key={obj} value={obj}>\n\t\t\t\t{obj}\n\t\t\t</option>\n\t\t));\n\t};\n\n\tconst columns: any[] = [\n\t\t{\n\t\t\tdataField: \"label\",\n\t\t\ttext: \"Property Name\",\n\t\t\tformatter: (cellContent: any, row: Port) => (\n\t\t\t\t<div className=\"input\">\n\t\t\t\t\t<input\n\t\t\t\t\t\tstyle={{ width: '100px' }}\n\t\t\t\t\t\tclassName=\"darkInput\"\n\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\tdefaultValue={row.label}\n\t\t\t\t\t\tonChange={event => handleChangePortLabel(event, row)}\n\t\t\t\t\t></input>\n\t\t\t\t</div>\n\t\t\t)\n\t\t},\n\t\t{\n\t\t\tstyle: { paddingLeft: 0 },\n\t\t\tdataField: \"propertyType\",\n\t\t\ttext: \"Property Type\",\n\t\t\tformatter: (cellContent: any, row: Port) => (\n\t\t\t\t<div className=\"input\">\n\t\t\t\t\t<input\n\t\t\t\t\t\tstyle={{ width: '100px' }}\n\n\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\tlist=\"types\"\n\t\t\t\t\t\tclassName=\"darkInput\"\n\t\t\t\t\t\tonChange={event => handleChangepPropType(event, row)}\n\t\t\t\t\t\tdefaultValue={row.propertyType}\n\n\t\t\t\t\t/>\n\t\t\t\t\t<datalist id=\"types\">\n\t\t\t\t\t\t{preparePropertyTypes()}\n\t\t\t\t\t</datalist>\n\n\t\t\t\t</div>\n\t\t\t)\n\t\t},\n\t\t{\n\t\t\tdataField: \"isPrimaryKey\",\n\t\t\ttext: \"Is Primary Key\",\n\t\t\tformatter: (cellContent: any, row: Port) => (\n\t\t\t\t<div className=\"checkbox\">\n\t\t\t\t\t<label>\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\ttype=\"checkbox\"\n\t\t\t\t\t\t\tchecked={row.isPrimaryKey}\n\t\t\t\t\t\t\tonChange={event => handleChangePK(event, row)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</label>\n\t\t\t\t</div>\n\t\t\t)\n\t\t},\n\t\t{\n\t\t\tdataField: \"isPartialKey\",\n\t\t\ttext: \"Is Partial Key\",\n\t\t\tformatter: (cellContent: any, row: Port) => (\n\t\t\t\t<div className=\"checkbox\">\n\t\t\t\t\t<label>\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\ttype=\"checkbox\"\n\t\t\t\t\t\tchecked={row.isPartialKey}\n\t\t\t\t\t\tonChange={event => handleChangePartialKey(event, row)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</label>\n\t\t\t\t</div>\n\t\t\t)\n\t\t},\n\t\t{\n\t\t\tdataField: \"isNotNull\",\n\t\t\ttext: \"Not Null\",\n\t\t\tformatter: (cellContent: any, row: Port) => (\n\t\t\t\t<div className=\"checkbox\">\n\t\t\t\t\t<label>\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\tdisabled={row.isPrimaryKey}\n\t\t\t\t\t\t\ttype=\"checkbox\"\n\t\t\t\t\t\t\tchecked={row.isNotNull}\n\t\t\t\t\t\t\tonChange={event => handleChangeNull(event, row)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</label>\n\t\t\t\t</div>\n\t\t\t)\n\t\t},\n\t\t{\n\t\t\tdataField: \"isAutoincremented\",\n\t\t\ttext: \"Is Auto Incremented\",\n\t\t\tformatter: (cellContent: any, row: Port) => (\n\t\t\t\t<div className=\"checkbox\">\n\t\t\t\t\t<label>\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\tdisabled={row.isPrimaryKey}\n\t\t\t\t\t\t\ttype=\"checkbox\"\n\t\t\t\t\t\t\tchecked={row.isAutoincremented}\n\t\t\t\t\t\t\tonChange={event => handleChangeAutoInc(event, row)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</label>\n\t\t\t\t</div>\n\t\t\t)\n\t\t},\n\t\t{\n\t\t\tdataField: \"isUnique\",\n\t\t\ttext: \"Is Unique\",\n\t\t\tformatter: (cellContent: any, row: Port) => (\n\t\t\t\t<div className=\"checkbox\">\n\t\t\t\t\t<label>\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\tdisabled={row.isPrimaryKey}\n\t\t\t\t\t\t\ttype=\"checkbox\"\n\t\t\t\t\t\t\tchecked={row.isUnique}\n\t\t\t\t\t\t\tonChange={event => handleChangeUnique(event, row)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</label>\n\t\t\t\t</div>\n\t\t\t)\n\t\t},\n\t\t{\n\t\t\tdataField: \"remove\",\n\t\t\ttext: \"Remove\",\n\t\t\tformatter: (cellContent: any, row: Port) => (\n\t\t\t\t<div className=\"checkbox\">\n\t\t\t\t\t<label>\n\t\t\t\t\t\t<span\n\t\t\t\t\t\t\tonClick={() => removePort(row)}\n\t\t\t\t\t\t\tclassName=\"mi mi-Delete red\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t</label>\n\t\t\t\t</div>\n\t\t\t)\n\t\t}\n\t];\n\n\n\tlet ports =\n\t\tupdatedItem &&\n\t\tupdatedItem.ports &&\n\t\t(updatedItem.ports as { [s: string]: Port });\n\n\tlet portsTable: Port[] =\n\t\tports &&\n\t\tObject.keys(ports)\n\t\t\t.map(x => {\n\t\t\t\treturn ports[x];\n\t\t\t})\n\t\t\t.filter(p => !p.isNamePort);\n\n\tlet ispk = portsTable && portsTable.find(p => p.isPrimaryKey) ? true : false;\n\n\tlet cols = columns;\n\n\tif (ispk) {\n\t\tcols = cols.filter(col => col.dataField !== 'isPartialKey')\n\t}\n\n\treturn (\n\t\t<div>\n\t\t\t<BootstrapTable\n\t\t\t\tkeyField=\"id\"\n\t\t\t\tdata={portsTable}\n\t\t\t\tcolumns={props.relView ? cols.filter(col => col.dataField !== 'isPrimaryKey' && col.dataField !== 'isPartialKey') : cols}\n\t\t\t\tbordered={false}\n\t\t\t/>\n\t\t\t<p\n\t\t\t\tclassName=\"mouse-cursor\"\n\t\t\t\tonClick={() => addNewPort(portsTable.length)}\n\t\t\t>\n\t\t\t\tAdd new atribute\n      </p>\n\t\t</div>\n\t);\n};\n","import \"./NodeProperties.scss\";\nimport * as React from \"react\";\nimport { DiagramEngine } from \"storm-react-diagrams\";\nimport { Node } from \"../../infrastructure/models/Node\";\n\nimport { Col, Row, Grid } from \"../grid\";\nimport { PropertyTable } from \"../propertyTable/PropertyTable\";\n\nclass Props {\n  selectedItem: Node;\n  diagramEngine: DiagramEngine;\n}\n\nexport function useForceUpdate() {\n  const [value, setValue] = React.useState(0);\n  return () => setValue(value => ++value);\n}\n\nexport const NodeProperties = (props: Props) => {\n  const [updatedItem, setUpdatedItem] = React.useState(null);\n  const [defaultName, setDefaultName] = React.useState(\"\");\n\n  const [name, setName] = React.useState(\"\");\n  const [showInput, setShowInput] = React.useState(false);\n\n  const forceUpdate = useForceUpdate();\n\n  React.useMemo(() => {\n    setUpdatedItem(props.selectedItem);\n    setName(props.selectedItem.name);\n    setDefaultName(props.selectedItem.name);\n  }, [props.selectedItem]);\n\n\n  const handleNameChange = (event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement >) => {\n    event.persist();\n    let allNodes = props.diagramEngine.diagramModel.getNodes() as {\n      [id: string]: Node;\n    };\n    let names = Object.values(allNodes).map(node => allNodes[node.id].name.toLowerCase().trim());\n    \n    console.log(names);\n\n    names.includes(event.target.value.toLowerCase().trim())\n      ? updatedItem.name = defaultName\n      : updatedItem.name = event.target.value.trim();\n    forceUpdate();\n  };\n\n      const iconStyles: React.CSSProperties = {\n        display: \"flex\",\n        flexDirection: 'row',\n        flexFlow: 'row-reverse',\n        position: 'absolute',\n        right: '0',\n        top: '10px',\n        zIndex: 9999\n      };\n\n\n      const acceptStyle: React.CSSProperties = {\n        marginRight: 5,\n        backgroundColor: 'green',\n        borderRadius: '90px',\n        padding: '10px',\n      };\n\n      const declineStyle: React.CSSProperties = {\n        marginRight: '20px',\n        backgroundColor: 'red',\n        borderRadius: '90px',\n        padding: '10px',\n      };\n\n  if (!updatedItem) return null;\n  else\n    return (\n      <div className=\"trayBottom\">\n        {/* <div style={iconStyles}>\n              <span\n                style={declineStyle}\n                className={`mi ${\n                  \"mi-Cancel\"\n                }`}\n              />\n                <span\n                  style={acceptStyle}\n                  className={`mi ${\n                    \"mi-Accept\"\n                  }`}\n                />\n            </div> */}\n        <Grid>\n          <Row>\n          \n            <Col >\n              {!showInput ? (\n                \n                <h1 style={{wordBreak: 'break-all'}} onDoubleClick={() => setShowInput(true)}>{name}</h1>\n              ) : (\n                props.selectedItem.isLabel ? \n                <textarea\n                style={{height: '200px'}}\n                className=\"darkInput fs-24\"\n                defaultValue={name}\n                onChange={event => handleNameChange(event)}\n                >\n\n                </textarea> :\n                <input\n                  className=\"darkInput fs-24\"\n                  defaultValue={name}\n                  onChange={event => handleNameChange(event)}\n                />\n              )}\n              \n            </Col>\n            \n            {!updatedItem.isLabel ? (\n        <PropertyTable selectedItem={props.selectedItem} diagramEngine={props.diagramEngine}/> \n            ) : null}\n          </Row>\n        </Grid>\n      </div>\n    );\n};\n","import \"./ResultPopup.scss\";\nimport React, { useState, useEffect } from \"react\";\nimport Popup from \"reactjs-popup\";\nimport sqlFormatter from \"sql-formatter\";\nimport FileSaver from \"file-saver\";\n\nclass Props {\n  isOpen: boolean;\n  generateScript?: (name: string) => void;\n  mssqlString: string;\n  mysqlString: string;\n  update: () => void;\n}\n\nexport const ResultPopup = (props: Props) => {\n  const [dbName, setDbName] = useState(\"DatabaseName\");\n  const [mySQLView, setmySQLView] = useState(false);\n\n\n  let formatedMSSQL =\n    props.mssqlString &&\n    sqlFormatter.format(props.mssqlString, {\n      language: \"sql\", // Defaults to \"sql\"\n      indent: \"  \" // Defaults to two spaces\n    });\n\n  let formatedMySQL =\n    props.mysqlString &&\n    sqlFormatter.format(props.mysqlString, {\n      language: \"db2\", // Defaults to \"sql\"\n      indent: \"  \" // Defaults to two spaces\n    });\n\n  // useEffect(() => {\n  //   formatedMSSQL = '';\n  //   formatedMySQL = '';\n  // }, [props.mssqlString, props.mysqlString])\n\n\n\n  const downloadMSSQL = () => {\n    var blob = new Blob([formatedMSSQL], { type: \"text/plain;charset=utf-8\" });\n    FileSaver.saveAs(blob, `${dbName}.sql`);\n    props.update();\n  };\n\n  const downloadMYSQL = () => {\n    var blob = new Blob([formatedMySQL], { type: \"text/plain;charset=utf-8\" });\n    FileSaver.saveAs(blob, `${dbName}.sql`);\n    props.update();\n  };\n\n  return (\n    <Popup modal closeOnDocumentClick open={props.isOpen} closeOnEscape>\n      <div className=\"sql-result-dialog\">\n        <input\n          style={{ marginRight: \"10px\" }}\n          type=\"text\"\n          onChange={event => setDbName(event.target.value)}\n          value={dbName}\n        />\n\n        <button\n         style={{ marginRight: \"10px\" }}\n          onClick={() => {\n            props.generateScript(dbName)\n          }}>\n          Generate\n            </button>\n\n            <button\n            className={`${mySQLView ? '' : 'selected-sql'}`}\n          onClick={() => {\n            setmySQLView(false)\n          }}>\n          MSSQL\n            </button>\n\n            <button\n            className={`${mySQLView ? 'selected-sql' : ''}`}\n\n          onClick={() => {\n            setmySQLView(true)\n\n          }}>\n          MySQL\n            </button>\n\n\n        <textarea\n          style={{ marginTop: \"5px\" }}\n          readOnly={true}\n          value={mySQLView ? formatedMySQL : formatedMSSQL}\n          contentEditable={false}\n        ></textarea>\n\n        <button style={{ marginRight: \"10px\" }} onClick={downloadMSSQL}>\n          Download MSSQL\n        </button>\n        <button style={{ marginRight: \"10px\" }} onClick={downloadMYSQL}>\n          Download mySQL\n        </button>\n      </div>\n    </Popup>\n  );\n};\n","import { ResultPopup } from \"../components/popups/ResultPopup/ResultPopup\";\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { Link } from \"../infrastructure/models/Link\";\n\nclass Props {\n  isUml: boolean;\n  isOpen: boolean;\n  serializeDiagram: any;\n  update: () => void;\n}\n\nexport const GenerationHandler = (props: Props) => {\n  const [sqlString, setSqlString] = useState(\"\");\n  const [mysqlString, setMySqlString] = useState(\"\");\n\n\n  useEffect(() => setSqlString(''), [props.isOpen]);\n\n  const generateScript = async (name: string) => {\n    console.log(props.serializeDiagram, props.isUml)\n    let serDiagram = props.serializeDiagram;\n    let diagram = JSON.stringify(serDiagram, null, 2);\n    let response = await axios.post(\"http://51.83.185.113/api/setjob/mssql\", {\n      SerializedModel: diagram,\n      DatabaseName: name,\n      RelationType: props.isUml ? 'UML' : 'CHEN'\n    });\n\n    let responseMy = await axios.post(\"http://51.83.185.113/api/setjob/mysql\", {\n      SerializedModel: diagram,\n      DatabaseName: name,\n      RelationType: props.isUml ? 'UML' : 'CHEN'\n    });\n\n    if (response.status === 200 && responseMy.status === 200) {\n      setSqlString(response.data);\n      setMySqlString(responseMy.data);\n    } else {\n      setSqlString('There was an error while processing your request');\n      setMySqlString('There was an error while processing your request');\n\n      console.log(\"there was an error while processing your request\");\n    }\n  };\n\n  return (\n    <ResultPopup\n      update={props.update}\n      mssqlString={sqlString}\n      mysqlString={mysqlString}\n      generateScript={name => generateScript(name)}\n      isOpen={props.isOpen}\n    />\n  );\n};\n","import \"./RelationPopup.scss\";\nimport React, { useState } from \"react\";\nimport Popup from \"reactjs-popup\";\nimport { Link } from \"../../../infrastructure/models/Link\";\nimport { Label } from \"../../../infrastructure/models/Label\";\nimport { Node } from \"../../../infrastructure/models/Node\";\nimport { DiagramModel, DiagramEngine } from \"storm-react-diagrams\";\nimport { Port } from \"../../../infrastructure/models/Port\";\nimport { PropertyType } from \"../../../infrastructure/models/PropertyType\";\nimport { PropertyTable } from \"../../../components/propertyTable/PropertyTable\";\n\n\nclass Props {\n  isOpen: boolean;\n  link: Link;\n  update: () => void;\n  diagramModel: DiagramModel;\n  diagramEngine: DiagramEngine;\n}\nexport const RelationPopup = (props: Props) => {\n  const [left, setLeft] = useState(\"1, N\");\n\n  const [right, setRight] = useState(\"1, N\");\n\n  const [relationName, setRelationName] = useState(\"relation name\");\n\n  React.useEffect(() => {\n    console.log('link', props.link);\n    let leftLabel = props.link && props.link.labels.length > 0 && (props.link.labels[0] as Label).label;\n    let relLabel = props.link && props.link.labels.length > 0 && (props.link.labels[1] as Label).label;\n    let rightLabel = props.link && props.link.labels.length > 0 && (props.link.labels[2] as Label).label;\n\n    setLeft(leftLabel ? leftLabel : \"1, N\");\n    setRelationName(relLabel ? relLabel : \"relation name\");\n    setRight(rightLabel ? rightLabel : \"1, N\");\n\n  }, [props.link]);\n\n  let update = () => {\n    let labels = props.link.labels as Label[];\n    labels[0].label = left;\n    labels[2].label = right;\n    labels[1].label = relationName;\n    let points = props.link.points;\n    for (let index = 1; index < points.length - 1; index++) {\n      const element = points[index];\n      element.remove();\n    }\n    props.update();\n  };\n\n  const sourcePort =\n    props.link &&\n    props.link.sourcePort &&\n    (props.link.sourcePort.parent as Node);\n  const targetPort =\n    props.link &&\n    props.link.targetPort &&\n    (props.link.targetPort.parent as Node);\n\n  const remove = () => {\n    const sourceP = props.link && props.link.sourcePort;\n    const targetP = props.link && props.link.targetPort;\n    sourceP.removeLink(props.link);\n    targetP.removeLink(props.link);\n\n    props.diagramModel.removeLink(props.link);\n    props.update();\n  };\n\n  const options = (\n    <>\n      <option value=\"0, N\">0, N</option>\n      <option value=\"1, N\">1, N</option>\n      <option value=\"0, 1\">0, 1</option>\n      <option value=\"1, 1\">1, 1</option>\n      <option value=\"N, N\">N, N</option>\n    </>\n  );\n\n  const renderOptionPicker = (side: string) => {\n    return (\n      <div className=\"grid-item\">\n        <select\n          className=\"darkSelect\"\n          onChange={event =>\n            side === \"left\"\n              ? setLeft(event.target.value)\n              : setRight(event.target.value)\n          }\n          value={side === \"left\" ? left : right}\n        >\n          {options}\n        </select>\n      </div>\n    );\n  };\n\n  return (\n    <Popup modal closeOnDocumentClick open={props.isOpen} closeOnEscape>\n      <div className=\"SQLResultDialog\">\n        <div className=\"grid-container\">\n          <div className=\"grid-item\">\n            <p>{sourcePort && sourcePort.name}</p>\n          </div>\n          <div className=\"grid-item\">\n            <input\n              className=\"darkInput\"\n              type=\"text\"\n              defaultValue={relationName}\n              onChange={event => setRelationName(event.target.value)}\n            ></input>\n          </div>\n          <div className=\"grid-item\">\n            <p>{targetPort && targetPort.name}</p>\n          </div>\n          {renderOptionPicker(\"left\")}\n          <div className=\"grid-item\">\n            <button onClick={update}>SAVE</button>\n          </div>\n          {renderOptionPicker(\"right\")}\n          {/* <div className=\"grid-item\" /> */}\n          <div className=\"grid-item\">\n\n          </div>\n          <div className=\"grid-item\">\n            <button onClick={remove}>Remove</button>\n          </div>\n          {/* <div className=\"grid-item\" /> */}\n        </div>\n        {props.link && left.includes('N') && right.includes('N') &&\n          <div>\n            <h3 style={{ margin: 0 }}>Atributes:</h3>\n            <PropertyTable relView={true} diagramEngine={props.diagramEngine} selectedItem={props.link.properties} />\n          </div>\n        }\n      </div>\n\n\n    </Popup>\n  );\n};\n","import \"./LoadFilePopup.scss\";\nimport React, { useState } from \"react\";\nimport Popup from \"reactjs-popup\";\n\nclass Props {\n  isOpen: boolean;\n  loadDiagram?: (name: string) => void;\n  update: () => void;\n}\n\nexport const LoadFilePopup = (props: Props) => {\n  let fileReader: FileReader;\n\n  const [fileContent, setFileContent] = useState(\"\");\n\n  const handleFileRead = (e: any) => {\n    const content = fileReader.result;\n    setFileContent(content as string);\n  };\n\n  const handleFileChosen = (name: any) => {\n    fileReader = new FileReader();\n    fileReader.onloadend = handleFileRead;\n    fileReader.readAsText(name);\n  };\n\n  return (\n    <Popup\n      modal\n      closeOnDocumentClick\n      open={props.isOpen}\n      closeOnEscape\n      onClose={() => props.update()}\n    >\n      <div className=\"sql-result-dialog\">\n        <input\n          type=\"file\"\n          onChange={event => handleFileChosen(event.target.files[0])}\n          accept=\".dbjson\"\n        />\n        <button onClick={() => props.loadDiagram(fileContent)}>Load</button>\n      </div>\n    </Popup>\n  );\n};\n","import { LoadFilePopup } from \"../components/popups/LoadFilePopup/LoadFilePopup\";\nimport React from \"react\";\nimport { Application } from \"../components/dragAndDrop/Application\";\nimport { DiagramModel } from \"storm-react-diagrams\";\n\nclass Props {\n  isOpen: boolean;\n  app: Application;\n  update: () => void;\n  setIsUml: (isUml: boolean) => void;\n}\n\nexport const LoadFileHandler = (props: Props) => {\n  const loadDiagram = (name: string) => {\n    let engine = props.app.getDiagramEngine();\n    try {\n      let obj: {diagram: any, isUml: boolean} = JSON.parse(name);\n    \n      props.setIsUml(obj.isUml);\n  \n      let model2 = new DiagramModel();\n      model2.deSerializeDiagram(obj.diagram, engine);\n      let newLinks: any[] = Object.keys(model2.links).map(x => {\n        return model2.links[x];\n      });\n  \n      newLinks.forEach(link => {\n        link.labels.splice(0, 3);\n      });\n      engine.setDiagramModel(model2);\n      engine.repaintCanvas();\n      console.log(engine.diagramModel.serializeDiagram());\n      props.update();\n    } catch (error) {\n      console.log(error);\n    }\n\n  };\n\n  return (\n    <LoadFilePopup\n      update={props.update}\n      loadDiagram={name => loadDiagram(name)}\n      isOpen={props.isOpen}\n    />\n  );\n};\n","import \"./SaveToFilePopup.scss\";\nimport React, { useState } from \"react\";\nimport Popup from \"reactjs-popup\";\nimport { DiagramModel } from \"storm-react-diagrams\";\nimport FileSaver from \"file-saver\";\n\nclass Props {\n  isUml: boolean;\n  isOpen: boolean;\n  diagramModel: DiagramModel;\n  update: () => void;\n}\n\nexport const SaveToFilePopup = (props: Props) => {\n  const [fileName, setFileName] = useState(\"diagram\");\n\n  const download = () => {\n    const diagramJson = JSON.stringify({diagram: props.diagramModel.serializeDiagram(), isUml: props.isUml});\n\n    console.log('diargam-save', diagramJson);\n    let blob = new Blob([diagramJson], { type: \"text/plain;charset=utf-8\" });\n    FileSaver.saveAs(blob, `${fileName}.dbjson`);\n    props.update();\n  };\n\n  return (\n    <Popup\n      modal\n      closeOnDocumentClick\n      open={props.isOpen}\n      closeOnEscape\n      onClose={() => props.update()}\n    >\n      <div className=\"sql-result-dialog\">\n        <input\n          type=\"text\"\n          onChange={event => setFileName(event.target.value)}\n          value={fileName}\n        />\n        <button onClick={download}>save</button>\n      </div>\n    </Popup>\n  );\n};\n","import \"./SaveToJpegPopup.scss\";\nimport React, { useState } from \"react\";\nimport Popup from \"reactjs-popup\";\nimport { DiagramModel } from \"storm-react-diagrams\";\nimport domtoimage from \"dom-to-image\";\n\nclass Props {\n  isOpen: boolean;\n  diagramModel: DiagramModel;\n  update: () => void;\n}\n\nexport const SaveToJpegPopup = (props: Props) => {\n  const [fileName, setFileName] = useState(\"diagram\");\n\n  const download = () => {\n    domtoimage\n      .toJpeg(document.getElementById(\"diagram-layer\"), { quality: 0.95 })\n      .then((dataUrl: any) => {\n        let link = document.createElement(\"a\");\n        link.download = `${fileName}.jpeg`;\n        link.href = dataUrl;\n        link.click();\n        props.update();\n      });\n  };\n\n  return (\n    <Popup\n      modal\n      closeOnDocumentClick\n      open={props.isOpen}\n      closeOnEscape\n      onClose={() => props.update()}\n    >\n      <div className=\"sql-result-dialog\">\n        <input\n          type=\"text\"\n          onChange={event => setFileName(event.target.value)}\n          value={fileName}\n        />\n        <button onClick={download}>save</button>\n      </div>\n    </Popup>\n  );\n};\n","import * as React from \"react\";\n\nimport { DiagramWidget, PointModel, LinkModelListener } from \"storm-react-diagrams\";\nimport { TrayItemWidget } from \"./components/dragAndDrop/TrayItemWidget\";\nimport { TrayWidget } from \"./components/dragAndDrop/TrayWidget\";\nimport { Application } from \"./components/dragAndDrop/Application\";\nimport { Node } from \"./infrastructure/models/Node\";\nimport { Link } from \"./infrastructure/models/Link\";\nimport { PropertyType } from \"./infrastructure/models/PropertyType\";\nimport {\n  NodeProperties,\n  useForceUpdate\n} from \"./components/nodeProperties/NodeProperties\";\nimport { GenerationHandler } from \"./handlers/GenerationHandler\";\nimport { RelationPopup } from \"./components/popups/RealtionPopup/RelationPopup\";\nimport { LoadFileHandler } from \"./handlers/LoadFileHandler\";\nimport { SaveToFilePopup } from \"./components/popups/SaveToFilePopup/SaveToFilePopup\";\nimport { CSSProperties } from \"react\";\nimport { SaveToJpegPopup } from \"./components/popups/SaveToJpegPopup/SaveToJpegPopup\";\nimport _ from \"lodash\";\nimport { Label } from \"./infrastructure/models/Label\";\n\nrequire(\"storm-react-diagrams/dist/style.min.css\");\nrequire(\"react-bootstrap-table-next/dist/react-bootstrap-table2.min.css\");\n\ninterface Props {\n  app: Application;\n}\n\nexport const AppView = (props: Props) => {\n  const jpegFileTarget: React.RefObject<any> = null;\n\n  const [showDialog, setShowDialog] = React.useState(false);\n  const [showRelationDialog, setShowRelationDialog] = React.useState(false);\n  const [showLoadFileDialog, setShowLoadFileDialog] = React.useState(false);\n  const [showSaveFileDialog, setSaveFileDialog] = React.useState(false);\n  const [showSaveJPEGDialog, setSaveJPEGDialog] = React.useState(false);\n  const [showSaveOptions, setSaveOptions] = React.useState(false);\n\n  const [selectedNode, setSelectedNode] = React.useState(null);\n  const [selectedLink, setSelectedLink] = React.useState(null);\n\n  const [isUml, setIsUml] = React.useState(true);\n\n\n  const forceUpdate = useForceUpdate();\n\n  React.useEffect(() => {\n    setSelectedNode(null);\n    setSelectedLink(null);\n  }, []);\n\n  const changeRelation = () => {\n    let links = props.app.getDiagramEngine().getDiagramModel().getLinks();\n    Object.keys(links).map(id => {\n      let temp = (links[id].labels[0] as Label).label.substring(0,1);\n      let temp2 = (links[id].labels[2] as Label).label.substring(0,1);\n\n      (links[id].labels[0] as Label).label = temp2 + (links[id].labels[0] as Label).label.substring(1);\n      (links[id].labels[2] as Label).label = temp + (links[id].labels[2] as Label).label.substring(1);\n    });\n  }\n\n  const refreshPopups = () => {\n    setSelectedLink(null);\n    setSelectedNode(null);\n\n    setShowDialog(false);\n    setSaveFileDialog(false);\n    setSaveJPEGDialog(false);\n    setSaveOptions(false);\n    setShowLoadFileDialog(false);\n    setShowRelationDialog(false);\n\n\n    let links = props.app.getDiagramEngine().getDiagramModel().getLinks();\n\n    Object.keys(links).map(id => {\n      links[id].targetPort == null && props.app.getDiagramEngine().getDiagramModel().removeLink(id);\n    });\n\n  };\n\n  const containerStyles: CSSProperties = {\n    display: \"flex\",\n    justifyContent: \"space-between\",\n    borderColor: \"rgb(255,123,0)\"\n  };\n  const itemStyles: CSSProperties = {\n    display: \"inline-block\",\n    paddingTop: 3,\n    paddingRight: 5\n  };\n\n  return (\n    <div className=\"body\">\n      <div className=\"header\">\n        <div className=\"title\">DB Diagram Scripter</div>\n      </div>\n      <div className=\"content\" ref={jpegFileTarget}>\n        <TrayWidget>\n          <TrayItemWidget\n            model={{ type: \"table\" }}\n            name=\"Entity\"\n            color=\"rgb(0,192,255)\"\n          />\n          <TrayItemWidget\n            model={{ type: \"label\" }}\n            name=\"Label\"\n            color=\"rgb(192,255,0)\"\n          />\n\n          <div\n            style={{ borderColor: \"rgb(255,123,0)\", marginTop: \"100px\" }}\n            className=\"tray-item\"\n            onClick={() => {\n              setShowLoadFileDialog(true);\n              setSelectedNode(null);\n            }}\n          >\n            Load Diagram\n          </div>\n          <div\n            style={containerStyles}\n            className=\"tray-item\"\n            onClick={() => {\n              setSaveOptions(!showSaveOptions);\n              setSelectedNode(null);\n            }}\n          >\n            Save\n            <span\n              style={itemStyles}\n              className={`mi ${\n                !showSaveOptions ? \"mi-ArrowDown8\" : \"mi-ArrowUp8\"\n                }`}\n            />\n          </div>\n          {showSaveOptions && (\n            <div\n              style={{ borderColor: \"rgb(255,123,0)\" }}\n              className=\"tray-item\"\n              onClick={() => {\n                setSaveFileDialog(true);\n                setSelectedNode(null);\n              }}\n            >\n              File\n            </div>\n          )}\n          {showSaveOptions && (\n            <div\n              style={{ borderColor: \"rgb(255,123,0)\" }}\n              className=\"tray-item\"\n              onClick={() => {\n                setSaveJPEGDialog(true);\n                setSelectedNode(null);\n              }}\n            >\n              JPEG\n            </div>\n          )}\n          <div\n            style={{ borderColor: \"rgb(152,50,100)\", marginTop: \"100px\" }}\n            className={`tray-item ${isUml ? 'selected' : ''}`}\n            onClick={() => {\n              if(!isUml) {\n                changeRelation();\n                setIsUml(true);\n              }\n            }}\n          >\n            UML\n          </div>\n          <div\n            style={{ borderColor: \"rgb(152,50,100)\" }}\n            className={`tray-item ${!isUml ? 'selected' : ''}`}\n            onClick={() => {\n              if(isUml) {\n                changeRelation();\n                setIsUml(false);\n              }\n            }}\n          >\n            Chen\n          </div>\n          <div\n            style={{ borderColor: \"rgb(255,0,0)\", marginTop: \"100px\" }}\n            className=\"tray-item\"\n            onClick={() => {\n              setShowDialog(true);\n              setSelectedNode(null);\n            }}\n          >\n            Create DB Code\n          </div>\n        </TrayWidget>\n\n        <div\n          id=\"diagram-layer\"\n          className=\"diagram-layer\"\n          onDrop={event => {\n            event.preventDefault();\n            var data = JSON.parse(\n              event.dataTransfer.getData(\"storm-diagram-node\")\n            );\n\n            let allNodes = props.app\n              .getDiagramEngine()\n              .getDiagramModel()\n              .getNodes() as {\n                [id: string]: Node;\n              };\n            let names = Object.values(allNodes).map(node => allNodes[node.id].name.toLowerCase().trim());\n\n            var nodesCount = _.keys(\n              props.app\n                .getDiagramEngine()\n                .getDiagramModel()\n                .getNodes()\n            ).length;\n\n            let newNodeName = names.includes(`Entity${nodesCount + 1}`.toLowerCase().trim()) ? `Entity${nodesCount + 1}_${nodesCount + 1}` : `Entity${nodesCount + 1}`;\n\n            var node = null;\n            if (data.type === \"table\") {\n              node = new Node(\n                false,\n                newNodeName,\n                \"rgb(0,192,255)\"\n              );\n              node.addInPort(\n                false,\n                \"Id\",\n                true,\n                false,\n                true,\n                true,\n                true,\n                PropertyType.INT\n              );\n              node.addInPort(\n                true,\n                \"\",\n                false,\n                false,\n                false,\n                false,\n                false,\n                PropertyType.INT\n              );\n              node.addInPort(\n                true,\n                \"1\",\n                false,\n                false,\n                false,\n                false,\n                false,\n                PropertyType.INT\n              );\n\n              node.addListener({});\n            } else {\n              node = new Node(\n                true,\n                \"Label \",\n                \"rgb(192,255,0)\"\n              );\n            }\n\n            var points = props.app\n              .getDiagramEngine()\n              .getRelativeMousePoint(event);\n            node.x = points.x;\n            node.y = points.y;\n            props.app\n              .getDiagramEngine()\n              .getDiagramModel()\n              .addNode(node);\n\n            forceUpdate();\n          }}\n          onDragOver={event => {\n            event.preventDefault();\n          }}\n          onClick={event => {\n            event.preventDefault();\n            if (event.ctrlKey && props.app\n              .getDiagramEngine()\n              .getDiagramModel()\n              .getSelectedItems()[0] instanceof PointModel) {\n              const pointToRemove = props.app\n                .getDiagramEngine()\n                .getDiagramModel()\n                .getSelectedItems()[0] as PointModel;\n              const pointLink = props.app\n                .getDiagramEngine()\n                .getDiagramModel()\n                .getSelectedItems()[0].parent as Link;\n                \n                pointLink && props.app.getDiagramEngine().getDiagramModel().links[pointLink.id].removePoint(pointToRemove);\n            }\n            refreshPopups();\n          }}\n          onDoubleClick={event => {\n            event.preventDefault();\n            if (\n              props.app\n                .getDiagramEngine()\n                .getDiagramModel()\n                .getSelectedItems()[0] instanceof PointModel\n            ) {\n              console.log('zmiana linku');\n              setSelectedLink(\n                props.app\n                  .getDiagramEngine()\n                  .getDiagramModel()\n                  .getSelectedItems()[0].parent as Link\n              );\n              setShowRelationDialog(true);\n              setSelectedNode(null);\n            } else if (\n              props.app\n                .getDiagramEngine()\n                .getDiagramModel()\n                .getSelectedItems()[0] instanceof Node\n            ) {\n              refreshPopups();\n              setSelectedNode(\n                props.app\n                  .getDiagramEngine()\n                  .getDiagramModel()\n                  .getSelectedItems()[0] as Node\n              );\n            }\n          }}\n        >\n          <DiagramWidget\n            allowLooseLinks={true}\n            deleteKeys={[46]}\n            className=\"srd-demo-canvas\"\n            diagramEngine={props.app.getDiagramEngine()}\n          />\n        </div>\n        {selectedNode != null ? (\n          <NodeProperties\n            selectedItem={selectedNode}\n            diagramEngine={props.app.getDiagramEngine()}\n          />\n        ) : null}\n        <GenerationHandler\n          isUml={isUml}\n          update={refreshPopups}\n          isOpen={showDialog}\n          serializeDiagram={props.app.getDiagramEngine().diagramModel.serializeDiagram()}\n\n        />\n        <LoadFileHandler\n          update={refreshPopups}\n          isOpen={showLoadFileDialog}\n          app={props.app}\n          setIsUml={setIsUml}\n        />\n        <SaveToFilePopup\n          update={refreshPopups}\n          diagramModel={props.app.getDiagramEngine().diagramModel}\n          isOpen={showSaveFileDialog}\n          isUml={isUml}\n        />\n        <SaveToJpegPopup\n          update={refreshPopups}\n          diagramModel={props.app.getActiveDiagram()}\n          isOpen={showSaveJPEGDialog}\n        />\n\n        <RelationPopup\n          diagramModel={props.app.getActiveDiagram()}\n          diagramEngine={props.app.getDiagramEngine()}\n\n          update={refreshPopups}\n          isOpen={showRelationDialog}\n          link={selectedLink}\n        />\n      </div>\n    </div>\n  );\n};\n","import * as React from \"react\";\nimport { Application } from \"./components/dragAndDrop/Application\";\nimport { AppView } from \"./AppView\";\nrequire(\"react-bootstrap-table-next/dist/react-bootstrap-table2.min.css\");\nrequire(\"storm-react-diagrams/dist/style.min.css\");\n\nexport const App = () => {\n  return <AppView app={new Application()} />;\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import \"./styles/index.scss\";\nimport \"./styles/App.scss\";\nimport \"./styles/dragAndDrop.scss\";\nimport \"./icons/micon/css/micon.min.css\";\nimport \"react-bootstrap-table-next/dist/react-bootstrap-table2.min.css\";\nimport { App } from \"./App\";\nimport * as ReactDOM from \"react-dom\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport * as React from \"react\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}