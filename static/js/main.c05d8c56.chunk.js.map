{"version":3,"sources":["components/TrayWidget.tsx","components/TrayItemWidget.tsx","helpers/DemoCanvasWidget.tsx","infrastructure/models/ArrowLinkModel.ts","infrastructure/models/DefaultLabelModel.tsx","infrastructure/models/DefaultNodeModel.ts","infrastructure/models/DefaultLinkModel.ts","infrastructure/Toolkit.ts","infrastructure/models/DefaultPortModel.ts","infrastructure/models/ArrowPortModel.ts","components/TrayItemDiv.tsx","infrastructure/models/PropertyType.ts","components/grid/Grid.tsx","components/grid/Row.tsx","components/grid/Col.tsx","components/PropertyTable/PropertyTable.tsx","components/NodeProperties/NodeProperties.tsx","components/popups/ResultPopup/ResultPopup.tsx","handlers/GenerationHandler.tsx","components/popups/LoadFilePopup/LoadFilePopup.tsx","handlers/LoadFileHandler.tsx","components/popups/SaveToFilePopup/SaveToFilePopup.tsx","components/popups/SaveToJpegPopup/SaveToJpegPopup.tsx","components/popups/RealtionPopup/RelationPopup.tsx","components/BodyWidget.tsx","infrastructure/widgets/ArrowLinkWidget.tsx","infrastructure/factories/ArrowLinkFactory.tsx","infrastructure/widgets/DefaultPortLabelWidget.tsx","infrastructure/widgets/DefaultNodeWidget.tsx","infrastructure/factories/DefaultNodeFactory.tsx","infrastructure/widgets/DefaultLabelWidget.tsx","infrastructure/factories/DefaultLabelFactory.tsx","infrastructure/factories/DefaultPortFactory.tsx","infrastructure/widgets/DefaultLinkPointWidget.tsx","infrastructure/widgets/DefaultLinkSegmentWidget.tsx","infrastructure/widgets/DefaultLinkWidget.tsx","infrastructure/factories/DefaultLinkFactory.tsx","infrastructure/widgets/CustomLabelWidget.tsx","infrastructure/factories/CustomLabelFactory.tsx","infrastructure/factories/ArrowPortFactory.tsx","components/Application.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["Tray","styled","div","TrayWidget","this","props","children","React","p","color","TrayItemWidget","draggable","onDragStart","event","dataTransfer","setData","JSON","stringify","model","className","name","Container","background","DemoCanvasWidget","ArrowLinkModel","options","type","width","selectedColor","curvyness","DefaultLinkModel","DefaultLabelModel","offsetY","label","data","LabelModel","DefaultNodeModel","isLabel","portsIn","lookupTable","clone","portsOut","port","getOptions","in","indexOf","push","_","portsInOrder","id","getPortFromID","NodeModel","properties","addLabel","alignment","PortModelAlignment","RIGHT","LEFT","TOP","points","length","curve","BezierCurve","setSource","getFirstPoint","getPosition","setTarget","getLastPoint","setSourceControl","setTargetControl","sourcePort","getSourceControl","translate","calculateControlOffset","getSourcePort","targetPort","getTargetControl","getTargetPort","getSVGCurve","relPorts","getPorts","Object","values","map","a","propertyType","isPrimaryKey","isNotNull","isAutoincremented","isUnique","propertiesNode","addPort","DefaultPortModel","labelOb","setLabel","fireEvent","LinkModel","Toolkit","TESTING","TESTING_UID","replace","c","r","Math","random","toString","element","selector","document","body","closest","logic","isNamePort","isForeignKey","fkPortId","alignemnt","UID","isPartialKey","links","factory","link","createLinkModel","setSourcePort","setTargetPort","generateModel","PortModel","AdvancedPortModel","thisParent","getParent","portNode","portNodePorts","thisParentPorts","czyMaPortZPKjakoFk","keys","filter","czyMaPortZPKjakoFk2","pk","PropertyType","marginTop","isSelected","css","isDisabled","TrayItemDiv","onClick","Grid","style","buildClassNameString","Row","flex","Col","onDoubleClick","size","config","pull","offset","order","hidden","buildGridColConfigClassNames","sm","md","lg","xl","xxl","xxxl","PropertyTable","useState","updatedItem","setUpdatedItem","forceUpdate","setValue","value","useForceUpdate","useMemo","selectedItem","handleChangePK","row","persist","ports","console","log","clearPartialKeys","columns","dataField","text","formatter","cellContent","defaultValue","onChange","target","handleChangePortLabel","paddingLeft","list","handleChangepPropType","obj","key","checked","handleChangeFK","handleChangePartialKey","disabled","handleChangeNull","handleChangeAutoInc","handleChangeUnique","entries","constructor","removePort","portsTable","x","cols","find","col","isLogic","keyField","relView","bordered","newPortNumber","NodeProperties","defaultName","setDefaultName","setName","showInput","setShowInput","setLocked","handleNameChange","diagramEngine","getModel","getNodes","node","toLowerCase","trim","includes","height","wordBreak","ResultPopup","dbName","setDbName","mySQLView","setmySQLView","formatedMSSQL","mssqlString","sqlFormatter","format","language","indent","formatedMySQL","mysqlString","modal","closeOnDocumentClick","open","isOpen","closeOnEscape","marginRight","generateScript","readOnly","contentEditable","blob","Blob","FileSaver","saveAs","update","GenerationHandler","sqlString","setSqlString","setMySqlString","useEffect","serDiagram","serializeDiagram","dNodes","nodes","dLinks","newOBJ","diagram","axios","post","SerializedModel","DatabaseName","RelationType","isUml","DiagramType","response","responseMy","status","LoadFilePopup","fileReader","fileContent","setFileContent","handleFileRead","e","content","result","onClose","files","FileReader","onloadend","readAsText","accept","loadDiagram","LoadFileHandler","engine","app","getDiagramEngine","parse","setIsUml","setIsLogic","model2","DiagramModel","deserializeModel","getLinks","forEach","getLabels","splice","loadLogicModel","loadConceptualModel","repaintCanvas","error","SaveToFilePopup","fileName","setFileName","diagramJson","diagramModel","serialize","SaveToJpegPopup","domtoimage","toJpeg","getElementById","quality","then","dataUrl","createElement","download","href","click","RelationPopup","left","setLeft","right","setRight","relationName","setRelationName","leftLabel","relLabel","rightLabel","remove","sourceP","targetP","removeLink","renderOptionPicker","side","newSourceP","newTargetP","addLink","labels","getPoints","index","margin","Body","Header","Content","Layer","BodyWidget","showDialog","setShowDialog","showRelationDialog","setShowRelationDialog","showLoadFileDialog","setShowLoadFileDialog","showSaveFileDialog","setSaveFileDialog","showSaveJPEGDialog","setSaveJPEGDialog","showSaveOptions","setSaveOptions","selectedNode","setSelectedNode","selectedLink","setSelectedLink","isLogicModel","setIsLogicModel","changeRelation","temp","substring","temp2","refreshPopups","display","justifyContent","borderColor","paddingTop","paddingRight","setConceptualModel","setLogicModel","onDrop","getData","names","nodesCount","newNodeName","point","getRelativeMousePoint","setPosition","addNode","onDragOver","preventDefault","ctrlKey","getSelectedEntities","PointModel","pointToRemove","pointLink","removePoint","getActiveDiagram","CustomLinkArrowWidget","previousPoint","setSelected","angle","atan2","y","PI","transform","fill","onMouseLeave","onMouseEnter","data-id","getID","data-linkid","getLink","ArrowLinkWidget","colorSelected","paths","refPaths","j","generateLink","LinkWidget","generateLinePath","onMouseDown","addPointToLink","i","generatePoint","generateArrow","data-default-link-test","testName","DefaultLinkWidget","ArrowLinkFactory","DefaultLinkFactory","Port","fontWeight","containerStyles","itemStyles","portStyles","namedPortStyles","DefaultPortLabel","undefined","Node","selected","Title","TitleName","Ports","PortsContainer","DefaultNodeWidget","generatePort","portsJSX","bind","namedPort","notNamedPort","data-default-node-name","DefaultNodeFactory","AbstractReactFactory","Label","DefaultLabelWidget","DefaultLabelFactory","DefaultPortFactory","AbstractModelFactory","PointTop","circle","DefaultLinkPointWidget","state","cx","cy","setState","opacity","DefaultLinkSegmentWidget","Bottom","generateLinkSegment","path","ref","forwardRef","Top","strokeLinecap","onSelection","extras","strokeOpacity","strokeWidth","onContextMenu","isLocked","setRenderedPaths","current","shiftKey","getMaxNumberPointsPerLink","position","addPoint","stopPropagation","getActionEventBus","fireAction","extraProps","getFactoryForLink","getSVGPath","Keyframes","keyframes","Path","stroke","d","CustomLabelWidget","CustomLabelFactory","ArrowPortFactory","Application","activeModel","logicModel","SRD","getNodeFactories","registerFactory","getLabelFactories","getPortFactories","getLinkFactories","getStateMachine","getCurrentState","DefaultDiagramState","dragNewLink","allowLooseLinks","newModel","setModel","concNodes","k","nodePorts","logicPort","concLinks","logicNodes","sourceNode","sourceNodeId","targetNode","targetNodeId","sourceLabel","targetLabel","relNode","n","node2","targetP2","sourceP2","link2","addAll","tNode","activeModelCopy","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.c05d8c56.chunk.js","sourcesContent":["\nimport * as React from 'react';\nimport styled from '@emotion/styled';\n\n\texport const Tray = styled.div`\n        min-width: 200px;\n\t\tbackground: rgb(20, 20, 20);\n\t\tflex-grow: 0;\n\t\tflex-shrink: 0;\n\t`;\n\nexport class TrayWidget extends React.Component {\n\trender() {\n\t\treturn <Tray>{this.props.children}</Tray>;\n\t}\n}","import * as React from 'react';\nimport styled from '@emotion/styled';\n\nexport interface TrayItemWidgetProps {\n\tmodel: any;\n\tcolor: string;\n\tname: string;\n}\n\n\texport const Tray = styled.div<{ color: string }>`\n\t\tcolor: white;\n\t\tfont-family: Helvetica, Arial;\n\t\tpadding: 5px;\n\t\tmargin: 0px 10px;\n\t\tborder: solid 1px ${(p) => p.color};\n\t\tborder-radius: 5px;\n\t\tmargin-bottom: 2px;\n\t\tcursor: pointer;\n\t`;\n\nexport class TrayItemWidget extends React.Component<TrayItemWidgetProps> {\n\trender() {\n\t\treturn (\n\t\t\t<Tray\n\t\t\t\tcolor={this.props.color}\n\t\t\t\tdraggable={true}\n\t\t\t\tonDragStart={(event) => {\n\t\t\t\t\tevent.dataTransfer.setData('storm-diagram-node', JSON.stringify(this.props.model));\n\t\t\t\t}}\n\t\t\t\tclassName=\"tray-item\">\n\t\t\t\t{this.props.name}\n\t\t\t</Tray>\n\t\t);\n\t}\n}","import * as React from 'react';\nimport styled from '@emotion/styled';\n\nexport interface DemoCanvasWidgetProps {\n\tcolor?: string;\n\tbackground?: string;\n}\n\nexport const Container = styled.div<{ color: string; background: string }>`\n\theight: 100%;\n\tbackground-color: ${(p) => p.background};\n\tbackground-size: 50px 50px;\n\tdisplay: flex;\n\t> * {\n\t\theight: 100%;\n\t\tmin-height: 100%;\n\t\twidth: 100%;\n\t}\n\tbackground-image: linear-gradient(\n\t\t\t0deg,\n\t\t\ttransparent 24%,\n\t\t\t${(p) => p.color} 25%,\n\t\t\t${(p) => p.color} 26%,\n\t\t\ttransparent 27%,\n\t\t\ttransparent 74%,\n\t\t\t${(p) => p.color} 75%,\n\t\t\t${(p) => p.color} 76%,\n\t\t\ttransparent 77%,\n\t\t\ttransparent\n\t\t),\n\t\tlinear-gradient(\n\t\t\t90deg,\n\t\t\ttransparent 24%,\n\t\t\t${(p) => p.color} 25%,\n\t\t\t${(p) => p.color} 26%,\n\t\t\ttransparent 27%,\n\t\t\ttransparent 74%,\n\t\t\t${(p) => p.color} 75%,\n\t\t\t${(p) => p.color} 76%,\n\t\t\ttransparent 77%,\n\t\t\ttransparent\n\t\t);\n`;\n\n\nexport class DemoCanvasWidget extends React.Component<DemoCanvasWidgetProps> {\n\trender() {\n\t\treturn (\n\t\t\t<Container\n\t\t\t\tbackground={this.props.background || 'rgb(60, 60, 60)'}\n\t\t\t\tcolor={this.props.color || 'rgba(255,255,255, 0.05)'}>\n\t\t\t\t{this.props.children}\n\t\t\t</Container>\n\t\t);\n\t}\n}","import { DefaultLinkModelOptions } from \"./DefaultLinkModel\";\nimport { DefaultLinkModel } from \"@projectstorm/react-diagrams\";\n\nexport class ArrowLinkModel extends DefaultLinkModel {\n\tconstructor(options: DefaultLinkModelOptions = {}) {\n\t\tsuper({\n\t\t\ttype: 'arrow',\n\t\t\twidth: options.width || 3,\n\t\t\tcolor: options.color || 'gray',\n\t\t\tselectedColor: options.selectedColor || 'rgb(0,192,255)',\n\t\t\tcurvyness: 0,\n\t\t\t...options\n\t\t});\n\t}\n}","import { DiagramEngine, LabelModel, LabelModelGenerics, LabelModelOptions } from '@projectstorm/react-diagrams-core';\nimport { DeserializeEvent } from '@projectstorm/react-canvas-core';\n\nexport interface DefaultLabelModelOptions extends LabelModelOptions {\n\tlabel?: string;\n}\n\nexport interface DefaultLabelModelGenerics extends LabelModelGenerics {\n\tOPTIONS: DefaultLabelModelOptions;\n}\n\nexport class DefaultLabelModel extends LabelModel<DefaultLabelModelGenerics> {\n\tconstructor(options: DefaultLabelModelOptions = {}) {\n\t\tsuper({\n\t\t\toffsetY: options.offsetY == null ? -23 : options.offsetY,\n\t\t\ttype: 'default',\n\t\t\t...options\n\t\t});\n\t}\n\n\tsetLabel(label: string) {\n\t\tthis.options.label = label;\n\t}\n\n\tdeserialize(event: DeserializeEvent<this>) {\n\t\tsuper.deserialize(event);\n\t\tthis.options.label = event.data.label;\n\t}\n\n\tserialize() {\n\t\treturn {\n\t\t\t...super.serialize(),\n\t\t\tlabel: this.options.label\n\t\t};\n\t}\n}\n","import * as _ from 'lodash';\nimport { NodeModel, NodeModelGenerics, PortModelAlignment } from '@projectstorm/react-diagrams-core';\nimport { DefaultPortModel } from '../models/DefaultPortModel';\nimport { BasePositionModelOptions, DeserializeEvent } from '@projectstorm/react-canvas-core';\n\nexport interface DefaultNodeModelOptions extends BasePositionModelOptions {\n\tname?: string;\n\tcolor?: string;\n}\n\nexport interface DefaultNodeModelGenerics extends NodeModelGenerics {\n\tOPTIONS: DefaultNodeModelOptions;\n}\n\nexport class DefaultNodeModel extends NodeModel<DefaultNodeModelGenerics> {\n\tisLabel: boolean;\n\n\tprotected portsIn: DefaultPortModel[];\n\n\tconstructor(isLabel: boolean, name: string, color: string) {\n\t\tsuper({\n\t\t\ttype: 'default',\n\t\t\tname,\n\t\t\tcolor\n\t\t});\n\t\tthis.isLabel = isLabel\n\t\tthis.portsIn = [];\n\t}\n\n\tdoClone(lookupTable: {}, clone: any): void {\n\t\tclone.portsIn = [];\n\t\tclone.portsOut = [];\n\t\tsuper.doClone(lookupTable, clone);\n\t}\n\n\tremovePort<T extends DefaultPortModel>(port: T): void {\n\t\tsuper.removePort(port);\n\t}\n\n\taddPort<T extends DefaultPortModel>(port: T): T {\n\t\tsuper.addPort(port);\n\t\tif (port.getOptions().in) {\n\t\t\tif (this.portsIn.indexOf(port) === -1) {\n\t\t\t\tthis.portsIn.push(port);\n\t\t\t}\n\t\t} \n\t\treturn port;\n\t}\n\n\tdeserialize(event: DeserializeEvent<this>) {\n\t\tsuper.deserialize(event);\n\t\tthis.options.name = event.data.name;\n\t\tthis.options.color = event.data.color;\n\t\tthis.portsIn = _.map(event.data.portsInOrder, (id) => {\n\t\t\treturn this.getPortFromID(id);\n\t\t}) as DefaultPortModel[];\n\t\tthis.isLabel = event.data.isLabel;\n\t}\n\n\tserialize(): any {\n\t\treturn {\n\t\t\t...super.serialize(),\n\t\t\tname: this.options.name,\n\t\t\tcolor: this.options.color,\n\t\t\tisLabel: this.isLabel\n\t\t\t// portsInOrder: _.map(this.portsIn, (port) => {\n\t\t\t// \treturn port.getID();\n\t\t\t// })\n\t\t};\n\t}\n\n\tgetInPorts(): DefaultPortModel[] {\n\t\treturn this.portsIn;\n\t}\n}\n","import {\n\tDiagramEngine,\n\tLabelModel,\n\tLinkModel,\n\tLinkModelGenerics,\n\tLinkModelListener,\n\tPortModel,\n\tPortModelAlignment\n} from '@projectstorm/react-diagrams-core';\nimport { DefaultLabelModel } from '../models/DefaultLabelModel';\nimport { BezierCurve } from '@projectstorm/geometry';\nimport { BaseEntityEvent, BaseModelOptions, DeserializeEvent } from '@projectstorm/react-canvas-core';\nimport { DefaultNodeModel } from './DefaultNodeModel';\nimport { PropertyType } from './PropertyType';\nimport { DefaultPortModel } from './DefaultPortModel';\n\nexport interface DefaultLinkModelListener extends LinkModelListener {\n\tcolorChanged?(event: BaseEntityEvent<DefaultLinkModel> & { color: null | string }): void;\n\n\twidthChanged?(event: BaseEntityEvent<DefaultLinkModel> & { width: 0 | number }): void;\n}\n\nexport interface DefaultLinkModelOptions extends BaseModelOptions {\n\twidth?: number;\n\tcolor?: string;\n\tselectedColor?: string;\n\tcurvyness?: number;\n\ttype?: string;\n\ttestName?: string;\n}\n\nexport interface DefaultLinkModelGenerics extends LinkModelGenerics {\n\tLISTENER: DefaultLinkModelListener;\n\tOPTIONS: DefaultLinkModelOptions;\n}\n\nclass RelationProperties {\n\tlabel: string;\n\tisPrimaryKey: boolean;\n\tisAutoincremented: boolean;\n\tisNotNull: boolean;\n\tisUnique: boolean;\n\tpropertyType: PropertyType\n  }\n\nexport class DefaultLinkModel extends LinkModel<DefaultLinkModelGenerics> {\n\tproperties: DefaultNodeModel;\n\n\tconstructor(options: DefaultLinkModelOptions = {}) {\n\t\tsuper({\n\t\t\ttype: 'default',\n\t\t\twidth: options.width || 3,\n\t\t\tcolor: options.color || 'gray',\n\t\t\tselectedColor: options.selectedColor || 'rgb(0,192,255)',\n\t\t\tcurvyness: 0,\n\t\t\t...options\n\t\t});\n\n\t\tthis.addLabel('0,N')\n\t\tthis.addLabel('relation name')\n\t\tthis.addLabel('0,N')\n\n\t\tthis.properties = new DefaultNodeModel(false, 'relNode', 'rgb(0,192,255)');\n\t}\n\n\tcalculateControlOffset(port: PortModel): [number, number] {\n\t\tif (port.getOptions().alignment === PortModelAlignment.RIGHT) {\n\t\t\treturn [this.options.curvyness, 0];\n\t\t} else if (port.getOptions().alignment === PortModelAlignment.LEFT) {\n\t\t\treturn [-this.options.curvyness, 0];\n\t\t} else if (port.getOptions().alignment === PortModelAlignment.TOP) {\n\t\t\treturn [0, -this.options.curvyness];\n\t\t}\n\t\treturn [0, this.options.curvyness];\n\t}\n\n\tgetSVGPath(): string {\n\t\tif (this.points.length == 2) {\n\t\t\tconst curve = new BezierCurve();\n\t\t\tcurve.setSource(this.getFirstPoint().getPosition());\n\t\t\tcurve.setTarget(this.getLastPoint().getPosition());\n\t\t\tcurve.setSourceControl(this.getFirstPoint().getPosition().clone());\n\t\t\tcurve.setTargetControl(this.getLastPoint().getPosition().clone());\n\n\t\t\tif (this.sourcePort) {\n\t\t\t\tcurve.getSourceControl().translate(...this.calculateControlOffset(this.getSourcePort()));\n\t\t\t}\n\n\t\t\tif (this.targetPort) {\n\t\t\t\tcurve.getTargetControl().translate(...this.calculateControlOffset(this.getTargetPort()));\n\t\t\t}\n\t\t\treturn curve.getSVGCurve();\n\t\t}\n\t}\n\n\tserialize() {\n\t\tlet relPorts = this.properties && this.properties.getPorts() && Object.values(this.properties.getPorts());\n\t\tlet properties = relPorts && relPorts.map((a: DefaultPortModel) => {\n\t\t\treturn { \n\t\t\tlabel: a.label, \n\t\t\t  propertyType: a.propertyType, \n\t\t\t  isPrimaryKey: a.isPrimaryKey ,\n\t\t\t  isNotNull: a.isNotNull,\n\t\t\t  isAutoincremented: a.isAutoincremented,\n\t\t\t  isUnique: a.isUnique \n\t\t\t}\n\t\t  })\n\n\t\treturn {\n\t\t\t...super.serialize(),\n\t\t\twidth: this.options.width,\n\t\t\tcolor: this.options.color,\n\t\t\tcurvyness: this.options.curvyness,\n\t\t\tselectedColor: this.options.selectedColor,\n\t\t\tproperties\n\t\t};\n\t}\n\n\tdeserialize(event: DeserializeEvent<this>) {\n\t\tlet propertiesNode = new DefaultNodeModel(false, 'relNode', 'rgb(0,192,255)');\n\t\tevent.data.properties.map((a: RelationProperties) => {\n\t\t\tpropertiesNode.addPort(new DefaultPortModel(false, a.label, false, a.isPrimaryKey, \n\t\t\t\tfalse, a.isNotNull, a.isAutoincremented, a.isUnique, a.propertyType));\n\t\t  })\n\n\t\tsuper.deserialize(event);\n\t\tthis.options.color = event.data.color;\n\t\tthis.options.width = event.data.width;\n\t\tthis.options.curvyness = event.data.curvyness;\n\t\tthis.options.selectedColor = event.data.selectedColor;\n\t\tthis.properties = propertiesNode;\n\t}\n\n\taddLabel(label: LabelModel | string) {\n\t\tif (label instanceof LabelModel) {\n\t\t\treturn super.addLabel(label);\n\t\t}\n\t\tlet labelOb = new DefaultLabelModel();\n\t\tlabelOb.setLabel(label);\n\t\treturn super.addLabel(labelOb);\n\t}\n\n\tsetWidth(width: number) {\n\t\tthis.options.width = width;\n\t\tthis.fireEvent({ width }, 'widthChanged');\n\t}\n\n\tsetColor(color: string) {\n\t\tthis.options.color = color;\n\t\tthis.fireEvent({ color }, 'colorChanged');\n\t}\n}\n","import * as closest from 'closest';\n\nexport class Toolkit {\n\tstatic TESTING: boolean = false;\n\tstatic TESTING_UID = 0;\n\n\t/**\n\t * Generats a unique ID (thanks Stack overflow :3)\n\t * @returns {String}\n\t */\n\tpublic static UID(): string {\n\t\tif (Toolkit.TESTING) {\n\t\t\tToolkit.TESTING_UID++;\n\t\t\treturn `${Toolkit.TESTING_UID}`;\n\t\t}\n\t\treturn 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n\t\t\tconst r = (Math.random() * 16) | 0;\n\t\t\tconst v = c === 'x' ? r : (r & 0x3) | 0x8;\n\t\t\treturn v.toString(16);\n\t\t});\n\t}\n\n\t/**\n\t * Finds the closest element as a polyfill\n\t */\n\tpublic static closest(element: Element, selector: string) {\n\t\tif (document.body.closest) {\n\t\t\treturn element.closest(selector);\n\t\t}\n\t\treturn closest(element, selector);\n\t}\n}","import {\n\tLinkModel,\n\tPortModel,\n\tPortModelAlignment,\n\tPortModelGenerics,\n\tPortModelOptions\n} from '@projectstorm/react-diagrams-core';\nimport { DefaultLinkModel } from '../models/DefaultLinkModel';\nimport { AbstractModelFactory, DeserializeEvent } from '@projectstorm/react-canvas-core';\nimport { Toolkit } from '../Toolkit';\n\nexport interface DefaultPortModelOptions extends PortModelOptions {\n\tlabel?: string;\n\tin?: boolean;\n}\n\nexport interface DefaultPortModelGenerics extends PortModelGenerics {\n\tOPTIONS: DefaultPortModelOptions;\n}\n\nexport class DefaultPortModel extends PortModel<DefaultPortModelGenerics> {\n\tin: boolean;\n\n\tisNamePort: boolean;\n\tlabel: string;\n\t// links: { [id: string]: Link };\n\tisPrimaryKey: boolean;\n\tisPartialKey: boolean;\n\tisForeignKey: boolean;\n\tisAutoincremented: boolean;\n\tisNotNull: boolean;\n\tisUnique: boolean;\n\tpropertyType: string;// PropertyType;\n\tfkPortId: string;\n\n\tconstructor(logic: boolean, name: string,\n\t\tisNamePort: boolean,\n\t\tisPrimaryKey?: boolean,\n\t\tisForeignKey?: boolean,\n\t\tisNotNull?: boolean,\n\t\tisAutoincremented?: boolean,\n\t\tisUnique?: boolean,\n\t\tpropertyType?:  string, //PropertyType,\n\t\tid?: string,\n\t\tfkPortId?: string,\n\t\talignemnt?: PortModelAlignment) {\n\t\tsuper({\n\t\t\tid: id || Toolkit.UID(),\n\t\t\tin: true,\n\t\t\tname,\n\t\t\tlabel: name,\n\t\t\talignment: alignemnt,\n\t\t\ttype: logic ? 'arrow' : 'default'\n\t\t});\n\n\t\tthis.label = name;\n\t\tthis.isNamePort = isNamePort;\n\t\tthis.links = {};\n\n\t\tthis.isPrimaryKey = isPrimaryKey;\n\t\tthis.isForeignKey = isForeignKey;\n\t\tthis.isPartialKey = false;\n\n\t\tthis.isNotNull = isNotNull;\n\t\tthis.isUnique = isUnique;\n\t\tthis.isAutoincremented = isAutoincremented;\n\n\t\tthis.propertyType = propertyType;\n\t\tthis.fkPortId = fkPortId;\n\n\t}\n\n\tdeserialize(event: any) {\n\t\tsuper.deserialize(event);\n\t\tthis.options.in = event.data.in;\n\t\tthis.options.label = event.data.label;\n\n\t\tthis.label = event.data.label;\n\t\tthis.isNamePort = event.data.isNamePort;\n\t\n\t\tthis.isPrimaryKey = event.data.isPrimaryKey;\n\t\tthis.isPartialKey = event.data.isPartialKey;\n\t\n\t\tthis.isForeignKey = event.data.isForeignKey;\n\t\tthis.isNotNull = event.data.isNotNull;\n\t\tthis.isUnique = event.data.isUnique;\n\t\tthis.isAutoincremented = event.data.isAutoincremented;\n\t\tthis.propertyType = event.data.propertyType;\n\t\tthis.fkPortId = event.data.fkPortId;\n\t}\n\n\tserialize() {\n\t\treturn {\n\t\t\t...super.serialize(),\n\t\t\tin: this.in,\n\t\t\tlabel: this.label,\n\t\t\tisNamePort: this.isNamePort,\n\t\t\tisPrimaryKey: this.isPrimaryKey,\n\t\t\tisPartialKey: this.isPartialKey,\n\t  \n\t\t\tisForeignKey: this.isForeignKey,\n\t\t\tisNotNull: this.isNotNull,\n\t\t\tisUnique: this.isUnique,\n\t\t\tisAutoincremented: this.isAutoincremented,\n\t\t\tpropertyType: this.propertyType,\n\t\t\tfkPortId: this.fkPortId\n\t\t};\n\t}\n\n\tlink<T extends LinkModel>(port: PortModel, factory?: AbstractModelFactory<T>): T {\n\t\tlet link = this.createLinkModel(factory);\n\t\tlink.setSourcePort(this);\n\t\tlink.setTargetPort(port);\n\t\treturn link as T;\n\t}\n\n\tcanLinkToPort(port: PortModel): boolean {\n\t\treturn true;\n\t}\n\n\tcreateLinkModel(factory?: AbstractModelFactory<LinkModel>): LinkModel {\n\t\tlet link = super.createLinkModel();\n\t\tif (!link && factory) {\n\t\t\treturn factory.generateModel({});\n\t\t}\n\t\treturn link || new DefaultLinkModel();\n\t}\n}\n","import { LinkModel, LinkModelGenerics, PortModel, PortModelAlignment } from \"@projectstorm/react-diagrams\";\nimport { ArrowLinkModel } from \"./ArrowLinkModel\";\nimport { DefaultPortModel } from \"./DefaultPortModel\";\nimport { DefaultNodeModel } from \"./DefaultNodeModel\";\nimport { Toolkit } from \"../Toolkit\";\n\nexport class AdvancedPortModel extends DefaultPortModel {\n\tconstructor(name: string,\n\t\tisNamePort: boolean,\n\t\tisPrimaryKey?: boolean,\n\t\tisForeignKey?: boolean,\n\t\tisNotNull?: boolean,\n\t\tisAutoincremented?: boolean,\n\t\tisUnique?: boolean,\n\t\tpropertyType?:  string, //PropertyType,\n\t\tid?: string,\n\t\tfkPortId?: string,\n\t\talignemnt?: PortModelAlignment) {\n\t\tsuper(true, name,isNamePort, isPrimaryKey, isForeignKey, isNotNull,isAutoincremented, isUnique, propertyType, id,fkPortId,alignemnt);\n\t}\n\tcanLinkToPort(port: PortModel): boolean {\n\t\tlet thisParent = this.getParent() as DefaultNodeModel;\n\t\tlet portNode = port.getParent() as DefaultNodeModel;\n\t\n\t\tlet portNodePorts = portNode.getPorts() as {[s: string]: AdvancedPortModel};\n\t\tlet thisParentPorts = thisParent.getPorts() as {[s: string]: AdvancedPortModel};\n\t\n\t\tlet czyMaPortZPKjakoFk = Object.keys(thisParentPorts).filter(id => thisParentPorts[id].fkPortId === portNode.getOptions().id)[0];\n\t\tlet czyMaPortZPKjakoFk2 = Object.keys(portNodePorts).filter(id => portNodePorts[id].fkPortId === thisParent.getOptions().id)[0];\n\t\t\n\t\tlet pk = Object.keys(thisParentPorts).filter(id => thisParentPorts[id].isPrimaryKey)[0];\n\t\n\t\tif(!czyMaPortZPKjakoFk && !czyMaPortZPKjakoFk2) {\n            portNode.addPort(new AdvancedPortModel(thisParent.getOptions().name + thisParentPorts[pk].getOptions().name, false, false, true, true, false, false, 'INT', Toolkit.UID(), thisParent.getOptions().id));\n\t\t}\n\t\n\t\treturn true;\n\t}\n\t\n\tcreateLinkModel(): ArrowLinkModel | LinkModel<LinkModelGenerics> {\n\t\treturn new ArrowLinkModel();\n\t}\n}","import * as React from 'react';\nimport styled from '@emotion/styled';\nimport { css } from '@emotion/core';\n\nexport interface TrayItemDivProps {\n\tcolor: string;\n    name: string;\n    onClick: () => void;\n    marginTop?: string;\n    isSelected?: boolean;\n    isDisabled?: boolean;\n}\n\n\texport const Tray = styled.div<{ color: string, marginTop: string, isSelected: boolean, isDisabled: boolean }>`\n\t\tcolor: white;\n\t\tfont-family: Helvetica, Arial;\n\t\tpadding: 5px;\n\t\tmargin: 0px 10px;\n\t\tborder: solid 1px ${(p) => p.color};\n\t\tborder-radius: 5px;\n\t\tmargin-bottom: 2px;\n        cursor: pointer;\n        margin-top: ${p => p.marginTop};\n\n        ${props => props.isSelected && css`\n            background-color: black;\n            border-width: 4px !important\n        `}\n\n        ${props => props.isDisabled && css`\n            cursor: not-allowed !important;\n        `}\n\t`;\n\nexport class TrayItemDiv extends React.Component<TrayItemDivProps> {\n\trender() {\n\t\treturn (\n\t\t\t<Tray\n                isDisabled={this.props.isDisabled}\n                isSelected={this.props.isSelected}\n                marginTop={this.props.marginTop}\n\t\t\t\tcolor={this.props.color}\n\t\t\t\tonClick={this.props.onClick}\n\t\t\t\tclassName=\"tray-item\">\n\t\t\t\t{this.props.name}\n\t\t\t</Tray>\n\t\t);\n\t}\n}","export enum PropertyType {\n  BIT = \"BIT\",\n  TINYINT = \"TINYINT\",\n  SMALLINT = \"SMALLINT\",\n  INT = \"INT\",\n  BIGINT = \"BIGINT\",\n  'DECIMAL()' = \"DECIMAL()\",\n  'NUMERIC()' = \"NUMERIC()\",\n  'FLOAT()' = \"FLOAT()\",\n  REAL = \"REAL\",\n  DATE = \"DATE\",\n  TIME = \"TIME\",\n  DATETIME = \"DATETIME\",\n  TIMESTAMP = \"TIMESTAMP\",\n  YEAR = \"YEAR\",\n  'CHAR()' = \"CHAR()\",\n  'VARCHAR()' = \"VARCHAR()\",\n  TEXT = \"TEXT\",\n  'NCHAR()' = \"NCHAR()\",\n  'NVARCHAR()' = \"NVARCHAR()\",\n  NTEXT = \"NTEXT\",\n  'BINARY()' = \"BINARY()\",\n  'VARBINARY()' = \"VARBINARY()\",\n  IMAGE = \"IMAGE\",\n  CLOB = \"CLOB\",\n  BLOB = \"BLOB\",\n  XML = \"XML\",\n  JSON = \"JSON\",\n  MONEY = \"MONEY\"\n}\n","import * as React from \"react\";\n\nimport { GridProps } from \"./\";\n\nexport default class Grid extends React.Component<GridProps> {\n  render() {\n    return (\n      <div style={this.props.style} className={this.buildClassNameString()}>\n        {this.props.children}\n      </div>\n    );\n  }\n\n  buildClassNameString() {\n    let className = \"ms-Grid\";\n\n    if (this.props.className != null) {\n      className += ` ${this.props.className}`;\n    }\n\n    return className;\n  }\n}\n","import * as React from \"react\";\n\nimport { GridRowProps } from \"./\";\n\nexport default class Row extends React.Component<GridRowProps> {\n  render() {\n    return (\n      <div className={this.buildClassNameString()}>{this.props.children}</div>\n    );\n  }\n\n  buildClassNameString() {\n    let className = \"ms-Grid-row\";\n\n    if (this.props.flex) {\n      className += \" grid-row-flex\";\n    }\n\n    if (this.props.className != null) {\n      className += ` ${this.props.className}`;\n    }\n\n    return className;\n  }\n}\n","import * as React from \"react\";\n\nimport { GridColProps, GridColConfigProp } from \"./\";\n\nexport default class Col extends React.Component<GridColProps> {\n  render() {\n    return (\n      <div\n        className={this.buildClassNameString()}\n        onDoubleClick={this.props.onDoubleClick}\n      >\n        {this.props.children}\n      </div>\n    );\n  }\n\n  buildGridColConfigClassNames(size: string, config: GridColConfigProp) {\n    if (config == null) return \"\";\n\n    let className = ` ms-${size}`;\n\n    if (typeof config === \"string\") {\n      className += config;\n    } else {\n      className += config.size;\n\n      if (config.pull != null) {\n        className += ` ms-${size}Pull${config.pull}`;\n      }\n\n      if (config.push != null) {\n        className += ` ms-${size}Push${config.push}`;\n      }\n\n      if (config.offset != null) {\n        className += ` ms-${size}Offset${config.offset}`;\n      }\n\n      if (config.order != null) {\n        className += ` grid-flex-order-${size}-${config.order}`;\n      }\n    }\n\n    return className;\n  }\n\n  buildClassNameString() {\n    let className = \"ms-Grid-col\";\n\n    if (this.props.className != null) {\n      className += ` ${this.props.className}`;\n    }\n\n    if (this.props.hidden != null) {\n      className += ` ms-hidden${this.props.hidden}`;\n    }\n\n    if (this.props.order != null) {\n      className += ` grid-flex-order-${this.props.order}`;\n    }\n\n    className += this.buildGridColConfigClassNames(\"sm\", this.props.sm);\n    className += this.buildGridColConfigClassNames(\"md\", this.props.md);\n    className += this.buildGridColConfigClassNames(\"lg\", this.props.lg);\n    className += this.buildGridColConfigClassNames(\"xl\", this.props.xl);\n    className += this.buildGridColConfigClassNames(\"xxl\", this.props.xxl);\n    className += this.buildGridColConfigClassNames(\"xxxl\", this.props.xxxl);\n\n    return className;\n  }\n}\n","import \"./PropertyTable.scss\";\nimport React, { useState } from \"react\";\nimport { PropertyType } from \"../../infrastructure/models/PropertyType\";\nimport { DefaultPortModel } from \"../../infrastructure/models/DefaultPortModel\";\nimport BootstrapTable from \"react-bootstrap-table-next\";\nimport { DefaultLinkModel } from \"../../infrastructure/models/DefaultLinkModel\";\nimport { DefaultNodeModel } from \"../../infrastructure/models/DefaultNodeModel\";\nimport \"react-bootstrap-table-next/dist/react-bootstrap-table2.min.css\";\nimport { DiagramEngine } from \"@projectstorm/react-diagrams\";\nimport { AdvancedPortModel } from \"../../infrastructure/models/ArrowPortModel\";\n\nclass Props {\n\tselectedItem: DefaultNodeModel;\n\tdiagramEngine: DiagramEngine;\n\trelView?: boolean;\n\tisLogic: boolean;\n}\n\nexport function useForceUpdate() {\n\tconst [value, setValue] = React.useState(0);\n\treturn () => setValue(value => ++value);\n}\n\nexport const PropertyTable = (props: Props) => {\n\tconst [updatedItem, setUpdatedItem] = React.useState(null);\n\n\tconst forceUpdate = useForceUpdate();\n\n\tReact.useMemo(() => {\n\t\tsetUpdatedItem(props.selectedItem);\n\t}, [props.selectedItem]);\n\n\tconst clearPartialKeys = () => {\n\t\tlet ports =\n\t\tupdatedItem &&\n\t\tupdatedItem.ports &&\n\t\t(updatedItem.ports as { [s: string]: DefaultPortModel });\n\n\t\tObject.keys(ports).map(p => console.log(ports[p].isPartialKey = false));\n\t}\n\n\tconst handleChangePK = (\n\t\tevent: React.ChangeEvent<HTMLInputElement>,\n\t\trow: DefaultPortModel\n\t) => {\n\t\tevent.persist();\n\t\t(updatedItem.getPortFromID(\n\t\t\trow.getOptions().id\n\t\t) as DefaultPortModel).isPrimaryKey = !row.isPrimaryKey;\n\n\t\t(updatedItem.getPortFromID(\n\t\t\trow.getOptions().id\n\t\t) as DefaultPortModel).isNotNull = row.isPrimaryKey ? true : false;\n\n\t\t(updatedItem.getPortFromID(\n\t\t\trow.getOptions().id\n\t\t) as DefaultPortModel).isAutoincremented = row.isPrimaryKey ? true : false;\n\n\t\t(updatedItem.getPortFromID(\n\t\t\trow.getOptions().id\n\t\t) as DefaultPortModel).isUnique = row.isPrimaryKey ? true : false;\n\n\t\tclearPartialKeys();\n\t\tforceUpdate();\n\t};\n\n\tconst handleChangeFK = (\n\t\tevent: React.ChangeEvent<HTMLInputElement>,\n\t\trow: DefaultPortModel\n\t) => {\n\t\tevent.persist();\n\t\t(updatedItem.getPortFromID(\n\t\t\trow.getOptions().id\n\t\t) as DefaultPortModel).isForeignKey = !row.isForeignKey;\n\n\t\t(updatedItem.getPortFromID(\n\t\t\trow.getOptions().id\n\t\t) as DefaultPortModel).isNotNull = row.isForeignKey ? true : false;\n\n\t\tforceUpdate();\n\t};\n\n\tconst handleChangeNull = (\n\t\tevent: React.ChangeEvent<HTMLInputElement>,\n\t\trow: DefaultPortModel\n\t) => {\n\t\tevent.persist();\n\t\t(updatedItem.getPortFromID(row.getOptions().id) as DefaultPortModel).isNotNull = !row.isNotNull;\n\t\tforceUpdate();\n\t};\n\n\tconst handleChangePartialKey = (\n\t\tevent: React.ChangeEvent<HTMLInputElement>,\n\t\trow: DefaultPortModel\n\t) => {\n\t\tevent.persist();\n\t\t(updatedItem.getPortFromID(row.getOptions().id) as DefaultPortModel).isPartialKey = !row.isPartialKey;\n\t\tforceUpdate();\n\t};\n\n\tconst handleChangeUnique = (\n\t\tevent: React.ChangeEvent<HTMLInputElement>,\n\t\trow: DefaultPortModel\n\t) => {\n\t\tevent.persist();\n\t\t(updatedItem.getPortFromID(row.getOptions().id) as DefaultPortModel).isUnique = !row.isUnique;\n\t\tforceUpdate();\n\t};\n\n\tconst handleChangeAutoInc = (\n\t\tevent: React.ChangeEvent<HTMLInputElement>,\n\t\trow: DefaultPortModel\n\t) => {\n\t\tevent.persist();\n\t\t(updatedItem.getPortFromID(\n\t\t\trow.getOptions().id\n\t\t) as DefaultPortModel).isAutoincremented = !row.isAutoincremented;\n\t\tforceUpdate();\n\t};\n\n\tconst handleChangepPropType = (\n\t\tevent: React.ChangeEvent<HTMLInputElement>,\n\t\trow: DefaultPortModel\n\t) => {\n\t\tevent.persist();\n\t\t(updatedItem.getPortFromID(row.getOptions().id) as DefaultPortModel).propertyType = event.target\n\t\t\t.value;\n\t};\n\n\tconst handleChangePortLabel = (\n\t\tevent: React.ChangeEvent<HTMLInputElement>,\n\t\trow: DefaultPortModel\n\t) => {\n\t\tevent.persist();\n\t\t(updatedItem.getPortFromID(row.getOptions().id) as DefaultPortModel).label = event.target.value;\n\t};\n\n\tconst addNewPort = (newPortNumber: number) => {\n\t\t(updatedItem as DefaultNodeModel).addPort(new AdvancedPortModel(\n\t\t\t// props.isLogic,\n\t\t\t`new atribute ${newPortNumber}`, false, false, false, false, false, false, 'INT'));\n\n\t\tforceUpdate();\n\t};\n\n\tconst removePort = (port: DefaultPortModel) => {\n\t\tif (\n\t\t\tObject.entries(port.links).length !== 0 &&\n\t\t\tport.links.constructor === Object\n\t\t) {\n\t\t\t// let portLinks: DefaultLinkModel[] = Object.keys(port.links).map(x => {\n\t\t\t// \treturn port.links[x];\n\t\t\t// });\n\t\t\t// portLinks.forEach(p =>\n\t\t\t// \tprops.diagramEngine.getModel().removeLink(p)\n\t\t\t// );\n\t\t}\n\t\tupdatedItem.removePort(port);\n\t\tforceUpdate();\n\t};\n\n\tconst preparePropertyTypes = () => {\n\t\treturn Object.values(PropertyType).map(obj => (\n\t\t\t<option key={obj} value={obj}>\n\t\t\t\t{obj}\n\t\t\t</option>\n\t\t));\n\t};\n\n\tconst columns: any[] = [\n\t\t{\n\t\t\tdataField: \"label\",\n\t\t\ttext: \"Property Name\",\n\t\t\tformatter: (cellContent: any, row: DefaultPortModel) => (\n\t\t\t\t<div className=\"input\">\n\t\t\t\t\t<input\n\t\t\t\t\t\tstyle={{ width: '100px' }}\n\t\t\t\t\t\tclassName=\"darkInput\"\n\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\tdefaultValue={row.label}\n\t\t\t\t\t\tonChange={event => handleChangePortLabel(event, row)}\n\t\t\t\t\t></input>\n\t\t\t\t</div>\n\t\t\t)\n\t\t},\n\t\t{\n\t\t\tstyle: { paddingLeft: 0 },\n\t\t\tdataField: \"propertyType\",\n\t\t\ttext: \"Property Type\",\n\t\t\tformatter: (cellContent: any, row: DefaultPortModel) => (\n\t\t\t\t<div className=\"input\">\n\t\t\t\t\t<input\n\t\t\t\t\t\tstyle={{ width: '100px' }}\n\n\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\tlist=\"types\"\n\t\t\t\t\t\tclassName=\"darkInput\"\n\t\t\t\t\t\tonChange={event => handleChangepPropType(event, row)}\n\t\t\t\t\t\tdefaultValue={row.propertyType}\n\n\t\t\t\t\t/>\n\t\t\t\t\t<datalist id=\"types\">\n\t\t\t\t\t\t{preparePropertyTypes()}\n\t\t\t\t\t</datalist>\n\n\t\t\t\t</div>\n\t\t\t)\n\t\t},\n\t\t{\n\t\t\tdataField: \"isPrimaryKey\",\n\t\t\ttext: \"Is Primary Key\",\n\t\t\tformatter: (cellContent: any, row: DefaultPortModel) => (\n\t\t\t\t<div className=\"checkbox\">\n\t\t\t\t\t<label>\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\ttype=\"checkbox\"\n\t\t\t\t\t\t\tchecked={row.isPrimaryKey}\n\t\t\t\t\t\t\tonChange={event => handleChangePK(event, row)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</label>\n\t\t\t\t</div>\n\t\t\t)\n\t\t},\n\t\t{\n\t\t\tdataField: \"isForeignKey\",\n\t\t\ttext: \"Is Foreign Key\",\n\t\t\tformatter: (cellContent: any, row: DefaultPortModel) => (\n\t\t\t\t<div className=\"checkbox\">\n\t\t\t\t\t<label>\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\ttype=\"checkbox\"\n\t\t\t\t\t\t\tchecked={row.isForeignKey}\n\t\t\t\t\t\t\tonChange={event => handleChangeFK(event, row)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</label>\n\t\t\t\t</div>\n\t\t\t)\n\t\t},\n\t\t{\n\t\t\tdataField: \"isPartialKey\",\n\t\t\ttext: \"Is Partial Key\",\n\t\t\tformatter: (cellContent: any, row: DefaultPortModel) => (\n\t\t\t\t<div className=\"checkbox\">\n\t\t\t\t\t<label>\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\ttype=\"checkbox\"\n\t\t\t\t\t\tchecked={row.isPartialKey}\n\t\t\t\t\t\tonChange={event => handleChangePartialKey(event, row)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</label>\n\t\t\t\t</div>\n\t\t\t)\n\t\t},\n\t\t{\n\t\t\tdataField: \"isNotNull\",\n\t\t\ttext: \"Not Null\",\n\t\t\tformatter: (cellContent: any, row: DefaultPortModel) => (\n\t\t\t\t<div className=\"checkbox\">\n\t\t\t\t\t<label>\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\tdisabled={row.isPrimaryKey || row.isForeignKey}\n\t\t\t\t\t\t\ttype=\"checkbox\"\n\t\t\t\t\t\t\tchecked={row.isNotNull}\n\t\t\t\t\t\t\tonChange={event => handleChangeNull(event, row)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</label>\n\t\t\t\t</div>\n\t\t\t)\n\t\t},\n\t\t{\n\t\t\tdataField: \"isAutoincremented\",\n\t\t\ttext: \"Is Auto Incremented\",\n\t\t\tformatter: (cellContent: any, row: DefaultPortModel) => (\n\t\t\t\t<div className=\"checkbox\">\n\t\t\t\t\t<label>\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\tdisabled={row.isPrimaryKey}\n\t\t\t\t\t\t\ttype=\"checkbox\"\n\t\t\t\t\t\t\tchecked={row.isAutoincremented}\n\t\t\t\t\t\t\tonChange={event => handleChangeAutoInc(event, row)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</label>\n\t\t\t\t</div>\n\t\t\t)\n\t\t},\n\t\t{\n\t\t\tdataField: \"isUnique\",\n\t\t\ttext: \"Is Unique\",\n\t\t\tformatter: (cellContent: any, row: DefaultPortModel) => (\n\t\t\t\t<div className=\"checkbox\">\n\t\t\t\t\t<label>\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\tdisabled={row.isPrimaryKey}\n\t\t\t\t\t\t\ttype=\"checkbox\"\n\t\t\t\t\t\t\tchecked={row.isUnique}\n\t\t\t\t\t\t\tonChange={event => handleChangeUnique(event, row)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</label>\n\t\t\t\t</div>\n\t\t\t)\n\t\t},\n\t\t{\n\t\t\tdataField: \"remove\",\n\t\t\ttext: \"Remove\",\n\t\t\tformatter: (cellContent: any, row: DefaultPortModel) => (\n\t\t\t\t<div className=\"checkbox\">\n\t\t\t\t\t<label>\n\t\t\t\t\t\t<span\n\t\t\t\t\t\t\tonClick={() => removePort(row)}\n\t\t\t\t\t\t\tclassName=\"mi mi-Delete red\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t</label>\n\t\t\t\t</div>\n\t\t\t)\n\t\t}\n\t];\n\n\n\tlet ports =\n\t\tupdatedItem &&\n\t\tupdatedItem.ports &&\n\t\t(updatedItem.ports as { [s: string]: DefaultPortModel });\n\n\tlet portsTable: DefaultPortModel[] =\n\t\tports &&\n\t\tObject.keys(ports)\n\t\t\t.map(x => {\n\t\t\t\treturn ports[x];\n\t\t\t})\n\t\t\t.filter(p => !p.isNamePort);\n\n\tlet ispk = portsTable && portsTable.find(p => p.isPrimaryKey) ? true : false;\n\n\tlet cols = columns;\n\n\tif (ispk) {\n\t\tcols = cols.filter(col => col.dataField !== 'isPartialKey')\n\t}\n\n\tif(!props.isLogic) {\n\t\tcols = cols.filter(c => c.dataField !== 'isForeignKey')\n\t}\n\n\treturn (\n\t\t<div>\n\t\t\t<BootstrapTable\n\t\t\t\tkeyField=\"id\"\n\t\t\t\tdata={portsTable}\n\t\t\t\tcolumns={props.relView ? cols.filter(col => col.dataField !== 'isPrimaryKey' && col.dataField !== 'isPartialKey') : cols}\n\t\t\t\tbordered={false}\n\t\t\t/>\n\t\t\t<p\n\t\t\t\tclassName=\"mouse-cursor\"\n\t\t\t\tonClick={() => addNewPort(portsTable.length)}\n\t\t\t>\n\t\t\t\tAdd new atribute\n      </p>\n\t\t</div>\n\t);\n};\n","import \"./NodeProperties.scss\";\nimport * as React from \"react\";\n\nimport { Col, Row, Grid } from \"../grid\";\nimport { DiagramEngine } from \"@projectstorm/react-diagrams\";\nimport { DefaultNodeModel } from \"../../infrastructure/models/DefaultNodeModel\";\nimport { PropertyTable } from \"../PropertyTable/PropertyTable\";\n\nclass Props {\n  selectedItem: DefaultNodeModel;\n  isLogic: boolean;\n  diagramEngine: DiagramEngine;\n}\n\nexport function useForceUpdate() {\n  const [value, setValue] = React.useState(0);\n  return () => setValue(value => ++value);\n}\n\nexport const NodeProperties = (props: Props) => {\n  const [updatedItem, setUpdatedItem] = React.useState(null);\n  const [defaultName, setDefaultName] = React.useState(\"\");\n\n  const [name, setName] = React.useState(\"\");\n  const [showInput, setShowInput] = React.useState(false);\n\n  const forceUpdate = useForceUpdate();\n\n  React.useMemo(() => {\n    setUpdatedItem(props.selectedItem);\n    setName(props.selectedItem.getOptions().name);\n    setDefaultName(props.selectedItem.getOptions().name);\n  }, [props.selectedItem]);\n\n  React.useEffect(() => {\n    props.selectedItem.setLocked();\n\n    return () => {\n      props.selectedItem.setLocked(false);\n    };\n  });\n\n\n  const handleNameChange = (event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement >) => {\n    event.persist();\n    let allNodes = props.diagramEngine.getModel().getNodes() as DefaultNodeModel[];\n\n    let names = allNodes.map(node => node.getOptions().name.toLowerCase().trim());\n    \n    names.includes(event.target.value.toLowerCase().trim())\n      ? updatedItem.getOptions().name = defaultName\n      : updatedItem.getOptions().name = event.target.value.trim();\n    forceUpdate();\n  };\n\n      const iconStyles: React.CSSProperties = {\n        display: \"flex\",\n        flexDirection: 'row',\n        flexFlow: 'row-reverse',\n        position: 'absolute',\n        right: '0',\n        top: '10px',\n        zIndex: 9999\n      };\n\n\n      const acceptStyle: React.CSSProperties = {\n        marginRight: 5,\n        backgroundColor: 'green',\n        borderRadius: '90px',\n        padding: '10px',\n      };\n\n      const declineStyle: React.CSSProperties = {\n        marginRight: '20px',\n        backgroundColor: 'red',\n        borderRadius: '90px',\n        padding: '10px',\n      };\n\n  if (!updatedItem) return null;\n  else\n    return (\n      <div className=\"trayBottom\">\n        {/* <div style={iconStyles}>\n              <span\n                style={declineStyle}\n                className={`mi ${\n                  \"mi-Cancel\"\n                }`}\n              />\n                <span\n                  style={acceptStyle}\n                  className={`mi ${\n                    \"mi-Accept\"\n                  }`}\n                />\n            </div> */}\n        <Grid>\n          <Row>\n          \n            <Col >\n              {!showInput ? (\n                \n                <h1 style={{wordBreak: 'break-all'}} onDoubleClick={() => setShowInput(true)}>{name}</h1>\n              ) : (\n                props.selectedItem.isLabel ? \n                <textarea\n                style={{height: '200px'}}\n                className=\"darkInput fs-24\"\n                defaultValue={name}\n                onChange={event => handleNameChange(event)}\n                >\n\n                </textarea> :\n                <input\n                  className=\"darkInput fs-24\"\n                  defaultValue={name}\n                  onChange={event => handleNameChange(event)}\n                />\n              )}\n              \n            </Col>\n            \n            {!updatedItem.isLabel ? (\n        <PropertyTable selectedItem={props.selectedItem} diagramEngine={props.diagramEngine} isLogic={props.isLogic}/> \n            ) : null}\n          </Row>\n        </Grid>\n      </div>\n    );\n};\n","import \"./ResultPopup.scss\";\nimport React, { useState, useEffect } from \"react\";\nimport Popup from \"reactjs-popup\";\nimport sqlFormatter from \"sql-formatter\";\nimport FileSaver from \"file-saver\";\n\nclass Props {\n  isOpen: boolean;\n  generateScript?: (name: string) => void;\n  mssqlString: string;\n  mysqlString: string;\n  update: () => void;\n}\n\nexport const ResultPopup = (props: Props) => {\n  const [dbName, setDbName] = useState(\"DatabaseName\");\n  const [mySQLView, setmySQLView] = useState(false);\n\n\n  let formatedMSSQL =\n    props.mssqlString &&\n    sqlFormatter.format(props.mssqlString, {\n      language: \"sql\", // Defaults to \"sql\"\n      indent: \"  \" // Defaults to two spaces\n    });\n\n  let formatedMySQL =\n    props.mysqlString &&\n    sqlFormatter.format(props.mysqlString, {\n      language: \"db2\", // Defaults to \"sql\"\n      indent: \"  \" // Defaults to two spaces\n    });\n\n  // useEffect(() => {\n  //   formatedMSSQL = '';\n  //   formatedMySQL = '';\n  // }, [props.mssqlString, props.mysqlString])\n\n\n\n  const downloadMSSQL = () => {\n    var blob = new Blob([formatedMSSQL], { type: \"text/plain;charset=utf-8\" });\n    FileSaver.saveAs(blob, `${dbName}.sql`);\n    props.update();\n  };\n\n  const downloadMYSQL = () => {\n    var blob = new Blob([formatedMySQL], { type: \"text/plain;charset=utf-8\" });\n    FileSaver.saveAs(blob, `${dbName}.sql`);\n    props.update();\n  };\n\n  return (\n    <Popup modal closeOnDocumentClick open={props.isOpen} closeOnEscape>\n      <div className=\"sql-result-dialog\">\n        <input\n          style={{ marginRight: \"10px\" }}\n          type=\"text\"\n          onChange={event => setDbName(event.target.value)}\n          value={dbName}\n        />\n\n        <button\n         style={{ marginRight: \"10px\" }}\n          onClick={() => {\n            props.generateScript(dbName)\n          }}>\n          Generate\n            </button>\n\n            <button\n            className={`${mySQLView ? '' : 'selected-sql'}`}\n          onClick={() => {\n            setmySQLView(false)\n          }}>\n          MSSQL\n            </button>\n\n            <button\n            className={`${mySQLView ? 'selected-sql' : ''}`}\n\n          onClick={() => {\n            setmySQLView(true)\n\n          }}>\n          MySQL\n            </button>\n\n\n        <textarea\n          style={{ marginTop: \"5px\" }}\n          readOnly={true}\n          value={mySQLView ? formatedMySQL : formatedMSSQL}\n          contentEditable={false}\n        ></textarea>\n\n        <button style={{ marginRight: \"10px\" }} onClick={downloadMSSQL}>\n          Download MSSQL\n        </button>\n        <button style={{ marginRight: \"10px\" }} onClick={downloadMYSQL}>\n          Download mySQL\n        </button>\n      </div>\n    </Popup>\n  );\n};\n","import { ResultPopup } from \"../components/popups/ResultPopup/ResultPopup\";\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\n\nclass Props {\n  isUml: boolean;\n  isLogic: boolean;\n  isOpen: boolean;\n  serializeDiagram: any;\n\n  update: () => void;\n}\n\nexport const GenerationHandler = (props: Props) => {\n  const [sqlString, setSqlString] = useState(\"\");\n  const [mysqlString, setMySqlString] = useState(\"\");\n\n\n  useEffect(() => setSqlString(''), [props.isOpen]);\n\n  const generateScript = async (name: string) => {\n    let serDiagram = props.serializeDiagram;\n\n    let dNodes = serDiagram[\"layers\"][1][\"models\"];\n\n    let nodes = Object.keys(dNodes).map(id => {\n      return dNodes[id];\n    })\n\n    let dLinks = serDiagram[\"layers\"][0][\"models\"];\n\n    let links = Object.keys(dLinks).map(id => {\n      return dLinks[id];\n    })\n    \n    let newOBJ = {\n      nodes,\n      links\n    }\n    let diagram = JSON.stringify(newOBJ, null, 2);\n    console.log('diagram: ', diagram);\n    \n    let response = await axios.post(\"https://sql-generator.pl/api/setjob/mssql\", {\n\n    // let response = await axios.post(\"https://51.83.185.113/api/setjob/mssql\", {\n    // let response = await axios.post(\"http://localhost:5000/api/setjob/mssql\", {\n\n      SerializedModel: diagram,\n      DatabaseName: name,\n      RelationType: props.isUml ? 'UML' : 'CHEN',\n      DiagramType: props.isLogic ? 'Logic' : 'Conceptual'\n    });\n\n    let responseMy = await axios.post(\"https://sql-generator.pl/api/setjob/mysql\", {\n    // let responseMy = await axios.post(\"http://localhost:5000/api/setjob/mysql\", {\n      SerializedModel: diagram,\n      DatabaseName: name,\n      RelationType: props.isUml ? 'UML' : 'CHEN',\n      DiagramType: props.isLogic ? 'Logic' : 'Conceptual'\n    });\n\n    if (response.status === 200 && responseMy.status === 200) {\n      setSqlString(response.data);\n      setMySqlString(responseMy.data);\n    } else {\n      setSqlString('There was an error while processing your request');\n      setMySqlString('There was an error while processing your request');\n\n      console.log(\"there was an error while processing your request\");\n    }\n  };\n\n  return (\n    <ResultPopup\n      update={props.update}\n      mssqlString={sqlString}\n      mysqlString={mysqlString}\n      generateScript={name => generateScript(name)}\n      isOpen={props.isOpen}\n    />\n  );\n};\n","import \"./LoadFilePopup.scss\";\nimport React, { useState } from \"react\";\nimport Popup from \"reactjs-popup\";\n\nclass Props {\n  isOpen: boolean;\n  loadDiagram?: (name: string) => void;\n  update: () => void;\n}\n\nexport const LoadFilePopup = (props: Props) => {\n  let fileReader: FileReader;\n\n  const [fileContent, setFileContent] = useState(\"\");\n\n  const handleFileRead = (e: any) => {\n    const content = fileReader.result;\n    setFileContent(content as string);\n  };\n\n  const handleFileChosen = (name: any) => {\n    fileReader = new FileReader();\n    fileReader.onloadend = handleFileRead;\n    fileReader.readAsText(name);\n  };\n\n  return (\n    <Popup\n      modal\n      closeOnDocumentClick\n      open={props.isOpen}\n      closeOnEscape\n      onClose={() => props.update()}\n    >\n      <div className=\"sql-result-dialog\">\n        <input\n          type=\"file\"\n          onChange={event => handleFileChosen(event.target.files[0])}\n          accept=\".dbjson\"\n        />\n        <button onClick={() => props.loadDiagram(fileContent)}>Load</button>\n      </div>\n    </Popup>\n  );\n};\n","import { LoadFilePopup } from \"../components/popups/LoadFilePopup/LoadFilePopup\";\nimport React from \"react\";\nimport { Application } from \"../components/Application\";\nimport { DiagramModel } from \"@projectstorm/react-diagrams\";\n\nclass Props {\n  isOpen: boolean;\n  app: Application;\n  update: () => void;\n  setIsUml: (isUml: boolean) => void;\n  setIsLogic: (isLogic: boolean) => void;\n}\n\nexport const LoadFileHandler = (props: Props) => {\n  const loadDiagram = (name: string) => {\n    let engine = props.app.getDiagramEngine();\n    try {\n      let obj: {diagram: ReturnType<DiagramModel['serialize']>, isUml: boolean, isLogic: boolean} = JSON.parse(name);\n    \n      props.setIsUml(obj.isUml);\n      obj.isLogic ? props.setIsLogic(obj.isLogic) : props.setIsLogic(false);\n\n  \n      let model2 = new DiagramModel();\n\n\n      model2.deserializeModel(obj.diagram, engine);\n\n      model2.getLinks().forEach(link => {\n        link.getLabels().splice(0, 3);\n      });\n\n      // engine.setModel(model2);\n\n      if(obj.isLogic) {\n        props.app.loadLogicModel(model2);\n      } else {\n        props.app.loadConceptualModel(model2);\n      }\n\n      engine.repaintCanvas();\n      props.update();\n    } catch (error) {\n      console.log(error);\n    }\n\n  };\n\n  return (\n    <LoadFilePopup\n      update={props.update}\n      loadDiagram={name => loadDiagram(name)}\n      isOpen={props.isOpen}\n    />\n  );\n};\n","import \"./SaveToFilePopup.scss\";\nimport React, { useState } from \"react\";\nimport Popup from \"reactjs-popup\";\nimport FileSaver from \"file-saver\";\nimport { DiagramModel } from \"@projectstorm/react-diagrams\";\n\nclass Props {\n  isUml: boolean;\n  isLogic: boolean;\n\n  isOpen: boolean;\n  diagramModel: DiagramModel;\n  update: () => void;\n}\n\nexport const SaveToFilePopup = (props: Props) => {\n  const [fileName, setFileName] = useState(\"diagram\");\n\n  const download = () => {\n    const diagramJson = JSON.stringify({diagram: props.diagramModel.serialize(), isUml: props.isUml, isLogic: props.isLogic});\n\n    let blob = new Blob([diagramJson], { type: \"text/plain;charset=utf-8\" });\n    FileSaver.saveAs(blob, `${fileName}.dbjson`);\n    props.update();\n  };\n\n  return (\n    <Popup\n      modal\n      closeOnDocumentClick\n      open={props.isOpen}\n      closeOnEscape\n      onClose={() => props.update()}\n    >\n      <div className=\"sql-result-dialog\">\n        <input\n          type=\"text\"\n          onChange={event => setFileName(event.target.value)}\n          value={fileName}\n        />\n        <button onClick={download}>save</button>\n      </div>\n    </Popup>\n  );\n};\n","import \"./SaveToJpegPopup.scss\";\nimport React, { useState } from \"react\";\nimport Popup from \"reactjs-popup\";\nimport domtoimage from \"dom-to-image\";\nimport { DiagramModel } from \"@projectstorm/react-diagrams\";\n\nclass Props {\n  isOpen: boolean;\n  diagramModel: DiagramModel;\n  update: () => void;\n}\n\nexport const SaveToJpegPopup = (props: Props) => {\n  const [fileName, setFileName] = useState(\"diagram\");\n\n  const download = () => {\n    domtoimage\n      .toJpeg(document.getElementById(\"diagram-layer\"), { quality: 0.95 })\n      .then((dataUrl: any) => {\n        let link = document.createElement(\"a\");\n        link.download = `${fileName}.jpeg`;\n        link.href = dataUrl;\n        link.click();\n        props.update();\n      });\n  };\n\n  return (\n    <Popup\n      modal\n      closeOnDocumentClick\n      open={props.isOpen}\n      closeOnEscape\n      onClose={() => props.update()}\n    >\n      <div className=\"sql-result-dialog\">\n        <input\n          type=\"text\"\n          onChange={event => setFileName(event.target.value)}\n          value={fileName}\n        />\n        <button onClick={download}>save</button>\n      </div>\n    </Popup>\n  );\n};\n","import \"./RelationPopup.scss\";\nimport React, { useState } from \"react\";\nimport Popup from \"reactjs-popup\";\nimport { DefaultLinkModel } from \"../../../infrastructure/models/DefaultLinkModel\";\nimport { DefaultLabelModel } from \"../../../infrastructure/models/DefaultLabelModel\";\nimport { DefaultNodeModel } from \"../../../infrastructure/models/DefaultNodeModel\";\nimport { PropertyType } from \"../../../infrastructure/models/PropertyType\";\n// import { LogicPort } from \"../../../infrastructure/models/LogicPort\";\nimport { AdvancedPortModel } from \"../../../infrastructure/models/ArrowPortModel\";\nimport { DiagramModel, DiagramEngine } from \"@projectstorm/react-diagrams\";\nimport { PropertyTable } from \"../../PropertyTable/PropertyTable\";\nimport { DefaultPortModel } from \"../../../infrastructure/models/DefaultPortModel\";\nimport { ArrowLinkModel } from \"../../../infrastructure/models/ArrowLinkModel\";\nimport { Toolkit } from \"../../../infrastructure/Toolkit\";\n\nclass Props {\n  isOpen: boolean;\n  link: DefaultLinkModel;\n  update: () => void;\n  diagramEngine: DiagramEngine;\n  isLogic: boolean;\n}\nexport const RelationPopup = (props: Props) => {\n  const [left, setLeft] = useState(\"1, N\");\n\n  const [right, setRight] = useState(\"1, N\");\n\n  const [relationName, setRelationName] = useState(\"relation name\");\n\n  React.useEffect(() => {\n    let leftLabel =\n      props.link &&\n      props.link.getLabels().length > 2 &&\n      (props.link.getLabels()[0] as DefaultLabelModel).getOptions().label;\n    let relLabel =\n      props.link &&\n      props.link.getLabels().length > 2 &&\n      (props.link.getLabels()[1] as DefaultLabelModel).getOptions().label;\n    let rightLabel =\n      props.link &&\n      props.link.getLabels().length > 2 &&\n      (props.link.getLabels()[2] as DefaultLabelModel).getOptions().label;\n\n    setLeft(leftLabel ? leftLabel : \"1, N\");\n    setRelationName(relLabel ? relLabel : \"relation name\");\n    setRight(rightLabel ? rightLabel : \"1, N\");\n  }, [props.link]);\n\n  let update = () => {\n    let labels = props.link.getLabels() as DefaultLabelModel[];\n    labels[0].getOptions().label = left;\n    labels[2].getOptions().label = right;\n    labels[1].getOptions().label = relationName;\n    let points = props.link.getPoints();\n    for (let index = 1; index < points.length - 1; index++) {\n      const element = points[index];\n      element.remove();\n    }\n    props.update();\n  };\n\n  const sourcePort =\n    props.link &&\n    props.link.getSourcePort() &&\n    (props.link.getSourcePort().getParent() as DefaultNodeModel);\n  const targetPort =\n    props.link &&\n    props.link.getTargetPort() &&\n    (props.link.getTargetPort().getParent() as DefaultNodeModel);\n\n  const remove = () => {\n    const sourceP = props.link && props.link.getSourcePort();\n    const targetP = props.link && props.link.getTargetPort();\n    sourceP.removeLink(props.link);\n    targetP.removeLink(props.link);\n\n    props.diagramEngine.getModel().removeLink(props.link);\n\n\n    if(props.isLogic) {\n      let thisParent = props.link.getTargetPort().getParent() as DefaultNodeModel;\n      let portNode = props.link.getSourcePort().getParent() as DefaultNodeModel;\n  \n      let portNodePorts = portNode.getPorts() as {[s: string]: AdvancedPortModel};\n      let thisParentPorts = thisParent.getPorts() as {[s: string]: AdvancedPortModel};\n  \n      let czyMaPortZPKjakoFk = Object.keys(thisParentPorts).filter(id => thisParentPorts[id].fkPortId === portNode.getOptions().id)[0];\n      let czyMaPortZPKjakoFk2 = Object.keys(portNodePorts).filter(id => portNodePorts[id].fkPortId === thisParent.getOptions().id)[0];\n      \n      if(czyMaPortZPKjakoFk) {\n        thisParent.removePort(thisParentPorts[czyMaPortZPKjakoFk]);\n      } else {\n        portNode.removePort(portNodePorts[czyMaPortZPKjakoFk2]);\n      }\n    }\n\n    props.update();\n  };\n\n  const options = (\n    <>\n      <option value=\"0, N\">0, N</option>\n      <option value=\"1, N\">1, N</option>\n      <option value=\"0, 1\">0, 1</option>\n      <option value=\"1, 1\">1, 1</option>\n      <option value=\"N, N\">N, N</option>\n    </>\n  );\n\n  const renderOptionPicker = (side: string) => {\n    return (\n      <div className=\"grid-item\">\n        <select\n          className=\"darkSelect\"\n          onChange={(event) =>\n            side === \"left\"\n              ? setLeft(event.target.value)\n              : setRight(event.target.value)\n          }\n          value={side === \"left\" ? left : right}\n        >\n          {options}\n        </select>\n      </div>\n    );\n  };\n\n  const reverseLink = () => {\n    let thisParent = props.link.getTargetPort().getParent() as DefaultNodeModel;\n    let portNode = props.link.getSourcePort().getParent() as DefaultNodeModel;\n\n    let portNodePorts = portNode.getPorts() as {[s: string]: DefaultPortModel};\n    let thisParentPorts = thisParent.getPorts() as {[s: string]: DefaultPortModel};\n\n    // let portNodePorts = portNode.getPorts() as {[s: string]: LogicPort};\n    // let thisParentPorts = thisParent.getPorts() as {[s: string]: LogicPort};\n\n    let czyMaPortZPKjakoFk = Object.keys(thisParentPorts).filter(id => thisParentPorts[id].fkPortId === portNode.getOptions().id)[0];\n    let czyMaPortZPKjakoFk2 = Object.keys(portNodePorts).filter(id => portNodePorts[id].fkPortId === thisParent.getOptions().id)[0];\n    \n\n    if(czyMaPortZPKjakoFk) {\n      thisParent.removePort(thisParentPorts[czyMaPortZPKjakoFk]);\n      let pk = Object.keys(thisParentPorts).filter(id => thisParentPorts[id].isPrimaryKey)[0];\n      portNode.addPort(new AdvancedPortModel(\n        // true,\n        \n        thisParent.getOptions().name + thisParentPorts[pk].getOptions().name,false,false, true, false, true, true, 'INT', Toolkit.UID(), thisParent.getOptions().id));\n    \n    \n      } else {\n      portNode.removePort(portNodePorts[czyMaPortZPKjakoFk2]);\n\n      let pk = Object.keys(portNodePorts).filter(id => portNodePorts[id].isPrimaryKey)[0];\n      portNode.addPort(new AdvancedPortModel(\n        // true,\n        portNode.getOptions().name + portNodePorts[pk].getOptions().name,false,false, true, false, true, true, 'INT', Toolkit.UID(), portNode.getOptions().id));\n    \n\n      }\n\n        let newSourceP = props.link.getTargetPort();\n        let newTargetP = props.link.getSourcePort();\n        let model = props.diagramEngine.getModel();\n\n        model.removeLink(props.link);\n\n        let link = new ArrowLinkModel({ type: 'arrow' });\n\n        link.setSourcePort(newSourceP);\n        link.setTargetPort(newTargetP);\n        model.addLink(link);\n\n    props.update();\n  }\n\n  if (props.isLogic) {\n    return (\n      <Popup modal closeOnDocumentClick open={props.isOpen} closeOnEscape>\n        <div className=\"SQLResultDialog\">\n          <div className=\"grid-item\">\n            <button onClick={remove}>Remove</button>\n          </div>\n          <div className=\"grid-item\">\n            <button onClick={reverseLink}>Reverse</button>\n          </div>\n        </div>\n      </Popup>\n    );\n  } else\n    return (\n      <Popup modal closeOnDocumentClick open={props.isOpen} closeOnEscape>\n        <div className=\"SQLResultDialog\">\n          <div className=\"grid-container\">\n            <div className=\"grid-item\">\n              <p>{sourcePort && sourcePort.getOptions().name}</p>\n            </div>\n            <div className=\"grid-item\">\n              <input\n                className=\"darkInput\"\n                type=\"text\"\n                defaultValue={relationName}\n                onChange={(event) => setRelationName(event.target.value)}\n              ></input>\n            </div>\n            <div className=\"grid-item\">\n              <p>{targetPort && targetPort.getOptions().name}</p>\n            </div>\n            {renderOptionPicker(\"left\")}\n            <div className=\"grid-item\">\n              <button onClick={update}>SAVE</button>\n            </div>\n            {renderOptionPicker(\"right\")}\n            {/* <div className=\"grid-item\" /> */}\n            <div className=\"grid-item\"></div>\n            <div className=\"grid-item\">\n              <button onClick={remove}>Remove</button>\n            </div>\n            {/* <div className=\"grid-item\" /> */}\n          </div>\n          {props.link && left.includes(\"N\") && right.includes(\"N\") && (\n            <div>\n              <h3 style={{ margin: 0 }}>Atributes:</h3>\n              <PropertyTable\n                relView={true}\n                diagramEngine={props.diagramEngine}\n                selectedItem={props.link.properties}\n                isLogic={props.isLogic}\n              />\n            </div>\n          )}\n        </div>\n      </Popup>\n    );\n};\n","import * as React from 'react';\nimport * as _ from 'lodash';\nimport { TrayWidget } from './TrayWidget';\nimport { TrayItemWidget } from './TrayItemWidget';\nimport {  PortModelAlignment, PointModel } from '@projectstorm/react-diagrams';\nimport { CanvasWidget } from '@projectstorm/react-canvas-core';\nimport styled from '@emotion/styled';\nimport { DemoCanvasWidget } from '../helpers/DemoCanvasWidget';\nimport { Application } from './Application';\nimport { AdvancedPortModel } from '../infrastructure/models/ArrowPortModel';\nimport { getuid } from 'process';\nimport { TrayItemDiv } from './TrayItemDiv';\nimport { NodeProperties, useForceUpdate } from './NodeProperties/NodeProperties';\nimport { DefaultLinkModel } from '../infrastructure/models/DefaultLinkModel';\nimport { GenerationHandler } from '../handlers/GenerationHandler';\nimport { LoadFileHandler } from '../handlers/LoadFileHandler';\nimport { SaveToFilePopup } from './popups/SaveToFilePopup/SaveToFilePopup';\nimport { SaveToJpegPopup } from './popups/SaveToJpegPopup/SaveToJpegPopup';\nimport { RelationPopup } from './popups/RealtionPopup/RelationPopup';\nimport { DefaultPortModel } from '../infrastructure/models/DefaultPortModel';\nimport { DefaultLabelModel } from '../infrastructure/models/DefaultLabelModel';\nimport { DefaultNodeModel } from '../infrastructure/models/DefaultNodeModel';\n\nexport interface BodyWidgetProps {\n\tapp: Application;\n}\n\nexport const Body = styled.div`\n\t\tflex-grow: 1;\n\t\tdisplay: flex;\n\t\tflex-direction: column;\n\t\tmin-height: 100%;\n\t`;\n\nexport const Header = styled.div`\n\t\tdisplay: flex;\n\t\tbackground: rgb(30, 30, 30);\n\t\tflex-grow: 0;\n\t\tflex-shrink: 0;\n\t\tcolor: white;\n\t\tfont-family: Helvetica, Arial, sans-serif;\n\t\tpadding: 12px;\n        align-items: center;\n        \n\t`;\n\nexport const Content = styled.div`\n\t\tdisplay: flex;\n\t\tflex-grow: 1;\n\t`;\n\nexport const Layer = styled.div`\n\t\tposition: relative;\n\t\tflex-grow: 1;\n\t`;\n\nexport const BodyWidget = (props: BodyWidgetProps) => {\n\tconst diagramDiv = React.useRef(null);\n\n\n\tconst jpegFileTarget: React.RefObject<any> = null;\n\n\tconst [showDialog, setShowDialog] = React.useState(false);\n\tconst [showRelationDialog, setShowRelationDialog] = React.useState(false);\n\tconst [showLoadFileDialog, setShowLoadFileDialog] = React.useState(false);\n\tconst [showSaveFileDialog, setSaveFileDialog] = React.useState(false);\n\tconst [showSaveJPEGDialog, setSaveJPEGDialog] = React.useState(false);\n\tconst [showSaveOptions, setSaveOptions] = React.useState(false);\n\n\tconst [selectedNode, setSelectedNode] = React.useState(null);\n\tconst [selectedLink, setSelectedLink] = React.useState(null);\n\n\tconst [isUml, setIsUml] = React.useState(true);\n\n\tconst [isLogicModel, setIsLogicModel] = React.useState(false);\n\n\n\n\tconst forceUpdate = useForceUpdate();\n\n\tReact.useEffect(() => {\n\t\tsetSelectedNode(null);\n\t\tsetSelectedLink(null);\n\t}, []);\n\n\tconst changeRelation = () => {\n\t\tlet links = props.app.getDiagramEngine().getModel().getLinks();\n\t\tlinks.map(link => {\n\t\t\tlet temp = (link.getLabels()[0] as DefaultLabelModel).getOptions().label.substring(0, 1);\n\t\t\tlet temp2 = (link.getLabels()[2] as DefaultLabelModel).getOptions().label.substring(0, 1);\n\n\t\t\t(link.getLabels()[0] as DefaultLabelModel).getOptions().label = temp2 + (link.getLabels()[0] as DefaultLabelModel).getOptions().label.substring(1);\n\t\t\t(link.getLabels()[2] as DefaultLabelModel).getOptions().label = temp + (link.getLabels()[2] as DefaultLabelModel).getOptions().label.substring(1);\n\t\t});\n\t}\n\n\tconst refreshPopups = () => {\n\t\tsetSelectedLink(null);\n\t\tsetSelectedNode(null);\n\n\t\tsetShowDialog(false);\n\t\tsetSaveFileDialog(false);\n\t\tsetSaveJPEGDialog(false);\n\t\tsetSaveOptions(false);\n\t\tsetShowLoadFileDialog(false);\n\t\tsetShowRelationDialog(false);\n\t};\n\n\n\tconst containerStyles: React.CSSProperties = {\n\t\tdisplay: \"flex\",\n\t\tjustifyContent: \"space-between\",\n\t\tborderColor: \"rgb(255,123,0)\"\n\t};\n\tconst itemStyles: React.CSSProperties = {\n\t\tdisplay: \"inline-block\",\n\t\tpaddingTop: 3,\n\t\tpaddingRight: 5\n\t};\n\n\n\treturn (\n\t\t<Body>\n\t\t\t<Header>\n\t\t\t\t<div className=\"title\">DB Diagram Scripter</div>\n\t\t\t</Header>\n\t\t\t<Content>\n\t\t\t\t<TrayWidget>\n\t\t\t\t\t<TrayItemWidget model={{ type: 'default' }} name={isLogicModel ? \"Relation\" :\"Entity\"} color=\"rgb(0,192,255)\" />\n\t\t\t\t\t<TrayItemWidget model={{ type: 'label' }} name=\"Label\" color=\"rgb(192,255,0)\" />\n\n\t\t\t\t\t<TrayItemDiv name=\"Load Diagram\" color=\"rgb(255,123,0)\" marginTop=\"100px\" onClick={() => {\n\t\t\t\t\t\tsetShowLoadFileDialog(true);\n\t\t\t\t\t\tsetSelectedNode(null);\n\t\t\t\t\t}} />\n\n\n\n\t\t\t\t\t<div\n\t\t\t\t\t\tstyle={containerStyles}\n\t\t\t\t\t\tclassName=\"tray-item\"\n\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\tsetSaveOptions(!showSaveOptions);\n\t\t\t\t\t\t\tsetSelectedNode(null);\n\t\t\t\t\t\t}}\n\t\t\t\t\t>\n\t\t\t\t\t\tSave\n            <span\n\t\t\t\t\t\t\tstyle={itemStyles}\n\t\t\t\t\t\t\tclassName={`mi ${\n\t\t\t\t\t\t\t\t!showSaveOptions ? \"mi-ArrowDown8\" : \"mi-ArrowUp8\"\n\t\t\t\t\t\t\t\t}`}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\t\t\t\t\t{showSaveOptions && (\n\t\t\t\t\t\t<div\n\t\t\t\t\t\t\tstyle={{ borderColor: \"rgb(255,123,0)\" }}\n\t\t\t\t\t\t\tclassName=\"tray-item\"\n\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\tsetSaveFileDialog(true);\n\t\t\t\t\t\t\t\tsetSelectedNode(null);\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tFile\n\t\t\t\t\t\t</div>\n\t\t\t\t\t)}\n\t\t\t\t\t{showSaveOptions && (\n\t\t\t\t\t\t<div\n\t\t\t\t\t\t\tstyle={{ borderColor: \"rgb(255,123,0)\" }}\n\t\t\t\t\t\t\tclassName=\"tray-item\"\n\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\tsetSaveJPEGDialog(true);\n\t\t\t\t\t\t\t\tsetSelectedNode(null);\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tJPEG\n\t\t\t\t\t\t</div>\n\t\t\t\t\t)}\n\n\t\t\t\t\t<TrayItemDiv isSelected={!isLogicModel} name=\"Conceptual View\" color=\"rgb(0,50,100)\" marginTop=\"100px\" onClick={() => {\n\t\t\t\t\t\tif (isLogicModel) {\n\t\t\t\t\t\t\tprops.app.setConceptualModel();\n\t\t\t\t\t\t\tsetIsLogicModel(false);\n\t\t\t\t\t\t}\n\t\t\t\t\t}} />\n\n\t\t\t\t\t<TrayItemDiv isSelected={isLogicModel} name=\"Logical View\" color=\"rgb(0,50,100)\" onClick={() => {\n\t\t\t\t\t\tif (!isLogicModel) {\n\t\t\t\t\t\t\tprops.app.setLogicModel();\n\t\t\t\t\t\t\tsetIsLogicModel(true);\n\t\t\t\t\t\t}\n\t\t\t\t\t}} />\n\n\t\t\t\t\t<TrayItemDiv isDisabled={isLogicModel} isSelected={isUml} name=\"UML\" color=\"rgb(152,50,100)\" marginTop=\"100px\" onClick={() => {\n\t\t\t\t\t\tif (!isLogicModel && !isUml) {\n\t\t\t\t\t\t\tchangeRelation();\n\t\t\t\t\t\t\tsetIsUml(true);\n\t\t\t\t\t\t}\n\t\t\t\t\t}} />\n\n\t\t\t\t\t<TrayItemDiv isDisabled={isLogicModel} isSelected={!isUml} name=\"Chen\" color=\"rgb(152,50,100)\" onClick={() => {\n\t\t\t\t\t\tif (!isLogicModel && isUml) {\n\t\t\t\t\t\t\tchangeRelation();\n\t\t\t\t\t\t\tsetIsUml(false);\n\t\t\t\t\t\t}\n\t\t\t\t\t}} />\n\n\n\t\t\t\t\t<TrayItemDiv name=\"Create DB Code\" color=\"rgb(255,0,0)\" marginTop=\"90px\" onClick={() => {\n\t\t\t\t\t\tsetShowDialog(true);\n\t\t\t\t\t\tsetSelectedNode(null);\n\t\t\t\t\t}} />\n\n\t\t\t\t</TrayWidget>\n\t\t\t\t<Layer\n\t\t\t\t\tonDrop={(event) => {\n\t\t\t\t\t\tvar data = JSON.parse(event.dataTransfer.getData('storm-diagram-node'));\n\t\t\t\t\t\tconsole.log('data ', data);\n\t\t\t\t\t\tlet allNodes = props.app\n\t\t\t\t\t\t\t.getDiagramEngine()\n\t\t\t\t\t\t\t.getModel()\n\t\t\t\t\t\t\t.getNodes() as DefaultNodeModel[];\n\n\t\t\t\t\t\tlet names = allNodes.map(node => node.getOptions().name.toLowerCase().trim());\n\n\t\t\t\t\t\tvar nodesCount = _.keys(props.app.getDiagramEngine().getModel().getNodes()).length;\n\n\t\t\t\t\t\tlet newNodeName = names.includes(`Entity${nodesCount + 1}`.toLowerCase().trim()) ? `Entity${nodesCount + 1}_${nodesCount + 1}` : `Entity${nodesCount + 1}`;\n\n\n\t\t\t\t\t\tvar node: DefaultNodeModel;\n\t\t\t\t\t\tif (data.type === \"default\") {\n\t\t\t\t\t\t\tnode = new DefaultNodeModel(\n\t\t\t\t\t\t\t\t  false,\n\t\t\t\t\t\t\t\tnewNodeName,\n\t\t\t\t\t\t\t\t\"rgb(0,192,255)\"\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tif (isLogicModel) {\n\t\t\t\t\t\t\t\tnode.addPort(new AdvancedPortModel('Id', false, true, false, true, true, true, 'INT'));\n\t\t\t\t\t\t\t\tnode.addPort(new AdvancedPortModel('', true, false, false, false, false, false, 'INT'));\n\t\t\t\t\t\t\t\tnode.addPort(new AdvancedPortModel('1', true, false, false, false, false, false, 'INT'));\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tnode.addPort(new DefaultPortModel(isLogicModel,'Id', false, true, false, true, true, true, 'INT'));\n\t\t\t\t\t\t\t\tnode.addPort(new DefaultPortModel(isLogicModel,'', true, false, false, false, false, false, 'INT'));\n\t\t\t\t\t\t\t\tnode.addPort(new DefaultPortModel(isLogicModel,'1', true, false, false, false, false, false, 'INT'));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tnode = new DefaultNodeModel(\n\t\t\t\t\t\t\t\ttrue,\n\t\t\t\t\t\t\t\t\"Label \",\n\t\t\t\t\t\t\t\t\"rgb(192,255,0)\"\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar point = props.app.getDiagramEngine().getRelativeMousePoint(event);\n\t\t\t\t\t\tnode.setPosition(point);\n\t\t\t\t\t\tprops.app.getDiagramEngine().getModel().addNode(node);\n\t\t\t\t\t\tforceUpdate();\n\t\t\t\t\t}}\n\t\t\t\t\tonDragOver={(event) => {\n\t\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\t}}\n\t\t\t\t\tonClick={event => {\n\t\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\t\tif (event.ctrlKey && props.app\n\t\t\t\t\t\t\t.getDiagramEngine()\n\t\t\t\t\t\t\t.getModel()\n\t\t\t\t\t\t\t.getSelectedEntities()[0] instanceof PointModel) {\n\t\t\t\t\t\t\tconst pointToRemove = props.app\n\t\t\t\t\t\t\t\t.getDiagramEngine()\n\t\t\t\t\t\t\t\t.getModel()\n\t\t\t\t\t\t\t\t.getSelectedEntities()[0] as PointModel;\n\t\t\t\t\t\t\tconst pointLink = props.app\n\t\t\t\t\t\t\t\t.getDiagramEngine()\n\t\t\t\t\t\t\t\t.getModel()\n\t\t\t\t\t\t\t\t.getSelectedEntities()[0].getParent() as DefaultLinkModel;\n\n\t\t\t\t\t\t\tpointLink && props.app.getDiagramEngine().getModel().getLinks()[pointLink.getOptions().id].removePoint(pointToRemove);\n\t\t\t\t\t\t}\n\t\t\t\t\t\trefreshPopups();\n\t\t\t\t\t}}\n\t\t\t\t\tonDoubleClick={event => {\n\t\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\t\tif ( //!isLogicModel &&\n\t\t\t\t\t\t\tprops.app\n\t\t\t\t\t\t\t\t.getDiagramEngine()\n\t\t\t\t\t\t\t\t.getModel()\n\t\t\t\t\t\t\t\t.getSelectedEntities()[0] instanceof PointModel\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tsetSelectedLink(\n\t\t\t\t\t\t\t\tprops.app\n\t\t\t\t\t\t\t\t\t.getDiagramEngine()\n\t\t\t\t\t\t\t\t\t.getModel()\n\t\t\t\t\t\t\t\t\t.getSelectedEntities()[0].getParent() as DefaultLinkModel\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tsetShowRelationDialog(true);\n\t\t\t\t\t\t\tsetSelectedNode(null);\n\t\t\t\t\t\t} else if (\n\t\t\t\t\t\t\tprops.app\n\t\t\t\t\t\t\t\t.getDiagramEngine()\n\t\t\t\t\t\t\t\t.getModel()\n\t\t\t\t\t\t\t\t.getSelectedEntities()[0] instanceof DefaultNodeModel\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\trefreshPopups();\n\t\t\t\t\t\t\tlet selectedNode = props.app\n\t\t\t\t\t\t\t.getDiagramEngine()\n\t\t\t\t\t\t\t.getModel()\n\t\t\t\t\t\t\t.getSelectedEntities()[0] as DefaultNodeModel;\n\n\t\t\t\t\t\t\tsetSelectedNode(\n\t\t\t\t\t\t\t\tselectedNode\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\t<DemoCanvasWidget>\n\t\t\t\t\t\t<CanvasWidget engine={props.app.getDiagramEngine()} />\n\t\t\t\t\t</DemoCanvasWidget>\n\t\t\t\t</Layer>\n\t\t\t\t{selectedNode != null ? (\n\t\t\t\t\t<NodeProperties\n\t\t\t\t\t\tisLogic={isLogicModel}\n\t\t\t\t\t\tselectedItem={selectedNode}\n\t\t\t\t\t\tdiagramEngine={props.app.getDiagramEngine()}\n\t\t\t\t\t/>\n\t\t\t\t) : null}\n\t\t\t\t<GenerationHandler\n\t\t\t\t\tisUml={isUml}\n\t\t\t\t\tisLogic={isLogicModel}\n\t\t\t\t\tupdate={refreshPopups}\n\t\t\t\t\tisOpen={showDialog}\n\t\t\t\t\tserializeDiagram={props.app.getDiagramEngine().getModel().serialize()}\n\t\t\t\t/>\n\t\t\t\t<LoadFileHandler\n\t\t\t\t\tupdate={refreshPopups}\n\t\t\t\t\tisOpen={showLoadFileDialog}\n\t\t\t\t\tapp={props.app}\n\t\t\t\t\tsetIsUml={setIsUml}\n\t\t\t\t\tsetIsLogic={setIsLogicModel}\n\t\t\t\t/>\n\t\t\t\t<SaveToFilePopup\n\t\t\t\t\tisLogic={isLogicModel}\n\t\t\t\t\tupdate={refreshPopups}\n\t\t\t\t\tdiagramModel={props.app.getDiagramEngine().getModel()}\n\t\t\t\t\tisOpen={showSaveFileDialog}\n\t\t\t\t\tisUml={isUml}\n\t\t\t\t/>\n\t\t\t\t<SaveToJpegPopup\n\t\t\t\t\tupdate={refreshPopups}\n\t\t\t\t\tdiagramModel={props.app.getActiveDiagram()}\n\t\t\t\t\tisOpen={showSaveJPEGDialog}\n\t\t\t\t/>\n\n\t\t\t\t<RelationPopup\n\t\t\t\t\tdiagramEngine={props.app.getDiagramEngine()}\n\n\t\t\t\t\tupdate={refreshPopups}\n\t\t\t\t\tisOpen={showRelationDialog}\n\t\t\t\t\tlink={selectedLink}\n\n\t\t\t\t\tisLogic={isLogicModel}\n\t\t\t\t/>\n\t\t\t</Content>\n\t\t</Body>\n\t);\n\n}","import { DefaultLinkWidget, PointModel, LinkWidget } from \"@projectstorm/react-diagrams\";\nimport React from \"react\";\n\nconst CustomLinkArrowWidget = (props: any) => {\n    const { point, previousPoint } = props;\n    const [selected, setSelected] = React.useState(false);\n      const angle =\n          90 +\n          (Math.atan2(\n              point.getPosition().y - previousPoint.getPosition().y,\n              point.getPosition().x - previousPoint.getPosition().x\n          ) *\n              180) /\n              Math.PI;\n  \n      //translate(50, -10),\n      return (\n          <g className=\"arrow\" transform={'translate(' + point.getPosition().x + ', ' + point.getPosition().y + ')'}>\n              <g style={{ transform: 'rotate(' + angle + 'deg)' }}>\n                  <g transform={'translate(0, -3)'}>\n                      <polygon\n                          points=\"0,10 8,30 -8,30\"\n                          fill={props.color}\n                          onMouseLeave={() => setSelected(false)}\n                          onMouseEnter={() => \n                              setSelected(true)\n                          }\n                          data-id={point.getID()}\n                          data-linkid={point.getLink().getID()}></polygon>\n                  </g>\n              </g>\n          </g>\n      );\n  };\n\nexport class ArrowLinkWidget extends DefaultLinkWidget {\n\tgenerateArrow(point: PointModel, previousPoint: PointModel): JSX.Element {\n\t\treturn (\n\t\t\t<CustomLinkArrowWidget\n\t\t\t\tkey={point.getID()}\n\t\t\t\tpoint={point as any}\n\t\t\t\tpreviousPoint={previousPoint as any}\n\t\t\t\tcolorSelected={this.props.link.getOptions().selectedColor}\n\t\t\t\tcolor={this.props.link.getOptions().color}\n\t\t\t/>\n\t\t);\n\t}\n\n\trender() {\n\t\t//ensure id is present for all points on the path\n\t\tvar points = this.props.link.getPoints();\n\t\tvar paths = [];\n\t\tthis.refPaths = [];\n\n\t\t//draw the multiple anchors and complex line instead\n\t\tfor (let j = 0; j < points.length - 1; j++) {\n\t\t\tpaths.push(\n\t\t\t\tthis.generateLink(\n\t\t\t\t\tLinkWidget.generateLinePath(points[j], points[j + 1]),\n\t\t\t\t\t{\n\t\t\t\t\t\t'data-linkid': this.props.link.getID(),\n\t\t\t\t\t\t'data-point': j,\n\t\t\t\t\t\tonMouseDown: (event: MouseEvent) => {\n\t\t\t\t\t\t\tthis.addPointToLink((event as  any), j + 1);\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tj\n\t\t\t\t)\n\t\t\t);\n\t\t}\n\n\t\t//render the circles\n\t\tfor (let i = 1; i < points.length - 1; i++) {\n\t\t\tpaths.push(this.generatePoint(points[i]));\n\t\t}\n\n\t\tif (this.props.link.getTargetPort() !== null) {\n\t\t\tpaths.push(this.generateArrow(points[points.length - 1], points[points.length - 2]));\n\t\t} else {\n\t\t\tpaths.push(this.generatePoint(points[points.length - 1]));\n\t\t}\n\n\t\treturn <g data-default-link-test={this.props.link.getOptions().testName}>{paths}</g>;\n\t}\n}","import React from 'react';\nimport { DefaultLinkFactory } from \"@projectstorm/react-diagrams\";\n\nimport { ArrowLinkModel } from \"../models/ArrowLinkModel\";\nimport { ArrowLinkWidget } from \"../widgets/ArrowLinkWidget\";\n\nexport class ArrowLinkFactory extends DefaultLinkFactory {\n\tconstructor() {\n\t\tsuper('arrow');\n\t}\n\n\tgenerateModel(): ArrowLinkModel {\n\t\treturn new ArrowLinkModel();\n\t}\n\n\tgenerateReactWidget(event: any): JSX.Element {\n\t\treturn <ArrowLinkWidget link={event.model} diagramEngine={this.engine} />;\n\t}\n}","import * as React from 'react';\nimport { DiagramEngine, PortWidget } from '@projectstorm/react-diagrams-core';\nimport { DefaultPortModel } from '../models/DefaultPortModel';\nimport styled from '@emotion/styled';\n\nexport interface DefaultPortLabelProps {\n\tport: DefaultPortModel;\n\tengine: DiagramEngine;\n}\n\nexport const PortLabel = styled.div`\n\t\tdisplay: flex;\n\t\tmargin-top: 1px;\n\t\talign-items: center;\n\t`;\n\nexport const Label = styled.div`\n\t\tpadding: 0 5px;\n\t\tflex-grow: 1;\n\t`;\n\nexport const Port = styled.div`\n\t\twidth: 15px;\n\t\theight: 15px;\n\t\tbackground: rgba(255,255,255,0.1);\n\n\t\t&:hover {\n\t\t\tbackground: rgb(192, 255, 0);\n\t\t}\n\t`;\n\nconst style: React.CSSProperties = {\n\tpaddingLeft: 5,\n\tpaddingRight: 5,\n\tcolor: \"black\",\n\tfontWeight: 800\n};\n\nconst containerStyles: React.CSSProperties = {\n\tdisplay: \"flex\",\n\tjustifyContent: \"flex-end\"\n};\n\nconst itemStyles: React.CSSProperties = {\n\tdisplay: \"inline-block\",\n\tmarginRight: \"5px\"\n};\n\nconst portStyles: React.CSSProperties = {\n\tdisplay: \"none\"\n};\n\nconst namedPortStyles: React.CSSProperties = {\n\tmarginRight: \"5px\"\n};\n\nexport class DefaultPortLabel extends React.Component<DefaultPortLabelProps> {\n\trender() {\n\t\t// const port = (\n\t\t// \t<PortWidget engine={this.props.engine} port={this.props.port}>\n\t\t// \t\t<Port />\n\t\t// \t</PortWidget>\n\t\t// );\n\t\t// const label = <Label>{this.props.port.getOptions().label}</Label>;\n\n\t\tlet port: JSX.Element;\n\n\t\tif (!this.props.port.isNamePort) {\n\t\t\tthis.props.port.setLocked();\n\t\t\tport = (\n\t\t\t\t<PortWidget engine={this.props.engine} port={this.props.port}>\n\t\t\t\t\t<Port />\n\t\t\t\t</PortWidget>\n\t\t\t);\n\t\t} else {\n\t\t\tport = (\n\t\t\t\t<PortWidget engine={this.props.engine} port={this.props.port}>\n\t\t\t\t\t<Port />\n\t\t\t\t</PortWidget>\n\t\t\t);\n\t\t}\n\n\t\tconst label: JSX.Element = (\n\t\t\t<div className=\"name\">\n\t\t\t\t<div>\n\t\t\t\t\t{this.props.port.label}{\" \"}\n\t\t\t\t\t{this.props.port.propertyType !== undefined\n\t\t\t\t\t\t? this.props.port.propertyType\n\t\t\t\t\t\t: null}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\n\t\tconst isPrimaryKey = this.props.port.isPrimaryKey ? (\n\t\t\t<span className=\"mi mi-Permissions\" style={style}></span>\n\t\t) : null;\n\n\t\tif (this.props.port.isNamePort) {\n\t\t\treturn <div style={namedPortStyles}>{port}</div>;\n\t\t} else {\n\t\t\treturn (\n\t\t\t\t<div style={containerStyles}>\n\t\t\t\t\t<div style={itemStyles}>{isPrimaryKey}</div>\n\t\t\t\t\t<div style={itemStyles}>{label}</div>\n\t\t\t\t\t<div style={portStyles}>{port}</div>\n\t\t\t\t</div>\n\t\t\t);\n\t\t}\n\n\t\t// return (\n\t\t// \t<PortLabel>\n\t\t// \t\t{this.props.port.getOptions().in ? port : label}\n\t\t// \t\t{this.props.port.getOptions().in ? label : port}\n\t\t// \t</PortLabel>\n\t\t// );\n\t}\n}\n","import * as React from 'react';\nimport * as _ from 'lodash';\nimport { DiagramEngine } from '@projectstorm/react-diagrams-core';\nimport { DefaultNodeModel } from '../models/DefaultNodeModel';\nimport { DefaultPortLabel } from '../widgets/DefaultPortLabelWidget';\nimport styled from '@emotion/styled';\nimport { css } from '@emotion/core';\nimport { DefaultPortModel } from '../models/DefaultPortModel';\n\nexport const Node = styled.div<{ background: string; selected: boolean }>`\n\t\tbackground-color: ${(p) => p.background};\n\t\tborder-radius: 5px;\n\t\tfont-family: sans-serif;\n\t\tcolor: white;\n\t\tborder: solid 2px black;\n\t\toverflow: visible;\n\t\tfont-size: 11px;\n\t\tborder: solid 2px ${(p) => (p.selected ? 'rgb(0,192,255)' : 'black')};\n\t\tword-break: break-word;\n\t\tmax-width: 200px;\n\t`;\n\nexport const Title = styled.div`\n\t\tbackground: rgba(0, 0, 0, 0.3);\n\t\tdisplay: flex;\n\t\tjustify-items: center;\n\t`;\n\nexport const TitleName = styled.div`\n\t\tflex-grow: 1;\n\t\tpadding: 5px 5px;\n\t`;\n\nexport const Ports = styled.div`\n\t\tdisplay: flex;\n\t\tbackground-image: linear-gradient(rgba(0, 0, 0, 0.1), rgba(0, 0, 0, 0.2));\n\t`;\n\nexport const PortsContainer = styled.div`\n\t\tflex-grow: 1;\n\t\tdisplay: flex;\n\t\tflex-direction: column;\n\n\t\t&:first-of-type {\n\t\t\tmargin-right: 10px;\n\t\t}\n\n\t\t&:only-child {\n\t\t\tmargin-right: 0px;\n\t\t}\n\t`;\n\nexport interface DefaultNodeProps {\n\tnode: DefaultNodeModel;\n\tengine: DiagramEngine;\n}\n\nexport class DefaultNodeWidget extends React.Component<DefaultNodeProps> {\n\tgeneratePort = (port) => {\n\t\treturn <DefaultPortLabel engine={this.props.engine} port={port} key={port.options.id} />;\n\t};\n\n\trender() {\n\t\tconst namedPortStyles: React.CSSProperties = {\n\t\t\tmargin: \"3px\"\n\t\t};\n\n\t\tconst namedLEftPortStyles: React.CSSProperties = {\n\t\t\tmarginTop: \"3px\"\n\t\t};\n\n\t\tlet ports = this.props.node.getPorts() as { [s: string]: DefaultPortModel };\n\t\tlet portsJSX = _.map(ports, this.generatePort.bind(this));\n\t\tlet namedPort = portsJSX.filter(p => p.props.port.isNamePort);\n\t\tlet notNamedPort = portsJSX.filter(p => !p.props.port.isNamePort);\n\n\t\treturn (\n\t\t\t<Node\n\t\t\t\tdata-default-node-name={this.props.node.getOptions().name}\n\t\t\t\tselected={this.props.node.isSelected()}\n\t\t\t\tbackground={this.props.node.getOptions().color}>\n\t\t\t\t<Title>\n\t\t\t\t\t{namedPort.length !== 0 && (\n\t\t\t\t\t\t<div style={namedPortStyles}>\n\t\t\t\t\t\t\t{this.generatePort(namedPort[1].props.port)}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t)}\n\t\t\t\t\t{this.props.node.isLabel ? \n\t\t\t\t\t<TitleName>{this.props.node.getOptions().name}</TitleName>\n\t\t\t\t\t: <TitleName>{this.props.node.getOptions().name}</TitleName>}\n\t\t\t\t\t{namedPort.length !== 0 &&\n\t\t\t\t\t\t<div style={namedLEftPortStyles}>\n\t\t\t\t\t\t\t{this.generatePort(namedPort[0].props.port)}\n\t\t\t\t\t\t</div>}\n\t\t\t\t</Title>\n\t\t\t\t<Ports>\n\t\t\t\t\t<PortsContainer>{notNamedPort}</PortsContainer>\n\t\t\t\t</Ports>\n\t\t\t</Node>\n\t\t);\n\t}\n}\n","import * as React from 'react';\nimport { DefaultNodeModel } from '../models/DefaultNodeModel';\nimport { DefaultNodeWidget } from '../widgets/DefaultNodeWidget';\nimport { AbstractReactFactory } from '@projectstorm/react-canvas-core';\nimport { DiagramEngine } from '@projectstorm/react-diagrams-core';\n\nexport class DefaultNodeFactory extends AbstractReactFactory<DefaultNodeModel, DiagramEngine> {\n\tconstructor() {\n\t\tsuper('default');\n\t}\n\n\tgenerateReactWidget(event): JSX.Element {\n\t\treturn <DefaultNodeWidget engine={this.engine} node={event.model} />;\n\t}\n\n\tgenerateModel(event): DefaultNodeModel {\n\t\treturn new DefaultNodeModel(false, 'Entity', 'rgb(0,192,255)');\n\t}\n}\n","import * as React from 'react';\nimport { DefaultLabelModel } from '../models/DefaultLabelModel';\nimport styled from '@emotion/styled';\n\nexport interface DefaultLabelWidgetProps {\n\tmodel: DefaultLabelModel;\n}\n\n\texport const Label = styled.div`\n\t\tbackground: rgba(0, 0, 0, 0.8);\n\t\tborder-radius: 5px;\n\t\tcolor: white;\n\t\tfont-size: 12px;\n\t\tpadding: 4px 8px;\n\t\tfont-family: sans-serif;\n\t\tuser-select: none;\n\t`;\n\nexport class DefaultLabelWidget extends React.Component<DefaultLabelWidgetProps> {\n\trender() {\n\t\treturn <Label>{this.props.model.getOptions().label}</Label>;\n\t}\n}\n","import * as React from 'react';\nimport { DefaultLabelModel } from '../models/DefaultLabelModel';\nimport { DefaultLabelWidget } from '../widgets/DefaultLabelWidget';\nimport { AbstractReactFactory } from '@projectstorm/react-canvas-core';\nimport { DiagramEngine } from '@projectstorm/react-diagrams-core';\n\n/**\n * @author Dylan Vorster\n */\nexport class DefaultLabelFactory extends AbstractReactFactory<DefaultLabelModel, DiagramEngine> {\n\tconstructor() {\n\t\tsuper('default');\n\t}\n\n\tgenerateReactWidget(event): JSX.Element {\n\t\treturn <DefaultLabelWidget model={event.model} />;\n\t}\n\n\tgenerateModel(event): DefaultLabelModel {\n\t\treturn new DefaultLabelModel();\n\t}\n}\n","import { DefaultPortModel } from '../models/DefaultPortModel';\nimport { AbstractModelFactory } from '@projectstorm/react-canvas-core';\nimport { DiagramEngine } from '@projectstorm/react-diagrams-core';\n\nexport class DefaultPortFactory extends AbstractModelFactory<DefaultPortModel, DiagramEngine> {\n\tconstructor() {\n\t\tsuper('default');\n\t}\n\n\tgenerateModel(): DefaultPortModel {\n\t\treturn new DefaultPortModel(false, 'port', true, false);\n\t}\n}\n","import * as React from 'react';\nimport { PointModel } from '@projectstorm/react-diagrams-core';\nimport styled from '@emotion/styled';\n\nexport interface DefaultLinkPointWidgetProps {\n\tpoint: PointModel;\n\tcolor?: string;\n\tcolorSelected: string;\n}\n\nexport interface DefaultLinkPointWidgetState {\n\tselected: boolean;\n}\n\n\texport const PointTop = styled.circle`\n\t\tpointer-events: all;\n\t`;\n\nexport class DefaultLinkPointWidget extends React.Component<DefaultLinkPointWidgetProps, DefaultLinkPointWidgetState> {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tselected: false\n\t\t};\n\t}\n\n\trender() {\n\t\tconst { point } = this.props;\n\t\treturn (\n\t\t\t<g>\n\t\t\t\t<circle\n\t\t\t\t\tcx={point.getPosition().x}\n\t\t\t\t\tcy={point.getPosition().y}\n\t\t\t\t\tr={5}\n\t\t\t\t\tfill={this.state.selected || this.props.point.isSelected() ? this.props.colorSelected : this.props.color}\n\t\t\t\t/>\n\t\t\t\t<PointTop\n\t\t\t\t\tclassName=\"point\"\n\t\t\t\t\tonMouseLeave={() => {\n\t\t\t\t\t\tthis.setState({ selected: false });\n\t\t\t\t\t}}\n\t\t\t\t\tonMouseEnter={() => {\n\t\t\t\t\t\tthis.setState({ selected: true });\n\t\t\t\t\t}}\n\t\t\t\t\tdata-id={point.getID()}\n\t\t\t\t\tdata-linkid={point.getLink().getID()}\n\t\t\t\t\tcx={point.getPosition().x}\n\t\t\t\t\tcy={point.getPosition().y}\n\t\t\t\t\tr={15}\n\t\t\t\t\topacity={0.0}\n\t\t\t\t/>\n\t\t\t</g>\n\t\t);\n\t}\n}\n","import * as React from 'react';\nimport { DefaultLinkFactory } from '../factories/DefaultLinkFactory';\nimport { DiagramEngine } from '@projectstorm/react-diagrams-core';\nimport { DefaultLinkModel } from '../models/DefaultLinkModel';\n\nexport interface DefaultLinkSegmentWidgetProps {\n\tpath: string;\n\tlink: DefaultLinkModel;\n\tselected: boolean;\n\tforwardRef: React.RefObject<SVGPathElement>;\n\tfactory: DefaultLinkFactory;\n\tdiagramEngine: DiagramEngine;\n\tonSelection: (selected: boolean) => any;\n\textras: object;\n}\n\nexport class DefaultLinkSegmentWidget extends React.Component<DefaultLinkSegmentWidgetProps> {\n\trender() {\n\t\tconst Bottom = React.cloneElement(\n\t\t\tthis.props.factory.generateLinkSegment(\n\t\t\t\tthis.props.link,\n\t\t\t\tthis.props.selected || this.props.link.isSelected(),\n\t\t\t\tthis.props.path\n\t\t\t),\n\t\t\t{\n\t\t\t\tref: this.props.forwardRef\n\t\t\t}\n\t\t);\n\n\t\tconst Top = React.cloneElement(Bottom, {\n\t\t\tstrokeLinecap: 'round',\n\t\t\tonMouseLeave: () => {\n\t\t\t\tthis.props.onSelection(false);\n\t\t\t},\n\t\t\tonMouseEnter: () => {\n\t\t\t\tthis.props.onSelection(true);\n\t\t\t},\n\t\t\t...this.props.extras,\n\t\t\tref: null,\n\t\t\t'data-linkid': this.props.link.getID(),\n\t\t\tstrokeOpacity: this.props.selected ? 0.1 : 0,\n\t\t\tstrokeWidth: 20,\n\t\t\tfill: 'none',\n\t\t\tonContextMenu: (event) => {\n\t\t\t\tif (!this.props.link.isLocked()) {\n\t\t\t\t\tevent && event.preventDefault();\n\t\t\t\t\tthis.props.link.remove();\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\treturn (\n\t\t\t<g>\n\t\t\t\t{Bottom}\n\t\t\t\t{Top}\n\t\t\t</g>\n\t\t);\n\t}\n}\n","import * as React from 'react';\nimport { DiagramEngine, LinkWidget, PointModel } from '@projectstorm/react-diagrams-core';\nimport { DefaultLinkModel } from '../models/DefaultLinkModel';\nimport { DefaultLinkPointWidget } from './DefaultLinkPointWidget';\nimport { DefaultLinkSegmentWidget } from './DefaultLinkSegmentWidget';\nimport { MouseEvent } from 'react';\n\nexport interface DefaultLinkProps {\n\tlink: DefaultLinkModel;\n\tdiagramEngine: DiagramEngine;\n\tpointAdded?: (point: PointModel, event: MouseEvent) => any;\n}\n\nexport interface DefaultLinkState {\n\tselected: boolean;\n}\n\nexport class DefaultLinkWidget extends React.Component<DefaultLinkProps, DefaultLinkState> {\n\trefPaths: React.RefObject<SVGPathElement>[];\n\n\tconstructor(props: DefaultLinkProps) {\n\t\tsuper(props);\n\t\tthis.refPaths = [];\n\t\tthis.state = {\n\t\t\tselected: false\n\t\t};\n\t}\n\n\tcomponentDidUpdate(): void {\n\t\tthis.props.link.setRenderedPaths(\n\t\t\tthis.refPaths.map((ref) => {\n\t\t\t\treturn ref.current;\n\t\t\t})\n\t\t);\n\t}\n\n\tcomponentDidMount(): void {\n\t\tthis.props.link.setRenderedPaths(\n\t\t\tthis.refPaths.map((ref) => {\n\t\t\t\treturn ref.current;\n\t\t\t})\n\t\t);\n\t}\n\n\tcomponentWillUnmount(): void {\n\t\tthis.props.link.setRenderedPaths([]);\n\t}\n\n\taddPointToLink(event: MouseEvent, index: number) {\n\t\tif (\n\t\t\t!event.shiftKey &&\n\t\t\t!this.props.link.isLocked() &&\n\t\t\tthis.props.link.getPoints().length - 1 <= this.props.diagramEngine.getMaxNumberPointsPerLink()\n\t\t) {\n\t\t\tconst point = new PointModel({\n\t\t\t\tlink: this.props.link,\n\t\t\t\tposition: this.props.diagramEngine.getRelativeMousePoint(event)\n\t\t\t});\n\t\t\tthis.props.link.addPoint(point, index);\n\t\t\tevent.persist();\n\t\t\tevent.stopPropagation();\n\t\t\tthis.forceUpdate(() => {\n\t\t\t\tthis.props.diagramEngine.getActionEventBus().fireAction({\n\t\t\t\t\tevent,\n\t\t\t\t\tmodel: point\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\t}\n\n\tgeneratePoint(point: PointModel): JSX.Element {\n\t\treturn (\n\t\t\t<DefaultLinkPointWidget\n\t\t\t\tkey={point.getID()}\n\t\t\t\tpoint={point as any}\n\t\t\t\tcolorSelected={this.props.link.getOptions().selectedColor}\n\t\t\t\tcolor={this.props.link.getOptions().color}\n\t\t\t/>\n\t\t);\n\t}\n\n\tgenerateLink(path: string, extraProps: any, id: string | number): JSX.Element {\n\t\tconst ref = React.createRef<SVGPathElement>();\n\t\tthis.refPaths.push(ref);\n\t\treturn (\n\t\t\t<DefaultLinkSegmentWidget\n\t\t\t\tkey={`link-${id}`}\n\t\t\t\tpath={path}\n\t\t\t\tselected={this.state.selected}\n\t\t\t\tdiagramEngine={this.props.diagramEngine}\n\t\t\t\tfactory={this.props.diagramEngine.getFactoryForLink(this.props.link)}\n\t\t\t\tlink={this.props.link}\n\t\t\t\tforwardRef={ref}\n\t\t\t\tonSelection={(selected) => {\n\t\t\t\t\tthis.setState({ selected: selected });\n\t\t\t\t}}\n\t\t\t\textras={extraProps}\n\t\t\t/>\n\t\t);\n\t}\n\n\trender() {\n\t\t//ensure id is present for all points on the path\n\t\tvar points = this.props.link.getPoints();\n\t\tvar paths = [];\n\t\tthis.refPaths = [];\n\n\t\tif (points.length === 2) {\n\t\t\tpaths.push(\n\t\t\t\tthis.generateLink(\n\t\t\t\t\tthis.props.link.getSVGPath(),\n\t\t\t\t\t{\n\t\t\t\t\t\tonMouseDown: (event) => {\n\t\t\t\t\t\t\tthis.addPointToLink(event, 1);\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t'0'\n\t\t\t\t)\n\t\t\t);\n\n\t\t\t// draw the link as dangeling\n\t\t\tif (this.props.link.getTargetPort() == null) {\n\t\t\t\tpaths.push(this.generatePoint(points[1]));\n\t\t\t}\n\t\t} else {\n\t\t\t//draw the multiple anchors and complex line instead\n\t\t\tfor (let j = 0; j < points.length - 1; j++) {\n\t\t\t\tpaths.push(\n\t\t\t\t\tthis.generateLink(\n\t\t\t\t\t\tLinkWidget.generateLinePath(points[j], points[j + 1]),\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t'data-linkid': this.props.link.getID(),\n\t\t\t\t\t\t\t'data-point': j,\n\t\t\t\t\t\t\tonMouseDown: (event: MouseEvent) => {\n\t\t\t\t\t\t\t\tthis.addPointToLink(event, j + 1);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\tj\n\t\t\t\t\t)\n\t\t\t\t);\n\t\t\t}\n\n\t\t\t//render the circles\n\t\t\tfor (let i = 1; i < points.length - 1; i++) {\n\t\t\t\tpaths.push(this.generatePoint(points[i]));\n\t\t\t}\n\n\t\t\tif (this.props.link.getTargetPort() == null) {\n\t\t\t\tpaths.push(this.generatePoint(points[points.length - 1]));\n\t\t\t}\n\t\t}\n\n\t\treturn <g data-default-link-test={this.props.link.getOptions().testName}>{paths}</g>;\n\t}\n}\n","import * as React from 'react';\nimport { DefaultLinkModel } from '../models/DefaultLinkModel';\nimport { DefaultLinkWidget } from '../widgets/DefaultLinkWidget';\nimport styled from '@emotion/styled';\nimport { css, keyframes } from '@emotion/core';\nimport { AbstractReactFactory } from '@projectstorm/react-canvas-core';\nimport { DiagramEngine } from '@projectstorm/react-diagrams-core';\n\n\texport const Keyframes = keyframes`\n\t\tfrom {\n\t\t\tstroke-dashoffset: 24;\n\t\t}\n\t\tto {\n\t\t\tstroke-dashoffset: 0;\n\t\t}\n\t`;\n\n\tconst selected = css`\n\t\tstroke-dasharray: 10, 2;\n\t\tanimation: ${Keyframes} 1s linear infinite;\n\t`;\n\n\texport const Path = styled.path<{ selected: boolean }>`\n\t\t${(p) => p.selected && selected};\n\t\tfill: none;\n\t\tpointer-events: all;\n\t`;\n\nexport class DefaultLinkFactory<Link extends DefaultLinkModel = DefaultLinkModel> extends AbstractReactFactory<\n\tLink,\n\tDiagramEngine\n> {\n\tconstructor(type = 'default') {\n\t\tsuper(type);\n\t}\n\n\tgenerateReactWidget(event): JSX.Element {\n\t\treturn <DefaultLinkWidget link={event.model} diagramEngine={this.engine} />;\n\t}\n\n\tgenerateModel(event): Link {\n\t\treturn new DefaultLinkModel() as Link;\n\t}\n\n\tgenerateLinkSegment(model: Link, selected: boolean, path: string) {\n\t\treturn (\n\t\t\t<Path\n\t\t\t\tselected={selected}\n\t\t\t\tstroke={selected ? model.getOptions().selectedColor : model.getOptions().color}\n\t\t\t\tstrokeWidth={model.getOptions().width}\n\t\t\t\td={path}\n\t\t\t/>\n\t\t);\n\t}\n}\n","import * as React from 'react';\nimport * as _ from 'lodash';\nimport { DiagramEngine } from '@projectstorm/react-diagrams-core';\nimport { DefaultNodeModel } from '../models/DefaultNodeModel';\nimport { DefaultPortLabel } from '../widgets/DefaultPortLabelWidget';\nimport styled from '@emotion/styled';\nimport { css } from '@emotion/core';\n\n\texport const Node = styled.div<{ background: string; selected: boolean }>`\n\t\tbackground-color: ${(p) => p.background};\n\t\tborder-radius: 5px;\n\t\tfont-family: sans-serif;\n\t\tcolor: white;\n\t\tborder: solid 2px black;\n\t\toverflow: visible;\n\t\tfont-size: 11px;\n\t\tborder: solid 2px ${(p) => (p.selected ? 'rgb(0,192,255)' : 'black')};\n\t`;\n\n\texport const Title = styled.div`\n\t\tbackground: rgba(0, 0, 0, 0.3);\n\t\tdisplay: flex;\n\t\twhite-space: nowrap;\n\t\tjustify-items: center;\n\t`;\n\n\texport const TitleName = styled.div`\n\t\tflex-grow: 1;\n\t\tpadding: 5px 5px;\n\t`;\n\nexport interface DefaultNodeProps {\n\tnode: DefaultNodeModel;\n\tengine: DiagramEngine;\n}\n\n/**\n * Default node that models the DefaultNodeModel. It creates two columns\n * for both all the input ports on the left, and the output ports on the right.\n */\nexport class CustomLabelWidget extends React.Component<DefaultNodeProps> {\n\trender() {\n\t\treturn (\n\t\t\t<Node\n\t\t\t\tdata-default-node-name={this.props.node.getOptions().name}\n\t\t\t\tselected={this.props.node.isSelected()}\n\t\t\t\tbackground={this.props.node.getOptions().color}>\n\t\t\t\t<Title>\n\t\t\t\t\t<TitleName>{this.props.node.getOptions().name}</TitleName>\n\t\t\t\t</Title>\n\t\t\t</Node>\n\t\t);\n\t}\n}\n","import * as React from 'react';\nimport { DefaultNodeModel } from '../models/DefaultNodeModel';\nimport { CustomLabelWidget } from '../widgets/CustomLabelWidget';\nimport { AbstractReactFactory } from '@projectstorm/react-canvas-core';\nimport { DiagramEngine } from '@projectstorm/react-diagrams-core';\n\nexport class CustomLabelFactory extends AbstractReactFactory<DefaultNodeModel, DiagramEngine> {\n\tconstructor() {\n\t\tsuper('label');\n\t}\n\n\tgenerateReactWidget(event): JSX.Element {\n\t\treturn <CustomLabelWidget engine={this.engine} node={event.model} />;\n\t}\n\n\tgenerateModel(event): DefaultNodeModel {\n\t\treturn new DefaultNodeModel(true, 'Label', 'rgb(192,255,0)');\n\t}\n}\n","import { DefaultPortModel } from '../models/DefaultPortModel';\nimport { AbstractModelFactory } from '@projectstorm/react-canvas-core';\nimport { DiagramEngine } from '@projectstorm/react-diagrams-core';\nimport { AdvancedPortModel } from '../models/ArrowPortModel';\n\nexport class ArrowPortFactory extends AbstractModelFactory<AdvancedPortModel, DiagramEngine> {\n\tconstructor() {\n\t\tsuper('arrow');\n\t}\n\n\tgenerateModel(): DefaultPortModel {\n\t\treturn new AdvancedPortModel('port', true, false);\n\t}\n}\n","import * as SRD from '@projectstorm/react-diagrams';\nimport { ArrowLinkFactory } from '../infrastructure/factories/ArrowLinkFactory';\nimport { DefaultNodeFactory } from '../infrastructure/factories/DefaultNodeFactory';\nimport { DefaultLabelFactory } from '../infrastructure/factories/DefaultLabelFactory';\nimport { DefaultPortFactory } from '../infrastructure/factories/DefaultPortFactory';\nimport { DefaultLinkFactory } from '../infrastructure/factories/DefaultLinkFactory';\nimport { CustomLabelFactory } from '../infrastructure/factories/CustomLabelFactory';\nimport { DefaultPortModel } from '../infrastructure/models/DefaultPortModel';\nimport { ArrowLinkModel } from '../infrastructure/models/ArrowLinkModel';\nimport { AdvancedPortModel } from '../infrastructure/models/ArrowPortModel';\nimport { DefaultNodeModel } from '../infrastructure/models/DefaultNodeModel';\nimport { DefaultLabelModel } from '../infrastructure/models/DefaultLabelModel';\nimport { DefaultLinkModel } from '../infrastructure/models/DefaultLinkModel';\nimport { Toolkit } from '../infrastructure/Toolkit';\nimport { DefaultDiagramState } from '@projectstorm/react-diagrams';\nimport { ArrowPortFactory } from '../infrastructure/factories/ArrowPortFactory';\n\n\nexport class Application {\n  protected activeModel!: SRD.DiagramModel;\n  protected logicModel!: SRD.DiagramModel;\n\n  protected diagramEngine: SRD.DiagramEngine;\n\n  constructor() {\n    this.diagramEngine = SRD.default();\n    this.diagramEngine.getNodeFactories().registerFactory(new CustomLabelFactory());\n\n    this.diagramEngine.getNodeFactories().registerFactory(new DefaultNodeFactory());\n    this.diagramEngine.getLabelFactories().registerFactory(new DefaultLabelFactory());\n    this.diagramEngine.getPortFactories().registerFactory(new DefaultPortFactory());\n    this.diagramEngine.getPortFactories().registerFactory(new ArrowPortFactory());\n\n\n    this.diagramEngine.getLinkFactories().registerFactory(new ArrowLinkFactory());\n\n    this.diagramEngine.getLinkFactories().registerFactory(new DefaultLinkFactory());\n\n    const state = this.diagramEngine.getStateMachine().getCurrentState();\n      if (state instanceof DefaultDiagramState) {\n        state.dragNewLink.config.allowLooseLinks = false;\n      }\n\n    this.newModel();\n  }\n\n  public newModel() {\n    this.activeModel = new SRD.DiagramModel();\n    this.logicModel = new SRD.DiagramModel();\n\n    this.diagramEngine.setModel(this.activeModel);\n  }\n\n  public getActiveDiagram(): SRD.DiagramModel {\n    return this.activeModel;\n  }\n\n  public getDiagramEngine(): SRD.DiagramEngine {\n    return this.diagramEngine;\n  }\n\n  public setLogicModel() {\n\n    let concNodes = this.activeModel.getNodes();\n\n    Object.keys(concNodes).map((k) => {\n      let node = concNodes[k].clone() as DefaultNodeModel;\n\n      let nodePorts = concNodes[k].getPorts();\n\n      Object.keys(nodePorts).map(k => {\n        let port = nodePorts[k] as DefaultPortModel;\n        let logicPort = new AdvancedPortModel(port.getOptions().name, port.isNamePort, port.isPrimaryKey, port.isForeignKey, port.isNotNull, port.isAutoincremented, port.isUnique, port.propertyType);\n        //let logicPort = new ArrowPortModel(port.getOptions().name, port.isNamePort, port.isPrimaryKey, port.isForeignKey, port.isNotNull, port.isAutoincremented, port.isUnique, port.propertyType);\n        node.addPort(logicPort);\n      })\n\n\n      this.logicModel.addNode(node);\n    });\n\n    let concLinks = this.activeModel.getLinks();\n\n    Object.keys(concLinks).map((k) => {\n      let logicNodes = this.logicModel.getNodes() as DefaultNodeModel[];\n\n      let sourceNode = concLinks[k].sourcePort.getParent() as DefaultNodeModel;\n      let sourceNodeId = logicNodes.filter(\n        node => (node as DefaultNodeModel).getOptions().name == sourceNode.getOptions().name\n      )[0].getOptions().id;\n\n      let targetNode = concLinks[k].targetPort.getParent() as DefaultNodeModel;\n      let targetNodeId = logicNodes.filter(\n        node => (node as DefaultNodeModel).getOptions().name == targetNode.getOptions().name\n      )[0].getOptions().id;\n\n      let sourceLabel = (concLinks[k].labels[0] as DefaultLabelModel).getOptions().label;\n      let targetLabel = (concLinks[k].labels[2] as DefaultLabelModel).getOptions().label;\n\n      if (sourceLabel.includes(\"N\") && targetLabel.includes(\"N\")) {\n        let relNode = ((concLinks[k] as DefaultLinkModel).properties as DefaultNodeModel).clone() as DefaultNodeModel;\n        relNode.getOptions().name = (concLinks[k].labels[1] as DefaultLabelModel).getOptions().label;\n        relNode.setPosition(sourceNode.getPosition().x + 150, sourceNode.getPosition().y - 100);\n\n        relNode.addPort(new AdvancedPortModel('Id', false, true, false, true, true, true, 'INT'));\n        relNode.addPort(new AdvancedPortModel('', true, false, false, false, false, false, 'INT'));\n        relNode.addPort(new AdvancedPortModel('1', true, false, false, false, false, false, 'INT'));\n\n\n        relNode.addPort(new AdvancedPortModel(sourceNode.getOptions().name + \"Id\", false, false, true, true, false, false, 'INT', Toolkit.UID(), sourceNodeId));\n        relNode.addPort(new AdvancedPortModel(targetNode.getOptions().name + \"Id\", false, false, true, true, false, false, 'INT', Toolkit.UID(), targetNodeId));\n\n        this.logicModel.addNode(relNode);\n\n        //dodaj link\n        let node = logicNodes.filter(n => n.getOptions().id === sourceNodeId)[0];\n        let sourceP = node.getPorts()[\"1\"];\n        let targetP = relNode.getPorts()[\"\"];\n\n        let link = new ArrowLinkModel({ type: 'arrow' });\n\n        link.setSourcePort(sourceP);\n        link.setTargetPort(targetP);\n\n        //dodaj link\n        let node2 = logicNodes.filter(n => n.getOptions().id === targetNodeId)[0];\n        let targetP2 = relNode.getPorts()[\"1\"];\n        let sourceP2 = node2.getPorts()[\"\"];\n\n        let link2 = new ArrowLinkModel({ type: 'arrow' });\n\n        link2.setSourcePort(sourceP2);\n        link2.setTargetPort(targetP2);\n\n        this.logicModel.addAll(link, link2);\n      } else if (sourceLabel.includes(\"N\")) {\n        //dodaj FK\n        let node = logicNodes.filter(n => n.getOptions().id === sourceNodeId)[0];\n\n        node.addPort(new AdvancedPortModel(targetNode.getOptions().name + \"Id\", false, false, true, true, false, false, 'INT', Toolkit.UID(), targetNodeId));\n\n        //dodaj link\n        let tNode = logicNodes.filter(n => n.getOptions().id === targetNodeId)[0];\n\n        let targetP = node.getPorts()[\"1\"];\n        let sourceP = tNode.getPorts()[\"\"];\n\n        let link = new ArrowLinkModel({ type: 'arrow' });\n\n        link.setSourcePort(sourceP);\n        link.setTargetPort(targetP);\n        this.logicModel.addLink(link);\n      } else if (targetLabel.includes(\"N\")) {\n        //dodaj FK\n        let node = logicNodes.filter(n => n.getOptions().id === targetNodeId)[0];\n\n        node.addPort(new AdvancedPortModel(sourceNode.getOptions().name + \"Id\", false, false, true, true, false, false, 'INT', Toolkit.UID(), sourceNodeId));\n\n        //dodaj link\n        let tNode = logicNodes.filter(n => n.getOptions().id === sourceNodeId)[0];\n\n        let targetP = node.getPorts()[\"\"];\n        let sourceP = tNode.getPorts()[\"1\"];\n\n        let link = new ArrowLinkModel({ type: 'arrow' });\n\n        link.setSourcePort(sourceP);\n        link.setTargetPort(targetP);\n        this.logicModel.addLink(link);\n      } else {\n        //dodaj FK\n        let node = logicNodes.filter(n => n.getOptions().id === targetNodeId)[0];\n\n        node.addPort(new AdvancedPortModel(sourceNode.getOptions().name + \"Id\", false, false, true, true, false, false, 'INT', Toolkit.UID(), sourceNodeId));\n\n        //dodaj link\n        let tNode = logicNodes.filter(n => n.getOptions().id === sourceNodeId)[0];\n\n        let targetP = node.getPorts()[\"\"];\n        let sourceP = tNode.getPorts()[\"1\"];\n\n        let link = new ArrowLinkModel({ type: 'arrow' });\n\n        link.setSourcePort(sourceP);\n        link.setTargetPort(targetP);\n        this.logicModel.addLink(link);\n      }\n    });\n\n    this.diagramEngine.setModel(this.logicModel);\n  }\n\n  public setConceptualModel() {\n    this.logicModel = null;\n    this.logicModel = new SRD.DiagramModel();\n\n    let activeModelCopy = new SRD.DiagramModel();\n\n    let nodes = this.activeModel.getNodes();\n\n    Object.keys(nodes).map(k => {\n      activeModelCopy.addNode(nodes[k]);\n    })\n\n    let links = this.activeModel.getLinks();\n\n    Object.keys(links).map(k => {\n      activeModelCopy.addLink(links[k]);\n    })\n\n    this.activeModel = activeModelCopy;\n\n    this.diagramEngine.setModel(this.activeModel);\n  }\n\n  public loadConceptualModel(model: SRD.DiagramModel) {\n    this.activeModel = model;\n\n    this.diagramEngine.setModel(this.activeModel);\n  }\n\n  public loadLogicModel(model: SRD.DiagramModel) {\n    this.logicModel = model;\n      this.diagramEngine.setModel(this.logicModel);\n    }\n}\n\n","\nimport * as React from 'react';\nimport { BodyWidget } from './components/BodyWidget';\nimport { Application } from './components/Application';\n\nexport default () => {\n  var app = new Application();\n\treturn (\n    <div className=\"content\">\n      <BodyWidget app={app} />\n    </div>\n\t);\n};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport \"./icons/micon/css/micon.min.css\";\nimport \"react-bootstrap-table-next/dist/react-bootstrap-table2.min.css\";\n\nimport './index.css';\nimport './App.css';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}