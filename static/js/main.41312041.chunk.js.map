{"version":3,"sources":["infrastructure/models/PropertyType.ts","infrastructure/models/Label.ts","infrastructure/models/Link.ts","infrastructure/models/Port.ts","infrastructure/models/Node.ts","infrastructure/widgets/CustomLabelWidget.tsx","infrastructure/factories/CustomLabelFactory.ts","infrastructure/factories/CustomPortFactory.tsx","infrastructure/widgets/CustomPortLabelWidget.tsx","infrastructure/widgets/CustomNodeWidget.tsx","infrastructure/factories/CustomNodeFactory.tsx","infrastructure/widgets/CustomLinkLabelWidget.tsx","infrastructure/factories/CustomLinkLabelFactory.ts","infrastructure/factories/CustomLinkFactory.tsx","components/dragAndDrop/Application.ts","components/dragAndDrop/TrayItemWidget.tsx","components/dragAndDrop/TrayWidget.tsx","components/grid/Grid.tsx","components/grid/Row.tsx","components/grid/Col.tsx","components/propertyTable/PropertyTable.tsx","components/nodeProperties/NodeProperties.tsx","components/popups/ResultPopup/ResultPopup.tsx","handlers/GenerationHandler.tsx","components/popups/RealtionPopup/RelationPopup.tsx","components/popups/LoadFilePopup/LoadFilePopup.tsx","handlers/LoadFileHandler.tsx","components/popups/SaveToFilePopup/SaveToFilePopup.tsx","components/popups/SaveToJpegPopup/SaveToJpegPopup.tsx","AppView.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["PropertyType","Label","_LabelModel","label","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","offsetY","inherits","createClass","key","value","ob","engine","get","prototype","_","LabelModel","Link","_LinkModel","type","arguments","length","undefined","width","color","curvyness","properties","addLabel","Node","relPorts","ports","values","map","a","propertyType","isPrimaryKey","isNotNull","isAutoincremented","isUnique","propertiesNode","console","log","labelOb","setLabel","iterateListeners","listener","event","widthChanged","objectSpread","colorChanged","LinkModel","Port","_PortModel","name","isNamePort","isForeignKey","id","in","links","object","port","PortModel","_NodeModel","isLabel","isNamedPort","isPK","isFK","isAuto","addPort","Toolkit","UID","portModel","NodeModel","CustomLabelWidget","_BaseWidget","props","state","react","assign","getProps","style","background","node","className","bem","BaseWidget","CustomLabelFactory","_AbstractNodeFactory","diagramEngine","React","initialConfig","AbstractNodeFactory","CustomPortFactory","_AbstractPortFactory","AbstractPortFactory","CustomPortLabelWidget","model","itemStyles","display","marginRight","react_default","createElement","main","getParent","setLocked","paddingLeft","paddingRight","fontWeight","justifyContent","CustomNodeWidget","CustomPortLabelWidget_CustomPortLabelWidget","getPorts","portsJSX","generatePort","bind","namedPort","filter","p","notNamedPort","wordBreak","maxWidth","marginLeft","CustomNodeFactory","CustomLinkLabelWidget","CustomLinkLabelFactory","_AbstractLabelFactory","AbstractLabelFactory","CustomLinkFactory","_AbstractLinkFactory","link","DefaultLinkWidget","widget","selected","path","strokeWidth","stroke","d","AbstractLinkFactory","Application","activeModel","SRD","registerNodeFactory","registerLinkFactory","registerLabelFactory","registerPortFactory","installDefaultFactories","newModel","setDiagramModel","TrayItemWidget","_React$Component","_this2","borderColor","draggable","onDragStart","dataTransfer","setData","JSON","stringify","TrayWidget","children","defaultProps","Grid","buildClassNameString","concat","Row","flex","Col","onDoubleClick","size","config","pull","push","offset","order","hidden","buildGridColConfigClassNames","sm","md","lg","xl","xxl","xxxl","PropertyTable","_React$useState3","useState","_React$useState4","slicedToArray","updatedItem","setUpdatedItem","forceUpdate","_React$useState","_React$useState2","setValue","useForceUpdate","useMemo","selectedItem","columns","dataField","text","formatter","cellContent","row","defaultValue","onChange","persist","getPortFromID","target","handleChangePortLabel","list","handleChangepPropType","obj","checked","handleChangePK","handleChangeNull","handleChangeAutoInc","handleChangeUnique","onClick","entries","constructor","keys","x","forEach","getDiagramModel","removeLink","removePort","portsTable","lib_default","keyField","data","relView","col","bordered","newPortNumber","addInPort","INT","NodeProperties","_React$useState5","_React$useState6","defaultName","setDefaultName","_React$useState7","_React$useState8","setName","_React$useState9","_React$useState10","showInput","setShowInput","handleNameChange","allNodes","diagramModel","getNodes","includes","Grid_Grid","Row_Row","Col_Col","height","PropertyTable_PropertyTable","ResultPopup","_useState","_useState2","dbName","setDbName","formatedSQL","mssqlString","sqlFormatter","format","language","indent","reactjs_popup_es","modal","closeOnDocumentClick","open","isOpen","closeOnEscape","generateScript","marginTop","readOnly","contentEditable","blob","Blob","FileSaver","saveAs","update","GenerationHandler","sqlString","setSqlString","_ref","asyncToGenerator","regenerator_default","mark","_callee","diagram","response","wrap","_context","prev","next","serializeDiagram","axios","post","SerializedModel","DatabaseName","sent","status","stop","_x","apply","ResultPopup_ResultPopup_ResultPopup","RelationPopup","left","setLeft","_useState3","_useState4","right","setRight","_useState5","_useState6","relationName","setRelationName","useEffect","leftLabel","labels","relLabel","rightLabel","sourcePort","parent","targetPort","options","Fragment","renderOptionPicker","side","points","index","remove","sourceP","targetP","LoadFilePopup","fileReader","fileContent","setFileContent","handleFileRead","e","content","result","onClose","files","FileReader","onloadend","readAsText","accept","loadDiagram","LoadFileHandler","LoadFilePopup_LoadFilePopup_LoadFilePopup","app","getDiagramEngine","parse","model2","DiagramModel","deSerializeDiagram","splice","repaintCanvas","SaveToFilePopup","fileName","setFileName","diagramJson","SaveToJpegPopup","domtoimage","toJpeg","document","getElementById","quality","then","dataUrl","download","href","click","require","AppView","showDialog","setShowDialog","showRelationDialog","setShowRelationDialog","showLoadFileDialog","setShowLoadFileDialog","showSaveFileDialog","setSaveFileDialog","showSaveJPEGDialog","setSaveJPEGDialog","_React$useState11","_React$useState12","showSaveOptions","setSaveOptions","_React$useState13","_React$useState14","selectedNode","setSelectedNode","_React$useState15","_React$useState16","selectedLink","setSelectedLink","refreshPopups","ref","TrayWidget_TrayWidget","TrayItemWidget_TrayItemWidget","paddingTop","onDrop","preventDefault","getData","nodesCount","addListener","getRelativeMousePoint","y","addNode","onDragOver","getSelectedItems","PointModel","allowLooseLinks","deleteKeys","NodeProperties_NodeProperties","GenerationHandler_GenerationHandler","LoadFileHandler_LoadFileHandler","SaveToFilePopup_SaveToFilePopup_SaveToFilePopup","SaveToJpegPopup_SaveToJpegPopup_SaveToJpegPopup","getActiveDiagram","RelationPopup_RelationPopup","App","AppView_AppView","Boolean","window","location","hostname","match","ReactDOM","App_App","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.41312041.chunk.js","sourcesContent":["export enum PropertyType {\n  BIT = \"BIT\",\n  TINYINT = \"TINYINT\",\n  SMALLINT = \"SMALLINT\",\n  INT = \"INT\",\n  BIGINT = \"BIGINT\",\n  'DECIMAL()' = \"DECIMAL()\",\n  'NUMERIC()' = \"NUMERIC()\",\n  'FLOAT()' = \"FLOAT()\",\n  REAL = \"REAL\",\n  DATE = \"DATE\",\n  TIME = \"TIME\",\n  DATETIME = \"DATETIME\",\n  TIMESTAMP = \"TIMESTAMP\",\n  YEAR = \"YEAR\",\n  'CHAR()' = \"CHAR()\",\n  'VARCHAR()' = \"VARCHAR()\",\n  TEXT = \"TEXT\",\n  'NCHAR()' = \"NCHAR()\",\n  'NVARCHAR()' = \"NVARCHAR()\",\n  NTEXT = \"NTEXT\",\n  'BINARY()' = \"BINARY()\",\n  'VARBINARY()' = \"VARBINARY()\",\n  IMAGE = \"IMAGE\",\n  CLOB = \"CLOB\",\n  BLOB = \"BLOB\",\n  XML = \"XML\",\n  JSON = \"JSON\",\n  MONEY = \"MONEY\"\n}\n","import * as _ from \"lodash\";\nimport { LabelModel, DiagramEngine } from \"storm-react-diagrams\";\n\nexport class Label extends LabelModel {\n  label: string;\n\n  constructor(label: string) {\n    super(\"custom\");\n    this.label = label;\n    this.offsetY = -23;\n  }\n\n  setLabel(label: string) {\n    this.label = label;\n  }\n\n  deSerialize(ob: any, engine: DiagramEngine) {\n    super.deSerialize(ob, engine);\n    this.label = ob.label;\n  }\n\n  serialize() {\n    return _.merge(super.serialize(), {\n      label: this.label\n    });\n  }\n}\n","import * as _ from \"lodash\";\nimport {\n  LinkModelListener,\n  BaseEvent,\n  LinkModel,\n  DefaultLinkModel,\n  DiagramEngine,\n  LabelModel\n} from \"storm-react-diagrams\";\nimport { Label } from \"./Label\";\nimport { Node } from \"./Node\";\nimport { PropertyType } from \"./PropertyType\";\n\nexport interface DefaultLinkModelListener extends LinkModelListener {\n  colorChanged?(\n    event: BaseEvent<DefaultLinkModel> & { color: null | string }\n  ): void;\n\n  widthChanged?(\n    event: BaseEvent<DefaultLinkModel> & { width: 0 | number }\n  ): void;\n}\nclass RelationProperties {\n  label: string;\n  isPrimaryKey: boolean;\n  isAutoincremented: boolean;\n  isNotNull: boolean;\n  isUnique: boolean;\n  propertyType: PropertyType\n}\nexport class Link extends LinkModel<DefaultLinkModelListener> {\n  width: number;\n  color: string;\n  curvyness: number;\n  properties: Node;\n\n  constructor(type: string = \"custom\") {\n    super(type);\n    this.color = \"rgba(255,255,255,0.5)\";\n    this.width = 3;\n    this.curvyness = 300;\n    this.addLabel(\"0,N\");\n    this.addLabel(\"relation name\");\n    this.addLabel(\"0,N\");\n    this.properties = new Node(false, 'relNode')\n  }\n\n\n  serialize() {\n    let relPorts = this.properties && this.properties.ports && Object.values(this.properties.ports);\n    let properties = relPorts && relPorts.map(a => {\n      return { label: a.label, \n        propertyType: a.propertyType, \n        isPrimaryKey: a.isPrimaryKey ,\n        isNotNull: a.isNotNull,\n        isAutoincremented: a.isAutoincremented,\n        isUnique: a.isUnique \n      }\n    })\n\n    return _.merge(super.serialize(), {\n      width: this.width,\n      color: this.color,\n      curvyness: this.curvyness,\n      properties\n    });\n  }\n\n  deSerialize(ob: any, engine: DiagramEngine) {\n    let propertiesNode = new Node(false, 'relNode');\n    propertiesNode.ports = ob.properties.map((a: RelationProperties) => {\n      return { label: a.label, \n        propertyType: a.propertyType, \n        isPrimaryKey: a.isPrimaryKey ,\n        isNotNull: a.isNotNull,\n        isAutoincremented: a.isAutoincremented,\n        isUnique: a.isUnique \n      }\n    })\n    console.log('obj', ob.properties)\n    super.deSerialize(ob, engine);\n    this.color = ob.color;\n    this.width = ob.width;\n    this.curvyness = ob.curvyness;\n    this.properties = propertiesNode //ob.properties;\n  }\n\n  addLabel(label: LabelModel | string) {\n    if (label instanceof LabelModel) {\n      return super.addLabel(label);\n    }\n    let labelOb = new Label(\"custom\");\n    labelOb.setLabel(label);\n    return super.addLabel(labelOb);\n  }\n\n  setWidth(width: number) {\n    this.width = width;\n    this.iterateListeners(\n      (listener: DefaultLinkModelListener, event: BaseEvent) => {\n        if (listener.widthChanged) {\n          listener.widthChanged({ ...event, width: width });\n        }\n      }\n    );\n  }\n\n  setColor(color: string) {\n    this.color = color;\n    this.iterateListeners(\n      (listener: DefaultLinkModelListener, event: BaseEvent) => {\n        if (listener.colorChanged) {\n          listener.colorChanged({ ...event, color: color });\n        }\n      }\n    );\n  }\n}\n","import * as _ from \"lodash\";\nimport { Link } from \"./Link\";\nimport { PortModel, DiagramEngine } from \"storm-react-diagrams\";\nimport { PropertyType } from \"./PropertyType\";\n\nexport class Port extends PortModel {\n  in: boolean;\n  isNamePort: boolean;\n  label: string;\n  links: { [id: string]: Link };\n  isPrimaryKey: boolean;\n  isForeignKey: boolean;\n  isAutoincremented: boolean;\n  isNotNull: boolean;\n  isUnique: boolean;\n  propertyType: string;// PropertyType;\n\n  constructor(\n    name: string,\n    isNamePort: boolean,\n    isPrimaryKey?: boolean,\n    isForeignKey?: boolean,\n    isNotNull?: boolean,\n    isAutoincremented?: boolean,\n    isUnique?: boolean,\n    propertyType?:  string, //PropertyType,\n    id?: string\n  ) {\n    super(name, \"custom\", id);\n    this.label = name;\n    this.isNamePort = isNamePort;\n    this.links = {};\n\n    this.isPrimaryKey = isPrimaryKey;\n    this.isForeignKey = isForeignKey;\n\n    this.isNotNull = isNotNull;\n    this.isUnique = isUnique;\n    this.isAutoincremented = isAutoincremented;\n\n    this.propertyType = propertyType;\n  }\n\n  deSerialize(object: any, engine: DiagramEngine) {\n    super.deSerialize(object, engine);\n    this.label = object.label;\n    this.isNamePort = object.isNamePort;\n\n    this.isPrimaryKey = object.isPrimaryKey;\n    this.isForeignKey = object.isForeignKey;\n    this.isNotNull = object.isNotNull;\n    this.isUnique = object.isUnique;\n    this.isAutoincremented = object.isAutoincremented;\n    this.propertyType = object.propertyType;\n  }\n\n  serialize() {\n    return _.merge(super.serialize(), {\n      label: this.label,\n      links: this.links,\n      isNamePort: this.isNamePort,\n      isPrimaryKey: this.isPrimaryKey,\n      isForeignKey: this.isForeignKey,\n      isNotNull: this.isNotNull,\n      isUnique: this.isUnique,\n      isAutoincremented: this.isAutoincremented,\n      propertyType: this.propertyType\n    });\n  }\n\n  canLinkToPort(port: Port): boolean {\n    return true;\n  }\n\n  createLinkModel(): Link {\n    return new Link(\"custom\");\n  }\n}\n","import * as _ from \"lodash\";\nimport { NodeModel, Toolkit, DiagramEngine } from \"storm-react-diagrams\";\nimport { Port } from \"./Port\";\nimport { PropertyType } from \"./PropertyType\";\n\nexport class Node extends NodeModel {\n\tname: string;\n\tcolor: string;\n\tports: { [s: string]: Port };\n\tisLabel: boolean;\n\n\tconstructor(isLabel: boolean, name: string = \"Untitled\", color: string = \"rgb(0,192,255)\") {\n\t\tsuper(\"custom\");\n\t\tthis.name = name;\n\t\tthis.color = color;\n\t\tthis.ports = {};\n\t\tthis.isLabel = isLabel;\n\t}\n\n\taddInPort(isNamedPort: boolean, label: string, isPK: boolean, isFK: boolean, isUnique: boolean, isAuto: boolean, isNotNull: boolean, propertyType: PropertyType): Port {\n\t\treturn this.addPort(new Port(label, isNamedPort, isPK, isFK, isNotNull, isAuto, isUnique, propertyType, Toolkit.UID()));\n\t}\n\n\taddOutPort(isNamedPort: boolean,label: string, isPK: boolean, isFK: boolean, isUnique: boolean, isAuto: boolean, isNotNull: boolean, propertyType: PropertyType): Port {\n\t\treturn this.addPort(new Port(label, isNamedPort, isPK, isFK, isNotNull, isAuto, isUnique, propertyType, Toolkit.UID()));\n\t}\n\n\tdeSerialize(object: any, engine: DiagramEngine) {\n\t\tsuper.deSerialize(object, engine);\n\t\tthis.name = object.name;\n\t\tthis.color = object.color;\n\t\tthis.isLabel = object.isLabel;\n\t}\n\n\tserialize() {\n\t\treturn _.merge(super.serialize(), {\n\t\t\tname: this.name,\n\t\t\tcolor: this.color,\n\t\t\tisLabel: this.isLabel\n\t\t});\n\t}\n\n\tgetInPorts(): Port[] {\n\t\treturn _.filter(this.ports, portModel => {\n\t\t\treturn portModel.in;\n\t\t});\n\t}\n\n\tgetOutPorts(): Port[] {\n\t\treturn _.filter(this.ports, portModel => {\n\t\t\treturn !portModel.in;\n\t\t});\n\t}\n}","import {\n  BaseWidgetProps,\n  DiagramEngine,\n  BaseWidget,\n  DefaultPortLabel\n} from \"storm-react-diagrams\";\nimport { Node } from \"../models/Node\";\nimport * as React from \"react\";\n\nexport interface NodeProps extends BaseWidgetProps {\n  node: Node;\n  diagramEngine: DiagramEngine;\n}\n\nexport interface DefaultNodeState {}\n\nexport class CustomLabelWidget extends BaseWidget<NodeProps, DefaultNodeState> {\n  constructor(props: NodeProps) {\n    super(\"srd-default-node\", props);\n    this.state = {};\n  }\n\n  render() {\n    return (\n      <div {...this.getProps()} style={{ background: this.props.node.color }}>\n        <div className={this.bem(\"__title\")}>\n          <div className={this.bem(\"__name\")}>{this.props.node.name}</div>\n        </div>\n      </div>\n    );\n  }\n}\n","import { Node } from \"../models/Node\";\nimport * as React from \"react\";\nimport { CustomLabelWidget } from \"../widgets/CustomLabelWidget\";\nimport { AbstractNodeFactory, DiagramEngine } from \"storm-react-diagrams\";\n\nexport class CustomLabelFactory extends AbstractNodeFactory<Node> {\n  constructor() {\n    super(\"label\");\n  }\n\n  generateReactWidget(diagramEngine: DiagramEngine, node: Node): JSX.Element {\n    return React.createElement(CustomLabelWidget, {\n      node: node,\n      diagramEngine: diagramEngine\n    });\n  }\n\n  getNewInstance(initialConfig?: any): Node {\n    return new Node(false, null, \"label\");\n  }\n}\n","import { AbstractPortFactory } from \"storm-react-diagrams\";\nimport { Port } from \"../models/Port\";\n\nexport class CustomPortFactory extends AbstractPortFactory<Port> {\n  constructor() {\n    super(\"custom\");\n  }\n\n  getNewInstance(initialConfig?: any): Port {\n    return new Port(\"custom\", true, false);\n  }\n}\n","import { Port } from \"../models/Port\";\nimport { BaseWidgetProps, BaseWidget, PortWidget } from \"storm-react-diagrams\";\nimport React, { CSSProperties } from \"react\";\nimport { PropertyType } from \"../models/PropertyType\";\n\nexport interface DefaultPortLabelProps extends BaseWidgetProps {\n  model: Port;\n}\n\nexport interface DefaultPortLabelState {}\n\nexport class CustomPortLabelWidget extends BaseWidget<\n  DefaultPortLabelProps,\n  DefaultPortLabelState\n> {\n  constructor(props: DefaultPortLabelProps) {\n    super(\"custom\", props);\n  }\n\n  getClassName() {\n    return (\n      super.getClassName() +\n      (this.props.model.in ? this.bem(\"--in\") : this.bem(\"--in\"))\n    );\n  }\n\n  render() {\n    let port: JSX.Element;\n    const style: CSSProperties = {\n      paddingLeft: 5,\n      paddingRight: 5,\n      color: \"black\",\n      fontWeight: 800\n\t};\n\t\n    const containerStyles: CSSProperties = {\n      display: \"flex\",\n      justifyContent: \"flex-end\"\n\t};\n\t\n    const itemStyles: CSSProperties = {\n      display: \"inline-block\",\n      marginRight: \"5px\"\n    };\n\n    const portStyles: CSSProperties = {\n      display: \"none\"\n    };\n\n    const namedPortStyles: CSSProperties = {\n      marginRight: \"5px\"\n    };\n\n    if (!this.props.model.isNamePort) {\n      this.props.model.setLocked();\n      port = (\n        <PortWidget\n          node={this.props.model.getParent()}\n          name={this.props.model.name}\n        />\n      );\n    } else {\n      port = (\n        <PortWidget\n          node={this.props.model.getParent()}\n          name={this.props.model.name}\n        />\n      );\n    }\n\n    const label: JSX.Element = (\n      <div className=\"name\">\n        <div>\n          {this.props.model.label}{\" \"}\n          {this.props.model.propertyType !== undefined\n            ? this.props.model.propertyType\n            : null}\n        </div>\n      </div>\n    );\n    const isPrimaryKey = this.props.model.isPrimaryKey ? (\n      <span className=\"mi mi-Permissions\" style={style}></span>\n    ) : null;\n\n    if (this.props.model.isNamePort) {\n      return <div style={namedPortStyles}>{port}</div>;\n    } else {\n      return (\n        <div style={containerStyles} {...this.getProps()}>\n          <div style={itemStyles}>{isPrimaryKey}</div>\n          <div style={itemStyles}>{label}</div>\n          <div style={portStyles}>{port}</div>\n        </div>\n      );\n    }\n  }\n}\n","import { CustomPortLabelWidget } from \"./CustomPortLabelWidget\";\nimport React, { CSSProperties } from \"react\";\nimport {\n  BaseWidget,\n  DiagramEngine,\n  BaseWidgetProps\n} from \"storm-react-diagrams\";\nimport { Port } from \"../models/Port\";\nimport { Node } from \"../models/Node\";\nimport * as _ from \"lodash\";\n\nexport interface DefaultNodeProps extends BaseWidgetProps {\n  node: Node;\n  diagramEngine: DiagramEngine;\n}\n\nexport interface DefaultNodeState {}\n\nexport class CustomNodeWidget extends BaseWidget<\n  DefaultNodeProps,\n  DefaultNodeState\n> {\n  constructor(props: DefaultNodeProps) {\n    super(\"srd-default-node\", props);\n    this.state = {};\n  }\n\n  generatePort(port: Port) {\n    return <CustomPortLabelWidget model={port} key={port.id} />;\n  }\n\n  render() {\n    const namedPortStyles: CSSProperties = {\n      marginLeft: \"5px\"\n    };\n\n    let ports = this.props.node.getPorts() as { [s: string]: Port };\n    let portsJSX = _.map(ports, this.generatePort.bind(this));\n    let namedPort = portsJSX.filter(p => p.props.model.isNamePort);\n    let notNamedPort = portsJSX.filter(p => !p.props.model.isNamePort);\n\n    return (\n      <div {...this.getProps()} style={{ background: this.props.node.color }}>\n        <div className={this.bem(this.props.node.isLabel ? \"\" : \"__title\")} style={{wordBreak: \"break-word\", maxWidth: '200px'}}>\n          {namedPort.length !== 0 && (\n            <div style={namedPortStyles}>\n              {this.generatePort(namedPort[1].props.model)}\n            </div>\n          )}\n          <div className={this.bem(\"__name\")}>{this.props.node.name}</div>\n          {namedPort.length !== 0 &&\n            this.generatePort(namedPort[0].props.model)}\n        </div>\n        <div className={this.bem(\"__ports\")}>\n          <div className={this.bem(\"__in\")}>{notNamedPort}</div>\n        </div>\n      </div>\n    );\n  }\n}\n","import { AbstractNodeFactory, DiagramEngine } from \"storm-react-diagrams\";\nimport React from \"react\";\nimport { CustomNodeWidget } from \"../widgets/CustomNodeWidget\";\nimport { Node } from \"../models/Node\";\n\nexport class CustomNodeFactory extends AbstractNodeFactory<Node> {\n  constructor() {\n    super(\"custom\");\n  }\n\n  generateReactWidget(diagramEngine: DiagramEngine, node: Node): JSX.Element {\n    return React.createElement(CustomNodeWidget, {\n      node: node,\n      diagramEngine: diagramEngine\n    });\n  }\n\n  getNewInstance(initialConfig?: any): Node {\n    return new Node(false, null, \"custom\");\n  }\n}\n","import * as React from \"react\";\nimport { BaseWidgetProps, BaseWidget } from \"storm-react-diagrams\";\nimport { Label } from \"../models/Label\";\n\nexport interface DefaultLabelWidgetProps extends BaseWidgetProps {\n  model: Label;\n}\n\nexport class CustomLinkLabelWidget extends BaseWidget<DefaultLabelWidgetProps> {\n  constructor(props: DefaultLabelWidgetProps) {\n    super(\"srd-default-label\", props);\n  }\n\n  render() {\n    return <div {...this.getProps()}>{this.props.model.label}</div>;\n  }\n}\n","import * as React from \"react\";\nimport { AbstractLabelFactory, DiagramEngine } from \"storm-react-diagrams\";\nimport { Label } from \"../models/Label\";\nimport { CustomLinkLabelWidget } from \"../widgets/CustomLinkLabelWidget\";\n\nexport class CustomLinkLabelFactory extends AbstractLabelFactory<Label> {\n  constructor() {\n    super(\"custom\");\n  }\n\n  generateReactWidget(diagramEngine: DiagramEngine, label: Label): JSX.Element {\n    return React.createElement(CustomLinkLabelWidget, {\n      model: label\n    });\n  }\n\n  getNewInstance(initialConfig?: any): Label {\n    return new Label(\"\");\n  }\n}\n","import * as React from \"react\";\nimport {\n  AbstractLinkFactory,\n  DiagramEngine,\n  DefaultLinkModel,\n  DefaultLinkWidget\n} from \"storm-react-diagrams\";\nimport { Link } from \"../models/Link\";\n\nexport class CustomLinkFactory extends AbstractLinkFactory<Link> {\n  constructor() {\n    super(\"custom\");\n  }\n\n  generateReactWidget(\n    diagramEngine: DiagramEngine,\n    link: DefaultLinkModel\n  ): JSX.Element {\n    return React.createElement(DefaultLinkWidget, {\n      link: link,\n      diagramEngine: diagramEngine\n    });\n  }\n\n  getNewInstance(initialConfig?: any): Link {\n    return new Link(\"custom\");\n  }\n\n  generateLinkSegment(\n    model: Link,\n    widget: DefaultLinkWidget,\n    selected: boolean,\n    path: string\n  ) {\n    return (\n      <path\n        className={selected ? widget.bem(\"--path-selected\") : \"\"}\n        strokeWidth={model.width}\n        stroke={model.color}\n        d={path}\n      />\n    );\n  }\n}\n","import * as SRD from \"storm-react-diagrams\";\nimport { CustomLabelFactory } from \"../../infrastructure/factories/CustomLabelFactory\";\nimport { CustomPortFactory } from \"../../infrastructure/factories/CustomPortFactory\";\nimport { CustomNodeFactory } from \"../../infrastructure/factories/CustomNodeFactory\";\nimport { CustomLinkLabelFactory } from \"../../infrastructure/factories/CustomLinkLabelFactory\";\nimport { CustomLinkFactory } from \"../../infrastructure/factories/CustomLinkFactory\";\n\nexport class Application {\n  protected activeModel: SRD.DiagramModel;\n  protected diagramEngine: SRD.DiagramEngine;\n\n  constructor() {\n    this.diagramEngine = new SRD.DiagramEngine();\n    this.diagramEngine.registerNodeFactory(new CustomLabelFactory());\n    this.diagramEngine.registerLinkFactory(new CustomLinkFactory());\n    this.diagramEngine.registerLabelFactory(new CustomLinkLabelFactory());\n    this.diagramEngine.registerNodeFactory(new CustomNodeFactory());\n    this.diagramEngine.registerPortFactory(new CustomPortFactory());\n    this.diagramEngine.installDefaultFactories();\n    this.newModel();\n  }\n\n  public newModel() {\n    this.activeModel = new SRD.DiagramModel();\n    this.diagramEngine.setDiagramModel(this.activeModel);\n  }\n\n  public getActiveDiagram(): SRD.DiagramModel {\n    return this.activeModel;\n  }\n\n  public getDiagramEngine(): SRD.DiagramEngine {\n    return this.diagramEngine;\n  }\n}\n","import * as React from \"react\";\n\nexport interface TrayItemWidgetProps {\n  model: any;\n  color?: string;\n  name: string;\n}\n\nexport interface TrayItemWidgetState {}\n\nexport class TrayItemWidget extends React.Component<\n  TrayItemWidgetProps,\n  TrayItemWidgetState\n> {\n  constructor(props: TrayItemWidgetProps) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n    return (\n      <div\n        style={{ borderColor: this.props.color }}\n        draggable={true}\n        onDragStart={event => {\n          event.dataTransfer.setData(\n            \"storm-diagram-node\",\n            JSON.stringify(this.props.model)\n          );\n        }}\n        className=\"tray-item\"\n      >\n        {this.props.name}\n      </div>\n    );\n  }\n}\n","import * as React from \"react\";\n\nexport interface TrayWidgetProps {}\n\nexport interface TrayWidgetState {}\n\nexport class TrayWidget extends React.Component<\n  TrayWidgetProps,\n  TrayWidgetState\n> {\n  public static defaultProps: TrayWidgetProps = {};\n\n  constructor(props: TrayWidgetProps) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n    return <div className=\"tray\">{this.props.children}</div>;\n  }\n}\n","import * as React from \"react\";\n\nimport { GridProps } from \"./\";\n\nexport default class Grid extends React.Component<GridProps> {\n  render() {\n    return (\n      <div style={this.props.style} className={this.buildClassNameString()}>\n        {this.props.children}\n      </div>\n    );\n  }\n\n  buildClassNameString() {\n    let className = \"ms-Grid\";\n\n    if (this.props.className != null) {\n      className += ` ${this.props.className}`;\n    }\n\n    return className;\n  }\n}\n","import * as React from \"react\";\n\nimport { GridRowProps } from \"./\";\n\nexport default class Row extends React.Component<GridRowProps> {\n  render() {\n    return (\n      <div className={this.buildClassNameString()}>{this.props.children}</div>\n    );\n  }\n\n  buildClassNameString() {\n    let className = \"ms-Grid-row\";\n\n    if (this.props.flex) {\n      className += \" grid-row-flex\";\n    }\n\n    if (this.props.className != null) {\n      className += ` ${this.props.className}`;\n    }\n\n    return className;\n  }\n}\n","import * as React from \"react\";\n\nimport { GridColProps, GridColConfigProp } from \"./\";\n\nexport default class Col extends React.Component<GridColProps> {\n  render() {\n    return (\n      <div\n        className={this.buildClassNameString()}\n        onDoubleClick={this.props.onDoubleClick}\n      >\n        {this.props.children}\n      </div>\n    );\n  }\n\n  buildGridColConfigClassNames(size: string, config: GridColConfigProp) {\n    if (config == null) return \"\";\n\n    let className = ` ms-${size}`;\n\n    if (typeof config === \"string\") {\n      className += config;\n    } else {\n      className += config.size;\n\n      if (config.pull != null) {\n        className += ` ms-${size}Pull${config.pull}`;\n      }\n\n      if (config.push != null) {\n        className += ` ms-${size}Push${config.push}`;\n      }\n\n      if (config.offset != null) {\n        className += ` ms-${size}Offset${config.offset}`;\n      }\n\n      if (config.order != null) {\n        className += ` grid-flex-order-${size}-${config.order}`;\n      }\n    }\n\n    return className;\n  }\n\n  buildClassNameString() {\n    let className = \"ms-Grid-col\";\n\n    if (this.props.className != null) {\n      className += ` ${this.props.className}`;\n    }\n\n    if (this.props.hidden != null) {\n      className += ` ms-hidden${this.props.hidden}`;\n    }\n\n    if (this.props.order != null) {\n      className += ` grid-flex-order-${this.props.order}`;\n    }\n\n    className += this.buildGridColConfigClassNames(\"sm\", this.props.sm);\n    className += this.buildGridColConfigClassNames(\"md\", this.props.md);\n    className += this.buildGridColConfigClassNames(\"lg\", this.props.lg);\n    className += this.buildGridColConfigClassNames(\"xl\", this.props.xl);\n    className += this.buildGridColConfigClassNames(\"xxl\", this.props.xxl);\n    className += this.buildGridColConfigClassNames(\"xxxl\", this.props.xxxl);\n\n    return className;\n  }\n}\n","import \"./PropertyTable.scss\";\nimport React, { useState } from \"react\";\nimport { PropertyType } from \"../../infrastructure/models/PropertyType\";\nimport { Port } from \"../../infrastructure/models/Port\";\nimport BootstrapTable from \"react-bootstrap-table-next\";\nimport { DiagramEngine } from \"storm-react-diagrams\";\nimport { Link } from \"../../infrastructure/models/Link\";\nimport { Node } from \"../../infrastructure/models/Node\";\nimport \"react-bootstrap-table-next/dist/react-bootstrap-table2.min.css\";\n\nclass Props {\n\tselectedItem: Node;\n\tdiagramEngine: DiagramEngine;\n\trelView?: boolean;\n}\n\nexport function useForceUpdate() {\n\tconst [value, setValue] = React.useState(0);\n\treturn () => setValue(value => ++value);\n}\n\nexport const PropertyTable = (props: Props) => {\n\tconst [updatedItem, setUpdatedItem] = React.useState(null);\n\n\tconst forceUpdate = useForceUpdate();\n\n\tReact.useMemo(() => {\n\t\tsetUpdatedItem(props.selectedItem);\n\t}, [props.selectedItem]);\n\n\tconst handleChangePK = (\n\t\tevent: React.ChangeEvent<HTMLInputElement>,\n\t\trow: Port\n\t) => {\n\t\tevent.persist();\n\t\t(updatedItem.getPortFromID(\n\t\t\trow.id\n\t\t) as Port).isPrimaryKey = !row.isPrimaryKey;\n\t\tforceUpdate();\n\t};\n\n\tconst handleChangeNull = (\n\t\tevent: React.ChangeEvent<HTMLInputElement>,\n\t\trow: Port\n\t) => {\n\t\tevent.persist();\n\t\t(updatedItem.getPortFromID(row.id) as Port).isNotNull = !row.isNotNull;\n\t\tforceUpdate();\n\t};\n\n\tconst handleChangeUnique = (\n\t\tevent: React.ChangeEvent<HTMLInputElement>,\n\t\trow: Port\n\t) => {\n\t\tevent.persist();\n\t\t(updatedItem.getPortFromID(row.id) as Port).isUnique = !row.isUnique;\n\t\tforceUpdate();\n\t};\n\n\tconst handleChangeAutoInc = (\n\t\tevent: React.ChangeEvent<HTMLInputElement>,\n\t\trow: Port\n\t) => {\n\t\tevent.persist();\n\t\t(updatedItem.getPortFromID(\n\t\t\trow.id\n\t\t) as Port).isAutoincremented = !row.isAutoincremented;\n\t\tforceUpdate();\n\t};\n\n\tconst handleChangepPropType = (\n\t\tevent: React.ChangeEvent<HTMLInputElement>,\n\t\trow: Port\n\t) => {\n\t\tevent.persist();\n\t\t(updatedItem.getPortFromID(row.id) as Port).propertyType = event.target\n\t\t\t.value;\n\t};\n\n\tconst handleChangePortLabel = (\n\t\tevent: React.ChangeEvent<HTMLInputElement>,\n\t\trow: Port\n\t) => {\n\t\tevent.persist();\n\t\t(updatedItem.getPortFromID(row.id) as Port).label = event.target.value;\n\t};\n\n\tconst addNewPort = (newPortNumber: number) => {\n\t\tupdatedItem.addInPort(\n\t\t\tfalse,\n\t\t\t`new atribute ${newPortNumber}`,\n\t\t\tfalse,\n\t\t\tfalse,\n\t\t\tfalse,\n\t\t\tfalse,\n\t\t\tfalse,\n\t\t\tPropertyType.INT\n\t\t);\n\t\tforceUpdate();\n\t};\n\n\tconst removePort = (port: Port) => {\n\t\tif (\n\t\t\tObject.entries(port.links).length !== 0 &&\n\t\t\tport.links.constructor === Object\n\t\t) {\n\t\t\tlet portLinks: Link[] = Object.keys(port.links).map(x => {\n\t\t\t\treturn port.links[x];\n\t\t\t});\n\t\t\tportLinks.forEach(p =>\n\t\t\t\tprops.diagramEngine.getDiagramModel().removeLink(p)\n\t\t\t);\n\t\t}\n\t\tupdatedItem.removePort(port);\n\t\tforceUpdate();\n\t};\n\n\tconst preparePropertyTypes = () => {\n\t\treturn Object.values(PropertyType).map(obj => (\n\t\t\t<option key={obj} value={obj}>\n\t\t\t\t{obj}\n\t\t\t</option>\n\t\t));\n\t};\n\n\tconst columns: any[] = [\n\t\t{\n\t\t\tdataField: \"label\",\n\t\t\ttext: \"Property Name\",\n\t\t\tformatter: (cellContent: any, row: Port) => (\n\t\t\t\t<div className=\"input\">\n\t\t\t\t\t<input\n\t\t\t\t\tstyle={{width: '100px'}}\n\t\t\t\t\t\tclassName=\"darkInput\"\n\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\tdefaultValue={row.label}\n\t\t\t\t\t\tonChange={event => handleChangePortLabel(event, row)}\n\t\t\t\t\t></input>\n\t\t\t\t</div>\n\t\t\t)\n\t\t},\n\t\t{\n\t\t\tstyle: { paddingLeft: 0 },\n\t\t\tdataField: \"propertyType\",\n\t\t\ttext: \"Property Type\",\n\t\t\tformatter: (cellContent: any, row: Port) => (\n\t\t\t\t<div className=\"input\">\n\t\t\t\t\t<input \n\t\t\t\t\tstyle={{width: '100px'}}\n\n\t\t\t\t\t\ttype=\"text\" \n\t\t\t\t\t\tlist=\"types\"\n\t\t\t\t\t\tclassName=\"darkInput\"\n\t\t\t\t\t\tonChange={event => handleChangepPropType(event, row)}\n\t\t\t\t\t\tdefaultValue={row.propertyType}\n\n\t\t\t\t\t/>\n\t\t\t\t\t<datalist id=\"types\">\n\t\t\t\t\t\t{preparePropertyTypes()}\n\t\t\t\t\t</datalist>\n\n\t\t\t\t</div>\n\t\t\t)\n\t\t},\n\t\t{\n\t\t\tdataField: \"isPrimaryKey\",\n\t\t\ttext: \"Is Primary Key\",\n\t\t\tformatter: (cellContent: any, row: Port) => (\n\t\t\t\t<div className=\"checkbox\">\n\t\t\t\t\t<label>\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\ttype=\"checkbox\"\n\t\t\t\t\t\t\tchecked={row.isPrimaryKey}\n\t\t\t\t\t\t\tonChange={event => handleChangePK(event, row)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</label>\n\t\t\t\t</div>\n\t\t\t)\n\t\t},\n\t\t{\n\t\t\tdataField: \"isNotNull\",\n\t\t\ttext: \"Is Nullable\",\n\t\t\tformatter: (cellContent: any, row: Port) => (\n\t\t\t\t<div className=\"checkbox\">\n\t\t\t\t\t<label>\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\ttype=\"checkbox\"\n\t\t\t\t\t\t\tchecked={row.isNotNull}\n\t\t\t\t\t\t\tonChange={event => handleChangeNull(event, row)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</label>\n\t\t\t\t</div>\n\t\t\t)\n\t\t},\n\t\t{\n\t\t\tdataField: \"isAutoincremented\",\n\t\t\ttext: \"Is Auto Incremented\",\n\t\t\tformatter: (cellContent: any, row: Port) => (\n\t\t\t\t<div className=\"checkbox\">\n\t\t\t\t\t<label>\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\ttype=\"checkbox\"\n\t\t\t\t\t\t\tchecked={row.isAutoincremented}\n\t\t\t\t\t\t\tonChange={event => handleChangeAutoInc(event, row)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</label>\n\t\t\t\t</div>\n\t\t\t)\n\t\t},\n\t\t{\n\t\t\tdataField: \"isUnique\",\n\t\t\ttext: \"Is Unique\",\n\t\t\tformatter: (cellContent: any, row: Port) => (\n\t\t\t\t<div className=\"checkbox\">\n\t\t\t\t\t<label>\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\ttype=\"checkbox\"\n\t\t\t\t\t\t\tchecked={row.isUnique}\n\t\t\t\t\t\t\tonChange={event => handleChangeUnique(event, row)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</label>\n\t\t\t\t</div>\n\t\t\t)\n\t\t},\n\t\t{\n\t\t\tdataField: \"remove\",\n\t\t\ttext: \"Remove\",\n\t\t\tformatter: (cellContent: any, row: Port) => (\n\t\t\t\t<div className=\"checkbox\">\n\t\t\t\t\t<label>\n\t\t\t\t\t\t<span\n\t\t\t\t\t\t\tonClick={() => removePort(row)}\n\t\t\t\t\t\t\tclassName=\"mi mi-Delete red\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t</label>\n\t\t\t\t</div>\n\t\t\t)\n\t\t}\n\t];\n\n\n\tlet ports =\n\t\tupdatedItem &&\n\t\tupdatedItem.ports &&\n\t\t(updatedItem.ports as { [s: string]: Port });\n\n\tlet portsTable: Port[] =\n\t\tports &&\n\t\tObject.keys(ports)\n\t\t\t.map(x => {\n\t\t\t\treturn ports[x];\n\t\t\t})\n\t\t\t.filter(p => !p.isNamePort);\n\n\n\treturn (\n\t\t<div>\n\t\t\t<BootstrapTable\n\t\t\t\tkeyField=\"id\"\n\t\t\t\tdata={portsTable}\n\t\t\t\tcolumns={props.relView ? columns.filter(col => col.dataField !== 'isPrimaryKey') : columns}\n\t\t\t\tbordered={false}\n\t\t\t/>\n\t\t\t<p\n\t\t\t\tclassName=\"mouse-cursor\"\n\t\t\t\tonClick={() => addNewPort(portsTable.length)}\n\t\t\t>\n\t\t\t\tAdd new atribute\n      </p>\n\t\t</div>\n\t);\n};\n","import \"./NodeProperties.scss\";\nimport * as React from \"react\";\nimport { DiagramEngine } from \"storm-react-diagrams\";\nimport { Node } from \"../../infrastructure/models/Node\";\n\nimport { Col, Row, Grid } from \"../grid\";\nimport { PropertyTable } from \"../propertyTable/PropertyTable\";\n\nclass Props {\n  selectedItem: Node;\n  diagramEngine: DiagramEngine;\n}\n\nexport function useForceUpdate() {\n  const [value, setValue] = React.useState(0);\n  return () => setValue(value => ++value);\n}\n\nexport const NodeProperties = (props: Props) => {\n  const [updatedItem, setUpdatedItem] = React.useState(null);\n  const [defaultName, setDefaultName] = React.useState(\"\");\n\n  const [name, setName] = React.useState(\"\");\n  const [showInput, setShowInput] = React.useState(false);\n\n  const forceUpdate = useForceUpdate();\n\n  React.useMemo(() => {\n    setUpdatedItem(props.selectedItem);\n    setName(props.selectedItem.name);\n    setDefaultName(props.selectedItem.name);\n  }, [props.selectedItem]);\n\n\n  const handleNameChange = (event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement >) => {\n    event.persist();\n    let allNodes = props.diagramEngine.diagramModel.getNodes() as {\n      [id: string]: Node;\n    };\n    let names = Object.values(allNodes).map(node => allNodes[node.id].name);\n\n    names.includes(event.target.value)\n      ? updatedItem.name = defaultName\n      : updatedItem.name = event.target.value;\n    forceUpdate();\n  };\n\n      const iconStyles: React.CSSProperties = {\n        display: \"flex\",\n        flexDirection: 'row',\n        flexFlow: 'row-reverse',\n        position: 'absolute',\n        right: '0',\n        top: '10px',\n        zIndex: 9999\n      };\n\n\n      const acceptStyle: React.CSSProperties = {\n        marginRight: 5,\n        backgroundColor: 'green',\n        borderRadius: '90px',\n        padding: '10px',\n      };\n\n      const declineStyle: React.CSSProperties = {\n        marginRight: '20px',\n        backgroundColor: 'red',\n        borderRadius: '90px',\n        padding: '10px',\n      };\n\n  if (!updatedItem) return null;\n  else\n    return (\n      <div className=\"trayBottom\">\n        {/* <div style={iconStyles}>\n              <span\n                style={declineStyle}\n                className={`mi ${\n                  \"mi-Cancel\"\n                }`}\n              />\n                <span\n                  style={acceptStyle}\n                  className={`mi ${\n                    \"mi-Accept\"\n                  }`}\n                />\n            </div> */}\n        <Grid>\n          <Row>\n          \n            <Col >\n              {!showInput ? (\n                \n                <h1 style={{wordBreak: 'break-all'}} onDoubleClick={() => setShowInput(true)}>{name}</h1>\n              ) : (\n                props.selectedItem.isLabel ? \n                <textarea\n                style={{height: '200px'}}\n                className=\"darkInput fs-24\"\n                defaultValue={name}\n                onChange={event => handleNameChange(event)}\n                >\n\n                </textarea> :\n                <input\n                  className=\"darkInput fs-24\"\n                  defaultValue={name}\n                  onChange={event => handleNameChange(event)}\n                />\n              )}\n              \n            </Col>\n            \n            {!updatedItem.isLabel ? (\n        <PropertyTable selectedItem={props.selectedItem} diagramEngine={props.diagramEngine}/> \n            ) : null}\n          </Row>\n        </Grid>\n      </div>\n    );\n};\n","import \"./ResultPopup.scss\";\nimport React, { useState } from \"react\";\nimport Popup from \"reactjs-popup\";\nimport sqlFormatter from \"sql-formatter\";\nimport FileSaver from \"file-saver\";\n\nclass Props {\n  isOpen: boolean;\n  generateScript?: (name: string) => void;\n  mssqlString?: string;\n  update: () => void;\n}\n\nexport const ResultPopup = (props: Props) => {\n  const [dbName, setDbName] = useState(\"DatabaseName\");\n\n  const formatedSQL =\n    props.mssqlString &&\n    sqlFormatter.format(props.mssqlString, {\n      language: \"sql\", // Defaults to \"sql\"\n      indent: \"  \" // Defaults to two spaces\n    });\n\n  const downloadMSSQL = () => {\n    var blob = new Blob([formatedSQL], { type: \"text/plain;charset=utf-8\" });\n    FileSaver.saveAs(blob, `${dbName}.sql`);\n    props.update();\n  };\n\n  return (\n    <Popup modal closeOnDocumentClick open={props.isOpen} closeOnEscape>\n      <div className=\"sql-result-dialog\">\n        <input\n          style={{ marginRight: \"10px\" }}\n          type=\"text\"\n          onChange={event => setDbName(event.target.value)}\n          value={dbName}\n        />\n        <button onClick={() => props.generateScript(dbName)}>Generate</button>\n        <textarea\n          style={{ marginTop: \"5px\" }}\n          readOnly={true}\n          value={formatedSQL}\n          contentEditable={false}\n        ></textarea>\n        <button style={{ marginRight: \"10px\" }} onClick={downloadMSSQL}>\n          Download MSSQL\n        </button>\n      </div>\n    </Popup>\n  );\n};\n","import { ResultPopup } from \"../components/popups/ResultPopup/ResultPopup\";\nimport React, { useState } from \"react\";\nimport axios from \"axios\";\n\nclass Props {\n  isOpen: boolean;\n  serializeDiagram: any;\n  update: () => void;\n}\n\nexport const GenerationHandler = (props: Props) => {\n  const [sqlString, setSqlString] = useState(\"\");\n\n  const generateScript = async (name: string) => {\n    console.log(props.serializeDiagram)\n    let diagram = JSON.stringify(props.serializeDiagram, null, 2);\n    let response = await axios.post(\"http://localhost:5000/api/setjob\", {\n      SerializedModel: diagram,\n      DatabaseName: name\n    });\n\n    if (response.status === 200) {\n      setSqlString(response.data);\n    } else {\n      console.log(\"there was an error while processing your request\");\n    }\n  };\n\n  return (\n    <ResultPopup\n      update={props.update}\n      mssqlString={sqlString}\n      generateScript={name => generateScript(name)}\n      isOpen={props.isOpen}\n    />\n  );\n};\n","import \"./RelationPopup.scss\";\nimport React, { useState } from \"react\";\nimport Popup from \"reactjs-popup\";\nimport { Link } from \"../../../infrastructure/models/Link\";\nimport { Label } from \"../../../infrastructure/models/Label\";\nimport { Node } from \"../../../infrastructure/models/Node\";\nimport { DiagramModel, DiagramEngine } from \"storm-react-diagrams\";\nimport { Port } from \"../../../infrastructure/models/Port\";\nimport { PropertyType } from \"../../../infrastructure/models/PropertyType\";\nimport { PropertyTable } from \"../../../components/propertyTable/PropertyTable\";\n\n\nclass Props {\n  isOpen: boolean;\n  link: Link;\n  update: () => void;\n  diagramModel: DiagramModel;\n  diagramEngine: DiagramEngine;\n}\nexport const RelationPopup = (props: Props) => {\n  const [left, setLeft] = useState(\"0, N\");\n\n  const [right, setRight] = useState(\"0, N\");\n\n  const [relationName, setRelationName] = useState(\"relation name\");\n\n  React.useEffect(() => {\n    console.log('link', props.link);\n    let leftLabel = props.link && props.link.labels.length > 0 && (props.link.labels[0] as Label).label;\n    let relLabel = props.link && props.link.labels.length > 0 && (props.link.labels[1] as Label).label;\n    let rightLabel = props.link && props.link.labels.length > 0 && (props.link.labels[2] as Label).label;\n\n    setLeft(leftLabel ? leftLabel : \"O, N\");\n    setRelationName(relLabel ? relLabel : \"relation name\");\n    setRelationName(rightLabel ? rightLabel : \"O, N\");\n\n  }, [props.link]);\n\n  let update = () => {\n    let labels = props.link.labels as Label[];\n    labels[0].label = left;\n    labels[2].label = right;\n    labels[1].label = relationName;\n    let points = props.link.points;\n    for (let index = 1; index < points.length - 1; index++) {\n      const element = points[index];\n      element.remove();\n    }\n    props.update();\n  };\n\n  const sourcePort =\n    props.link &&\n    props.link.sourcePort &&\n    (props.link.sourcePort.parent as Node);\n  const targetPort =\n    props.link &&\n    props.link.targetPort &&\n    (props.link.targetPort.parent as Node);\n\n  const remove = () => {\n    const sourceP = props.link && props.link.sourcePort;\n    const targetP = props.link && props.link.targetPort;\n    sourceP.removeLink(props.link);\n    targetP.removeLink(props.link);\n\n    props.diagramModel.removeLink(props.link);\n    props.update();\n  };\n\n  const options = (\n    <>\n      <option value=\"1, N\">1, N</option>\n      <option value=\"0, N\">0, N</option>\n      <option value=\"0, 1\">0, 1</option>\n      <option value=\"1, 1\">1, 1</option>\n      <option value=\"N, N\">N, N</option>\n    </>\n  );\n\n  const renderOptionPicker = (side: string) => {\n    return (\n      <div className=\"grid-item\">\n        <select\n          className=\"darkSelect\"\n          onChange={event =>\n            side === \"left\"\n              ? setLeft(event.target.value)\n              : setRight(event.target.value)\n          }\n          value={side === \"left\" ? left : right}\n        >\n          {options}\n        </select>\n      </div>\n    );\n  };\n\n  return (\n    <Popup modal closeOnDocumentClick open={props.isOpen} closeOnEscape>\n      <div className=\"SQLResultDialog\">\n        <div className=\"grid-container\">\n          <div className=\"grid-item\">\n            <p>{sourcePort && sourcePort.name}</p>\n          </div>\n          <div className=\"grid-item\">\n            <input\n              className=\"darkInput\"\n              type=\"text\"\n              defaultValue={relationName}\n              onChange={event => setRelationName(event.target.value)}\n            ></input>\n          </div>\n          <div className=\"grid-item\">\n            <p>{targetPort && targetPort.name}</p>\n          </div>\n          {renderOptionPicker(\"left\")}\n          <div className=\"grid-item\">\n            <button onClick={update}>SAVE</button>\n          </div>\n          {renderOptionPicker(\"right\")}\n          {/* <div className=\"grid-item\" /> */}\n          <div className=\"grid-item\">\n     \n          </div>\n          <div className=\"grid-item\">\n            <button onClick={remove}>Remove</button>\n          </div>\n          {/* <div className=\"grid-item\" /> */}\n        </div>\n        {props.link && left.includes('N') && right.includes('N') && <PropertyTable relView={true} diagramEngine={props.diagramEngine} selectedItem={props.link.properties}/>}\n      </div>\n      \n    </Popup>\n  );\n};\n","import \"./LoadFilePopup.scss\";\nimport React, { useState } from \"react\";\nimport Popup from \"reactjs-popup\";\n\nclass Props {\n  isOpen: boolean;\n  loadDiagram?: (name: string) => void;\n  update: () => void;\n}\n\nexport const LoadFilePopup = (props: Props) => {\n  let fileReader: FileReader;\n\n  const [fileContent, setFileContent] = useState(\"\");\n\n  const handleFileRead = (e: any) => {\n    const content = fileReader.result;\n    setFileContent(content as string);\n  };\n\n  const handleFileChosen = (name: any) => {\n    fileReader = new FileReader();\n    fileReader.onloadend = handleFileRead;\n    fileReader.readAsText(name);\n  };\n\n  return (\n    <Popup\n      modal\n      closeOnDocumentClick\n      open={props.isOpen}\n      closeOnEscape\n      onClose={() => props.update()}\n    >\n      <div className=\"sql-result-dialog\">\n        <input\n          type=\"file\"\n          onChange={event => handleFileChosen(event.target.files[0])}\n          accept=\".dbjson\"\n        />\n        <button onClick={() => props.loadDiagram(fileContent)}>Load</button>\n      </div>\n    </Popup>\n  );\n};\n","import { LoadFilePopup } from \"../components/popups/LoadFilePopup/LoadFilePopup\";\nimport React from \"react\";\nimport { Application } from \"../components/dragAndDrop/Application\";\nimport { DiagramModel } from \"storm-react-diagrams\";\n\nclass Props {\n  isOpen: boolean;\n  app: Application;\n  update: () => void;\n}\n\nexport const LoadFileHandler = (props: Props) => {\n  const loadDiagram = (name: string) => {\n    let engine = props.app.getDiagramEngine();\n    let obj: ReturnType<DiagramModel[\"serialize\"]> = JSON.parse(name);\n    let model2 = new DiagramModel();\n    model2.deSerializeDiagram(obj, engine);\n    let newLinks: any[] = Object.keys(model2.links).map(x => {\n      return model2.links[x];\n    });\n\n    newLinks.forEach(link => {\n      link.labels.splice(0, 3);\n    });\n    engine.setDiagramModel(model2);\n    engine.repaintCanvas();\n    console.log(engine.diagramModel.serializeDiagram());\n    props.update();\n  };\n\n  return (\n    <LoadFilePopup\n      update={props.update}\n      loadDiagram={name => loadDiagram(name)}\n      isOpen={props.isOpen}\n    />\n  );\n};\n","import \"./SaveToFilePopup.scss\";\nimport React, { useState } from \"react\";\nimport Popup from \"reactjs-popup\";\nimport { DiagramModel } from \"storm-react-diagrams\";\nimport FileSaver from \"file-saver\";\n\nclass Props {\n  isOpen: boolean;\n  diagramModel: DiagramModel;\n  update: () => void;\n}\n\nexport const SaveToFilePopup = (props: Props) => {\n  const [fileName, setFileName] = useState(\"diagram\");\n\n  const download = () => {\n    const diagramJson = JSON.stringify(props.diagramModel.serializeDiagram());\n    console.log('diargam-save', diagramJson);\n    let blob = new Blob([diagramJson], { type: \"text/plain;charset=utf-8\" });\n    FileSaver.saveAs(blob, `${fileName}.dbjson`);\n    props.update();\n  };\n\n  return (\n    <Popup\n      modal\n      closeOnDocumentClick\n      open={props.isOpen}\n      closeOnEscape\n      onClose={() => props.update()}\n    >\n      <div className=\"sql-result-dialog\">\n        <input\n          type=\"text\"\n          onChange={event => setFileName(event.target.value)}\n          value={fileName}\n        />\n        <button onClick={download}>save</button>\n      </div>\n    </Popup>\n  );\n};\n","import \"./SaveToJpegPopup.scss\";\nimport React, { useState } from \"react\";\nimport Popup from \"reactjs-popup\";\nimport { DiagramModel } from \"storm-react-diagrams\";\nimport domtoimage from \"dom-to-image\";\n\nclass Props {\n  isOpen: boolean;\n  diagramModel: DiagramModel;\n  update: () => void;\n}\n\nexport const SaveToJpegPopup = (props: Props) => {\n  const [fileName, setFileName] = useState(\"diagram\");\n\n  const download = () => {\n    domtoimage\n      .toJpeg(document.getElementById(\"diagram-layer\"), { quality: 0.95 })\n      .then((dataUrl: any) => {\n        let link = document.createElement(\"a\");\n        link.download = `${fileName}.jpeg`;\n        link.href = dataUrl;\n        link.click();\n        props.update();\n      });\n  };\n\n  return (\n    <Popup\n      modal\n      closeOnDocumentClick\n      open={props.isOpen}\n      closeOnEscape\n      onClose={() => props.update()}\n    >\n      <div className=\"sql-result-dialog\">\n        <input\n          type=\"text\"\n          onChange={event => setFileName(event.target.value)}\n          value={fileName}\n        />\n        <button onClick={download}>save</button>\n      </div>\n    </Popup>\n  );\n};\n","import * as React from \"react\";\n\nimport { DiagramWidget, PointModel } from \"storm-react-diagrams\";\nimport { TrayItemWidget } from \"./components/dragAndDrop/TrayItemWidget\";\nimport { TrayWidget } from \"./components/dragAndDrop/TrayWidget\";\nimport { Application } from \"./components/dragAndDrop/Application\";\nimport { Node } from \"./infrastructure/models/Node\";\nimport { Link } from \"./infrastructure/models/Link\";\nimport { PropertyType } from \"./infrastructure/models/PropertyType\";\nimport {\n  NodeProperties,\n  useForceUpdate\n} from \"./components/nodeProperties/NodeProperties\";\nimport { GenerationHandler } from \"./handlers/GenerationHandler\";\nimport { RelationPopup } from \"./components/popups/RealtionPopup/RelationPopup\";\nimport { LoadFileHandler } from \"./handlers/LoadFileHandler\";\nimport { SaveToFilePopup } from \"./components/popups/SaveToFilePopup/SaveToFilePopup\";\nimport { CSSProperties } from \"react\";\nimport { SaveToJpegPopup } from \"./components/popups/SaveToJpegPopup/SaveToJpegPopup\";\nimport _ from \"lodash\";\n\nrequire(\"storm-react-diagrams/dist/style.min.css\");\nrequire(\"react-bootstrap-table-next/dist/react-bootstrap-table2.min.css\");\n\ninterface Props {\n  app: Application;\n}\n\nexport const AppView = (props: Props) => {\n  const jpegFileTarget: React.RefObject<any> = null;\n\n  const [showDialog, setShowDialog] = React.useState(false);\n  const [showRelationDialog, setShowRelationDialog] = React.useState(false);\n  const [showLoadFileDialog, setShowLoadFileDialog] = React.useState(false);\n  const [showSaveFileDialog, setSaveFileDialog] = React.useState(false);\n  const [showSaveJPEGDialog, setSaveJPEGDialog] = React.useState(false);\n  const [showSaveOptions, setSaveOptions] = React.useState(false);\n\n  const [selectedNode, setSelectedNode] = React.useState(null);\n  const [selectedLink, setSelectedLink] = React.useState(null);\n\n  const forceUpdate = useForceUpdate();\n\n  React.useEffect(() => {\n    setSelectedNode(null);\n    setSelectedLink(null);\n  }, []);\n\n  const refreshPopups = () => {\n    setSelectedLink(null);\n    setSelectedNode(null);\n\n    setShowDialog(false);\n    setSaveFileDialog(false);\n    setSaveJPEGDialog(false);\n    setSaveOptions(false);\n    setShowLoadFileDialog(false);\n    setShowRelationDialog(false);\n  };\n\n  const containerStyles: CSSProperties = {\n    display: \"flex\",\n    justifyContent: \"space-between\",\n    borderColor: \"rgb(255,123,0)\"\n  };\n  const itemStyles: CSSProperties = {\n    display: \"inline-block\",\n    paddingTop: 3,\n    paddingRight: 5\n  };\n\n  return (\n    <div className=\"body\">\n      <div className=\"header\">\n        <div className=\"title\">DB Diagram Scripter</div>\n      </div>\n      <div className=\"content\" ref={jpegFileTarget}>\n        <TrayWidget>\n          <TrayItemWidget\n            model={{ type: \"table\" }}\n            name=\"Entity\"\n            color=\"rgb(0,192,255)\"\n          />\n          <TrayItemWidget\n            model={{ type: \"label\" }}\n            name=\"Label\"\n            color=\"rgb(192,255,0)\"\n          />\n\n          <div\n            style={{ borderColor: \"rgb(255,123,0)\", marginTop: \"100px\" }}\n            className=\"tray-item\"\n            onClick={() => {\n              setShowLoadFileDialog(true);\n              setSelectedNode(null);\n            }}\n          >\n            Load Diagram\n          </div>\n          <div\n            style={containerStyles}\n            className=\"tray-item\"\n            onClick={() => {\n              setSaveOptions(!showSaveOptions);\n              setSelectedNode(null);\n            }}\n          >\n            Save\n            <span\n              style={itemStyles}\n              className={`mi ${\n                !showSaveOptions ? \"mi-ArrowDown8\" : \"mi-ArrowUp8\"\n              }`}\n            />\n          </div>\n          {showSaveOptions && (\n            <div\n              style={{ borderColor: \"rgb(255,123,0)\" }}\n              className=\"tray-item\"\n              onClick={() => {\n                setSaveFileDialog(true);\n                setSelectedNode(null);\n              }}\n            >\n              File\n            </div>\n          )}\n          {showSaveOptions && (\n            <div\n              style={{ borderColor: \"rgb(255,123,0)\" }}\n              className=\"tray-item\"\n              onClick={() => {\n                setSaveJPEGDialog(true);\n                setSelectedNode(null);\n              }}\n            >\n              JPEG\n            </div>\n          )}\n          <div\n            style={{ borderColor: \"rgb(255,0,0)\", marginTop: \"100px\" }}\n            className=\"tray-item\"\n            onClick={() => {\n              setShowDialog(true);\n              setSelectedNode(null);\n            }}\n          >\n            Create DB Code\n          </div>\n        </TrayWidget>\n\n        <div\n          id=\"diagram-layer\"\n          className=\"diagram-layer\"\n          onDrop={event => {\n            event.preventDefault();\n            var data = JSON.parse(\n              event.dataTransfer.getData(\"storm-diagram-node\")\n            );\n            var nodesCount = _.keys(\n              props.app\n                .getDiagramEngine()\n                .getDiagramModel()\n                .getNodes()\n            ).length;\n\n            var node = null;\n            if (data.type === \"table\") {\n              node = new Node(\n                false,\n                `Entity${nodesCount + 1}`,\n                \"rgb(0,192,255)\"\n              );\n              node.addInPort(\n                false,\n                \"Id\",\n                true,\n                false,\n                false,\n                false,\n                false,\n                PropertyType.INT\n              );\n              node.addInPort(\n                true,\n                \"\",\n                false,\n                false,\n                false,\n                false,\n                false,\n                PropertyType.INT\n              );\n              node.addInPort(\n                true,\n                \"1\",\n                false,\n                false,\n                false,\n                false,\n                false,\n                PropertyType.INT\n              );\n\n              node.addListener({});\n            } else {\n              node = new Node(\n                true,\n                \"Label \",\n                \"rgb(192,255,0)\"\n              );\n            }\n\n            var points = props.app\n              .getDiagramEngine()\n              .getRelativeMousePoint(event);\n            node.x = points.x;\n            node.y = points.y;\n            props.app\n              .getDiagramEngine()\n              .getDiagramModel()\n              .addNode(node);\n\n            forceUpdate();\n          }}\n          onDragOver={event => {\n            event.preventDefault();\n          }}\n          onClick={event => {\n            event.preventDefault();\n            refreshPopups();\n          }}\n          onDoubleClick={event => {\n            event.preventDefault();\n            if (\n              props.app\n                .getDiagramEngine()\n                .getDiagramModel()\n                .getSelectedItems()[0] instanceof PointModel\n            ) {\n              console.log('zmiana linku')\n              setSelectedLink(\n                props.app\n                  .getDiagramEngine()\n                  .getDiagramModel()\n                  .getSelectedItems()[0].parent as Link\n              );\n              setShowRelationDialog(true);\n              setSelectedNode(null);\n            } else if (\n              props.app\n                .getDiagramEngine()\n                .getDiagramModel()\n                .getSelectedItems()[0] instanceof Node\n            ) {\n              refreshPopups();\n              setSelectedNode(\n                props.app\n                  .getDiagramEngine()\n                  .getDiagramModel()\n                  .getSelectedItems()[0] as Node\n              );\n            }\n          }}\n        >\n          <DiagramWidget\n            allowLooseLinks={true}\n            deleteKeys={[46]}\n            className=\"srd-demo-canvas\"\n            diagramEngine={props.app.getDiagramEngine()}\n          />\n        </div>\n        {selectedNode != null ? (\n          <NodeProperties\n            selectedItem={selectedNode}\n            diagramEngine={props.app.getDiagramEngine()}\n          />\n        ) : null}\n        <GenerationHandler\n          update={refreshPopups}\n          isOpen={showDialog}\n          serializeDiagram={props.app.getDiagramEngine().diagramModel.serializeDiagram()}\n\n        />\n        <LoadFileHandler\n          update={refreshPopups}\n          isOpen={showLoadFileDialog}\n          app={props.app}\n        />\n        <SaveToFilePopup\n          update={refreshPopups}\n          diagramModel={props.app.getDiagramEngine().diagramModel}\n          isOpen={showSaveFileDialog}\n        />\n        <SaveToJpegPopup\n          update={refreshPopups}\n          diagramModel={props.app.getActiveDiagram()}\n          isOpen={showSaveJPEGDialog}\n        />\n\n        <RelationPopup\n          diagramModel={props.app.getActiveDiagram()}\n          diagramEngine={props.app.getDiagramEngine()}\n\n          update={refreshPopups}\n          isOpen={showRelationDialog}\n          link={selectedLink}\n        />\n      </div>\n    </div>\n  );\n};\n","import * as React from \"react\";\nimport { Application } from \"./components/dragAndDrop/Application\";\nimport { AppView } from \"./AppView\";\nrequire(\"react-bootstrap-table-next/dist/react-bootstrap-table2.min.css\");\nrequire(\"storm-react-diagrams/dist/style.min.css\");\n\nexport const App = () => {\n  return <AppView app={new Application()} />;\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import \"./styles/index.scss\";\nimport \"./styles/App.scss\";\nimport \"./styles/dragAndDrop.scss\";\nimport \"./icons/micon/css/micon.min.css\";\nimport \"react-bootstrap-table-next/dist/react-bootstrap-table2.min.css\";\nimport { App } from \"./App\";\nimport * as ReactDOM from \"react-dom\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport * as React from \"react\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}