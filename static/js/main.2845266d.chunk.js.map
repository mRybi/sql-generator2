{"version":3,"sources":["components/TrayWidget.tsx","components/TrayItemWidget.tsx","helpers/DemoCanvasWidget.tsx","infrastructure/models/ArrowLinkModel.ts","infrastructure/models/DefaultLabelModel.tsx","infrastructure/models/DefaultNodeModel.ts","infrastructure/models/DefaultLinkModel.ts","infrastructure/Toolkit.ts","infrastructure/models/DefaultPortModel.ts","infrastructure/models/ArrowPortModel.ts","components/TrayItemDiv.tsx","infrastructure/models/PropertyType.ts","components/grid/Grid.tsx","components/grid/Row.tsx","components/grid/Col.tsx","components/PropertyTable/PropertyTable.tsx","components/DarkInput.tsx","components/NodeProperties/NodeProperties.tsx","components/popups/ResultPopup/ResultPopup.tsx","handlers/GenerationHandler.tsx","components/popups/LoadFilePopup/LoadFilePopup.tsx","handlers/LoadFileHandler.tsx","components/popups/SaveToFilePopup/SaveToFilePopup.tsx","components/popups/SaveToJpegPopup/SaveToJpegPopup.tsx","components/popups/RealtionPopup/RelationPopup.tsx","components/BodyWidget.tsx","infrastructure/widgets/ArrowLinkWidget.tsx","infrastructure/factories/ArrowLinkFactory.tsx","infrastructure/widgets/DefaultPortLabelWidget.tsx","infrastructure/widgets/DefaultNodeWidget.tsx","infrastructure/factories/DefaultNodeFactory.tsx","infrastructure/widgets/DefaultLabelWidget.tsx","infrastructure/factories/DefaultLabelFactory.tsx","infrastructure/factories/DefaultPortFactory.tsx","infrastructure/widgets/DefaultLinkPointWidget.tsx","infrastructure/widgets/DefaultLinkSegmentWidget.tsx","infrastructure/widgets/DefaultLinkWidget.tsx","infrastructure/factories/DefaultLinkFactory.tsx","infrastructure/widgets/CustomLabelWidget.tsx","infrastructure/factories/CustomLabelFactory.tsx","infrastructure/factories/ArrowPortFactory.tsx","components/Application.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["S","styled","div","TrayWidget","Tray","this","props","children","React","p","color","TrayItemWidget","draggable","onDragStart","event","dataTransfer","setData","JSON","stringify","model","name","Container","background","DemoCanvasWidget","ArrowLinkModel","options","type","width","selectedColor","curvyness","DefaultLinkModel","DefaultLabelModel","offsetY","label","data","LabelModel","DefaultNodeModel","isLabel","portsIn","lookupTable","clone","portsOut","port","getOptions","in","indexOf","push","_","portsInOrder","id","getPortFromID","NodeModel","addLabel","properties","alignment","PortModelAlignment","RIGHT","LEFT","TOP","points","length","curve","BezierCurve","setSource","getFirstPoint","getPosition","setTarget","getLastPoint","setSourceControl","setTargetControl","sourcePort","getSourceControl","translate","calculateControlOffset","getSourcePort","targetPort","getTargetControl","getTargetPort","getSVGCurve","relPorts","getPorts","Object","values","map","a","propertyType","isPrimaryKey","isNotNull","isAutoincremented","isUnique","propertiesNode","forEach","rel","addPort","DefaultPortModel","labelOb","setLabel","fireEvent","LinkModel","Toolkit","TESTING","TESTING_UID","replace","c","r","Math","random","toString","element","selector","document","body","closest","logic","isNamePort","isForeignKey","isPartialKey","fkPortId","alignemnt","UID","links","factory","link","createLinkModel","setSourcePort","setTargetPort","generateModel","PortModel","AdvancedPortModel","thisParent","getParent","portNode","portNodePorts","thisParentPorts","czyMaPortZPKjakoFk","keys","find","czyMaPortZPKjakoFk2","pk","marginTop","isSelected","css","isDisabled","PropertyType","TrayItemDiv","Grid","style","className","buildClassNameString","Row","flex","Col","onDoubleClick","size","config","pull","offset","order","hidden","buildGridColConfigClassNames","sm","md","lg","xl","xxl","xxxl","PropertyTable","useState","updatedItem","setUpdatedItem","forceUpdate","setValue","value","useForceUpdate","useMemo","selectedItem","handleChangePK","row","persist","ports","console","log","clearPartialKeys","columns","dataField","text","formatter","cellContent","defaultValue","onChange","target","handleChangePortLabel","paddingLeft","list","handleChangepPropType","obj","key","checked","handleChangeFK","handleChangePartialKey","disabled","handleChangeNull","handleChangeAutoInc","handleChangeUnique","onClick","removePort","portsTable","x","filter","cols","col","isLogic","relView","keyField","bordered","AddNewAtributeButton","newPortNumber","input","fontSize","DarkInput","Input","NodeProperties","defaultName","setDefaultName","setName","showInput","setShowInput","setLocked","handleNameChange","diagramEngine","getModel","getNodes","node","toLowerCase","trim","includes","height","wordBreak","ResultPopup","dbName","setDbName","mySQLView","setmySQLView","formatedMSSQL","mssqlString","sqlFormatter","format","language","indent","formatedMySQL","mysqlString","modal","closeOnDocumentClick","open","isOpen","closeOnEscape","marginRight","generateScript","readOnly","contentEditable","blob","Blob","FileSaver","saveAs","update","GenerationHandler","sqlString","setSqlString","setMySqlString","useEffect","serDiagram","serializeDiagram","dNodes","nodes","dLinks","diagramJson","diagram","axios","post","SerializedModel","DatabaseName","RelationType","isUml","DiagramType","response","responseMy","status","LoadFilePopup","fileReader","fileContent","setFileContent","handleFileRead","e","content","result","onClose","files","FileReader","onloadend","readAsText","accept","loadDiagram","LoadFileHandler","engine","app","getDiagramEngine","parse","setIsUml","setIsLogic","model2","DiagramModel","deserializeModel","getLinks","getLabels","splice","loadLogicModel","loadConceptualModel","repaintCanvas","error","SaveToFilePopup","fileName","setFileName","diagramModel","serialize","SaveToJpegPopup","domtoimage","toJpeg","getElementById","quality","then","dataUrl","createElement","download","href","click","RelationPopup","left","setLeft","right","setRight","relationName","setRelationName","leftLabel","relLabel","rightLabel","remove","sourceP","targetP","removeLink","renderOptionPicker","side","GridItem","newSourceP","newTargetP","addLink","GridContainer","labels","getPoints","index","margin","span","BodyWidget","showDialog","setShowDialog","showRelationDialog","setShowRelationDialog","showLoadFileDialog","setShowLoadFileDialog","showSaveFileDialog","setSaveFileDialog","showSaveJPEGDialog","setSaveJPEGDialog","showSaveOptions","setSaveOptions","selectedNode","setSelectedNode","selectedLink","setSelectedLink","isLogicModel","setIsLogicModel","changeRelation","temp","substring","temp2","refreshPopups","Body","Header","Content","DropdownIcon","setConceptualModel","setLogicModel","Layer","onDrop","getData","names","nodesCount","newNodeName","point","getRelativeMousePoint","setPosition","addNode","onDragOver","preventDefault","ctrlKey","getSelectedEntities","PointModel","getActiveDiagram","CustomLinkArrowWidget","previousPoint","setSelected","angle","atan2","y","PI","transform","fill","onMouseLeave","onMouseEnter","data-id","getID","data-linkid","getLink","ArrowLinkWidget","colorSelected","paths","refPaths","j","generateLink","LinkWidget","generateLinePath","onMouseDown","addPointToLink","i","generateArrow","generatePoint","data-default-link-test","testName","DefaultLinkWidget","ArrowLinkFactory","DefaultLinkFactory","PortItem","DefaultPortLabel","portJSX","Port","PortLabel","PrimaryKeyIcon","NamedPort","PortContainer","HiddenPort","selected","DefaultNodeWidget","generatePort","portsJSX","namedPortsJSX","notNamedPortsJSX","Node","data-default-node-name","Title","NamedPortLeft","TitleName","NamedPortRight","Ports","PortsContainer","DefaultNodeFactory","AbstractReactFactory","DefaultLabelWidget","Label","DefaultLabelFactory","DefaultPortFactory","AbstractModelFactory","PointTop","circle","DefaultLinkPointWidget","state","cx","cy","setState","opacity","DefaultLinkSegmentWidget","Bottom","generateLinkSegment","path","ref","forwardRef","Top","strokeLinecap","onSelection","extras","strokeOpacity","strokeWidth","onContextMenu","isLocked","setRenderedPaths","current","shiftKey","getMaxNumberPointsPerLink","position","addPoint","stopPropagation","getActionEventBus","fireAction","extraProps","getFactoryForLink","getSVGPath","Keyframes","keyframes","Path","stroke","d","CustomLabelWidget","CustomLabelFactory","ArrowPortFactory","Application","createEngine","getNodeFactories","registerFactory","getLabelFactories","getPortFactories","getLinkFactories","getStateMachine","getCurrentState","DefaultDiagramState","dragNewLink","allowLooseLinks","newModel","activeModel","logicModel","setModel","concNodes","k","nodePorts","logicPort","concLinks","logicNodes","sourceNode","sourceNodeId","targetNode","targetNodeId","sourceLabel","targetLabel","relNode","n","node2","targetP2","sourceP2","link2","addAll","tNode","activeModelCopy","Boolean","window","location","hostname","match","ReactDOM","render","App","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.2845266d.chunk.js","sourcesContent":["import * as React from \"react\";\nimport styled from \"@emotion/styled\";\n\nnamespace S {\n  export const Tray = styled.div`\n  min-width: 200px;\n  background: rgb(20, 20, 20);\n  flex-grow: 0;\n  flex-shrink: 0;\n`;\n}\n\nexport class TrayWidget extends React.Component {\n  render() {\n    return <S.Tray>{this.props.children}</S.Tray>;\n  }\n}\n","import * as React from \"react\";\nimport styled from \"@emotion/styled\";\n\nexport interface TrayItemWidgetProps {\n  model: any;\n  color: string;\n  name: string;\n}\nnamespace S {\n  export const Tray = styled.div<{ color: string }>`\n  color: white;\n  font-family: Helvetica, Arial;\n  padding: 5px;\n  margin: 0px 10px;\n  border: solid 1px ${(p) => p.color};\n  border-radius: 5px;\n  margin-bottom: 2px;\n  cursor: pointer;\n`;\n}\n\nexport class TrayItemWidget extends React.Component<TrayItemWidgetProps> {\n  render() {\n    return (\n      <S.Tray\n        color={this.props.color}\n        draggable={true}\n        onDragStart={(event) => {\n          event.dataTransfer.setData(\n            \"storm-diagram-node\",\n            JSON.stringify(this.props.model)\n          );\n        }}\n      >\n        {this.props.name}\n      </S.Tray>\n    );\n  }\n}\n","import * as React from \"react\";\nimport styled from \"@emotion/styled\";\n\nexport interface DemoCanvasWidgetProps {\n  color?: string;\n  background?: string;\n}\n\nexport const Container = styled.div<{ color: string; background: string }>`\n  height: 100%;\n  background-color: ${(p) => p.background};\n  background-size: 50px 50px;\n  display: flex;\n  > * {\n    height: 100%;\n    min-height: 100%;\n    width: 100%;\n  }\n  background-image: linear-gradient(\n      0deg,\n      transparent 24%,\n      ${(p) => p.color} 25%,\n      ${(p) => p.color} 26%,\n      transparent 27%,\n      transparent 74%,\n      ${(p) => p.color} 75%,\n      ${(p) => p.color} 76%,\n      transparent 77%,\n      transparent\n    ),\n    linear-gradient(\n      90deg,\n      transparent 24%,\n      ${(p) => p.color} 25%,\n      ${(p) => p.color} 26%,\n      transparent 27%,\n      transparent 74%,\n      ${(p) => p.color} 75%,\n      ${(p) => p.color} 76%,\n      transparent 77%,\n      transparent\n    );\n`;\n\nexport class DemoCanvasWidget extends React.Component<DemoCanvasWidgetProps> {\n  render() {\n    return (\n      <Container\n        background={this.props.background || \"rgb(60, 60, 60)\"}\n        color={this.props.color || \"rgba(255,255,255, 0.05)\"}\n      >\n        {this.props.children}\n      </Container>\n    );\n  }\n}\n","import { DefaultLinkModelOptions } from \"./DefaultLinkModel\";\nimport { DefaultLinkModel } from \"@projectstorm/react-diagrams\";\n\nexport class ArrowLinkModel extends DefaultLinkModel {\n  constructor(options: DefaultLinkModelOptions = {}) {\n    super({\n      type: \"arrow\",\n      width: options.width || 3,\n      color: options.color || \"gray\",\n      selectedColor: options.selectedColor || \"rgb(0,192,255)\",\n      curvyness: 0,\n      ...options,\n    });\n  }\n}\n","import {\n  LabelModel,\n  LabelModelGenerics,\n  LabelModelOptions,\n} from \"@projectstorm/react-diagrams-core\";\nimport { DeserializeEvent } from \"@projectstorm/react-canvas-core\";\n\nexport interface DefaultLabelModelOptions extends LabelModelOptions {\n  label?: string;\n}\n\nexport interface DefaultLabelModelGenerics extends LabelModelGenerics {\n  OPTIONS: DefaultLabelModelOptions;\n}\n\nexport class DefaultLabelModel extends LabelModel<DefaultLabelModelGenerics> {\n  constructor(options: DefaultLabelModelOptions = {}) {\n    super({\n      offsetY: options.offsetY == null ? -23 : options.offsetY,\n      type: \"default\",\n      ...options,\n    });\n  }\n\n  setLabel(label: string) {\n    this.options.label = label;\n  }\n\n  deserialize(event: DeserializeEvent<this>) {\n    super.deserialize(event);\n    this.options.label = event.data.label;\n  }\n\n  serialize() {\n    return {\n      ...super.serialize(),\n      label: this.options.label,\n    };\n  }\n}\n","import * as _ from \"lodash\";\nimport { DefaultPortModel } from \"../models/DefaultPortModel\";\nimport {\n  NodeModel,\n  NodeModelGenerics,\n} from \"@projectstorm/react-diagrams-core\";\nimport {\n  BasePositionModelOptions,\n  DeserializeEvent,\n} from \"@projectstorm/react-canvas-core\";\n\nexport interface DefaultNodeModelOptions extends BasePositionModelOptions {\n  name?: string;\n  color?: string;\n}\n\nexport interface DefaultNodeModelGenerics extends NodeModelGenerics {\n  OPTIONS: DefaultNodeModelOptions;\n}\n\nexport class DefaultNodeModel extends NodeModel<DefaultNodeModelGenerics> {\n  isLabel: boolean;\n\n  protected portsIn: DefaultPortModel[];\n\n  constructor(isLabel: boolean, name: string, color: string) {\n    super({\n      type: \"default\",\n      name,\n      color,\n    });\n    this.isLabel = isLabel;\n    this.portsIn = [];\n  }\n\n  doClone(lookupTable: {}, clone: any): void {\n    clone.portsIn = [];\n    clone.portsOut = [];\n    super.doClone(lookupTable, clone);\n  }\n\n  removePort<T extends DefaultPortModel>(port: T): void {\n    super.removePort(port);\n  }\n\n  addPort<T extends DefaultPortModel>(port: T): T {\n    super.addPort(port);\n    if (port.getOptions().in) {\n      if (this.portsIn.indexOf(port) === -1) {\n        this.portsIn.push(port);\n      }\n    }\n    return port;\n  }\n\n  deserialize(event: DeserializeEvent<this>) {\n    super.deserialize(event);\n    this.options.name = event.data.name;\n    this.options.color = event.data.color;\n    this.portsIn = _.map(event.data.portsInOrder, (id) => {\n      return this.getPortFromID(id);\n    }) as DefaultPortModel[];\n    this.isLabel = event.data.isLabel;\n  }\n\n  serialize(): any {\n    return {\n      ...super.serialize(),\n      name: this.options.name,\n      color: this.options.color,\n      isLabel: this.isLabel\n    };\n  }\n\n  getInPorts(): DefaultPortModel[] {\n    return this.portsIn;\n  }\n}\n","import {\n  LabelModel,\n  LinkModel,\n  LinkModelGenerics,\n  LinkModelListener,\n  PortModel,\n  PortModelAlignment,\n} from \"@projectstorm/react-diagrams-core\";\nimport { DefaultLabelModel } from \"../models/DefaultLabelModel\";\nimport { BezierCurve } from \"@projectstorm/geometry\";\nimport {\n  BaseEntityEvent,\n  BaseModelOptions,\n  DeserializeEvent,\n} from \"@projectstorm/react-canvas-core\";\nimport { DefaultNodeModel } from \"./DefaultNodeModel\";\nimport { PropertyType } from \"./PropertyType\";\nimport { DefaultPortModel } from \"./DefaultPortModel\";\n\nexport interface DefaultLinkModelListener extends LinkModelListener {\n  colorChanged?(\n    event: BaseEntityEvent<DefaultLinkModel> & { color: null | string }\n  ): void;\n\n  widthChanged?(\n    event: BaseEntityEvent<DefaultLinkModel> & { width: 0 | number }\n  ): void;\n}\n\nexport interface DefaultLinkModelOptions extends BaseModelOptions {\n  width?: number;\n  color?: string;\n  selectedColor?: string;\n  curvyness?: number;\n  type?: string;\n  testName?: string;\n}\n\nexport interface DefaultLinkModelGenerics extends LinkModelGenerics {\n  LISTENER: DefaultLinkModelListener;\n  OPTIONS: DefaultLinkModelOptions;\n}\n\nclass RelationProperties {\n  label: string;\n  isPrimaryKey: boolean;\n  isAutoincremented: boolean;\n  isNotNull: boolean;\n  isUnique: boolean;\n  propertyType: PropertyType;\n}\n\nexport class DefaultLinkModel extends LinkModel<DefaultLinkModelGenerics> {\n  properties: DefaultNodeModel;\n\n  constructor(options: DefaultLinkModelOptions = {}) {\n    super({\n      type: \"default\",\n      width: options.width || 3,\n      color: options.color || \"gray\",\n      selectedColor: options.selectedColor || \"rgb(0,192,255)\",\n      curvyness: 0,\n      ...options,\n    });\n\n    this.addLabel(\"0,N\");\n    this.addLabel(\"relation name\");\n    this.addLabel(\"0,N\");\n\n    this.properties = new DefaultNodeModel(false, \"relNode\", \"rgb(0,192,255)\");\n  }\n\n  calculateControlOffset(port: PortModel): [number, number] {\n    if (port.getOptions().alignment === PortModelAlignment.RIGHT) {\n      return [this.options.curvyness, 0];\n    } else if (port.getOptions().alignment === PortModelAlignment.LEFT) {\n      return [-this.options.curvyness, 0];\n    } else if (port.getOptions().alignment === PortModelAlignment.TOP) {\n      return [0, -this.options.curvyness];\n    }\n    return [0, this.options.curvyness];\n  }\n\n  getSVGPath(): string {\n    if (this.points.length === 2) {\n      const curve = new BezierCurve();\n      curve.setSource(this.getFirstPoint().getPosition());\n      curve.setTarget(this.getLastPoint().getPosition());\n      curve.setSourceControl(this.getFirstPoint().getPosition().clone());\n      curve.setTargetControl(this.getLastPoint().getPosition().clone());\n\n      if (this.sourcePort) {\n        curve\n          .getSourceControl()\n          .translate(...this.calculateControlOffset(this.getSourcePort()));\n      }\n\n      if (this.targetPort) {\n        curve\n          .getTargetControl()\n          .translate(...this.calculateControlOffset(this.getTargetPort()));\n      }\n      return curve.getSVGCurve();\n    }\n  }\n\n  serialize() {\n    let relPorts =\n      this.properties &&\n      this.properties.getPorts() &&\n      Object.values(this.properties.getPorts());\n    let properties =\n      relPorts &&\n      relPorts.map((a: DefaultPortModel) => {\n        return {\n          label: a.label,\n          propertyType: a.propertyType,\n          isPrimaryKey: a.isPrimaryKey,\n          isNotNull: a.isNotNull,\n          isAutoincremented: a.isAutoincremented,\n          isUnique: a.isUnique,\n        };\n      });\n\n    return {\n      ...super.serialize(),\n      width: this.options.width,\n      color: this.options.color,\n      curvyness: this.options.curvyness,\n      selectedColor: this.options.selectedColor,\n      properties,\n    };\n  }\n\n  deserialize(event: DeserializeEvent<this>) {\n    let propertiesNode = new DefaultNodeModel(\n      false,\n      \"relNode\",\n      \"rgb(0,192,255)\"\n    );\n    event.data.properties.forEach((rel: RelationProperties) => {\n      propertiesNode.addPort(\n        new DefaultPortModel(\n          false,\n          rel.label,\n          false,\n          rel.isPrimaryKey,\n          false,\n          false,\n          rel.isNotNull,\n          rel.isAutoincremented,\n          rel.isUnique,\n          rel.propertyType\n        )\n      );\n    });\n\n    super.deserialize(event);\n    this.options.color = event.data.color;\n    this.options.width = event.data.width;\n    this.options.curvyness = event.data.curvyness;\n    this.options.selectedColor = event.data.selectedColor;\n    this.properties = propertiesNode;\n  }\n\n  addLabel(label: LabelModel | string) {\n    if (label instanceof LabelModel) {\n      return super.addLabel(label);\n    }\n    let labelOb = new DefaultLabelModel();\n    labelOb.setLabel(label);\n    return super.addLabel(labelOb);\n  }\n\n  setWidth(width: number) {\n    this.options.width = width;\n    this.fireEvent({ width }, \"widthChanged\");\n  }\n\n  setColor(color: string) {\n    this.options.color = color;\n    this.fireEvent({ color }, \"colorChanged\");\n  }\n}\n","import * as closest from \"closest\";\n\nexport class Toolkit {\n  static TESTING: boolean = false;\n  static TESTING_UID = 0;\n\n  /**\n   * Generats a unique ID (thanks Stack overflow :3)\n   * @returns {String}\n   */\n  public static UID(): string {\n    if (Toolkit.TESTING) {\n      Toolkit.TESTING_UID++;\n      return `${Toolkit.TESTING_UID}`;\n    }\n    return \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, (c) => {\n      const r = (Math.random() * 16) | 0;\n      const v = c === \"x\" ? r : (r & 0x3) | 0x8;\n      return v.toString(16);\n    });\n  }\n\n  /**\n   * Finds the closest element as a polyfill\n   */\n  public static closest(element: Element, selector: string) {\n    if (document.body.closest) {\n      return element.closest(selector);\n    }\n    return closest(element, selector);\n  }\n}\n","import {\n  LinkModel,\n  PortModel,\n  PortModelAlignment,\n  PortModelGenerics,\n  PortModelOptions,\n} from \"@projectstorm/react-diagrams-core\";\nimport { DefaultLinkModel } from \"../models/DefaultLinkModel\";\nimport { AbstractModelFactory } from \"@projectstorm/react-canvas-core\";\nimport { Toolkit } from \"../Toolkit\";\n\nexport interface DefaultPortModelOptions extends PortModelOptions {\n  label?: string;\n  in?: boolean;\n}\n\nexport interface DefaultPortModelGenerics extends PortModelGenerics {\n  OPTIONS: DefaultPortModelOptions;\n}\n\nexport class DefaultPortModel extends PortModel<DefaultPortModelGenerics> {\n  in: boolean;\n  isNamePort: boolean;\n  label: string;\n  isPrimaryKey: boolean;\n  isPartialKey: boolean;\n  isForeignKey: boolean;\n  isAutoincremented: boolean;\n  isNotNull: boolean;\n  isUnique: boolean;\n  propertyType: string;\n  fkPortId: string;\n\n  constructor(\n    logic: boolean,\n    name: string,\n    isNamePort: boolean,\n    isPrimaryKey?: boolean,\n    isForeignKey?: boolean,\n    isPartialKey?: boolean,\n    isNotNull?: boolean,\n    isAutoincremented?: boolean,\n    isUnique?: boolean,\n    propertyType?: string,\n    id?: string,\n    fkPortId?: string,\n    alignemnt?: PortModelAlignment\n  ) {\n    super({\n      id: id || Toolkit.UID(),\n      in: true,\n      name,\n      label: name,\n      alignment: alignemnt,\n      type: logic ? \"arrow\" : \"default\",\n    });\n\n    this.label = name;\n    this.isNamePort = isNamePort;\n    this.links = {};\n\n    this.isPrimaryKey = isPrimaryKey;\n    this.isForeignKey = isForeignKey;\n    this.isPartialKey = isPartialKey;\n\n    this.isNotNull = isNotNull;\n    this.isUnique = isUnique;\n    this.isAutoincremented = isAutoincremented;\n\n    this.propertyType = propertyType;\n    this.fkPortId = fkPortId;\n  }\n\n  deserialize(event: any) {\n    super.deserialize(event);\n    this.options.in = event.data.in;\n    this.options.label = event.data.label;\n\n    this.label = event.data.label;\n    this.isNamePort = event.data.isNamePort;\n\n    this.isPrimaryKey = event.data.isPrimaryKey;\n    this.isPartialKey = event.data.isPartialKey;\n\n    this.isForeignKey = event.data.isForeignKey;\n    this.isNotNull = event.data.isNotNull;\n    this.isUnique = event.data.isUnique;\n    this.isAutoincremented = event.data.isAutoincremented;\n    this.propertyType = event.data.propertyType;\n    this.fkPortId = event.data.fkPortId;\n  }\n\n  serialize() {\n    return {\n      ...super.serialize(),\n      in: this.in,\n      label: this.label,\n      isNamePort: this.isNamePort,\n      isPrimaryKey: this.isPrimaryKey,\n      isPartialKey: this.isPartialKey,\n\n      isForeignKey: this.isForeignKey,\n      isNotNull: this.isNotNull,\n      isUnique: this.isUnique,\n      isAutoincremented: this.isAutoincremented,\n      propertyType: this.propertyType,\n      fkPortId: this.fkPortId,\n    };\n  }\n\n  link<T extends LinkModel>(\n    port: PortModel,\n    factory?: AbstractModelFactory<T>\n  ): T {\n    let link = this.createLinkModel(factory);\n    link.setSourcePort(this);\n    link.setTargetPort(port);\n    return link as T;\n  }\n\n  canLinkToPort(port: PortModel): boolean {\n    if (port === this) {\n      return false;\n    }\n    return true;\n  }\n\n  createLinkModel(factory?: AbstractModelFactory<LinkModel>): LinkModel {\n    let link = super.createLinkModel();\n    if (!link && factory) {\n      return factory.generateModel({});\n    }\n    return link || new DefaultLinkModel();\n  }\n}\n","import {\n  LinkModel,\n  LinkModelGenerics,\n  PortModel,\n  PortModelAlignment,\n} from \"@projectstorm/react-diagrams\";\nimport { ArrowLinkModel } from \"./ArrowLinkModel\";\nimport { DefaultPortModel } from \"./DefaultPortModel\";\nimport { DefaultNodeModel } from \"./DefaultNodeModel\";\nimport { Toolkit } from \"../Toolkit\";\nimport { AbstractModelFactory } from \"@projectstorm/react-canvas-core\";\n\nexport class AdvancedPortModel extends DefaultPortModel {\n  constructor(\n    name: string,\n    isNamePort: boolean,\n    isPrimaryKey?: boolean,\n    isForeignKey?: boolean,\n    isPartialKey?: boolean,\n    isNotNull?: boolean,\n    isAutoincremented?: boolean,\n    isUnique?: boolean,\n    propertyType?: string,\n    id?: string,\n    fkPortId?: string,\n    alignemnt?: PortModelAlignment\n  ) {\n    super(\n      true,\n      name,\n      isNamePort,\n      isPrimaryKey,\n      isForeignKey,\n      isPartialKey,\n      isNotNull,\n      isAutoincremented,\n      isUnique,\n      propertyType,\n      id,\n      fkPortId,\n      alignemnt\n    );\n  }\n\n  link<T extends LinkModel>(\n    port: PortModel,\n    factory?: AbstractModelFactory<T>\n  ): T {\n    let link = this.createLinkModel();\n    link.setSourcePort(port);\n    link.setTargetPort(this);\n    return link as T;\n  }\n\n  canLinkToPort(port: PortModel): boolean {\n    if (port === this) {\n      return false;\n    }\n\n    let thisParent = this.getParent() as DefaultNodeModel;\n    let portNode = port.getParent() as DefaultNodeModel;\n\n    let portNodePorts = portNode.getPorts() as {\n      [s: string]: AdvancedPortModel;\n    };\n    let thisParentPorts = thisParent.getPorts() as {\n      [s: string]: AdvancedPortModel;\n    };\n\n    let czyMaPortZPKjakoFk = Object.keys(thisParentPorts).find(\n      (id) => thisParentPorts[id].fkPortId === portNode.getOptions().id\n    );\n    let czyMaPortZPKjakoFk2 = Object.keys(portNodePorts).find(\n      (id) => portNodePorts[id].fkPortId === thisParent.getOptions().id\n    );\n\n    let pk =\n      Object.keys(thisParentPorts).find(\n        (id) => thisParentPorts[id].isPrimaryKey\n      ) || \"Id\";\n\n    if (!czyMaPortZPKjakoFk && !czyMaPortZPKjakoFk2) {\n      if (pk) {\n        portNode.addPort(\n          new AdvancedPortModel(\n            thisParent.getOptions().name +\n              thisParentPorts[pk].getOptions().name,\n            false,\n            false,\n            true,\n            true,\n            true,\n            false,\n            false,\n            \"INT\",\n            Toolkit.UID(),\n            thisParent.getOptions().id\n          )\n        );\n      } else {\n        portNode.addPort(\n          new AdvancedPortModel(\n            thisParent.getOptions().name + \"Id\",\n            false,\n            false,\n            true,\n            true,\n            true,\n            false,\n            false,\n            \"INT\",\n            Toolkit.UID(),\n            thisParent.getOptions().id\n          )\n        );\n      }\n    }\n\n    return true;\n  }\n\n  createLinkModel(): ArrowLinkModel | LinkModel<LinkModelGenerics> {\n    return new ArrowLinkModel();\n  }\n}\n","import * as React from \"react\";\nimport styled from \"@emotion/styled\";\nimport { css } from \"@emotion/core\";\n\nexport interface TrayItemDivProps {\n  color: string;\n  name?: string;\n  onClick: () => void;\n  marginTop?: string;\n  isSelected?: boolean;\n  isDisabled?: boolean;\n}\nnamespace S {\n  export const Tray = styled.div<{\n    color: string;\n    marginTop: string;\n    isSelected: boolean;\n    isDisabled: boolean;\n  }>`\n    color: white;\n    font-family: Helvetica, Arial;\n    padding: 5px;\n    margin: 0px 10px;\n    border: solid 1px ${({color}) => color};\n    border-radius: 5px;\n    margin-bottom: 2px;\n    cursor: pointer;\n    margin-top: ${({marginTop}) => marginTop};\n\n    display: flex;\n    justify-content: space-between;\n  \n    ${({isSelected}) =>\n      isSelected &&\n      css`\n        background-color: black;\n        border-width: 4px !important;\n      `}\n  \n    ${({isDisabled}) =>\n      isDisabled &&\n      css`\n        cursor: not-allowed !important;\n      `}\n  `;\n}\n\nexport class TrayItemDiv extends React.Component<TrayItemDivProps> {\n  render() {\n    let { isDisabled,isSelected, marginTop, color, name } = this.props;\n\n    return (\n      <S.Tray\n        {...this.props}\n        isDisabled={isDisabled}\n        isSelected={isSelected}\n        marginTop={marginTop}\n        color={color}\n      >\n        {this.props.children ?? name}\n      </S.Tray>\n    );\n  }\n}\n","export enum PropertyType {\n  BIT = \"BIT\",\n  TINYINT = \"TINYINT\",\n  SMALLINT = \"SMALLINT\",\n  INT = \"INT\",\n  BIGINT = \"BIGINT\",\n  \"DECIMAL()\" = \"DECIMAL()\",\n  \"NUMERIC()\" = \"NUMERIC()\",\n  \"FLOAT()\" = \"FLOAT()\",\n  REAL = \"REAL\",\n  DATE = \"DATE\",\n  TIME = \"TIME\",\n  DATETIME = \"DATETIME\",\n  TIMESTAMP = \"TIMESTAMP\",\n  YEAR = \"YEAR\",\n  \"CHAR()\" = \"CHAR()\",\n  \"VARCHAR()\" = \"VARCHAR()\",\n  TEXT = \"TEXT\",\n  \"NCHAR()\" = \"NCHAR()\",\n  \"NVARCHAR()\" = \"NVARCHAR()\",\n  NTEXT = \"NTEXT\",\n  \"BINARY()\" = \"BINARY()\",\n  \"VARBINARY()\" = \"VARBINARY()\",\n  IMAGE = \"IMAGE\",\n  CLOB = \"CLOB\",\n  BLOB = \"BLOB\",\n  XML = \"XML\",\n  JSON = \"JSON\",\n  MONEY = \"MONEY\",\n}\n","import * as React from \"react\";\n\nimport { GridProps } from \"./\";\n\nexport default class Grid extends React.Component<GridProps> {\n  render() {\n    return (\n      <div style={this.props.style} className={this.buildClassNameString()}>\n        {this.props.children}\n      </div>\n    );\n  }\n\n  buildClassNameString() {\n    let className = \"ms-Grid\";\n\n    if (this.props.className != null) {\n      className += ` ${this.props.className}`;\n    }\n\n    return className;\n  }\n}\n","import * as React from \"react\";\n\nimport { GridRowProps } from \"./\";\n\nexport default class Row extends React.Component<GridRowProps> {\n  render() {\n    return (\n      <div className={this.buildClassNameString()}>{this.props.children}</div>\n    );\n  }\n\n  buildClassNameString() {\n    let className = \"ms-Grid-row\";\n\n    if (this.props.flex) {\n      className += \" grid-row-flex\";\n    }\n\n    if (this.props.className != null) {\n      className += ` ${this.props.className}`;\n    }\n\n    return className;\n  }\n}\n","import * as React from \"react\";\n\nimport { GridColProps, GridColConfigProp } from \"./\";\n\nexport default class Col extends React.Component<GridColProps> {\n  render() {\n    return (\n      <div\n        className={this.buildClassNameString()}\n        onDoubleClick={this.props.onDoubleClick}\n      >\n        {this.props.children}\n      </div>\n    );\n  }\n\n  buildGridColConfigClassNames(size: string, config: GridColConfigProp) {\n    if (config == null) return \"\";\n\n    let className = ` ms-${size}`;\n\n    if (typeof config === \"string\") {\n      className += config;\n    } else {\n      className += config.size;\n\n      if (config.pull != null) {\n        className += ` ms-${size}Pull${config.pull}`;\n      }\n\n      if (config.push != null) {\n        className += ` ms-${size}Push${config.push}`;\n      }\n\n      if (config.offset != null) {\n        className += ` ms-${size}Offset${config.offset}`;\n      }\n\n      if (config.order != null) {\n        className += ` grid-flex-order-${size}-${config.order}`;\n      }\n    }\n\n    return className;\n  }\n\n  buildClassNameString() {\n    let className = \"ms-Grid-col\";\n\n    if (this.props.className != null) {\n      className += ` ${this.props.className}`;\n    }\n\n    if (this.props.hidden != null) {\n      className += ` ms-hidden${this.props.hidden}`;\n    }\n\n    if (this.props.order != null) {\n      className += ` grid-flex-order-${this.props.order}`;\n    }\n\n    className += this.buildGridColConfigClassNames(\"sm\", this.props.sm);\n    className += this.buildGridColConfigClassNames(\"md\", this.props.md);\n    className += this.buildGridColConfigClassNames(\"lg\", this.props.lg);\n    className += this.buildGridColConfigClassNames(\"xl\", this.props.xl);\n    className += this.buildGridColConfigClassNames(\"xxl\", this.props.xxl);\n    className += this.buildGridColConfigClassNames(\"xxxl\", this.props.xxxl);\n\n    return className;\n  }\n}\n","import \"./PropertyTable.scss\";\nimport \"react-bootstrap-table-next/dist/react-bootstrap-table2.min.css\";\nimport React from \"react\";\nimport { PropertyType } from \"../../infrastructure/models/PropertyType\";\nimport { DefaultPortModel } from \"../../infrastructure/models/DefaultPortModel\";\nimport BootstrapTable from \"react-bootstrap-table-next\";\nimport { DefaultNodeModel } from \"../../infrastructure/models/DefaultNodeModel\";\nimport { DiagramEngine } from \"@projectstorm/react-diagrams\";\nimport { AdvancedPortModel } from \"../../infrastructure/models/ArrowPortModel\";\nimport styled from \"@emotion/styled\";\nimport { DarkInput } from \"../DarkInput\";\n\nnamespace S {\n  export const AddNewAtributeButton = styled.p`\n    cursor: cell\n  `;\n}\n\nclass Props {\n  selectedItem: DefaultNodeModel;\n  diagramEngine: DiagramEngine;\n  relView?: boolean;\n  isLogic: boolean;\n}\n\nexport function useForceUpdate() {\n  const [, setValue] = React.useState(0);\n  return () => setValue((value) => ++value);\n}\n\nexport const PropertyTable = (props: Props) => {\n  const [updatedItem, setUpdatedItem] = React.useState(null);\n\n  const forceUpdate = useForceUpdate();\n\n  React.useMemo(() => {\n    setUpdatedItem(props.selectedItem);\n  }, [props.selectedItem]);\n\n  const clearPartialKeys = () => {\n    let ports =\n      updatedItem &&\n      updatedItem.ports &&\n      (updatedItem.ports as { [s: string]: DefaultPortModel });\n\n    Object.keys(ports).map((p) => console.log((ports[p].isPartialKey = false)));\n  };\n\n  const handleChangePK = (\n    event: React.ChangeEvent<HTMLInputElement>,\n    row: DefaultPortModel\n  ) => {\n    event.persist();\n    (updatedItem.getPortFromID(\n      row.getOptions().id\n    ) as DefaultPortModel).isPrimaryKey = !row.isPrimaryKey;\n\n    (updatedItem.getPortFromID(\n      row.getOptions().id\n    ) as DefaultPortModel).isNotNull = row.isPrimaryKey ? true : false;\n\n    (updatedItem.getPortFromID(\n      row.getOptions().id\n    ) as DefaultPortModel).isAutoincremented = row.isPrimaryKey ? true : false;\n\n    (updatedItem.getPortFromID(\n      row.getOptions().id\n    ) as DefaultPortModel).isUnique = row.isPrimaryKey ? true : false;\n\n    clearPartialKeys();\n    forceUpdate();\n  };\n\n  const handleChangeFK = (\n    event: React.ChangeEvent<HTMLInputElement>,\n    row: DefaultPortModel\n  ) => {\n    event.persist();\n    (updatedItem.getPortFromID(\n      row.getOptions().id\n    ) as DefaultPortModel).isForeignKey = !row.isForeignKey;\n\n    (updatedItem.getPortFromID(\n      row.getOptions().id\n    ) as DefaultPortModel).isNotNull = row.isForeignKey ? true : false;\n\n    forceUpdate();\n  };\n\n  const handleChangeNull = (\n    event: React.ChangeEvent<HTMLInputElement>,\n    row: DefaultPortModel\n  ) => {\n    event.persist();\n    (updatedItem.getPortFromID(\n      row.getOptions().id\n    ) as DefaultPortModel).isNotNull = !row.isNotNull;\n    forceUpdate();\n  };\n\n  const handleChangePartialKey = (\n    event: React.ChangeEvent<HTMLInputElement>,\n    row: DefaultPortModel\n  ) => {\n    event.persist();\n    (updatedItem.getPortFromID(\n      row.getOptions().id\n    ) as DefaultPortModel).isPartialKey = !row.isPartialKey;\n\n    (updatedItem.getPortFromID(\n      row.getOptions().id\n    ) as DefaultPortModel).isNotNull = row.isPartialKey ? true : false;\n    forceUpdate();\n  };\n\n  const handleChangeUnique = (\n    event: React.ChangeEvent<HTMLInputElement>,\n    row: DefaultPortModel\n  ) => {\n    event.persist();\n    (updatedItem.getPortFromID(\n      row.getOptions().id\n    ) as DefaultPortModel).isUnique = !row.isUnique;\n    forceUpdate();\n  };\n\n  const handleChangeAutoInc = (\n    event: React.ChangeEvent<HTMLInputElement>,\n    row: DefaultPortModel\n  ) => {\n    event.persist();\n    (updatedItem.getPortFromID(\n      row.getOptions().id\n    ) as DefaultPortModel).isAutoincremented = !row.isAutoincremented;\n    forceUpdate();\n  };\n\n  const handleChangepPropType = (\n    event: React.ChangeEvent<HTMLInputElement>,\n    row: DefaultPortModel\n  ) => {\n    event.persist();\n    (updatedItem.getPortFromID(\n      row.getOptions().id\n    ) as DefaultPortModel).propertyType = event.target.value;\n  };\n\n  const handleChangePortLabel = (\n    event: React.ChangeEvent<HTMLInputElement>,\n    row: DefaultPortModel\n  ) => {\n    event.persist();\n    (updatedItem.getPortFromID(row.getOptions().id) as DefaultPortModel).label =\n      event.target.value;\n  };\n\n  const addNewPort = (newPortNumber: number) => {\n    (updatedItem as DefaultNodeModel).addPort(\n      new AdvancedPortModel(\n        `new atribute ${newPortNumber}`,\n        false,\n        false,\n        false,\n        false,\n        false,\n        false,\n        false,\n        \"INT\"\n      )\n    );\n\n    forceUpdate();\n  };\n\n  const removePort = (port: DefaultPortModel) => {\n    updatedItem.removePort(port);\n    forceUpdate();\n  };\n\n  const preparePropertyTypes = () => {\n    return Object.values(PropertyType).map((obj) => (\n      <option key={obj} value={obj}>\n        {obj}\n      </option>\n    ));\n  };\n\n  const columns: any[] = [\n    {\n      dataField: \"label\",\n      text: \"Property Name\",\n      formatter: (cellContent: any, row: DefaultPortModel) => (\n        <div className=\"input\">\n          {/* <DarkInput \n            type=\"text\" \n            defaultValue={row.label} \n            onChange={(event) => handleChangePortLabel(event, row)}\n          ></DarkInput> */}\n\n          <input\n            style={{ width: \"100px\" }}\n            className=\"darkInput\"\n            type=\"text\"\n            defaultValue={row.label}\n            onChange={(event) => handleChangePortLabel(event, row)}\n          ></input>\n        </div>\n      ),\n    },\n    {\n      style: { paddingLeft: 0 },\n      dataField: \"propertyType\",\n      text: \"Property Type\",\n      formatter: (cellContent: any, row: DefaultPortModel) => (\n        <div className=\"input\">\n          <input\n            style={{ width: \"100px\" }}\n            type=\"text\"\n            list=\"types\"\n            className=\"darkInput\"\n            onChange={(event) => handleChangepPropType(event, row)}\n            defaultValue={row.propertyType}\n          />\n          <datalist id=\"types\">{preparePropertyTypes()}</datalist>\n        </div>\n      ),\n    },\n    {\n      dataField: \"isPrimaryKey\",\n      text: \"Is Primary Key\",\n      formatter: (cellContent: any, row: DefaultPortModel) => (\n        <div className=\"checkbox\">\n          <label>\n            <input\n              type=\"checkbox\"\n              checked={row.isPrimaryKey}\n              onChange={(event) => handleChangePK(event, row)}\n            />\n          </label>\n        </div>\n      ),\n    },\n    {\n      dataField: \"isForeignKey\",\n      text: \"Is Foreign Key\",\n      formatter: (cellContent: any, row: DefaultPortModel) => (\n        <div className=\"checkbox\">\n          <label>\n            <input\n              type=\"checkbox\"\n              checked={row.isForeignKey}\n              onChange={(event) => handleChangeFK(event, row)}\n            />\n          </label>\n        </div>\n      ),\n    },\n    {\n      dataField: \"isPartialKey\",\n      text: \"Is Partial Key\",\n      formatter: (cellContent: any, row: DefaultPortModel) => (\n        <div className=\"checkbox\">\n          <label>\n            <input\n              type=\"checkbox\"\n              checked={row.isPartialKey}\n              onChange={(event) => handleChangePartialKey(event, row)}\n            />\n          </label>\n        </div>\n      ),\n    },\n    {\n      dataField: \"isNotNull\",\n      text: \"Not Null\",\n      formatter: (cellContent: any, row: DefaultPortModel) => (\n        <div className=\"checkbox\">\n          <label>\n            <input\n              disabled={row.isPrimaryKey || row.isForeignKey}\n              type=\"checkbox\"\n              checked={row.isNotNull}\n              onChange={(event) => handleChangeNull(event, row)}\n            />\n          </label>\n        </div>\n      ),\n    },\n    {\n      dataField: \"isAutoincremented\",\n      text: \"Is Auto Incremented\",\n      formatter: (cellContent: any, row: DefaultPortModel) => (\n        <div className=\"checkbox\">\n          <label>\n            <input\n              disabled={row.isPrimaryKey}\n              type=\"checkbox\"\n              checked={row.isAutoincremented}\n              onChange={(event) => handleChangeAutoInc(event, row)}\n            />\n          </label>\n        </div>\n      ),\n    },\n    {\n      dataField: \"isUnique\",\n      text: \"Is Unique\",\n      formatter: (cellContent: any, row: DefaultPortModel) => (\n        <div className=\"checkbox\">\n          <label>\n            <input\n              disabled={row.isPrimaryKey}\n              type=\"checkbox\"\n              checked={row.isUnique}\n              onChange={(event) => handleChangeUnique(event, row)}\n            />\n          </label>\n        </div>\n      ),\n    },\n    {\n      dataField: \"remove\",\n      text: \"Remove\",\n      formatter: (cellContent: any, row: DefaultPortModel) => (\n        <div className=\"checkbox\">\n          <label>\n            <span\n              onClick={() => removePort(row)}\n              className=\"mi mi-Delete red\"\n            />\n          </label>\n        </div>\n      ),\n    },\n  ];\n\n  let ports =\n    updatedItem &&\n    updatedItem.ports &&\n    (updatedItem.ports as { [s: string]: DefaultPortModel });\n\n  let portsTable: DefaultPortModel[] =\n    ports &&\n    Object.keys(ports)\n      .map((x) => {\n        return ports[x];\n      })\n      .filter((p) => !p.isNamePort);\n\n  let ispk =\n    portsTable && portsTable.find((p) => p.isPrimaryKey) ? true : false;\n\n  let cols = columns;\n\n  if (ispk) {\n    cols = cols.filter((col) => col.dataField !== \"isPartialKey\");\n  }\n\n  if (!props.isLogic) {\n    cols = cols.filter((c) => c.dataField !== \"isForeignKey\");\n  }\n\n  return (\n    <div className={`${!props.relView && 'relView'}`}>\n      <BootstrapTable\n        keyField=\"id\"\n        data={portsTable}\n        columns={\n          props.relView\n            ? cols.filter(\n                (col) =>\n                  col.dataField !== \"isPrimaryKey\" &&\n                  col.dataField !== \"isPartialKey\"\n              )\n            : cols\n        }\n        bordered={false}\n      />\n      <S.AddNewAtributeButton onClick={() => addNewPort(portsTable.length)}>\n        Add new atribute\n        </S.AddNewAtributeButton>\n    </div>\n  );\n};\n","import * as React from \"react\";\nimport styled from \"@emotion/styled\";\nimport { css } from \"@emotion/core\";\n\nexport interface DarkInputProps {\n    fontSize?: number\n    type: string\n    defaultValue: string\n    onChange: (event) => void;\n}\nnamespace S {\n  export const Input = styled.input<{fontSize?: number}>`\n    background-color: #3E3E3E;\n    color: #E9F7F7;\n    margin-top: 7px;\n    width: 150px;\n    margin-right: 0px;\n    padding-right: 0px;\n\n    ${({fontSize}) => \n    css`\n        font-size: ${fontSize}px;\n        margin-top: 15px;\n        width: 90%;\n    `}\n  `;\n}\n\nexport class DarkInput extends React.Component<DarkInputProps> {\n  render() {\n\n    return (\n      <S.Input\n        {...this.props}\n      >\n        {this.props.children}\n      </S.Input>\n    );\n  }\n}\n","import \"./NodeProperties.scss\";\nimport * as React from \"react\";\n\nimport { Col, Row, Grid } from \"../grid\";\nimport { DiagramEngine } from \"@projectstorm/react-diagrams\";\nimport { DefaultNodeModel } from \"../../infrastructure/models/DefaultNodeModel\";\nimport { PropertyTable } from \"../PropertyTable/PropertyTable\";\nimport { DarkInput } from \"../DarkInput\";\n\nclass Props {\n  selectedItem: DefaultNodeModel;\n  isLogic: boolean;\n  diagramEngine: DiagramEngine;\n}\n\nexport function useForceUpdate() {\n  const [, setValue] = React.useState(0);\n  return () => setValue((value) => ++value);\n}\n\nexport const NodeProperties = (props: Props) => {\n  const [updatedItem, setUpdatedItem] = React.useState(null);\n  const [defaultName, setDefaultName] = React.useState(\"\");\n\n  const [name, setName] = React.useState(\"\");\n  const [showInput, setShowInput] = React.useState(false);\n\n  const forceUpdate = useForceUpdate();\n\n  React.useMemo(() => {\n    setUpdatedItem(props.selectedItem);\n    setName(props.selectedItem.getOptions().name);\n    setDefaultName(props.selectedItem.getOptions().name);\n  }, [props.selectedItem]);\n\n  React.useEffect(() => {\n    props.selectedItem.setLocked();\n\n    return () => {\n      props.selectedItem.setLocked(false);\n    };\n  });\n\n  const handleNameChange = (\n    event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>\n  ) => {\n    event.persist();\n    let allNodes = props.diagramEngine\n      .getModel()\n      .getNodes() as DefaultNodeModel[];\n\n    let names = allNodes.map((node) =>\n      node.getOptions().name.toLowerCase().trim()\n    );\n\n    names.includes(event.target.value.toLowerCase().trim())\n      ? (updatedItem.getOptions().name = defaultName)\n      : (updatedItem.getOptions().name = event.target.value.trim());\n    forceUpdate();\n  };\n\n  // const iconStyles: React.CSSProperties = {\n  //   display: \"flex\",\n  //   flexDirection: \"row\",\n  //   flexFlow: \"row-reverse\",\n  //   position: \"absolute\",\n  //   right: \"0\",\n  //   top: \"10px\",\n  //   zIndex: 9999,\n  // };\n\n  // const acceptStyle: React.CSSProperties = {\n  //   marginRight: 5,\n  //   backgroundColor: \"green\",\n  //   borderRadius: \"90px\",\n  //   padding: \"10px\",\n  // };\n\n  // const declineStyle: React.CSSProperties = {\n  //   marginRight: \"20px\",\n  //   backgroundColor: \"red\",\n  //   borderRadius: \"90px\",\n  //   padding: \"10px\",\n  // };\n\n  if (!updatedItem) return null;\n  else\n    return (\n      <div className=\"trayBottom\">\n        {/* <div style={iconStyles}>\n              <span\n                style={declineStyle}\n                className={`mi ${\n                  \"mi-Cancel\"\n                }`}\n              />\n                <span\n                  style={acceptStyle}\n                  className={`mi ${\n                    \"mi-Accept\"\n                  }`}\n                />\n            </div> */}\n        <Grid>\n          <Row>\n            <Col>\n              {!showInput ? (\n                <h1\n                  style={{ wordBreak: \"break-all\" }}\n                  onDoubleClick={() => setShowInput(true)}\n                >\n                  {name}\n                </h1>\n              ) : props.selectedItem.isLabel ? (\n                <textarea\n                  style={{ height: \"200px\" }}\n                  className=\"darkInput fs-28\"\n                  defaultValue={name}\n                  onChange={(event) => handleNameChange(event)}\n                ></textarea>\n              ) : (\n\n                 <DarkInput\n                  fontSize={28}\n                  type=\"text\"\n                  defaultValue={name}\n                  onChange={(event) => handleNameChange(event)}\n                  ></DarkInput> \n              )}\n            </Col>\n\n            {!updatedItem.isLabel ? (\n              <PropertyTable\n                selectedItem={props.selectedItem}\n                diagramEngine={props.diagramEngine}\n                isLogic={props.isLogic}\n              />\n            ) : null}\n          </Row>\n        </Grid>\n      </div>\n    );\n};\n","import \"./ResultPopup.scss\";\nimport React, { useState } from \"react\";\nimport Popup from \"reactjs-popup\";\nimport sqlFormatter from \"sql-formatter\";\nimport FileSaver from \"file-saver\";\n\nclass Props {\n  isOpen: boolean;\n  generateScript?: (name: string) => void;\n  mssqlString: string;\n  mysqlString: string;\n  update: () => void;\n}\n\nexport const ResultPopup = (props: Props) => {\n  const [dbName, setDbName] = useState(\"DatabaseName\");\n  const [mySQLView, setmySQLView] = useState(false);\n\n  let formatedMSSQL =\n    props.mssqlString &&\n    sqlFormatter.format(props.mssqlString, {\n      language: \"sql\", // Defaults to \"sql\"\n      indent: \"  \", // Defaults to two spaces\n    });\n\n  let formatedMySQL =\n    props.mysqlString &&\n    sqlFormatter.format(props.mysqlString, {\n      language: \"db2\", // Defaults to \"sql\"\n      indent: \"  \", // Defaults to two spaces\n    });\n\n  // useEffect(() => {\n  //   formatedMSSQL = '';\n  //   formatedMySQL = '';\n  // }, [props.mssqlString, props.mysqlString])\n\n  const downloadMSSQL = () => {\n    var blob = new Blob([formatedMSSQL], { type: \"text/plain;charset=utf-8\" });\n    FileSaver.saveAs(blob, `${dbName}.sql`);\n    props.update();\n  };\n\n  const downloadMYSQL = () => {\n    var blob = new Blob([formatedMySQL], { type: \"text/plain;charset=utf-8\" });\n    FileSaver.saveAs(blob, `${dbName}.sql`);\n    props.update();\n  };\n\n  return (\n    <Popup modal closeOnDocumentClick open={props.isOpen} closeOnEscape>\n      <div className=\"sql-result-dialog\">\n        <input\n          style={{ marginRight: \"10px\" }}\n          type=\"text\"\n          onChange={(event) => setDbName(event.target.value)}\n          value={dbName}\n        />\n\n        <button\n          style={{ marginRight: \"10px\" }}\n          onClick={() => {\n            props.generateScript(dbName);\n          }}\n        >\n          Generate\n        </button>\n\n        <button\n          className={`${mySQLView ? \"\" : \"selected-sql\"}`}\n          onClick={() => {\n            setmySQLView(false);\n          }}\n        >\n          MSSQL\n        </button>\n\n        <button\n          className={`${mySQLView ? \"selected-sql\" : \"\"}`}\n          onClick={() => {\n            setmySQLView(true);\n          }}\n        >\n          MySQL\n        </button>\n\n        <textarea\n          style={{ marginTop: \"5px\" }}\n          readOnly={true}\n          value={mySQLView ? formatedMySQL : formatedMSSQL}\n          contentEditable={false}\n        ></textarea>\n\n        <button style={{ marginRight: \"10px\" }} onClick={downloadMSSQL}>\n          Download MSSQL\n        </button>\n        <button style={{ marginRight: \"10px\" }} onClick={downloadMYSQL}>\n          Download mySQL\n        </button>\n      </div>\n    </Popup>\n  );\n};\n","import { ResultPopup } from \"../components/popups/ResultPopup/ResultPopup\";\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\n\nclass Props {\n  isUml: boolean;\n  isLogic: boolean;\n  isOpen: boolean;\n  serializeDiagram: any;\n  update: () => void;\n}\n\nexport const GenerationHandler = (props: Props) => {\n  const [sqlString, setSqlString] = useState(\"\");\n  const [mysqlString, setMySqlString] = useState(\"\");\n\n  useEffect(() => setSqlString(\"\"), [props.isOpen]);\n\n  const generateScript = async (name: string) => {\n    const serDiagram = props.serializeDiagram;\n    const dNodes = serDiagram[\"layers\"][1][\"models\"];\n\n    const nodes = Object.keys(dNodes).map((id) => {\n      return dNodes[id];\n    });\n\n    const dLinks = serDiagram[\"layers\"][0][\"models\"];\n    const links = Object.keys(dLinks).map((id) => {\n      return dLinks[id];\n    });\n\n    const diagramJson = {\n      nodes,\n      links,\n    };\n    const diagram = JSON.stringify(diagramJson, null, 2);\n\n    const response = await axios.post(\n      \"https://sql-generator.pl/api/setjob/mssql\",\n      {\n        // let response = await axios.post(\"https://51.83.185.113/api/setjob/mssql\", {\n        // let response = await axios.post(\"http://localhost:5000/api/setjob/mssql\", {\n\n        SerializedModel: diagram,\n        DatabaseName: name,\n        RelationType: props.isUml ? \"UML\" : \"CHEN\",\n        DiagramType: props.isLogic ? \"Logic\" : \"Conceptual\",\n      }\n    );\n\n    const responseMy = await axios.post(\n      \"https://sql-generator.pl/api/setjob/mysql\",\n      {\n        // let responseMy = await axios.post(\"http://localhost:5000/api/setjob/mysql\", {\n        SerializedModel: diagram,\n        DatabaseName: name,\n        RelationType: props.isUml ? \"UML\" : \"CHEN\",\n        DiagramType: props.isLogic ? \"Logic\" : \"Conceptual\",\n      }\n    );\n\n    if (response.status === 200 && responseMy.status === 200) {\n      setSqlString(response.data);\n      setMySqlString(responseMy.data);\n    } else {\n      setSqlString(\"There was an error while processing your request\");\n      setMySqlString(\"There was an error while processing your request\");\n\n      console.log(\"there was an error while processing your request\");\n    }\n  };\n\n  return (\n    <ResultPopup\n      update={props.update}\n      mssqlString={sqlString}\n      mysqlString={mysqlString}\n      generateScript={(name) => generateScript(name)}\n      isOpen={props.isOpen}\n    />\n  );\n};\n","import \"./LoadFilePopup.scss\";\nimport React, { useState } from \"react\";\nimport Popup from \"reactjs-popup\";\n\nclass Props {\n  isOpen: boolean;\n  loadDiagram?: (name: string) => void;\n  update: () => void;\n}\n\nexport const LoadFilePopup = (props: Props) => {\n  let fileReader: FileReader;\n\n  const [fileContent, setFileContent] = useState(\"\");\n\n  const handleFileRead = (e: any) => {\n    const content = fileReader.result;\n    setFileContent(content as string);\n  };\n\n  const handleFileChosen = (name: any) => {\n    fileReader = new FileReader();\n    fileReader.onloadend = handleFileRead;\n    fileReader.readAsText(name);\n  };\n\n  return (\n    <Popup\n      modal\n      closeOnDocumentClick\n      open={props.isOpen}\n      closeOnEscape\n      onClose={() => props.update()}\n    >\n      <div className=\"sql-result-dialog\">\n        <input\n          type=\"file\"\n          onChange={(event) => handleFileChosen(event.target.files[0])}\n          accept=\".dbjson\"\n        />\n        <button onClick={() => props.loadDiagram(fileContent)}>Load</button>\n      </div>\n    </Popup>\n  );\n};\n","import React from \"react\";\nimport { LoadFilePopup } from \"../components/popups/LoadFilePopup/LoadFilePopup\";\nimport { Application } from \"../components/Application\";\nimport { DiagramModel } from \"@projectstorm/react-diagrams\";\n\nclass Props {\n  isOpen: boolean;\n  app: Application;\n  update: () => void;\n  setIsUml: (isUml: boolean) => void;\n  setIsLogic: (isLogic: boolean) => void;\n}\n\nexport const LoadFileHandler = (props: Props) => {\n  const loadDiagram = (name: string) => {\n    const engine = props.app.getDiagramEngine();\n    try {\n      const obj: {\n        diagram: ReturnType<DiagramModel[\"serialize\"]>;\n        isUml: boolean;\n        isLogic: boolean;\n      } = JSON.parse(name);\n\n      props.setIsUml(obj.isUml);\n      obj.isLogic ? props.setIsLogic(obj.isLogic) : props.setIsLogic(false);\n\n      let model2 = new DiagramModel();\n\n      model2.deserializeModel(obj.diagram, engine);\n\n      model2.getLinks().forEach((link) => {\n        link.getLabels().splice(0, 3);\n      });\n\n      if (obj.isLogic) {\n        props.app.loadLogicModel(model2);\n      } else {\n        props.app.loadConceptualModel(model2);\n      }\n\n      engine.repaintCanvas();\n      props.update();\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  return (\n    <LoadFilePopup\n      update={props.update}\n      loadDiagram={(name) => loadDiagram(name)}\n      isOpen={props.isOpen}\n    />\n  );\n};\n","import \"./SaveToFilePopup.scss\";\nimport React, { useState } from \"react\";\nimport Popup from \"reactjs-popup\";\nimport FileSaver from \"file-saver\";\nimport { DiagramModel } from \"@projectstorm/react-diagrams\";\n\nclass Props {\n  isUml: boolean;\n  isLogic: boolean;\n\n  isOpen: boolean;\n  diagramModel: DiagramModel;\n  update: () => void;\n}\n\nexport const SaveToFilePopup = (props: Props) => {\n  const [fileName, setFileName] = useState(\"diagram\");\n\n  const download = () => {\n    const diagramJson = JSON.stringify({\n      diagram: props.diagramModel.serialize(),\n      isUml: props.isUml,\n      isLogic: props.isLogic,\n    });\n\n    let blob = new Blob([diagramJson], { type: \"text/plain;charset=utf-8\" });\n    FileSaver.saveAs(blob, `${fileName}.dbjson`);\n    props.update();\n  };\n\n  return (\n    <Popup\n      modal\n      closeOnDocumentClick\n      open={props.isOpen}\n      closeOnEscape\n      onClose={() => props.update()}\n    >\n      <div className=\"sql-result-dialog\">\n        <input\n          type=\"text\"\n          onChange={(event) => setFileName(event.target.value)}\n          value={fileName}\n        />\n        <button onClick={download}>save</button>\n      </div>\n    </Popup>\n  );\n};\n","import \"./SaveToJpegPopup.scss\";\nimport React, { useState } from \"react\";\nimport Popup from \"reactjs-popup\";\nimport domtoimage from \"dom-to-image\";\nimport { DiagramModel } from \"@projectstorm/react-diagrams\";\n\nclass Props {\n  isOpen: boolean;\n  diagramModel: DiagramModel;\n  update: () => void;\n}\n\nexport const SaveToJpegPopup = (props: Props) => {\n  const [fileName, setFileName] = useState(\"diagram\");\n\n  const download = () => {\n    domtoimage\n      .toJpeg(document.getElementById(\"diagram-layer\"), { quality: 0.95 })\n      .then((dataUrl: any) => {\n        let link = document.createElement(\"a\");\n        link.download = `${fileName}.jpeg`;\n        link.href = dataUrl;\n        link.click();\n        props.update();\n      });\n  };\n\n  return (\n    <Popup\n      modal\n      closeOnDocumentClick\n      open={props.isOpen}\n      closeOnEscape\n      onClose={() => props.update()}\n    >\n      <div className=\"sql-result-dialog\">\n        <input\n          type=\"text\"\n          onChange={(event) => setFileName(event.target.value)}\n          value={fileName}\n        />\n        <button onClick={download}>save</button>\n      </div>\n    </Popup>\n  );\n};\n","import React, { useState } from \"react\";\nimport Popup from \"reactjs-popup\";\nimport { DefaultLinkModel } from \"../../../infrastructure/models/DefaultLinkModel\";\nimport { DefaultLabelModel } from \"../../../infrastructure/models/DefaultLabelModel\";\nimport { DefaultNodeModel } from \"../../../infrastructure/models/DefaultNodeModel\";\nimport { AdvancedPortModel } from \"../../../infrastructure/models/ArrowPortModel\";\nimport { DiagramEngine } from \"@projectstorm/react-diagrams\";\nimport { PropertyTable } from \"../../PropertyTable/PropertyTable\";\nimport { DefaultPortModel } from \"../../../infrastructure/models/DefaultPortModel\";\nimport { ArrowLinkModel } from \"../../../infrastructure/models/ArrowLinkModel\";\nimport { Toolkit } from \"../../../infrastructure/Toolkit\";\nimport styled from \"@emotion/styled\";\n\nnamespace S {\n  export const GridContainer = styled.div`\n    display: grid;\n    grid-template-columns: auto auto auto;\n  `;\n\n  export const GridItem = styled.div`\n    background-color: rgba(255, 255, 255, 0.274);\n    padding: 10px;\n    text-align: center;\n  `;\n}\nclass Props {\n  isOpen: boolean;\n  link: DefaultLinkModel;\n  update: () => void;\n  diagramEngine: DiagramEngine;\n  isLogic: boolean;\n}\nexport const RelationPopup = (props: Props) => {\n  const [left, setLeft] = useState(\"1, N\");\n\n  const [right, setRight] = useState(\"1, N\");\n\n  const [relationName, setRelationName] = useState(\"relation name\");\n\n  React.useEffect(() => {\n    let leftLabel =\n      props.link &&\n      props.link.getLabels().length > 2 &&\n      (props.link.getLabels()[0] as DefaultLabelModel).getOptions().label;\n    let relLabel =\n      props.link &&\n      props.link.getLabels().length > 2 &&\n      (props.link.getLabels()[1] as DefaultLabelModel).getOptions().label;\n    let rightLabel =\n      props.link &&\n      props.link.getLabels().length > 2 &&\n      (props.link.getLabels()[2] as DefaultLabelModel).getOptions().label;\n\n    setLeft(leftLabel ? leftLabel : \"1, N\");\n    setRelationName(relLabel ? relLabel : \"relation name\");\n    setRight(rightLabel ? rightLabel : \"1, N\");\n  }, [props.link]);\n\n  let update = () => {\n    let labels = props.link.getLabels() as DefaultLabelModel[];\n    labels[0].getOptions().label = left;\n    labels[2].getOptions().label = right;\n    labels[1].getOptions().label = relationName;\n    let points = props.link.getPoints();\n    for (let index = 1; index < points.length - 1; index++) {\n      const element = points[index];\n      element.remove();\n    }\n    props.update();\n  };\n\n  const sourcePort =\n    props.link &&\n    props.link.getSourcePort() &&\n    (props.link.getSourcePort().getParent() as DefaultNodeModel);\n  const targetPort =\n    props.link &&\n    props.link.getTargetPort() &&\n    (props.link.getTargetPort().getParent() as DefaultNodeModel);\n\n  const remove = () => {\n    const sourceP = props.link && props.link.getSourcePort();\n    const targetP = props.link && props.link.getTargetPort();\n    sourceP.removeLink(props.link);\n    targetP.removeLink(props.link);\n\n    props.diagramEngine.getModel().removeLink(props.link);\n\n    if (props.isLogic) {\n      let thisParent = props.link\n        .getTargetPort()\n        .getParent() as DefaultNodeModel;\n      let portNode = props.link.getSourcePort().getParent() as DefaultNodeModel;\n\n      let portNodePorts = portNode.getPorts() as {\n        [s: string]: AdvancedPortModel;\n      };\n      let thisParentPorts = thisParent.getPorts() as {\n        [s: string]: AdvancedPortModel;\n      };\n\n      let czyMaPortZPKjakoFk = Object.keys(thisParentPorts).filter(\n        (id) => thisParentPorts[id].fkPortId === portNode.getOptions().id\n      )[0];\n      let czyMaPortZPKjakoFk2 = Object.keys(portNodePorts).filter(\n        (id) => portNodePorts[id].fkPortId === thisParent.getOptions().id\n      )[0];\n\n      if (czyMaPortZPKjakoFk) {\n        thisParent.removePort(thisParentPorts[czyMaPortZPKjakoFk]);\n      } else {\n        portNode.removePort(portNodePorts[czyMaPortZPKjakoFk2]);\n      }\n    }\n\n    props.update();\n  };\n\n  const options = (\n    <>\n      <option value=\"0, N\">0, N</option>\n      <option value=\"1, N\">1, N</option>\n      <option value=\"0, 1\">0, 1</option>\n      <option value=\"1, 1\">1, 1</option>\n      <option value=\"N, N\">N, N</option>\n    </>\n  );\n\n  const renderOptionPicker = (side: string) => {\n    return (\n      // <div className=\"grid-item\">\n      <S.GridItem>\n\n        <select\n          className=\"darkSelect\"\n          onChange={(event) =>\n            side === \"left\"\n              ? setLeft(event.target.value)\n              : setRight(event.target.value)\n          }\n          value={side === \"left\" ? left : right}\n        >\n          {options}\n        </select>\n      </S.GridItem>\n      // </div>\n    );\n  };\n\n  const reverseLink = () => {\n    let thisParent = props.link.getTargetPort().getParent() as DefaultNodeModel;\n    let portNode = props.link.getSourcePort().getParent() as DefaultNodeModel;\n\n    let portNodePorts = portNode.getPorts() as {\n      [s: string]: DefaultPortModel;\n    };\n    let thisParentPorts = thisParent.getPorts() as {\n      [s: string]: DefaultPortModel;\n    };\n\n    // let portNodePorts = portNode.getPorts() as {[s: string]: LogicPort};\n    // let thisParentPorts = thisParent.getPorts() as {[s: string]: LogicPort};\n\n    let czyMaPortZPKjakoFk = Object.keys(thisParentPorts).filter(\n      (id) => thisParentPorts[id].fkPortId === portNode.getOptions().id\n    )[0];\n    let czyMaPortZPKjakoFk2 = Object.keys(portNodePorts).filter(\n      (id) => portNodePorts[id].fkPortId === thisParent.getOptions().id\n    )[0];\n\n    if (czyMaPortZPKjakoFk) {\n      thisParent.removePort(thisParentPorts[czyMaPortZPKjakoFk]);\n      let pk = Object.keys(thisParentPorts).filter(\n        (id) => thisParentPorts[id].isPrimaryKey\n      )[0];\n      portNode.addPort(\n        new AdvancedPortModel(\n          // true,\n          thisParent.getOptions().name + thisParentPorts[pk].getOptions().name,\n          false,\n          false,\n          false,\n          true,\n          false,\n          true,\n          true,\n          \"INT\",\n          Toolkit.UID(),\n          thisParent.getOptions().id\n        )\n      );\n    } else {\n      portNode.removePort(portNodePorts[czyMaPortZPKjakoFk2]);\n\n      let pk = Object.keys(portNodePorts).filter(\n        (id) => portNodePorts[id].isPrimaryKey\n      )[0];\n      portNode.addPort(\n        new AdvancedPortModel(\n          // true,\n\n          portNode.getOptions().name + portNodePorts[pk].getOptions().name,\n          false,\n          false,\n          false,\n          true,\n          false,\n          true,\n          true,\n          \"INT\",\n          Toolkit.UID(),\n          portNode.getOptions().id\n        )\n      );\n    }\n\n    let newSourceP = props.link.getTargetPort();\n    let newTargetP = props.link.getSourcePort();\n    let model = props.diagramEngine.getModel();\n\n    model.removeLink(props.link);\n\n    let link = new ArrowLinkModel({ type: \"arrow\" });\n\n    link.setSourcePort(newSourceP);\n    link.setTargetPort(newTargetP);\n    model.addLink(link);\n\n    props.update();\n  };\n\n  if (props.isLogic) {\n    return (\n      <Popup modal closeOnDocumentClick open={props.isOpen} closeOnEscape>\n        <>\n          <S.GridItem>\n            <button onClick={remove}>Remove</button>\n          </S.GridItem>\n          <S.GridItem>\n            <button onClick={reverseLink}>Reverse</button>\n          </S.GridItem>\n        </>\n      </Popup>\n    );\n  } else\n    return (\n      <Popup modal closeOnDocumentClick open={props.isOpen} closeOnEscape>\n        <>\n          <S.GridContainer>\n            <S.GridItem>\n\n              <p>{sourcePort && sourcePort.getOptions().name}</p>\n            </S.GridItem>\n\n            <S.GridItem>\n              <input\n                type=\"text\"\n                defaultValue={relationName}\n                onChange={(event) => setRelationName(event.target.value)}\n              ></input>\n            </S.GridItem>\n            <S.GridItem>\n\n              <p>{targetPort && targetPort.getOptions().name}</p>\n            </S.GridItem>\n            {renderOptionPicker(\"left\")}\n            <S.GridItem>\n\n              <button onClick={update}>SAVE</button>\n            </S.GridItem>\n            {renderOptionPicker(\"right\")}\n            <S.GridItem></S.GridItem>\n            <S.GridItem>\n\n              <button onClick={remove}>Remove</button>\n            </S.GridItem>\n            </S.GridContainer>\n          {props.link && (\n            <div>\n              <h3 style={{ margin: 0 }}>Atributes:</h3>\n              <PropertyTable\n                relView={true}\n                diagramEngine={props.diagramEngine}\n                selectedItem={props.link.properties}\n                isLogic={props.isLogic}\n              />\n            </div>\n          )}\n        </>\n      </Popup>\n    );\n};\n","import * as React from \"react\";\nimport * as _ from \"lodash\";\nimport { TrayWidget } from \"./TrayWidget\";\nimport { TrayItemWidget } from \"./TrayItemWidget\";\nimport { PointModel } from \"@projectstorm/react-diagrams\";\nimport { CanvasWidget } from \"@projectstorm/react-canvas-core\";\nimport styled from \"@emotion/styled\";\nimport { DemoCanvasWidget } from \"../helpers/DemoCanvasWidget\";\nimport { Application } from \"./Application\";\nimport { AdvancedPortModel } from \"../infrastructure/models/ArrowPortModel\";\nimport { TrayItemDiv } from \"./TrayItemDiv\";\nimport {\n  NodeProperties,\n  useForceUpdate,\n} from \"./NodeProperties/NodeProperties\";\nimport { DefaultLinkModel } from \"../infrastructure/models/DefaultLinkModel\";\nimport { GenerationHandler } from \"../handlers/GenerationHandler\";\nimport { LoadFileHandler } from \"../handlers/LoadFileHandler\";\nimport { SaveToFilePopup } from \"./popups/SaveToFilePopup/SaveToFilePopup\";\nimport { SaveToJpegPopup } from \"./popups/SaveToJpegPopup/SaveToJpegPopup\";\nimport { RelationPopup } from \"./popups/RealtionPopup/RelationPopup\";\nimport { DefaultPortModel } from \"../infrastructure/models/DefaultPortModel\";\nimport { DefaultLabelModel } from \"../infrastructure/models/DefaultLabelModel\";\nimport { DefaultNodeModel } from \"../infrastructure/models/DefaultNodeModel\";\n\nexport interface BodyWidgetProps {\n  app: Application;\n}\nnamespace S {\n  export const Body = styled.div`\n    flex-grow: 1;\n    display: flex;\n    flex-direction: column;\n    min-height: 100%;\n  `;\n\n  export const Header = styled.div`\n    display: flex;\n    background: rgb(30, 30, 30);\n    flex-grow: 0;\n    flex-shrink: 0;\n    color: white;\n    font-family: Helvetica, Arial, sans-serif;\n    padding: 12px;\n    align-items: center;\n  `;\n\n  export const Content = styled.div`\n    display: flex;\n    flex-grow: 1;\n  `;\n\n  export const Layer = styled.div`\n    position: relative;\n    flex-grow: 1;\n  `;\n\n  export const DropdownIcon = styled.span`\n    display: inline-block;\n    padding-top: 3px;\n    padding-right: 5px;\n  `;\n}\n\nexport const BodyWidget = (props: BodyWidgetProps) => {\n  const [showDialog, setShowDialog] = React.useState(false);\n  const [showRelationDialog, setShowRelationDialog] = React.useState(false);\n  const [showLoadFileDialog, setShowLoadFileDialog] = React.useState(false);\n  const [showSaveFileDialog, setSaveFileDialog] = React.useState(false);\n  const [showSaveJPEGDialog, setSaveJPEGDialog] = React.useState(false);\n  const [showSaveOptions, setSaveOptions] = React.useState(false);\n\n  const [selectedNode, setSelectedNode] = React.useState(null);\n  const [selectedLink, setSelectedLink] = React.useState(null);\n\n  const [isUml, setIsUml] = React.useState(true);\n\n  const [isLogicModel, setIsLogicModel] = React.useState(false);\n\n  const forceUpdate = useForceUpdate();\n\n  React.useEffect(() => {\n    setSelectedNode(null);\n    setSelectedLink(null);\n  }, []);\n\n  const changeRelation = () => {\n    let links = props.app.getDiagramEngine().getModel().getLinks();\n    links.forEach((link) => {\n      let temp = (link.getLabels()[0] as DefaultLabelModel)\n        .getOptions()\n        .label.substring(0, 1);\n      let temp2 = (link.getLabels()[2] as DefaultLabelModel)\n        .getOptions()\n        .label.substring(0, 1);\n\n      (link.getLabels()[0] as DefaultLabelModel).getOptions().label =\n        temp2 +\n        (link.getLabels()[0] as DefaultLabelModel)\n          .getOptions()\n          .label.substring(1);\n      (link.getLabels()[2] as DefaultLabelModel).getOptions().label =\n        temp +\n        (link.getLabels()[2] as DefaultLabelModel)\n          .getOptions()\n          .label.substring(1);\n    });\n  };\n\n  const refreshPopups = () => {\n    setSelectedLink(null);\n    setSelectedNode(null);\n\n    setShowDialog(false);\n    setSaveFileDialog(false);\n    setSaveJPEGDialog(false);\n    setSaveOptions(false);\n    setShowLoadFileDialog(false);\n    setShowRelationDialog(false);\n  };\n\n  return (\n    <S.Body>\n      <S.Header>DB Diagram Scripter</S.Header>\n      <S.Content>\n        <TrayWidget>\n          <TrayItemWidget\n            model={{ type: \"default\" }}\n            name={isLogicModel ? \"Relation\" : \"Entity\"}\n            color=\"rgb(0,192,255)\"\n          />\n          <TrayItemWidget\n            model={{ type: \"label\" }}\n            name=\"Label\"\n            color=\"rgb(192,255,0)\"\n          />\n\n          <TrayItemDiv\n            name=\"Load Diagram\"\n            color=\"rgb(255,123,0)\"\n            marginTop=\"75px\"\n            onClick={() => {\n              setShowLoadFileDialog(true);\n              setSelectedNode(null);\n            }}\n          />\n\n          <TrayItemDiv\n            color=\"rgb(255,123,0)\"\n            onClick={() => {\n              setSaveOptions(!showSaveOptions);\n              setSelectedNode(null);\n            }}\n          >\n            <>\n              Save\n              <S.DropdownIcon\n                className={`mi ${\n                  !showSaveOptions ? \"mi-ArrowDown8\" : \"mi-ArrowUp8\"\n                }`}\n              />\n            </>\n          </TrayItemDiv>\n\n          {showSaveOptions && (\n            <TrayItemDiv\n              name=\"File\"\n              color=\"rgb(255,123,0)\"\n              onClick={() => {\n                setSaveFileDialog(true);\n                setSelectedNode(null);\n              }}\n            />\n          )}\n          {showSaveOptions && (\n            <TrayItemDiv\n              name=\"JPEG\"\n              color=\"rgb(255,123,0)\"\n              onClick={() => {\n                setSaveJPEGDialog(true);\n                setSelectedNode(null);\n              }}\n            />\n          )}\n\n          <TrayItemDiv\n            isSelected={!isLogicModel}\n            name=\"Conceptual View\"\n            color=\"rgb(0,50,100)\"\n            marginTop=\"75px\"\n            onClick={() => {\n              if (isLogicModel) {\n                props.app.setConceptualModel();\n                setIsLogicModel(false);\n              }\n            }}\n          />\n\n          <TrayItemDiv\n            isSelected={isLogicModel}\n            name=\"Logical View\"\n            color=\"rgb(0,50,100)\"\n            onClick={() => {\n              if (!isLogicModel) {\n                props.app.setLogicModel();\n                setIsLogicModel(true);\n              }\n            }}\n          />\n\n          <TrayItemDiv\n            isDisabled={isLogicModel}\n            isSelected={isUml}\n            name=\"UML\"\n            color=\"rgb(152,50,100)\"\n            marginTop=\"75px\"\n            onClick={() => {\n              if (!isLogicModel && !isUml) {\n                changeRelation();\n                setIsUml(true);\n              }\n            }}\n          />\n\n          <TrayItemDiv\n            isDisabled={isLogicModel}\n            isSelected={!isUml}\n            name=\"Chen\"\n            color=\"rgb(152,50,100)\"\n            onClick={() => {\n              if (!isLogicModel && isUml) {\n                changeRelation();\n                setIsUml(false);\n              }\n            }}\n          />\n\n          <TrayItemDiv\n            name=\"Create DB Code\"\n            color=\"rgb(255,0,0)\"\n            marginTop=\"60px\"\n            onClick={() => {\n              setShowDialog(true);\n              setSelectedNode(null);\n            }}\n          />\n        </TrayWidget>\n        <S.Layer\n          id=\"diagram-layer\"\n          onDrop={(event) => {\n            var data = JSON.parse(\n              event.dataTransfer.getData(\"storm-diagram-node\")\n            );\n\n            let allNodes = props.app\n              .getDiagramEngine()\n              .getModel()\n              .getNodes() as DefaultNodeModel[];\n\n            let names = allNodes.map((node) =>\n              node.getOptions().name.toLowerCase().trim()\n            );\n\n            var nodesCount = _.keys(\n              props.app.getDiagramEngine().getModel().getNodes()\n            ).length;\n\n            let newNodeName = names.includes(\n              `Entity${nodesCount + 1}`.toLowerCase().trim()\n            )\n              ? `Entity${nodesCount + 1}_${nodesCount + 1}`\n              : `Entity${nodesCount + 1}`;\n\n            var node: DefaultNodeModel;\n            if (data.type === \"default\") {\n              node = new DefaultNodeModel(false, newNodeName, \"rgb(0,192,255)\");\n\n              if (isLogicModel) {\n                node.addPort(\n                  new AdvancedPortModel(\n                    \"Id\",\n                    false,\n                    true,\n                    false,\n                    false,\n                    true,\n                    true,\n                    true,\n                    \"INT\"\n                  )\n                );\n                node.addPort(\n                  new AdvancedPortModel(\n                    \"\",\n                    true,\n                    false,\n                    false,\n                    false,\n                    false,\n                    false,\n                    false,\n                    \"INT\"\n                  )\n                );\n                node.addPort(\n                  new AdvancedPortModel(\n                    \"1\",\n                    true,\n                    false,\n                    false,\n                    false,\n                    false,\n                    false,\n                    false,\n                    \"INT\"\n                  )\n                );\n              } else {\n                node.addPort(\n                  new DefaultPortModel(\n                    isLogicModel,\n                    \"Id\",\n                    false,\n                    true,\n                    false,\n                    false,\n                    true,\n                    true,\n                    true,\n                    \"INT\"\n                  )\n                );\n                node.addPort(\n                  new DefaultPortModel(\n                    isLogicModel,\n                    \"\",\n                    true,\n                    false,\n                    false,\n                    false,\n                    false,\n                    false,\n                    false,\n                    \"INT\"\n                  )\n                );\n                node.addPort(\n                  new DefaultPortModel(\n                    isLogicModel,\n                    \"1\",\n                    true,\n                    false,\n                    false,\n                    false,\n                    false,\n                    false,\n                    false,\n                    \"INT\"\n                  )\n                );\n              }\n            } else {\n              node = new DefaultNodeModel(true, \"Label \", \"rgb(192,255,0)\");\n            }\n\n            var point = props.app\n              .getDiagramEngine()\n              .getRelativeMousePoint(event);\n            node.setPosition(point);\n            props.app.getDiagramEngine().getModel().addNode(node);\n\n            forceUpdate();\n          }}\n          onDragOver={(event) => {\n            event.preventDefault();\n          }}\n          onClick={(event) => {\n            event.preventDefault();\n            if (\n              event.ctrlKey &&\n              props.app\n                .getDiagramEngine()\n                .getModel()\n                .getSelectedEntities()[0] instanceof PointModel\n            ) {\n              const pointToRemove = props.app\n                .getDiagramEngine()\n                .getModel()\n                .getSelectedEntities()[0] as PointModel;\n\n              pointToRemove.remove();\n            }\n            refreshPopups();\n          }}\n          onDoubleClick={(event) => {\n            event.preventDefault();\n            if (\n              props.app\n                .getDiagramEngine()\n                .getModel()\n                .getSelectedEntities()[0] instanceof PointModel\n            ) {\n              setSelectedLink(\n                props.app\n                  .getDiagramEngine()\n                  .getModel()\n                  .getSelectedEntities()[0]\n                  .getParent() as DefaultLinkModel\n              );\n              setShowRelationDialog(true);\n              setSelectedNode(null);\n            } else if (\n              props.app\n                .getDiagramEngine()\n                .getModel()\n                .getSelectedEntities()[0] instanceof DefaultNodeModel\n            ) {\n              refreshPopups();\n              let selectedNode = props.app\n                .getDiagramEngine()\n                .getModel()\n                .getSelectedEntities()[0] as DefaultNodeModel;\n\n              setSelectedNode(selectedNode);\n            }\n          }}\n        >\n          <DemoCanvasWidget>\n            <CanvasWidget\n              className=\"srd-demo-canvas\"\n              engine={props.app.getDiagramEngine()}\n            />\n          </DemoCanvasWidget>\n        </S.Layer>\n        {selectedNode != null ? (\n          <NodeProperties\n            isLogic={isLogicModel}\n            selectedItem={selectedNode}\n            diagramEngine={props.app.getDiagramEngine()}\n          />\n        ) : null}\n        <GenerationHandler\n          isUml={isUml}\n          isLogic={isLogicModel}\n          update={refreshPopups}\n          isOpen={showDialog}\n          serializeDiagram={props.app.getDiagramEngine().getModel().serialize()}\n        />\n        <LoadFileHandler\n          update={refreshPopups}\n          isOpen={showLoadFileDialog}\n          app={props.app}\n          setIsUml={setIsUml}\n          setIsLogic={setIsLogicModel}\n        />\n        <SaveToFilePopup\n          isLogic={isLogicModel}\n          update={refreshPopups}\n          diagramModel={props.app.getDiagramEngine().getModel()}\n          isOpen={showSaveFileDialog}\n          isUml={isUml}\n        />\n        <SaveToJpegPopup\n          update={refreshPopups}\n          diagramModel={props.app.getActiveDiagram()}\n          isOpen={showSaveJPEGDialog}\n        />\n\n        <RelationPopup\n          diagramEngine={props.app.getDiagramEngine()}\n          update={refreshPopups}\n          isOpen={showRelationDialog}\n          link={selectedLink}\n          isLogic={isLogicModel}\n        />\n      </S.Content>\n    </S.Body>\n  );\n};\n","import {\n  DefaultLinkWidget,\n  PointModel,\n  LinkWidget,\n} from \"@projectstorm/react-diagrams\";\nimport React from \"react\";\n\nconst CustomLinkArrowWidget = (props: any) => {\n  const { point, previousPoint } = props;\n  const [, setSelected] = React.useState(false);\n  const angle =\n    90 +\n    (Math.atan2(\n      point.getPosition().y - previousPoint.getPosition().y,\n      point.getPosition().x - previousPoint.getPosition().x\n    ) *\n      180) /\n      Math.PI;\n\n  //translate(50, -10),\n  return (\n    <g\n      className=\"arrow\"\n      transform={\n        \"translate(\" +\n        point.getPosition().x +\n        \", \" +\n        point.getPosition().y +\n        \")\"\n      }\n    >\n      <g style={{ transform: \"rotate(\" + angle + \"deg)\" }}>\n        <g transform={\"translate(0, -3)\"}>\n          <polygon\n            points=\"0,10 8,30 -8,30\"\n            fill={props.color}\n            onMouseLeave={() => setSelected(false)}\n            onMouseEnter={() => setSelected(true)}\n            data-id={point.getID()}\n            data-linkid={point.getLink().getID()}\n          ></polygon>\n        </g>\n      </g>\n    </g>\n  );\n};\n\nexport class ArrowLinkWidget extends DefaultLinkWidget {\n  generateArrow(point: PointModel, previousPoint: PointModel): JSX.Element {\n    return (\n      <CustomLinkArrowWidget\n        key={point.getID()}\n        point={point as any}\n        previousPoint={previousPoint as any}\n        colorSelected={this.props.link.getOptions().selectedColor}\n        color={this.props.link.getOptions().color}\n      />\n    );\n  }\n\n  render() {\n    //ensure id is present for all points on the path\n    var points = this.props.link.getPoints();\n    var paths = [];\n    this.refPaths = [];\n\n    //draw the multiple anchors and complex line instead\n    for (let j = 0; j < points.length - 1; j++) {\n      paths.push(\n        this.generateLink(\n          LinkWidget.generateLinePath(points[j], points[j + 1]),\n          {\n            \"data-linkid\": this.props.link.getID(),\n            \"data-point\": j,\n            onMouseDown: (event: MouseEvent) => {\n              this.addPointToLink(event as any, j + 1);\n            },\n          },\n          j\n        )\n      );\n    }\n\n    //render the circles\n    for (let i = 0; i < points.length - 1; i++) {\n      paths.push(this.generateArrow(points[i], points[i + 1]));\n    }\n\n    if (this.props.link.getTargetPort() !== null) {\n      paths.push(this.generatePoint(points[points.length - 1]));\n    } else {\n      paths.push(this.generatePoint(points[points.length - 1]));\n    }\n\n    return (\n      <g data-default-link-test={this.props.link.getOptions().testName}>\n        {paths}\n      </g>\n    );\n  }\n}\n","import React from \"react\";\nimport { DefaultLinkFactory } from \"@projectstorm/react-diagrams\";\n\nimport { ArrowLinkModel } from \"../models/ArrowLinkModel\";\nimport { ArrowLinkWidget } from \"../widgets/ArrowLinkWidget\";\n\nexport class ArrowLinkFactory extends DefaultLinkFactory {\n  constructor() {\n    super(\"arrow\");\n  }\n\n  generateModel(): ArrowLinkModel {\n    return new ArrowLinkModel();\n  }\n\n  generateReactWidget(event: any): JSX.Element {\n    return <ArrowLinkWidget link={event.model} diagramEngine={this.engine} />;\n  }\n}\n","import * as React from \"react\";\nimport { DiagramEngine, PortWidget } from \"@projectstorm/react-diagrams-core\";\nimport { DefaultPortModel } from \"../models/DefaultPortModel\";\nimport styled from \"@emotion/styled\";\n\nexport interface DefaultPortLabelProps {\n  port: DefaultPortModel;\n  engine: DiagramEngine;\n}\n\nnamespace S {\n  export const PortLabel = styled.div`\n  display: flex;\n  margin-top: 1px;\n  align-items: center;\n`;\n\n  export const Label = styled.div`\n  flex-grow: 1;\n`;\n\n  export const Port = styled.div`\n  width: 15px;\n  height: 15px;\n  background: rgba(255, 255, 255, 0.1);\n\n  &:hover {\n    background: rgb(192, 255, 0);\n  }\n  `;\n\n  export const PrimaryKeyIcon = styled.span`\n    padding:  3px 5px;\n    color: black;\n    font-weight: 800;\n  `;\n\n  export const PortContainer = styled.div`\n    display: flex;\n    justify-content: flex-end;\n  `;\n\n  export const PortItem = styled.div`\n    display: inline-block;\n    margin-right: 5px;\n  `;\n\n  export const HiddenPort = styled(PortItem)`\n    display: none;\n  `;\n\n  export const NamedPort = styled(PortItem)`\n   margin-right: 5px;\n  `;\n}\n\nexport const DefaultPortLabel = (props: DefaultPortLabelProps) => {\n  let { port, engine } = props;\n\n  if (!port.isNamePort) {\n    port.setLocked();\n  }\n\n  let portJSX: JSX.Element = (\n    <PortWidget engine={engine} port={port}>\n      <S.Port />\n    </PortWidget>\n  );\n\n  const label: JSX.Element = (\n    <S.PortLabel>\n      <div>\n        {port.label}\n        {' '}\n        {port.propertyType}\n      </div>\n    </S.PortLabel>\n  );\n\n  const isPrimaryKey = port.isPrimaryKey &&\n    <S.PrimaryKeyIcon className=\"mi mi-Permissions\"></S.PrimaryKeyIcon>\n\n  if (port.isNamePort) {\n    return <S.NamedPort>{portJSX}</S.NamedPort>;\n  } else {\n    return (\n      <S.PortContainer>\n        <S.PortItem>{isPrimaryKey}</S.PortItem>\n        <S.PortItem>{label}</S.PortItem>\n        <S.HiddenPort>{portJSX}</S.HiddenPort>\n      </S.PortContainer>\n    );\n  }\n}\n","import * as React from \"react\";\nimport * as _ from \"lodash\";\nimport { DiagramEngine } from \"@projectstorm/react-diagrams-core\";\nimport { DefaultNodeModel } from \"../models/DefaultNodeModel\";\nimport { DefaultPortLabel } from \"../widgets/DefaultPortLabelWidget\";\nimport styled from \"@emotion/styled\";\nimport { DefaultPortModel } from \"../models/DefaultPortModel\";\n\n\nnamespace S {\n  export const Node = styled.div<{ background: string; selected: boolean }>`\n    background-color: ${(p) => p.background};\n    border-radius: 5px;\n    font-family: sans-serif;\n    color: white;\n    border: solid 2px black;\n    overflow: visible;\n    font-size: 11px;\n    border: solid 2px ${(p) => (p.selected ? \"rgb(0,192,255)\" : \"black\")};\n  `;\n\n  export const Title = styled.div`\n    background: rgba(0, 0, 0, 0.3);\n    display: flex;\n    white-space: nowrap;\n\n    justify-items: center;\n  `;\n\n  export const TitleName = styled.div`\n    flex-grow: 1;\n    padding: 5px 5px;\n  `;\n\n  export const Ports = styled.div`\n    display: flex;\n    background-image: linear-gradient(rgba(0, 0, 0, 0.1), rgba(0, 0, 0, 0.2));\n  `;\n\n  export const PortsContainer = styled.div`\n    flex-grow: 1;\n    display: flex;\n    flex-direction: column;\n\n    &:first-of-type {\n      margin-right: 10px;\n    }\n\n    &:only-child {\n      margin-right: 0px;\n    }\n  `;\n\n  export const NamedPortLeft = styled.div`\n    margin-top: 5px;\n    margin-left: 5px\n  `;\n\n  export const NamedPortRight = styled.div`\n    margin-top: 5px\n  `;\n}\n\n\nexport interface DefaultNodeProps {\n  node: DefaultNodeModel;\n  engine: DiagramEngine;\n}\n\nexport const DefaultNodeWidget = (props: DefaultNodeProps) => {\n  const generatePort = (port) => {\n    return (\n      <DefaultPortLabel\n        engine={props.engine}\n        port={port}\n        key={port.options.id}\n      />\n    );\n  };\n\n    let { node } = props;\n    let ports = node.getPorts() as { [s: string]: DefaultPortModel };\n    let portsJSX = _.map(ports, generatePort);\n    let namedPortsJSX = portsJSX.filter((p) => p.props.port.isNamePort);\n    let notNamedPortsJSX = portsJSX.filter((p) => !p.props.port.isNamePort);\n\n    return (\n      <S.Node\n        data-default-node-name={node.getOptions().name}\n        selected={node.isSelected()}\n        background={node.getOptions().color}\n      >\n        <S.Title>\n          {namedPortsJSX.length !== 0 && (\n            <S.NamedPortLeft>\n              {generatePort(namedPortsJSX[1].props.port)}\n            </S.NamedPortLeft>\n          )}\n\n          <S.TitleName>{node.getOptions().name}</S.TitleName>\n\n          {namedPortsJSX.length !== 0 && (\n            <S.NamedPortRight>\n              {generatePort(namedPortsJSX[0].props.port)}\n            </S.NamedPortRight>\n          )}\n        </S.Title>\n        <S.Ports>\n          <S.PortsContainer>{notNamedPortsJSX}</S.PortsContainer>\n        </S.Ports>\n      </S.Node>\n    );\n}\n","import * as React from \"react\";\nimport { DefaultNodeModel } from \"../models/DefaultNodeModel\";\nimport { DefaultNodeWidget } from \"../widgets/DefaultNodeWidget\";\nimport { AbstractReactFactory } from \"@projectstorm/react-canvas-core\";\nimport { DiagramEngine } from \"@projectstorm/react-diagrams-core\";\n\nexport class DefaultNodeFactory extends AbstractReactFactory<\n  DefaultNodeModel,\n  DiagramEngine\n> {\n  constructor() {\n    super(\"default\");\n  }\n\n  generateReactWidget(event): JSX.Element {\n    return <DefaultNodeWidget engine={this.engine} node={event.model} />;\n  }\n\n  generateModel(event): DefaultNodeModel {\n    return new DefaultNodeModel(false, \"Entity\", \"rgb(0,192,255)\");\n  }\n}\n","import * as React from \"react\";\nimport { DefaultLabelModel } from \"../models/DefaultLabelModel\";\nimport styled from \"@emotion/styled\";\n\nexport interface DefaultLabelWidgetProps {\n  model: DefaultLabelModel;\n}\n\nnamespace S {\n  export const Label = styled.div`\n  background: rgba(0, 0, 0, 0.8);\n  border-radius: 5px;\n  color: white;\n  font-size: 12px;\n  padding: 4px 8px;\n  font-family: sans-serif;\n  user-select: none;\n`;\n}\n\n\nexport class DefaultLabelWidget extends React.Component<\n  DefaultLabelWidgetProps\n> {\n  render() {\n    return <S.Label>{this.props.model.getOptions().label}</S.Label>;\n  }\n}\n","import * as React from \"react\";\nimport { DefaultLabelModel } from \"../models/DefaultLabelModel\";\nimport { DefaultLabelWidget } from \"../widgets/DefaultLabelWidget\";\nimport { AbstractReactFactory } from \"@projectstorm/react-canvas-core\";\nimport { DiagramEngine } from \"@projectstorm/react-diagrams-core\";\n\nexport class DefaultLabelFactory extends AbstractReactFactory<\n  DefaultLabelModel,\n  DiagramEngine\n> {\n  constructor() {\n    super(\"default\");\n  }\n\n  generateReactWidget(event): JSX.Element {\n    return <DefaultLabelWidget model={event.model} />;\n  }\n\n  generateModel(event): DefaultLabelModel {\n    return new DefaultLabelModel();\n  }\n}\n","import { DefaultPortModel } from \"../models/DefaultPortModel\";\nimport { AbstractModelFactory } from \"@projectstorm/react-canvas-core\";\nimport { DiagramEngine } from \"@projectstorm/react-diagrams-core\";\n\nexport class DefaultPortFactory extends AbstractModelFactory<\n  DefaultPortModel,\n  DiagramEngine\n> {\n  constructor() {\n    super(\"default\");\n  }\n\n  generateModel(): DefaultPortModel {\n    return new DefaultPortModel(false, \"port\", true, false);\n  }\n}\n","import * as React from \"react\";\nimport { PointModel } from \"@projectstorm/react-diagrams-core\";\nimport styled from \"@emotion/styled\";\n\nexport interface DefaultLinkPointWidgetProps {\n  point: PointModel;\n  color?: string;\n  colorSelected: string;\n}\n\nexport interface DefaultLinkPointWidgetState {\n  selected: boolean;\n}\n\nexport const PointTop = styled.circle`\n  pointer-events: all;\n`;\n\nexport class DefaultLinkPointWidget extends React.Component<\n  DefaultLinkPointWidgetProps,\n  DefaultLinkPointWidgetState\n> {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selected: false,\n    };\n  }\n\n  render() {\n    const { point } = this.props;\n    return (\n      <g>\n        <circle\n          cx={point.getPosition().x}\n          cy={point.getPosition().y}\n          r={5}\n          fill={\n            this.state.selected || this.props.point.isSelected()\n              ? this.props.colorSelected\n              : this.props.color\n          }\n        />\n        <PointTop\n          className=\"point\"\n          onMouseLeave={() => {\n            this.setState({ selected: false });\n          }}\n          onMouseEnter={() => {\n            this.setState({ selected: true });\n          }}\n          data-id={point.getID()}\n          data-linkid={point.getLink().getID()}\n          cx={point.getPosition().x}\n          cy={point.getPosition().y}\n          r={15}\n          opacity={0.0}\n        />\n      </g>\n    );\n  }\n}\n","import * as React from \"react\";\nimport { DefaultLinkFactory } from \"../factories/DefaultLinkFactory\";\nimport { DiagramEngine } from \"@projectstorm/react-diagrams-core\";\nimport { DefaultLinkModel } from \"../models/DefaultLinkModel\";\n\nexport interface DefaultLinkSegmentWidgetProps {\n  path: string;\n  link: DefaultLinkModel;\n  selected: boolean;\n  forwardRef: React.RefObject<SVGPathElement>;\n  factory: DefaultLinkFactory;\n  diagramEngine: DiagramEngine;\n  onSelection: (selected: boolean) => any;\n  extras: object;\n}\n\nexport class DefaultLinkSegmentWidget extends React.Component<\n  DefaultLinkSegmentWidgetProps\n> {\n  render() {\n    const Bottom = React.cloneElement(\n      this.props.factory.generateLinkSegment(\n        this.props.link,\n        this.props.selected || this.props.link.isSelected(),\n        this.props.path\n      ),\n      {\n        ref: this.props.forwardRef,\n      }\n    );\n\n    const Top = React.cloneElement(Bottom, {\n      strokeLinecap: \"round\",\n      onMouseLeave: () => {\n        this.props.onSelection(false);\n      },\n      onMouseEnter: () => {\n        this.props.onSelection(true);\n      },\n      ...this.props.extras,\n      ref: null,\n      \"data-linkid\": this.props.link.getID(),\n      strokeOpacity: this.props.selected ? 0.1 : 0,\n      strokeWidth: 20,\n      fill: \"none\",\n      onContextMenu: (event) => {\n        if (!this.props.link.isLocked()) {\n          event && event.preventDefault();\n          this.props.link.remove();\n        }\n      },\n    });\n\n    return (\n      <g>\n        {Bottom}\n        {Top}\n      </g>\n    );\n  }\n}\n","import * as React from \"react\";\nimport {\n  DiagramEngine,\n  LinkWidget,\n  PointModel,\n} from \"@projectstorm/react-diagrams-core\";\nimport { DefaultLinkModel } from \"../models/DefaultLinkModel\";\nimport { DefaultLinkPointWidget } from \"./DefaultLinkPointWidget\";\nimport { DefaultLinkSegmentWidget } from \"./DefaultLinkSegmentWidget\";\nimport { MouseEvent } from \"react\";\n\nexport interface DefaultLinkProps {\n  link: DefaultLinkModel;\n  diagramEngine: DiagramEngine;\n  pointAdded?: (point: PointModel, event: MouseEvent) => any;\n}\n\nexport interface DefaultLinkState {\n  selected: boolean;\n}\n\nexport class DefaultLinkWidget extends React.Component<\n  DefaultLinkProps,\n  DefaultLinkState\n> {\n  refPaths: React.RefObject<SVGPathElement>[];\n\n  constructor(props: DefaultLinkProps) {\n    super(props);\n    this.refPaths = [];\n    this.state = {\n      selected: false,\n    };\n  }\n\n  componentDidUpdate(): void {\n    this.props.link.setRenderedPaths(\n      this.refPaths.map((ref) => {\n        return ref.current;\n      })\n    );\n  }\n\n  componentDidMount(): void {\n    this.props.link.setRenderedPaths(\n      this.refPaths.map((ref) => {\n        return ref.current;\n      })\n    );\n  }\n\n  componentWillUnmount(): void {\n    this.props.link.setRenderedPaths([]);\n  }\n\n  addPointToLink(event: MouseEvent, index: number) {\n    if (\n      !event.shiftKey &&\n      !this.props.link.isLocked() &&\n      this.props.link.getPoints().length - 1 <=\n        this.props.diagramEngine.getMaxNumberPointsPerLink()\n    ) {\n      const point = new PointModel({\n        link: this.props.link,\n        position: this.props.diagramEngine.getRelativeMousePoint(event),\n      });\n      this.props.link.addPoint(point, index);\n      event.persist();\n      event.stopPropagation();\n      this.forceUpdate(() => {\n        this.props.diagramEngine.getActionEventBus().fireAction({\n          event,\n          model: point,\n        });\n      });\n    }\n  }\n\n  generatePoint(point: PointModel): JSX.Element {\n    return (\n      <DefaultLinkPointWidget\n        key={point.getID()}\n        point={point as any}\n        colorSelected={this.props.link.getOptions().selectedColor}\n        color={this.props.link.getOptions().color}\n      />\n    );\n  }\n\n  generateLink(\n    path: string,\n    extraProps: any,\n    id: string | number\n  ): JSX.Element {\n    const ref = React.createRef<SVGPathElement>();\n    this.refPaths.push(ref);\n    return (\n      <DefaultLinkSegmentWidget\n        key={`link-${id}`}\n        path={path}\n        selected={this.state.selected}\n        diagramEngine={this.props.diagramEngine}\n        factory={this.props.diagramEngine.getFactoryForLink(this.props.link)}\n        link={this.props.link}\n        forwardRef={ref}\n        onSelection={(selected) => {\n          this.setState({ selected: selected });\n        }}\n        extras={extraProps}\n      />\n    );\n  }\n\n  render() {\n    //ensure id is present for all points on the path\n    var points = this.props.link.getPoints();\n    var paths = [];\n    this.refPaths = [];\n\n    if (points.length === 2) {\n      paths.push(\n        this.generateLink(\n          this.props.link.getSVGPath(),\n          {\n            onMouseDown: (event) => {\n              this.addPointToLink(event, 1);\n            },\n          },\n          \"0\"\n        )\n      );\n\n      // draw the link as dangeling\n      if (this.props.link.getTargetPort() == null) {\n        paths.push(this.generatePoint(points[1]));\n      }\n    } else {\n      //draw the multiple anchors and complex line instead\n      for (let j = 0; j < points.length - 1; j++) {\n        paths.push(\n          this.generateLink(\n            LinkWidget.generateLinePath(points[j], points[j + 1]),\n            {\n              \"data-linkid\": this.props.link.getID(),\n              \"data-point\": j,\n              onMouseDown: (event: MouseEvent) => {\n                this.addPointToLink(event, j + 1);\n              },\n            },\n            j\n          )\n        );\n      }\n\n      //render the circles\n      for (let i = 1; i < points.length - 1; i++) {\n        paths.push(this.generatePoint(points[i]));\n      }\n\n      if (this.props.link.getTargetPort() == null) {\n        paths.push(this.generatePoint(points[points.length - 1]));\n      }\n    }\n\n    return (\n      <g data-default-link-test={this.props.link.getOptions().testName}>\n        {paths}\n      </g>\n    );\n  }\n}\n","import * as React from \"react\";\nimport { DefaultLinkModel } from \"../models/DefaultLinkModel\";\nimport { DefaultLinkWidget } from \"../widgets/DefaultLinkWidget\";\nimport styled from \"@emotion/styled\";\nimport { css, keyframes } from \"@emotion/core\";\nimport { AbstractReactFactory } from \"@projectstorm/react-canvas-core\";\nimport { DiagramEngine } from \"@projectstorm/react-diagrams-core\";\n\nexport const Keyframes = keyframes`\n\t\tfrom {\n\t\t\tstroke-dashoffset: 24;\n\t\t}\n\t\tto {\n\t\t\tstroke-dashoffset: 0;\n\t\t}\n\t`;\n\nconst selected = css`\n  stroke-dasharray: 10, 2;\n  animation: ${Keyframes} 1s linear infinite;\n`;\n\nexport const Path = styled.path<{ selected: boolean }>`\n  ${(p) => p.selected && selected};\n  fill: none;\n  pointer-events: all;\n`;\n\nexport class DefaultLinkFactory<\n  Link extends DefaultLinkModel = DefaultLinkModel\n> extends AbstractReactFactory<Link, DiagramEngine> {\n  constructor(type = \"default\") {\n    super(type);\n  }\n\n  generateReactWidget(event): JSX.Element {\n    return <DefaultLinkWidget link={event.model} diagramEngine={this.engine} />;\n  }\n\n  generateModel(event): Link {\n    return new DefaultLinkModel() as Link;\n  }\n\n  generateLinkSegment(model: Link, selected: boolean, path: string) {\n    return (\n      <Path\n        selected={selected}\n        stroke={\n          selected ? model.getOptions().selectedColor : model.getOptions().color\n        }\n        strokeWidth={model.getOptions().width}\n        d={path}\n      />\n    );\n  }\n}\n","import * as React from \"react\";\nimport { DiagramEngine } from \"@projectstorm/react-diagrams-core\";\nimport { DefaultNodeModel } from \"../models/DefaultNodeModel\";\nimport styled from \"@emotion/styled\";\n\nnamespace S {\n  export const Node = styled.div<{ background: string; selected: boolean }>`\n  background-color: ${(p) => p.background};\n  border-radius: 5px;\n  font-family: sans-serif;\n  color: white;\n  border: solid 2px black;\n  overflow: visible;\n  font-size: 11px;\n  border: solid 2px ${(p) => (p.selected ? \"rgb(0,192,255)\" : \"black\")};\n`;\n\n  export const Title = styled.div`\n  background: rgba(0, 0, 0, 0.3);\n  display: flex;\n  white-space: nowrap;\n  justify-items: center;\n`;\n\n  export const TitleName = styled.div`\n  flex-grow: 1;\n  padding: 5px 5px;\n`;\n}\n\nexport interface DefaultNodeProps {\n  node: DefaultNodeModel;\n  engine: DiagramEngine;\n}\n\nexport const CustomLabelWidget = (props: DefaultNodeProps) => {\n  let { node } = props;\n  \n  return (\n    <S.Node\n      data-default-node-name={node.getOptions().name}\n      selected={node.isSelected()}\n      background={node.getOptions().color}\n    >\n      <S.Title>\n        <S.TitleName>{node.getOptions().name}</S.TitleName>\n      </S.Title>\n    </S.Node>\n  );\n}\n","import * as React from \"react\";\nimport { DefaultNodeModel } from \"../models/DefaultNodeModel\";\nimport { CustomLabelWidget } from \"../widgets/CustomLabelWidget\";\nimport { AbstractReactFactory } from \"@projectstorm/react-canvas-core\";\nimport { DiagramEngine } from \"@projectstorm/react-diagrams-core\";\n\nexport class CustomLabelFactory extends AbstractReactFactory<\n  DefaultNodeModel,\n  DiagramEngine\n> {\n  constructor() {\n    super(\"label\");\n  }\n\n  generateReactWidget(event): JSX.Element {\n    return <CustomLabelWidget engine={this.engine} node={event.model} />;\n  }\n\n  generateModel(event): DefaultNodeModel {\n    return new DefaultNodeModel(true, \"Label\", \"rgb(192,255,0)\");\n  }\n}\n","import { AbstractModelFactory } from \"@projectstorm/react-canvas-core\";\nimport { DiagramEngine } from \"@projectstorm/react-diagrams-core\";\nimport { AdvancedPortModel } from \"../models/ArrowPortModel\";\n\nexport class ArrowPortFactory extends AbstractModelFactory<\n  AdvancedPortModel,\n  DiagramEngine\n> {\n  constructor() {\n    super(\"arrow\");\n  }\n\n  generateModel(): AdvancedPortModel {\n    return new AdvancedPortModel(\"port\", true, false);\n  }\n}\n","import createEngine, {\n  DiagramModel,\n  DiagramEngine,\n} from \"@projectstorm/react-diagrams\";\nimport { ArrowLinkFactory } from \"../infrastructure/factories/ArrowLinkFactory\";\nimport { DefaultNodeFactory } from \"../infrastructure/factories/DefaultNodeFactory\";\nimport { DefaultLabelFactory } from \"../infrastructure/factories/DefaultLabelFactory\";\nimport { DefaultPortFactory } from \"../infrastructure/factories/DefaultPortFactory\";\nimport { DefaultLinkFactory } from \"../infrastructure/factories/DefaultLinkFactory\";\nimport { CustomLabelFactory } from \"../infrastructure/factories/CustomLabelFactory\";\nimport { DefaultPortModel } from \"../infrastructure/models/DefaultPortModel\";\nimport { ArrowLinkModel } from \"../infrastructure/models/ArrowLinkModel\";\nimport { AdvancedPortModel } from \"../infrastructure/models/ArrowPortModel\";\nimport { DefaultNodeModel } from \"../infrastructure/models/DefaultNodeModel\";\nimport { DefaultLabelModel } from \"../infrastructure/models/DefaultLabelModel\";\nimport { DefaultLinkModel } from \"../infrastructure/models/DefaultLinkModel\";\nimport { DefaultDiagramState } from \"@projectstorm/react-diagrams\";\nimport { ArrowPortFactory } from \"../infrastructure/factories/ArrowPortFactory\";\nimport { Toolkit } from \"../infrastructure/Toolkit\";\n\nexport class Application {\n  protected activeModel!: DiagramModel;\n  protected logicModel!: DiagramModel;\n\n  protected diagramEngine: DiagramEngine;\n\n  constructor() {\n    this.diagramEngine = createEngine();\n\n    this.diagramEngine\n      .getNodeFactories()\n      .registerFactory(new CustomLabelFactory());\n    this.diagramEngine\n      .getNodeFactories()\n      .registerFactory(new DefaultNodeFactory());\n\n    this.diagramEngine\n      .getLabelFactories()\n      .registerFactory(new DefaultLabelFactory());\n\n    this.diagramEngine\n      .getPortFactories()\n      .registerFactory(new DefaultPortFactory());\n    this.diagramEngine\n      .getPortFactories()\n      .registerFactory(new ArrowPortFactory());\n\n    this.diagramEngine\n      .getLinkFactories()\n      .registerFactory(new ArrowLinkFactory());\n    this.diagramEngine\n      .getLinkFactories()\n      .registerFactory(new DefaultLinkFactory());\n\n    const state = this.diagramEngine.getStateMachine().getCurrentState();\n\n    if (state instanceof DefaultDiagramState) {\n      state.dragNewLink.config.allowLooseLinks = false;\n    }\n\n    this.newModel();\n  }\n\n  public newModel() {\n    this.activeModel = new DiagramModel();\n    this.logicModel = new DiagramModel();\n\n    this.diagramEngine.setModel(this.activeModel);\n  }\n\n  public getActiveDiagram(): DiagramModel {\n    return this.activeModel;\n  }\n\n  public getDiagramEngine(): DiagramEngine {\n    return this.diagramEngine;\n  }\n\n  public setLogicModel() {\n    let concNodes = this.activeModel.getNodes();\n\n    Object.keys(concNodes).forEach((k) => {\n      let node = concNodes[k].clone() as DefaultNodeModel;\n\n      let nodePorts = concNodes[k].getPorts();\n\n      Object.keys(nodePorts).forEach((k) => {\n        let port = nodePorts[k] as DefaultPortModel;\n        let logicPort = new AdvancedPortModel(\n          port.getOptions().name,\n          port.isNamePort,\n          port.isPrimaryKey,\n          port.isForeignKey,\n          port.isPartialKey,\n          port.isNotNull,\n          port.isAutoincremented,\n          port.isUnique,\n          port.propertyType\n        );\n        node.addPort(logicPort);\n      });\n\n      this.logicModel.addNode(node);\n    });\n\n    let concLinks = this.activeModel.getLinks();\n\n    Object.keys(concLinks).forEach((k) => {\n      let logicNodes = this.logicModel.getNodes() as DefaultNodeModel[];\n\n      let sourceNode = concLinks[k].sourcePort.getParent() as DefaultNodeModel;\n      let sourceNodeId = logicNodes\n        .filter(\n          (node) =>\n            (node as DefaultNodeModel).getOptions().name ===\n            sourceNode.getOptions().name\n        )[0]\n        .getOptions().id;\n\n      let targetNode = concLinks[k].targetPort.getParent() as DefaultNodeModel;\n      let targetNodeId = logicNodes\n        .filter(\n          (node) =>\n            (node as DefaultNodeModel).getOptions().name ===\n            targetNode.getOptions().name\n        )[0]\n        .getOptions().id;\n\n      let sourceLabel = (concLinks[k]\n        .labels[0] as DefaultLabelModel).getOptions().label;\n      let targetLabel = (concLinks[k]\n        .labels[2] as DefaultLabelModel).getOptions().label;\n\n      if (sourceLabel.includes(\"N\") && targetLabel.includes(\"N\")) {\n        let relNode = ((concLinks[k] as DefaultLinkModel)\n          .properties as DefaultNodeModel).clone() as DefaultNodeModel;\n        relNode.getOptions().name = (concLinks[k]\n          .labels[1] as DefaultLabelModel).getOptions().label;\n        relNode.setPosition(\n          sourceNode.getPosition().x + 150,\n          sourceNode.getPosition().y - 100\n        );\n\n        relNode.addPort(\n          new AdvancedPortModel(\n            \"Id\",\n            false,\n            true,\n            false,\n            false,\n            true,\n            true,\n            true,\n            \"INT\"\n          )\n        );\n        relNode.addPort(\n          new AdvancedPortModel(\n            \"\",\n            true,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            \"INT\"\n          )\n        );\n        relNode.addPort(\n          new AdvancedPortModel(\n            \"1\",\n            true,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            \"INT\"\n          )\n        );\n\n        relNode.addPort(\n          new AdvancedPortModel(\n            sourceNode.getOptions().name + \"Id\",\n            false,\n            false,\n            false,\n            true,\n            true,\n            false,\n            false,\n            \"INT\",\n            Toolkit.UID(),\n            sourceNodeId\n          )\n        );\n        relNode.addPort(\n          new AdvancedPortModel(\n            targetNode.getOptions().name + \"Id\",\n            false,\n            false,\n            false,\n            true,\n            true,\n            false,\n            false,\n            \"INT\",\n            Toolkit.UID(),\n            targetNodeId\n          )\n        );\n\n        this.logicModel.addNode(relNode);\n\n        let node = logicNodes.filter(\n          (n) => n.getOptions().id === sourceNodeId\n        )[0];\n        let sourceP = node.getPorts()[\"1\"];\n        let targetP = relNode.getPorts()[\"\"];\n\n        let link = new ArrowLinkModel({ type: \"arrow\" });\n\n        link.setSourcePort(sourceP);\n        link.setTargetPort(targetP);\n\n        let node2 = logicNodes.filter(\n          (n) => n.getOptions().id === targetNodeId\n        )[0];\n        let targetP2 = relNode.getPorts()[\"1\"];\n        let sourceP2 = node2.getPorts()[\"\"];\n\n        let link2 = new ArrowLinkModel({ type: \"arrow\" });\n\n        link2.setSourcePort(sourceP2);\n        link2.setTargetPort(targetP2);\n\n        this.logicModel.addAll(link, link2);\n      } else if (sourceLabel.includes(\"N\")) {\n        let node = logicNodes.filter(\n          (n) => n.getOptions().id === sourceNodeId\n        )[0];\n\n        node.addPort(\n          new AdvancedPortModel(\n            targetNode.getOptions().name + \"Id\",\n            false,\n            false,\n            false,\n            true,\n            true,\n            false,\n            false,\n            \"INT\",\n            Toolkit.UID(),\n            targetNodeId\n          )\n        );\n\n        let tNode = logicNodes.filter(\n          (n) => n.getOptions().id === targetNodeId\n        )[0];\n\n        let targetP = node.getPorts()[\"1\"];\n        let sourceP = tNode.getPorts()[\"\"];\n\n        let link = new ArrowLinkModel({ type: \"arrow\" });\n\n        link.setSourcePort(sourceP);\n        link.setTargetPort(targetP);\n        this.logicModel.addLink(link);\n      } else if (targetLabel.includes(\"N\")) {\n        let node = logicNodes.filter(\n          (n) => n.getOptions().id === targetNodeId\n        )[0];\n\n        node.addPort(\n          new AdvancedPortModel(\n            sourceNode.getOptions().name + \"Id\",\n            false,\n            false,\n            false,\n            true,\n            true,\n            false,\n            false,\n            \"INT\",\n            Toolkit.UID(),\n            sourceNodeId\n          )\n        );\n\n        let tNode = logicNodes.filter(\n          (n) => n.getOptions().id === sourceNodeId\n        )[0];\n\n        let targetP = node.getPorts()[\"\"];\n        let sourceP = tNode.getPorts()[\"1\"];\n\n        let link = new ArrowLinkModel({ type: \"arrow\" });\n\n        link.setSourcePort(sourceP);\n        link.setTargetPort(targetP);\n        this.logicModel.addLink(link);\n      } else {\n        let node = logicNodes.filter(\n          (n) => n.getOptions().id === targetNodeId\n        )[0];\n\n        node.addPort(\n          new AdvancedPortModel(\n            sourceNode.getOptions().name + \"Id\",\n            false,\n            false,\n            false,\n            true,\n            true,\n            false,\n            false,\n            \"INT\",\n            Toolkit.UID(),\n            sourceNodeId\n          )\n        );\n\n        let tNode = logicNodes.filter(\n          (n) => n.getOptions().id === sourceNodeId\n        )[0];\n\n        let targetP = node.getPorts()[\"\"];\n        let sourceP = tNode.getPorts()[\"1\"];\n\n        let link = new ArrowLinkModel({ type: \"arrow\" });\n\n        link.setSourcePort(sourceP);\n        link.setTargetPort(targetP);\n        this.logicModel.addLink(link);\n      }\n    });\n\n    this.diagramEngine.setModel(this.logicModel);\n  }\n\n  public setConceptualModel() {\n    this.logicModel = null;\n    this.logicModel = new DiagramModel();\n\n    let activeModelCopy = new DiagramModel();\n\n    let nodes = this.activeModel.getNodes();\n\n    Object.keys(nodes).forEach((k) => {\n      activeModelCopy.addNode(nodes[k]);\n    });\n\n    let links = this.activeModel.getLinks();\n\n    Object.keys(links).forEach((k) => {\n      activeModelCopy.addLink(links[k]);\n    });\n\n    this.activeModel = activeModelCopy;\n\n    this.diagramEngine.setModel(this.activeModel);\n  }\n\n  public loadConceptualModel(model: DiagramModel) {\n    this.activeModel = model;\n\n    this.diagramEngine.setModel(this.activeModel);\n  }\n\n  public loadLogicModel(model: DiagramModel) {\n    this.logicModel = model;\n    this.diagramEngine.setModel(this.logicModel);\n  }\n}\n","import * as React from \"react\";\nimport { BodyWidget } from \"./components/BodyWidget\";\nimport { Application } from \"./components/Application\";\n\nexport default () => {\n  var app = new Application();\n  return (\n    <div className=\"content\">\n      <BodyWidget app={app} />\n    </div>\n  );\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import \"./icons/micon/css/micon.min.css\";\nimport \"react-bootstrap-table-next/dist/react-bootstrap-table2.min.css\";\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\n\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}