{"version":3,"sources":["infrastructure/models/PropertyType.ts","infrastructure/models/Label.ts","infrastructure/models/Link.ts","infrastructure/models/Port.ts","infrastructure/models/LogicLink.ts","infrastructure/models/LogicPort.ts","infrastructure/models/Node.ts","infrastructure/widgets/CustomLabelWidget.tsx","infrastructure/factories/CustomLabelFactory.ts","infrastructure/factories/CustomPortFactory.tsx","infrastructure/widgets/CustomPortLabelWidget.tsx","infrastructure/widgets/CustomNodeWidget.tsx","infrastructure/factories/CustomNodeFactory.tsx","infrastructure/widgets/CustomLinkLabelWidget.tsx","infrastructure/factories/CustomLinkLabelFactory.ts","infrastructure/factories/CustomLinkFactory.tsx","components/dragAndDrop/Application.ts","components/dragAndDrop/TrayItemWidget.tsx","components/dragAndDrop/TrayWidget.tsx","components/grid/Grid.tsx","components/grid/Row.tsx","components/grid/Col.tsx","components/propertyTable/PropertyTable.tsx","components/nodeProperties/NodeProperties.tsx","components/popups/ResultPopup/ResultPopup.tsx","handlers/GenerationHandler.tsx","components/popups/RealtionPopup/RelationPopup.tsx","components/popups/LoadFilePopup/LoadFilePopup.tsx","handlers/LoadFileHandler.tsx","components/popups/SaveToFilePopup/SaveToFilePopup.tsx","components/popups/SaveToJpegPopup/SaveToJpegPopup.tsx","AppView.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["PropertyType","Label","_LabelModel","label","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","offsetY","inherits","createClass","key","value","ob","engine","get","prototype","_","LabelModel","Link","_LinkModel","type","arguments","length","undefined","width","color","curvyness","properties","addLabel","Node","relPorts","ports","values","map","a","propertyType","isPrimaryKey","isNotNull","isAutoincremented","isUnique","propertiesNode","console","log","labelOb","setLabel","iterateListeners","listener","event","widthChanged","objectSpread","colorChanged","LinkModel","Port","_PortModel","name","isNamePort","isForeignKey","id","fkPortId","in","links","isPartialKey","object","port","PortModel","LogicLink","LogicPort","_NodeModel","isLabel","logic","isNamedPort","isPK","isFK","isAuto","addPort","Toolkit","UID","portModel","NodeModel","CustomLabelWidget","_BaseWidget","props","state","react","assign","getProps","style","background","node","className","bem","BaseWidget","CustomLabelFactory","_AbstractNodeFactory","diagramEngine","React","initialConfig","AbstractNodeFactory","CustomPortFactory","_AbstractPortFactory","AbstractPortFactory","CustomPortLabelWidget","model","itemStyles","display","marginRight","react_default","createElement","main","getParent","setLocked","paddingLeft","paddingRight","fontWeight","justifyContent","CustomNodeWidget","CustomPortLabelWidget_CustomPortLabelWidget","getPorts","portsJSX","generatePort","bind","namedPort","filter","p","notNamedPort","wordBreak","maxWidth","marginLeft","CustomNodeFactory","CustomLinkLabelWidget","CustomLinkLabelFactory","_AbstractLabelFactory","AbstractLabelFactory","CustomLinkFactory","_AbstractLinkFactory","link","DefaultLinkWidget","widget","selected","path","strokeWidth","stroke","d","AbstractLinkFactory","Application","activeModel","logicModel","SRD","registerNodeFactory","registerLinkFactory","registerLabelFactory","registerPortFactory","installDefaultFactories","newModel","setDiagramModel","getDiagramModel","concNodes","getNodes","keys","k","clone","nodePorts","logicPort","addNode","concLinks","getLinks","logicNodes","sourceNode","sourcePort","sourceNodeId","targetNode","targetPort","targetNodeId","sourceLabel","labels","targetLabel","includes","relNode","setPosition","x","y","addInPort","sourceP","targetP","setSourcePort","setTargetPort","node2","sourceP2","targetP2","link2","addAll","addLink","activeModelCopy","nodes","TrayItemWidget","_React$Component","_this2","borderColor","draggable","onDragStart","dataTransfer","setData","JSON","stringify","TrayWidget","children","defaultProps","Grid","buildClassNameString","concat","Row","flex","Col","onDoubleClick","size","config","pull","push","offset","order","hidden","buildGridColConfigClassNames","sm","md","lg","xl","xxl","xxxl","PropertyTable","_React$useState3","useState","_React$useState4","slicedToArray","updatedItem","setUpdatedItem","forceUpdate","_React$useState","_React$useState2","setValue","useForceUpdate","useMemo","selectedItem","handleChangePK","row","persist","getPortFromID","clearPartialKeys","columns","dataField","text","formatter","cellContent","defaultValue","onChange","target","handleChangePortLabel","list","handleChangepPropType","obj","checked","handleChangeFK","handleChangePartialKey","disabled","handleChangeNull","handleChangeAutoInc","handleChangeUnique","onClick","entries","constructor","forEach","removeLink","removePort","portsTable","cols","find","col","isLogic","c","lib_default","keyField","data","relView","bordered","newPortNumber","INT","NodeProperties","_React$useState5","_React$useState6","defaultName","setDefaultName","_React$useState7","_React$useState8","setName","_React$useState9","_React$useState10","showInput","setShowInput","handleNameChange","allNodes","diagramModel","names","toLowerCase","trim","Grid_Grid","Row_Row","Col_Col","height","PropertyTable_PropertyTable","ResultPopup","_useState","_useState2","dbName","setDbName","_useState3","_useState4","mySQLView","setmySQLView","formatedMSSQL","mssqlString","sqlFormatter","format","language","indent","formatedMySQL","mysqlString","reactjs_popup_es","modal","closeOnDocumentClick","open","isOpen","closeOnEscape","generateScript","marginTop","readOnly","contentEditable","blob","Blob","FileSaver","saveAs","update","GenerationHandler","sqlString","setSqlString","setMySqlString","useEffect","_ref","asyncToGenerator","regenerator_default","mark","_callee","serDiagram","diagram","response","responseMy","wrap","_context","prev","next","serializeDiagram","axios","post","SerializedModel","DatabaseName","RelationType","isUml","DiagramType","sent","status","stop","_x","apply","ResultPopup_ResultPopup_ResultPopup","RelationPopup","left","setLeft","right","setRight","_useState5","_useState6","relationName","setRelationName","leftLabel","relLabel","rightLabel","parent","remove","options","Fragment","renderOptionPicker","side","points","index","margin","LoadFilePopup","fileReader","fileContent","setFileContent","handleFileRead","e","content","result","onClose","files","FileReader","onloadend","readAsText","accept","loadDiagram","LoadFileHandler","LoadFilePopup_LoadFilePopup_LoadFilePopup","app","getDiagramEngine","parse","setIsUml","setIsLogic","model2","DiagramModel","deSerializeDiagram","splice","loadLogicModel","loadConceptualModel","repaintCanvas","error","SaveToFilePopup","fileName","setFileName","diagramJson","SaveToJpegPopup","domtoimage","toJpeg","document","getElementById","quality","then","dataUrl","download","href","click","require","AppView","diagramDiv","showDialog","setShowDialog","showRelationDialog","setShowRelationDialog","showLoadFileDialog","setShowLoadFileDialog","showSaveFileDialog","setSaveFileDialog","showSaveJPEGDialog","setSaveJPEGDialog","_React$useState11","_React$useState12","showSaveOptions","setSaveOptions","_React$useState13","_React$useState14","selectedNode","setSelectedNode","_React$useState15","_React$useState16","selectedLink","setSelectedLink","_React$useState17","_React$useState18","_React$useState19","_React$useState20","isLogicModel","setIsLogicModel","changeRelation","temp","substring","temp2","refreshPopups","ref","TrayWidget_TrayWidget","TrayItemWidget_TrayItemWidget","setConceptualModel","paddingTop","setLogicModel","onDrop","preventDefault","getData","nodesCount","newNodeName","addListener","getRelativeMousePoint","onDragOver","ctrlKey","getSelectedItems","PointModel","pointToRemove","pointLink","removePoint","allowLooseLinks","deleteKeys","NodeProperties_NodeProperties","GenerationHandler_GenerationHandler","LoadFileHandler_LoadFileHandler","SaveToFilePopup_SaveToFilePopup_SaveToFilePopup","SaveToJpegPopup_SaveToJpegPopup_SaveToJpegPopup","getActiveDiagram","RelationPopup_RelationPopup","App","AppView_AppView","Boolean","window","location","hostname","match","ReactDOM","App_App","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.43f08fc2.chunk.js","sourcesContent":["export enum PropertyType {\n  BIT = \"BIT\",\n  TINYINT = \"TINYINT\",\n  SMALLINT = \"SMALLINT\",\n  INT = \"INT\",\n  BIGINT = \"BIGINT\",\n  'DECIMAL()' = \"DECIMAL()\",\n  'NUMERIC()' = \"NUMERIC()\",\n  'FLOAT()' = \"FLOAT()\",\n  REAL = \"REAL\",\n  DATE = \"DATE\",\n  TIME = \"TIME\",\n  DATETIME = \"DATETIME\",\n  TIMESTAMP = \"TIMESTAMP\",\n  YEAR = \"YEAR\",\n  'CHAR()' = \"CHAR()\",\n  'VARCHAR()' = \"VARCHAR()\",\n  TEXT = \"TEXT\",\n  'NCHAR()' = \"NCHAR()\",\n  'NVARCHAR()' = \"NVARCHAR()\",\n  NTEXT = \"NTEXT\",\n  'BINARY()' = \"BINARY()\",\n  'VARBINARY()' = \"VARBINARY()\",\n  IMAGE = \"IMAGE\",\n  CLOB = \"CLOB\",\n  BLOB = \"BLOB\",\n  XML = \"XML\",\n  JSON = \"JSON\",\n  MONEY = \"MONEY\"\n}\n","import * as _ from \"lodash\";\nimport { LabelModel, DiagramEngine } from \"storm-react-diagrams\";\n\nexport class Label extends LabelModel {\n  label: string;\n\n  constructor(label: string) {\n    super(\"custom\");\n    this.label = label;\n    this.offsetY = -23;\n  }\n\n  setLabel(label: string) {\n    this.label = label;\n  }\n\n  deSerialize(ob: any, engine: DiagramEngine) {\n    super.deSerialize(ob, engine);\n    this.label = ob.label;\n  }\n\n  serialize() {\n    return _.merge(super.serialize(), {\n      label: this.label\n    });\n  }\n}\n","import * as _ from \"lodash\";\nimport {\n  LinkModelListener,\n  BaseEvent,\n  LinkModel,\n  DefaultLinkModel,\n  DiagramEngine,\n  LabelModel,\n  PortModel\n} from \"storm-react-diagrams\";\nimport { Label } from \"./Label\";\nimport { Node } from \"./Node\";\nimport { PropertyType } from \"./PropertyType\";\n\nexport interface DefaultLinkModelListener extends LinkModelListener {\n  colorChanged?(\n    event: BaseEvent<DefaultLinkModel> & { color: null | string }\n  ): void;\n\n  widthChanged?(\n    event: BaseEvent<DefaultLinkModel> & { width: 0 | number }\n  ): void;\n}\nclass RelationProperties {\n  label: string;\n  isPrimaryKey: boolean;\n  isAutoincremented: boolean;\n  isNotNull: boolean;\n  isUnique: boolean;\n  propertyType: PropertyType\n}\nexport class Link extends LinkModel<DefaultLinkModelListener> {\n  width: number;\n  color: string;\n  curvyness: number;\n  properties: Node;\n\n  constructor(type: string = \"custom\") {\n    super(type);\n    this.color = \"rgba(255,255,255,0.5)\";\n    this.width = 3;\n    this.curvyness = 0;\n    this.addLabel(\"0,N\");\n    this.addLabel(\"relation name\");\n    this.addLabel(\"0,N\");\n    this.properties = new Node(false, 'relNode')\n    \n  }\n\n \n  serialize() {\n    let relPorts = this.properties && this.properties.ports && Object.values(this.properties.ports);\n    let properties = relPorts && relPorts.map(a => {\n      return { label: a.label, \n        propertyType: a.propertyType, \n        isPrimaryKey: a.isPrimaryKey ,\n        isNotNull: a.isNotNull,\n        isAutoincremented: a.isAutoincremented,\n        isUnique: a.isUnique \n      }\n    })\n\n    return _.merge(super.serialize(), {\n      width: this.width,\n      color: this.color,\n      curvyness: this.curvyness,\n      properties\n    });\n  }\n\n  deSerialize(ob: any, engine: DiagramEngine) {\n    let propertiesNode = new Node(false, 'relNode');\n    propertiesNode.ports = ob.properties.map((a: RelationProperties) => {\n      return { label: a.label, \n        propertyType: a.propertyType, \n        isPrimaryKey: a.isPrimaryKey ,\n        isNotNull: a.isNotNull,\n        isAutoincremented: a.isAutoincremented,\n        isUnique: a.isUnique \n      }\n    })\n    console.log('obj', ob.properties)\n    super.deSerialize(ob, engine);\n    this.color = ob.color;\n    this.width = ob.width;\n    this.curvyness = ob.curvyness;\n    this.properties = propertiesNode //ob.properties;\n  }\n\n  addLabel(label: LabelModel | string) {\n    if (label instanceof LabelModel) {\n      return super.addLabel(label);\n    }\n    let labelOb = new Label(\"custom\");\n    labelOb.setLabel(label);\n    return super.addLabel(labelOb);\n  }\n\n  setWidth(width: number) {\n    this.width = width;\n    this.iterateListeners(\n      (listener: DefaultLinkModelListener, event: BaseEvent) => {\n        if (listener.widthChanged) {\n          listener.widthChanged({ ...event, width: width });\n        }\n      }\n    );\n  }\n\n  setColor(color: string) {\n    this.color = color;\n    this.iterateListeners(\n      (listener: DefaultLinkModelListener, event: BaseEvent) => {\n        if (listener.colorChanged) {\n          listener.colorChanged({ ...event, color: color });\n        }\n      }\n    );\n  }\n}\n","import * as _ from \"lodash\";\nimport { Link } from \"./Link\";\nimport { PortModel, DiagramEngine } from \"storm-react-diagrams\";\n\nexport class Port extends PortModel {\n  in: boolean;\n  isNamePort: boolean;\n  label: string;\n  links: { [id: string]: Link };\n  isPrimaryKey: boolean;\n  isPartialKey: boolean;\n  isForeignKey: boolean;\n  isAutoincremented: boolean;\n  isNotNull: boolean;\n  isUnique: boolean;\n  propertyType: string;// PropertyType;\n  fkPortId: string;\n\n  constructor(\n    name: string,\n    isNamePort: boolean,\n    isPrimaryKey?: boolean,\n    isForeignKey?: boolean,\n    isNotNull?: boolean,\n    isAutoincremented?: boolean,\n    isUnique?: boolean,\n    propertyType?:  string, //PropertyType,\n    id?: string,\n    fkPortId?: string\n  ) {\n    super(name, \"custom\", id);\n    this.label = name;\n    this.isNamePort = isNamePort;\n    this.links = {};\n\n    this.isPrimaryKey = isPrimaryKey;\n    this.isForeignKey = isForeignKey;\n    this.isPartialKey = false;\n\n    this.isNotNull = isNotNull;\n    this.isUnique = isUnique;\n    this.isAutoincremented = isAutoincremented;\n\n    this.propertyType = propertyType;\n    this.fkPortId = fkPortId;\n  }\n\n  deSerialize(object: any, engine: DiagramEngine) {\n    super.deSerialize(object, engine);\n    this.label = object.label;\n    this.isNamePort = object.isNamePort;\n\n    this.isPrimaryKey = object.isPrimaryKey;\n    this.isPartialKey = object.isPartialKey;\n\n    this.isForeignKey = object.isForeignKey;\n    this.isNotNull = object.isNotNull;\n    this.isUnique = object.isUnique;\n    this.isAutoincremented = object.isAutoincremented;\n    this.propertyType = object.propertyType;\n    this.fkPortId = object.fkPortId;\n  }\n\n  serialize() {\n    return _.merge(super.serialize(), {\n      label: this.label,\n      links: this.links,\n      isNamePort: this.isNamePort,\n      isPrimaryKey: this.isPrimaryKey,\n      isPartialKey: this.isPartialKey,\n\n      isForeignKey: this.isForeignKey,\n      isNotNull: this.isNotNull,\n      isUnique: this.isUnique,\n      isAutoincremented: this.isAutoincremented,\n      propertyType: this.propertyType,\n      fkPortId: this.fkPortId\n    });\n  }\n\n  canLinkToPort(port: Port): boolean {\n    return true;\n  }\n\n  createLinkModel(): Link {\n    return new Link(\"custom\");\n  }\n}\n","import * as _ from \"lodash\";\nimport {\n  LinkModelListener,\n  BaseEvent,\n  LinkModel,\n  DefaultLinkModel,\n  DiagramEngine,\n  LabelModel,\n  PortModel\n} from \"storm-react-diagrams\";\nimport { Label } from \"./Label\";\nimport { Node } from \"./Node\";\nimport { PropertyType } from \"./PropertyType\";\n\nexport interface DefaultLinkModelListener extends LinkModelListener {\n  colorChanged?(\n    event: BaseEvent<DefaultLinkModel> & { color: null | string }\n  ): void;\n\n  widthChanged?(\n    event: BaseEvent<DefaultLinkModel> & { width: 0 | number }\n  ): void;\n}\nclass RelationProperties {\n  label: string;\n  isPrimaryKey: boolean;\n  isAutoincremented: boolean;\n  isNotNull: boolean;\n  isUnique: boolean;\n  propertyType: PropertyType\n}\nexport class LogicLink extends LinkModel<DefaultLinkModelListener> {\n  width: number;\n  color: string;\n  curvyness: number;\n  properties: Node;\n\n  constructor(type: string = \"custom\") {\n    super(type);\n    this.color = \"rgba(255,255,255,0.5)\";\n    this.width = 3;\n    this.curvyness = 0;\n\n    this.properties = new Node(false, 'relNode')\n  }\n\n \n  serialize() {\n    let relPorts = this.properties && this.properties.ports && Object.values(this.properties.ports);\n    let properties = relPorts && relPorts.map(a => {\n      return { label: a.label, \n        propertyType: a.propertyType, \n        isPrimaryKey: a.isPrimaryKey ,\n        isNotNull: a.isNotNull,\n        isAutoincremented: a.isAutoincremented,\n        isUnique: a.isUnique \n      }\n    })\n\n    return _.merge(super.serialize(), {\n      width: this.width,\n      color: this.color,\n      curvyness: this.curvyness,\n      properties\n    });\n  }\n\n  deSerialize(ob: any, engine: DiagramEngine) {\n    let propertiesNode = new Node(false, 'relNode');\n    propertiesNode.ports = ob.properties.map((a: RelationProperties) => {\n      return { label: a.label, \n        propertyType: a.propertyType, \n        isPrimaryKey: a.isPrimaryKey ,\n        isNotNull: a.isNotNull,\n        isAutoincremented: a.isAutoincremented,\n        isUnique: a.isUnique \n      }\n    })\n    console.log('obj', ob.properties)\n    super.deSerialize(ob, engine);\n    this.color = ob.color;\n    this.width = ob.width;\n    this.curvyness = ob.curvyness;\n    this.properties = propertiesNode //ob.properties;\n  }\n\n  addLabel(label: LabelModel | string) {\n    if (label instanceof LabelModel) {\n      return super.addLabel(label);\n    }\n    let labelOb = new Label(\"custom\");\n    labelOb.setLabel(label);\n    return super.addLabel(labelOb);\n  }\n\n  setWidth(width: number) {\n    this.width = width;\n    this.iterateListeners(\n      (listener: DefaultLinkModelListener, event: BaseEvent) => {\n        if (listener.widthChanged) {\n          listener.widthChanged({ ...event, width: width });\n        }\n      }\n    );\n  }\n\n  setColor(color: string) {\n    this.color = color;\n    this.iterateListeners(\n      (listener: DefaultLinkModelListener, event: BaseEvent) => {\n        if (listener.colorChanged) {\n          listener.colorChanged({ ...event, color: color });\n        }\n      }\n    );\n  }\n}\n","import * as _ from \"lodash\";\nimport { PortModel, DiagramEngine } from \"storm-react-diagrams\";\nimport { LogicLink } from \"./LogicLink\";\n\nexport class LogicPort extends PortModel {\n  in: boolean;\n  isNamePort: boolean;\n  label: string;\n  links: { [id: string]: LogicLink };\n  isPrimaryKey: boolean;\n  isPartialKey: boolean;\n  isForeignKey: boolean;\n  isAutoincremented: boolean;\n  isNotNull: boolean;\n  isUnique: boolean;\n  propertyType: string;// PropertyType;\n  fkPortId: string;\n\n  constructor(\n    name: string,\n    isNamePort: boolean,\n    isPrimaryKey?: boolean,\n    isForeignKey?: boolean,\n    isNotNull?: boolean,\n    isAutoincremented?: boolean,\n    isUnique?: boolean,\n    propertyType?:  string, //PropertyType,\n    id?: string,\n    fkPortId?: string\n  ) {\n    super(name, \"custom\", id);\n    this.label = name;\n    this.isNamePort = isNamePort;\n    this.links = {};\n\n    this.isPrimaryKey = isPrimaryKey;\n    this.isForeignKey = isForeignKey;\n    this.isPartialKey = false;\n\n    this.isNotNull = isNotNull;\n    this.isUnique = isUnique;\n    this.isAutoincremented = isAutoincremented;\n\n    this.propertyType = propertyType;\n    this.fkPortId = fkPortId;\n\n  }\n\n  deSerialize(object: any, engine: DiagramEngine) {\n    super.deSerialize(object, engine);\n    this.label = object.label;\n    this.isNamePort = object.isNamePort;\n\n    this.isPrimaryKey = object.isPrimaryKey;\n    this.isPartialKey = object.isPartialKey;\n\n    this.isForeignKey = object.isForeignKey;\n    this.isNotNull = object.isNotNull;\n    this.isUnique = object.isUnique;\n    this.isAutoincremented = object.isAutoincremented;\n    this.propertyType = object.propertyType;\n    this.fkPortId = object.fkPortId;\n\n  }\n\n  serialize() {\n    return _.merge(super.serialize(), {\n      label: this.label,\n      links: this.links,\n      isNamePort: this.isNamePort,\n      isPrimaryKey: this.isPrimaryKey,\n      isPartialKey: this.isPartialKey,\n\n      isForeignKey: this.isForeignKey,\n      isNotNull: this.isNotNull,\n      isUnique: this.isUnique,\n      isAutoincremented: this.isAutoincremented,\n      propertyType: this.propertyType,\n      fkPortId: this.fkPortId\n    });\n  }\n\n  canLinkToPort(port: LogicPort): boolean {\n    return true;\n  }\n\n  createLinkModel(): LogicLink {\n    return new LogicLink(\"custom\");\n  }\n}\n","import * as _ from \"lodash\";\nimport { NodeModel, Toolkit, DiagramEngine } from \"storm-react-diagrams\";\nimport { Port } from \"./Port\";\nimport { PropertyType } from \"./PropertyType\";\nimport { LogicPort } from \"./LogicPort\";\n\nexport class Node extends NodeModel {\n\tname: string;\n\tcolor: string;\n\tports: { [s: string]: Port };\n\tisLabel: boolean;\n\n\tconstructor(isLabel: boolean, name: string = \"Untitled\", color: string = \"rgb(0,192,255)\") {\n\t\tsuper(\"custom\");\n\t\tthis.name = name;\n\t\tthis.color = color;\n\t\tthis.ports = {};\n\t\tthis.isLabel = isLabel;\n\t}\n\n\taddInPort(logic: boolean, isNamedPort: boolean, label: string, isPK: boolean, isFK: boolean, isUnique: boolean, isAuto: boolean, isNotNull: boolean, propertyType: string, fkPortId?: string): Port {\n\t\tif(logic) {\n\t\t\treturn this.addPort(new LogicPort(label, isNamedPort, isPK, isFK, isNotNull, isAuto, isUnique, propertyType, Toolkit.UID(), fkPortId));\n\t\t} else {\n\t\t\treturn this.addPort(new Port(label, isNamedPort, isPK, isFK, isNotNull, isAuto, isUnique, propertyType, Toolkit.UID(), fkPortId));\n\t\t}\n\t}\n\n\taddOutPort(isNamedPort: boolean,label: string, isPK: boolean, isFK: boolean, isUnique: boolean, isAuto: boolean, isNotNull: boolean, propertyType: string): Port {\n\t\treturn this.addPort(new Port(label, isNamedPort, isPK, isFK, isNotNull, isAuto, isUnique, propertyType, Toolkit.UID()));\n\t}\n\n\tdeSerialize(object: any, engine: DiagramEngine) {\n\t\tsuper.deSerialize(object, engine);\n\t\tthis.name = object.name;\n\t\tthis.color = object.color;\n\t\tthis.isLabel = object.isLabel;\n\t}\n\n\tserialize() {\n\t\treturn _.merge(super.serialize(), {\n\t\t\tname: this.name,\n\t\t\tcolor: this.color,\n\t\t\tisLabel: this.isLabel\n\t\t});\n\t}\n\n\tgetInPorts(): Port[] {\n\t\treturn _.filter(this.ports, portModel => {\n\t\t\treturn portModel.in;\n\t\t});\n\t}\n\n\tgetOutPorts(): Port[] {\n\t\treturn _.filter(this.ports, portModel => {\n\t\t\treturn !portModel.in;\n\t\t});\n\t}\n\n\n}","import {\n  BaseWidgetProps,\n  DiagramEngine,\n  BaseWidget,\n  DefaultPortLabel\n} from \"storm-react-diagrams\";\nimport { Node } from \"../models/Node\";\nimport * as React from \"react\";\n\nexport interface NodeProps extends BaseWidgetProps {\n  node: Node;\n  diagramEngine: DiagramEngine;\n}\n\nexport interface DefaultNodeState {}\n\nexport class CustomLabelWidget extends BaseWidget<NodeProps, DefaultNodeState> {\n  constructor(props: NodeProps) {\n    super(\"srd-default-node\", props);\n    this.state = {};\n  }\n\n  render() {\n    return (\n      <div {...this.getProps()} style={{ background: this.props.node.color }}>\n        <div className={this.bem(\"__title\")}>\n          <div className={this.bem(\"__name\")}>{this.props.node.name}</div>\n        </div>\n      </div>\n    );\n  }\n}\n","import { Node } from \"../models/Node\";\nimport * as React from \"react\";\nimport { CustomLabelWidget } from \"../widgets/CustomLabelWidget\";\nimport { AbstractNodeFactory, DiagramEngine } from \"storm-react-diagrams\";\n\nexport class CustomLabelFactory extends AbstractNodeFactory<Node> {\n  constructor() {\n    super(\"label\");\n  }\n\n  generateReactWidget(diagramEngine: DiagramEngine, node: Node): JSX.Element {\n    return React.createElement(CustomLabelWidget, {\n      node: node,\n      diagramEngine: diagramEngine\n    });\n  }\n\n  getNewInstance(initialConfig?: any): Node {\n    return new Node(false, null, \"label\");\n  }\n}\n","import { AbstractPortFactory } from \"storm-react-diagrams\";\nimport { Port } from \"../models/Port\";\n\nexport class CustomPortFactory extends AbstractPortFactory<Port> {\n  constructor() {\n    super(\"custom\");\n  }\n\n  getNewInstance(initialConfig?: any): Port {\n    return new Port(\"custom\", true, false);\n  }\n}\n","import { Port } from \"../models/Port\";\nimport { BaseWidgetProps, BaseWidget, PortWidget } from \"storm-react-diagrams\";\nimport React, { CSSProperties } from \"react\";\nimport { PropertyType } from \"../models/PropertyType\";\n\nexport interface DefaultPortLabelProps extends BaseWidgetProps {\n  model: Port;\n}\n\nexport interface DefaultPortLabelState {}\n\nexport class CustomPortLabelWidget extends BaseWidget<\n  DefaultPortLabelProps,\n  DefaultPortLabelState\n> {\n  constructor(props: DefaultPortLabelProps) {\n    super(\"custom\", props);\n  }\n\n  getClassName() {\n    return (\n      super.getClassName() +\n      (this.props.model.in ? this.bem(\"--in\") : this.bem(\"--in\"))\n    );\n  }\n\n  render() {\n    let port: JSX.Element;\n    const style: CSSProperties = {\n      paddingLeft: 5,\n      paddingRight: 5,\n      color: \"black\",\n      fontWeight: 800\n\t};\n\t\n    const containerStyles: CSSProperties = {\n      display: \"flex\",\n      justifyContent: \"flex-end\"\n\t};\n\t\n    const itemStyles: CSSProperties = {\n      display: \"inline-block\",\n      marginRight: \"5px\"\n    };\n\n    const portStyles: CSSProperties = {\n      display: \"none\"\n    };\n\n    const namedPortStyles: CSSProperties = {\n      marginRight: \"5px\"\n    };\n\n    if (!this.props.model.isNamePort) {\n      this.props.model.setLocked();\n      port = (\n        <PortWidget\n          node={this.props.model.getParent()}\n          name={this.props.model.name}\n        />\n      );\n    } else {\n      port = (\n        <PortWidget\n          node={this.props.model.getParent()}\n          name={this.props.model.name}\n        />\n      );\n    }\n\n    const label: JSX.Element = (\n      <div className=\"name\">\n        <div>\n          {this.props.model.label}{\" \"}\n          {this.props.model.propertyType !== undefined\n            ? this.props.model.propertyType\n            : null}\n        </div>\n      </div>\n    );\n    const isPrimaryKey = this.props.model.isPrimaryKey ? (\n      <span className=\"mi mi-Permissions\" style={style}></span>\n    ) : null;\n\n    if (this.props.model.isNamePort) {\n      return <div style={namedPortStyles}>{port}</div>;\n    } else {\n      return (\n        <div style={containerStyles} {...this.getProps()}>\n          <div style={itemStyles}>{isPrimaryKey}</div>\n          <div style={itemStyles}>{label}</div>\n          <div style={portStyles}>{port}</div>\n        </div>\n      );\n    }\n  }\n}\n","import { CustomPortLabelWidget } from \"./CustomPortLabelWidget\";\nimport React, { CSSProperties } from \"react\";\nimport {\n  BaseWidget,\n  DiagramEngine,\n  BaseWidgetProps\n} from \"storm-react-diagrams\";\nimport { Port } from \"../models/Port\";\nimport { Node } from \"../models/Node\";\nimport * as _ from \"lodash\";\n\nexport interface DefaultNodeProps extends BaseWidgetProps {\n  node: Node;\n  diagramEngine: DiagramEngine;\n}\n\nexport interface DefaultNodeState {}\n\nexport class CustomNodeWidget extends BaseWidget<\n  DefaultNodeProps,\n  DefaultNodeState\n> {\n  constructor(props: DefaultNodeProps) {\n    super(\"srd-default-node\", props);\n    this.state = {};\n  }\n\n  generatePort(port: Port) {\n    return <CustomPortLabelWidget model={port} key={port.id} />;\n  }\n\n  render() {\n    const namedPortStyles: CSSProperties = {\n      marginLeft: \"5px\"\n    };\n\n    let ports = this.props.node.getPorts() as { [s: string]: Port };\n    let portsJSX = _.map(ports, this.generatePort.bind(this));\n    let namedPort = portsJSX.filter(p => p.props.model.isNamePort);\n    let notNamedPort = portsJSX.filter(p => !p.props.model.isNamePort);\n\n    return (\n      <div {...this.getProps()} style={{ background: this.props.node.color }}>\n        <div className={this.bem(this.props.node.isLabel ? \"\" : \"__title\")} style={{wordBreak: \"break-word\", maxWidth: '200px'}}>\n          {namedPort.length !== 0 && (\n            <div style={namedPortStyles}>\n              {this.generatePort(namedPort[1].props.model)}\n            </div>\n          )}\n          <div className={this.bem(\"__name\")}>{this.props.node.name}</div>\n          {namedPort.length !== 0 &&\n            this.generatePort(namedPort[0].props.model)}\n        </div>\n        <div className={this.bem(\"__ports\")}>\n          <div className={this.bem(\"__in\")}>{notNamedPort}</div>\n        </div>\n      </div>\n    );\n  }\n}\n","import { AbstractNodeFactory, DiagramEngine } from \"storm-react-diagrams\";\nimport React from \"react\";\nimport { CustomNodeWidget } from \"../widgets/CustomNodeWidget\";\nimport { Node } from \"../models/Node\";\n\nexport class CustomNodeFactory extends AbstractNodeFactory<Node> {\n  constructor() {\n    super(\"custom\");\n  }\n\n  generateReactWidget(diagramEngine: DiagramEngine, node: Node): JSX.Element {\n    return React.createElement(CustomNodeWidget, {\n      node: node,\n      diagramEngine: diagramEngine\n    });\n  }\n\n  getNewInstance(initialConfig?: any): Node {\n    return new Node(false, null, \"custom\");\n  }\n}\n","import * as React from \"react\";\nimport { BaseWidgetProps, BaseWidget } from \"storm-react-diagrams\";\nimport { Label } from \"../models/Label\";\n\nexport interface DefaultLabelWidgetProps extends BaseWidgetProps {\n  model: Label;\n}\n\nexport class CustomLinkLabelWidget extends BaseWidget<DefaultLabelWidgetProps> {\n  constructor(props: DefaultLabelWidgetProps) {\n    super(\"srd-default-label\", props);\n  }\n\n  render() {\n    return <div {...this.getProps()}>{this.props.model.label}</div>;\n  }\n}\n","import * as React from \"react\";\nimport { AbstractLabelFactory, DiagramEngine } from \"storm-react-diagrams\";\nimport { Label } from \"../models/Label\";\nimport { CustomLinkLabelWidget } from \"../widgets/CustomLinkLabelWidget\";\n\nexport class CustomLinkLabelFactory extends AbstractLabelFactory<Label> {\n  constructor() {\n    super(\"custom\");\n  }\n\n  generateReactWidget(diagramEngine: DiagramEngine, label: Label): JSX.Element {\n    return React.createElement(CustomLinkLabelWidget, {\n      model: label\n    });\n  }\n\n  getNewInstance(initialConfig?: any): Label {\n    return new Label(\"\");\n  }\n}\n","import * as React from \"react\";\nimport {\n  AbstractLinkFactory,\n  DiagramEngine,\n  DefaultLinkModel,\n  DefaultLinkWidget\n} from \"storm-react-diagrams\";\nimport { Link } from \"../models/Link\";\n\nexport class CustomLinkFactory extends AbstractLinkFactory<Link> {\n  constructor() {\n    super(\"custom\");\n  }\n\n  generateReactWidget(\n    diagramEngine: DiagramEngine,\n    link: DefaultLinkModel\n  ): JSX.Element {\n    return React.createElement(DefaultLinkWidget, {\n      link: link,\n      diagramEngine: diagramEngine\n    });\n  }\n\n  getNewInstance(initialConfig?: any): Link {\n    return new Link(\"custom\");\n  }\n\n  generateLinkSegment(\n    model: Link,\n    widget: DefaultLinkWidget,\n    selected: boolean,\n    path: string\n  ) {\n    return (\n      <path\n        className={selected ? widget.bem(\"--path-selected\") : \"\"}\n        strokeWidth={model.width}\n        stroke={model.color}\n        d={path}\n      />\n    );\n  }\n}\n","import * as SRD from \"storm-react-diagrams\";\nimport { CustomLabelFactory } from \"../../infrastructure/factories/CustomLabelFactory\";\nimport { CustomPortFactory } from \"../../infrastructure/factories/CustomPortFactory\";\nimport { CustomNodeFactory } from \"../../infrastructure/factories/CustomNodeFactory\";\nimport { CustomLinkLabelFactory } from \"../../infrastructure/factories/CustomLinkLabelFactory\";\nimport { CustomLinkFactory } from \"../../infrastructure/factories/CustomLinkFactory\";\nimport { Node } from \"../../infrastructure/models/Node\";\nimport { LogicLink } from \"../../infrastructure/models/LogicLink\";\nimport { LogicPort } from \"../../infrastructure/models/LogicPort\";\nimport { Label } from \"../../infrastructure/models/Label\";\nimport { NodeModel } from \"storm-react-diagrams\";\nimport { Link } from \"../../infrastructure/models/Link\";\nimport { Port } from \"../../infrastructure/models/Port\";\n\nexport class Application {\n  protected activeModel: SRD.DiagramModel;\n  protected logicModel: SRD.DiagramModel;\n\n  protected diagramEngine: SRD.DiagramEngine;\n\n  constructor() {\n    this.diagramEngine = new SRD.DiagramEngine();\n    this.diagramEngine.registerNodeFactory(new CustomLabelFactory());\n    this.diagramEngine.registerLinkFactory(new CustomLinkFactory());\n    this.diagramEngine.registerLabelFactory(new CustomLinkLabelFactory());\n    this.diagramEngine.registerNodeFactory(new CustomNodeFactory());\n    this.diagramEngine.registerPortFactory(new CustomPortFactory());\n    this.diagramEngine.installDefaultFactories();\n    this.newModel();\n  }\n\n  public newModel() {\n    this.activeModel = new SRD.DiagramModel();\n    this.logicModel = new SRD.DiagramModel();\n\n    this.diagramEngine.setDiagramModel(this.activeModel);\n  }\n\n  public getActiveDiagram(): SRD.DiagramModel {\n    return this.diagramEngine.getDiagramModel();\n  }\n\n  public getDiagramEngine(): SRD.DiagramEngine {\n    return this.diagramEngine;\n  }\n\n  public setLogicModel() {\n\n    let concNodes = this.activeModel.getNodes();\n\n    Object.keys(concNodes).map((k) => {\n      let node = concNodes[k].clone() as Node;\n\n      let nodePorts = concNodes[k].getPorts();\n\n      Object.keys(nodePorts).map(k => {\n        let port = nodePorts[k] as Port;\n        let logicPort = new LogicPort(port.name, port.isNamePort, port.isPrimaryKey, port.isForeignKey, port.isNotNull, port.isAutoincremented, port.isUnique, port.propertyType);\n        node.addPort(logicPort);\n      })\n\n\n      this.logicModel.addNode(node);\n    });\n\n    let concLinks = this.activeModel.getLinks();\n\n    Object.keys(concLinks).map((k) => {\n      let logicNodes = this.logicModel.getNodes() as {\n        [s: string]: Node;\n      };\n\n      let sourceNode = concLinks[k].sourcePort.getParent() as Node;\n      let sourceNodeId = Object.keys(logicNodes).filter(\n        (k) => (logicNodes[k] as Node).name == sourceNode.name\n      )[0];\n\n      let targetNode = concLinks[k].targetPort.getParent() as Node;\n      let targetNodeId = Object.keys(logicNodes).filter(\n        (k) => (logicNodes[k] as Node).name == targetNode.name\n      )[0];\n\n      let sourceLabel = (concLinks[k].labels[0] as Label).label;\n      let targetLabel = (concLinks[k].labels[2] as Label).label;\n\n      if (sourceLabel.includes(\"N\") && targetLabel.includes(\"N\")) {\n        let relNode = ((concLinks[k] as Link).properties as Node).clone();\n        relNode.name = (concLinks[k].labels[1] as Label).label;\n        relNode.setPosition(sourceNode.x + 150, sourceNode.y - 100);\n        relNode.addInPort(\n          true,\n          true,\n          \"\",\n          false,\n          false,\n          false,\n          false,\n          false,\n          \"INT\"\n        );\n        relNode.addInPort(\n          true,\n          true,\n          \"1\",\n          false,\n          false,\n          false,\n          false,\n          false,\n          \"INT\"\n        );\n\n        relNode.addInPort(\n          true,\n          false,\n          \"Id\",\n          true,\n          false,\n          true,\n          true,\n          true,\n          \"INT\"\n        );\n\n        relNode.addInPort(\n          true,\n          false,\n          sourceNode.name + \"Id\",\n          false,\n          true,\n          false,\n          false,\n          true,\n          \"INT\",\n          sourceNodeId // add\n        );\n\n        relNode.addInPort(\n          true,\n          false,\n          targetNode.name + \"Id\",\n          false,\n          true,\n          false,\n          false,\n          true,\n          \"INT\",\n          targetNodeId // added\n        );\n\n        this.logicModel.addNode(relNode);\n\n        //dodaj link\n        let node = logicNodes[sourceNodeId];\n        let sourceP = node.ports[\"1\"];\n        let targetP = relNode.ports[\"\"];\n\n        let link = new LogicLink(\"custom\");\n        link.setSourcePort(sourceP);\n        link.setTargetPort(targetP);\n\n        //dodaj link\n        let node2 = logicNodes[targetNodeId];\n        let sourceP2 = relNode.ports[\"1\"];\n        let targetP2 = node2.ports[\"\"];\n\n        let link2 = new LogicLink(\"custom\");\n        link2.setSourcePort(sourceP2);\n        link2.setTargetPort(targetP2);\n\n        this.logicModel.addAll(link, link2);\n      } else if (sourceLabel.includes(\"N\")) {\n        //dodaj FK\n        logicNodes[sourceNodeId].addInPort(\n          true,\n          false,\n          targetNode.name + \"Id\",\n          false,\n          true,\n          false,\n          false,\n          true,\n          \"INT\",\n          targetNodeId\n        );\n        //dodaj link\n        let node = logicNodes[sourceNodeId];\n        let sourceP = node.ports[\"1\"];\n        let targetP = logicNodes[targetNodeId].ports[\"\"];\n\n        let link = new LogicLink(\"custom\");\n        link.setSourcePort(sourceP);\n        link.setTargetPort(targetP);\n        this.logicModel.addLink(link);\n      } else if (targetLabel.includes(\"N\")) {\n        //dodaj FK\n        logicNodes[targetNodeId].addInPort(\n          true,\n          false,\n          sourceNode.name + \"Id\",\n          false,\n          true,\n          false,\n          false,\n          true,\n          \"INT\",\n          sourceNodeId\n        );\n        //dodaj link\n        let node = logicNodes[targetNodeId];\n        let sourceP = node.ports[\"1\"];\n        let targetP = logicNodes[sourceNodeId].ports[\"\"];\n\n        let link = new LogicLink(\"custom\");\n        link.setSourcePort(sourceP);\n        link.setTargetPort(targetP);\n        this.logicModel.addLink(link);\n      } else {\n\n        //dodaj FK\n        logicNodes[sourceNodeId].addInPort(\n          true,\n          false,\n          targetNode.name + \"Id\",\n          false,\n          true,\n          false,\n          false,\n          true,\n          \"INT\",\n          targetNodeId\n        );\n        //dodaj link\n        let node = logicNodes[sourceNodeId];\n        let sourceP = node.ports[\"1\"];\n        let targetP = logicNodes[targetNodeId].ports[\"\"];\n\n        let link = new LogicLink(\"custom\");\n        link.setSourcePort(sourceP);\n        link.setTargetPort(targetP);\n        this.logicModel.addLink(link);\n      }\n    });\n\n    this.diagramEngine.setDiagramModel(this.logicModel);\n  }\n\n  public setConceptualModel() {\n    this.logicModel = null;\n    this.logicModel = new SRD.DiagramModel();\n\n    let activeModelCopy = new SRD.DiagramModel();\n\n    let nodes = this.activeModel.getNodes();\n\n    Object.keys(nodes).map(k => {\n      activeModelCopy.addNode(nodes[k]);\n    })\n\n    let links = this.activeModel.getLinks();\n\n    Object.keys(links).map(k => {\n      activeModelCopy.addLink(links[k]);\n    })\n\n    this.activeModel = activeModelCopy;\n\n    this.diagramEngine.setDiagramModel(this.activeModel);\n  }\n\n  public loadConceptualModel(model :SRD.DiagramModel) {\n    this.activeModel = model;\n\n    this.diagramEngine.setDiagramModel(this.activeModel);\n  }\n\n  public loadLogicModel(model :SRD.DiagramModel) {\n    this.logicModel = model;\n\n    this.diagramEngine.setDiagramModel(this.logicModel);\n  }\n}\n","import * as React from \"react\";\n\nexport interface TrayItemWidgetProps {\n  model: any;\n  color?: string;\n  name: string;\n}\n\nexport interface TrayItemWidgetState {}\n\nexport class TrayItemWidget extends React.Component<\n  TrayItemWidgetProps,\n  TrayItemWidgetState\n> {\n  constructor(props: TrayItemWidgetProps) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n    return (\n      <div\n        style={{ borderColor: this.props.color }}\n        draggable={true}\n        onDragStart={event => {\n          event.dataTransfer.setData(\n            \"storm-diagram-node\",\n            JSON.stringify(this.props.model)\n          );\n        }}\n        className=\"tray-item\"\n      >\n        {this.props.name}\n      </div>\n    );\n  }\n}\n","import * as React from \"react\";\n\nexport interface TrayWidgetProps {}\n\nexport interface TrayWidgetState {}\n\nexport class TrayWidget extends React.Component<\n  TrayWidgetProps,\n  TrayWidgetState\n> {\n  public static defaultProps: TrayWidgetProps = {};\n\n  constructor(props: TrayWidgetProps) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n    return <div className=\"tray\">{this.props.children}</div>;\n  }\n}\n","import * as React from \"react\";\n\nimport { GridProps } from \"./\";\n\nexport default class Grid extends React.Component<GridProps> {\n  render() {\n    return (\n      <div style={this.props.style} className={this.buildClassNameString()}>\n        {this.props.children}\n      </div>\n    );\n  }\n\n  buildClassNameString() {\n    let className = \"ms-Grid\";\n\n    if (this.props.className != null) {\n      className += ` ${this.props.className}`;\n    }\n\n    return className;\n  }\n}\n","import * as React from \"react\";\n\nimport { GridRowProps } from \"./\";\n\nexport default class Row extends React.Component<GridRowProps> {\n  render() {\n    return (\n      <div className={this.buildClassNameString()}>{this.props.children}</div>\n    );\n  }\n\n  buildClassNameString() {\n    let className = \"ms-Grid-row\";\n\n    if (this.props.flex) {\n      className += \" grid-row-flex\";\n    }\n\n    if (this.props.className != null) {\n      className += ` ${this.props.className}`;\n    }\n\n    return className;\n  }\n}\n","import * as React from \"react\";\n\nimport { GridColProps, GridColConfigProp } from \"./\";\n\nexport default class Col extends React.Component<GridColProps> {\n  render() {\n    return (\n      <div\n        className={this.buildClassNameString()}\n        onDoubleClick={this.props.onDoubleClick}\n      >\n        {this.props.children}\n      </div>\n    );\n  }\n\n  buildGridColConfigClassNames(size: string, config: GridColConfigProp) {\n    if (config == null) return \"\";\n\n    let className = ` ms-${size}`;\n\n    if (typeof config === \"string\") {\n      className += config;\n    } else {\n      className += config.size;\n\n      if (config.pull != null) {\n        className += ` ms-${size}Pull${config.pull}`;\n      }\n\n      if (config.push != null) {\n        className += ` ms-${size}Push${config.push}`;\n      }\n\n      if (config.offset != null) {\n        className += ` ms-${size}Offset${config.offset}`;\n      }\n\n      if (config.order != null) {\n        className += ` grid-flex-order-${size}-${config.order}`;\n      }\n    }\n\n    return className;\n  }\n\n  buildClassNameString() {\n    let className = \"ms-Grid-col\";\n\n    if (this.props.className != null) {\n      className += ` ${this.props.className}`;\n    }\n\n    if (this.props.hidden != null) {\n      className += ` ms-hidden${this.props.hidden}`;\n    }\n\n    if (this.props.order != null) {\n      className += ` grid-flex-order-${this.props.order}`;\n    }\n\n    className += this.buildGridColConfigClassNames(\"sm\", this.props.sm);\n    className += this.buildGridColConfigClassNames(\"md\", this.props.md);\n    className += this.buildGridColConfigClassNames(\"lg\", this.props.lg);\n    className += this.buildGridColConfigClassNames(\"xl\", this.props.xl);\n    className += this.buildGridColConfigClassNames(\"xxl\", this.props.xxl);\n    className += this.buildGridColConfigClassNames(\"xxxl\", this.props.xxxl);\n\n    return className;\n  }\n}\n","import \"./PropertyTable.scss\";\nimport React, { useState } from \"react\";\nimport { PropertyType } from \"../../infrastructure/models/PropertyType\";\nimport { Port } from \"../../infrastructure/models/Port\";\nimport BootstrapTable from \"react-bootstrap-table-next\";\nimport { DiagramEngine } from \"storm-react-diagrams\";\nimport { Link } from \"../../infrastructure/models/Link\";\nimport { Node } from \"../../infrastructure/models/Node\";\nimport \"react-bootstrap-table-next/dist/react-bootstrap-table2.min.css\";\n\nclass Props {\n\tselectedItem: Node;\n\tdiagramEngine: DiagramEngine;\n\trelView?: boolean;\n\tisLogic: boolean;\n}\n\nexport function useForceUpdate() {\n\tconst [value, setValue] = React.useState(0);\n\treturn () => setValue(value => ++value);\n}\n\nexport const PropertyTable = (props: Props) => {\n\tconst [updatedItem, setUpdatedItem] = React.useState(null);\n\n\tconst forceUpdate = useForceUpdate();\n\n\tReact.useMemo(() => {\n\t\tsetUpdatedItem(props.selectedItem);\n\t}, [props.selectedItem]);\n\n\tconst clearPartialKeys = () => {\n\t\tlet ports =\n\t\tupdatedItem &&\n\t\tupdatedItem.ports &&\n\t\t(updatedItem.ports as { [s: string]: Port });\n\n\t\tObject.keys(ports).map(p => console.log(ports[p].isPartialKey = false));\n\t}\n\n\tconst handleChangePK = (\n\t\tevent: React.ChangeEvent<HTMLInputElement>,\n\t\trow: Port\n\t) => {\n\t\tevent.persist();\n\t\t(updatedItem.getPortFromID(\n\t\t\trow.id\n\t\t) as Port).isPrimaryKey = !row.isPrimaryKey;\n\n\t\t(updatedItem.getPortFromID(\n\t\t\trow.id\n\t\t) as Port).isNotNull = row.isPrimaryKey ? true : false;\n\n\t\t(updatedItem.getPortFromID(\n\t\t\trow.id\n\t\t) as Port).isAutoincremented = row.isPrimaryKey ? true : false;\n\n\t\t(updatedItem.getPortFromID(\n\t\t\trow.id\n\t\t) as Port).isUnique = row.isPrimaryKey ? true : false;\n\n\t\tclearPartialKeys();\n\t\tforceUpdate();\n\t};\n\n\tconst handleChangeFK = (\n\t\tevent: React.ChangeEvent<HTMLInputElement>,\n\t\trow: Port\n\t) => {\n\t\tevent.persist();\n\t\t(updatedItem.getPortFromID(\n\t\t\trow.id\n\t\t) as Port).isForeignKey = !row.isForeignKey;\n\n\t\t(updatedItem.getPortFromID(\n\t\t\trow.id\n\t\t) as Port).isNotNull = row.isForeignKey ? true : false;\n\n\t\tforceUpdate();\n\t};\n\n\tconst handleChangeNull = (\n\t\tevent: React.ChangeEvent<HTMLInputElement>,\n\t\trow: Port\n\t) => {\n\t\tevent.persist();\n\t\t(updatedItem.getPortFromID(row.id) as Port).isNotNull = !row.isNotNull;\n\t\tforceUpdate();\n\t};\n\n\tconst handleChangePartialKey = (\n\t\tevent: React.ChangeEvent<HTMLInputElement>,\n\t\trow: Port\n\t) => {\n\t\tevent.persist();\n\t\t(updatedItem.getPortFromID(row.id) as Port).isPartialKey = !row.isPartialKey;\n\t\tforceUpdate();\n\t};\n\n\tconst handleChangeUnique = (\n\t\tevent: React.ChangeEvent<HTMLInputElement>,\n\t\trow: Port\n\t) => {\n\t\tevent.persist();\n\t\t(updatedItem.getPortFromID(row.id) as Port).isUnique = !row.isUnique;\n\t\tforceUpdate();\n\t};\n\n\tconst handleChangeAutoInc = (\n\t\tevent: React.ChangeEvent<HTMLInputElement>,\n\t\trow: Port\n\t) => {\n\t\tevent.persist();\n\t\t(updatedItem.getPortFromID(\n\t\t\trow.id\n\t\t) as Port).isAutoincremented = !row.isAutoincremented;\n\t\tforceUpdate();\n\t};\n\n\tconst handleChangepPropType = (\n\t\tevent: React.ChangeEvent<HTMLInputElement>,\n\t\trow: Port\n\t) => {\n\t\tevent.persist();\n\t\t(updatedItem.getPortFromID(row.id) as Port).propertyType = event.target\n\t\t\t.value;\n\t};\n\n\tconst handleChangePortLabel = (\n\t\tevent: React.ChangeEvent<HTMLInputElement>,\n\t\trow: Port\n\t) => {\n\t\tevent.persist();\n\t\t(updatedItem.getPortFromID(row.id) as Port).label = event.target.value;\n\t};\n\n\tconst addNewPort = (newPortNumber: number) => {\n\t\tupdatedItem.addInPort(\n\t\t\tprops.isLogic,\n\t\t\tfalse,\n\t\t\t`new atribute ${newPortNumber}`,\n\t\t\tfalse,\n\t\t\tfalse,\n\t\t\tfalse,\n\t\t\tfalse,\n\t\t\tfalse,\n\t\t\tPropertyType.INT\n\t\t);\n\t\tforceUpdate();\n\t};\n\n\tconst removePort = (port: Port) => {\n\t\tif (\n\t\t\tObject.entries(port.links).length !== 0 &&\n\t\t\tport.links.constructor === Object\n\t\t) {\n\t\t\tlet portLinks: Link[] = Object.keys(port.links).map(x => {\n\t\t\t\treturn port.links[x];\n\t\t\t});\n\t\t\tportLinks.forEach(p =>\n\t\t\t\tprops.diagramEngine.getDiagramModel().removeLink(p)\n\t\t\t);\n\t\t}\n\t\tupdatedItem.removePort(port);\n\t\tforceUpdate();\n\t};\n\n\tconst preparePropertyTypes = () => {\n\t\treturn Object.values(PropertyType).map(obj => (\n\t\t\t<option key={obj} value={obj}>\n\t\t\t\t{obj}\n\t\t\t</option>\n\t\t));\n\t};\n\n\tconst columns: any[] = [\n\t\t{\n\t\t\tdataField: \"label\",\n\t\t\ttext: \"Property Name\",\n\t\t\tformatter: (cellContent: any, row: Port) => (\n\t\t\t\t<div className=\"input\">\n\t\t\t\t\t<input\n\t\t\t\t\t\tstyle={{ width: '100px' }}\n\t\t\t\t\t\tclassName=\"darkInput\"\n\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\tdefaultValue={row.label}\n\t\t\t\t\t\tonChange={event => handleChangePortLabel(event, row)}\n\t\t\t\t\t></input>\n\t\t\t\t</div>\n\t\t\t)\n\t\t},\n\t\t{\n\t\t\tstyle: { paddingLeft: 0 },\n\t\t\tdataField: \"propertyType\",\n\t\t\ttext: \"Property Type\",\n\t\t\tformatter: (cellContent: any, row: Port) => (\n\t\t\t\t<div className=\"input\">\n\t\t\t\t\t<input\n\t\t\t\t\t\tstyle={{ width: '100px' }}\n\n\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\tlist=\"types\"\n\t\t\t\t\t\tclassName=\"darkInput\"\n\t\t\t\t\t\tonChange={event => handleChangepPropType(event, row)}\n\t\t\t\t\t\tdefaultValue={row.propertyType}\n\n\t\t\t\t\t/>\n\t\t\t\t\t<datalist id=\"types\">\n\t\t\t\t\t\t{preparePropertyTypes()}\n\t\t\t\t\t</datalist>\n\n\t\t\t\t</div>\n\t\t\t)\n\t\t},\n\t\t{\n\t\t\tdataField: \"isPrimaryKey\",\n\t\t\ttext: \"Is Primary Key\",\n\t\t\tformatter: (cellContent: any, row: Port) => (\n\t\t\t\t<div className=\"checkbox\">\n\t\t\t\t\t<label>\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\ttype=\"checkbox\"\n\t\t\t\t\t\t\tchecked={row.isPrimaryKey}\n\t\t\t\t\t\t\tonChange={event => handleChangePK(event, row)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</label>\n\t\t\t\t</div>\n\t\t\t)\n\t\t},\n\t\t{\n\t\t\tdataField: \"isForeignKey\",\n\t\t\ttext: \"Is Foreign Key\",\n\t\t\tformatter: (cellContent: any, row: Port) => (\n\t\t\t\t<div className=\"checkbox\">\n\t\t\t\t\t<label>\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\ttype=\"checkbox\"\n\t\t\t\t\t\t\tchecked={row.isForeignKey}\n\t\t\t\t\t\t\tonChange={event => handleChangeFK(event, row)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</label>\n\t\t\t\t</div>\n\t\t\t)\n\t\t},\n\t\t{\n\t\t\tdataField: \"isPartialKey\",\n\t\t\ttext: \"Is Partial Key\",\n\t\t\tformatter: (cellContent: any, row: Port) => (\n\t\t\t\t<div className=\"checkbox\">\n\t\t\t\t\t<label>\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\ttype=\"checkbox\"\n\t\t\t\t\t\tchecked={row.isPartialKey}\n\t\t\t\t\t\tonChange={event => handleChangePartialKey(event, row)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</label>\n\t\t\t\t</div>\n\t\t\t)\n\t\t},\n\t\t{\n\t\t\tdataField: \"isNotNull\",\n\t\t\ttext: \"Not Null\",\n\t\t\tformatter: (cellContent: any, row: Port) => (\n\t\t\t\t<div className=\"checkbox\">\n\t\t\t\t\t<label>\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\tdisabled={row.isPrimaryKey || row.isForeignKey}\n\t\t\t\t\t\t\ttype=\"checkbox\"\n\t\t\t\t\t\t\tchecked={row.isNotNull}\n\t\t\t\t\t\t\tonChange={event => handleChangeNull(event, row)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</label>\n\t\t\t\t</div>\n\t\t\t)\n\t\t},\n\t\t{\n\t\t\tdataField: \"isAutoincremented\",\n\t\t\ttext: \"Is Auto Incremented\",\n\t\t\tformatter: (cellContent: any, row: Port) => (\n\t\t\t\t<div className=\"checkbox\">\n\t\t\t\t\t<label>\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\tdisabled={row.isPrimaryKey}\n\t\t\t\t\t\t\ttype=\"checkbox\"\n\t\t\t\t\t\t\tchecked={row.isAutoincremented}\n\t\t\t\t\t\t\tonChange={event => handleChangeAutoInc(event, row)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</label>\n\t\t\t\t</div>\n\t\t\t)\n\t\t},\n\t\t{\n\t\t\tdataField: \"isUnique\",\n\t\t\ttext: \"Is Unique\",\n\t\t\tformatter: (cellContent: any, row: Port) => (\n\t\t\t\t<div className=\"checkbox\">\n\t\t\t\t\t<label>\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\tdisabled={row.isPrimaryKey}\n\t\t\t\t\t\t\ttype=\"checkbox\"\n\t\t\t\t\t\t\tchecked={row.isUnique}\n\t\t\t\t\t\t\tonChange={event => handleChangeUnique(event, row)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</label>\n\t\t\t\t</div>\n\t\t\t)\n\t\t},\n\t\t{\n\t\t\tdataField: \"remove\",\n\t\t\ttext: \"Remove\",\n\t\t\tformatter: (cellContent: any, row: Port) => (\n\t\t\t\t<div className=\"checkbox\">\n\t\t\t\t\t<label>\n\t\t\t\t\t\t<span\n\t\t\t\t\t\t\tonClick={() => removePort(row)}\n\t\t\t\t\t\t\tclassName=\"mi mi-Delete red\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t</label>\n\t\t\t\t</div>\n\t\t\t)\n\t\t}\n\t];\n\n\n\tlet ports =\n\t\tupdatedItem &&\n\t\tupdatedItem.ports &&\n\t\t(updatedItem.ports as { [s: string]: Port });\n\n\tlet portsTable: Port[] =\n\t\tports &&\n\t\tObject.keys(ports)\n\t\t\t.map(x => {\n\t\t\t\treturn ports[x];\n\t\t\t})\n\t\t\t.filter(p => !p.isNamePort);\n\n\tlet ispk = portsTable && portsTable.find(p => p.isPrimaryKey) ? true : false;\n\n\tlet cols = columns;\n\n\tif (ispk) {\n\t\tcols = cols.filter(col => col.dataField !== 'isPartialKey')\n\t}\n\n\tif(!props.isLogic) {\n\t\tcols = cols.filter(c => c.dataField !== 'isForeignKey')\n\t}\n\n\treturn (\n\t\t<div>\n\t\t\t<BootstrapTable\n\t\t\t\tkeyField=\"id\"\n\t\t\t\tdata={portsTable}\n\t\t\t\tcolumns={props.relView ? cols.filter(col => col.dataField !== 'isPrimaryKey' && col.dataField !== 'isPartialKey') : cols}\n\t\t\t\tbordered={false}\n\t\t\t/>\n\t\t\t<p\n\t\t\t\tclassName=\"mouse-cursor\"\n\t\t\t\tonClick={() => addNewPort(portsTable.length)}\n\t\t\t>\n\t\t\t\tAdd new atribute\n      </p>\n\t\t</div>\n\t);\n};\n","import \"./NodeProperties.scss\";\nimport * as React from \"react\";\nimport { DiagramEngine } from \"storm-react-diagrams\";\nimport { Node } from \"../../infrastructure/models/Node\";\n\nimport { Col, Row, Grid } from \"../grid\";\nimport { PropertyTable } from \"../propertyTable/PropertyTable\";\n\nclass Props {\n  selectedItem: Node;\n  isLogic: boolean;\n  diagramEngine: DiagramEngine;\n}\n\nexport function useForceUpdate() {\n  const [value, setValue] = React.useState(0);\n  return () => setValue(value => ++value);\n}\n\nexport const NodeProperties = (props: Props) => {\n  const [updatedItem, setUpdatedItem] = React.useState(null);\n  const [defaultName, setDefaultName] = React.useState(\"\");\n\n  const [name, setName] = React.useState(\"\");\n  const [showInput, setShowInput] = React.useState(false);\n\n  const forceUpdate = useForceUpdate();\n\n  React.useMemo(() => {\n    setUpdatedItem(props.selectedItem);\n    setName(props.selectedItem.name);\n    setDefaultName(props.selectedItem.name);\n  }, [props.selectedItem]);\n\n\n  const handleNameChange = (event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement >) => {\n    event.persist();\n    let allNodes = props.diagramEngine.diagramModel.getNodes() as {\n      [id: string]: Node;\n    };\n    let names = Object.values(allNodes).map(node => allNodes[node.id].name.toLowerCase().trim());\n    \n    console.log(names);\n\n    names.includes(event.target.value.toLowerCase().trim())\n      ? updatedItem.name = defaultName\n      : updatedItem.name = event.target.value.trim();\n    forceUpdate();\n  };\n\n      const iconStyles: React.CSSProperties = {\n        display: \"flex\",\n        flexDirection: 'row',\n        flexFlow: 'row-reverse',\n        position: 'absolute',\n        right: '0',\n        top: '10px',\n        zIndex: 9999\n      };\n\n\n      const acceptStyle: React.CSSProperties = {\n        marginRight: 5,\n        backgroundColor: 'green',\n        borderRadius: '90px',\n        padding: '10px',\n      };\n\n      const declineStyle: React.CSSProperties = {\n        marginRight: '20px',\n        backgroundColor: 'red',\n        borderRadius: '90px',\n        padding: '10px',\n      };\n\n  if (!updatedItem) return null;\n  else\n    return (\n      <div className=\"trayBottom\">\n        {/* <div style={iconStyles}>\n              <span\n                style={declineStyle}\n                className={`mi ${\n                  \"mi-Cancel\"\n                }`}\n              />\n                <span\n                  style={acceptStyle}\n                  className={`mi ${\n                    \"mi-Accept\"\n                  }`}\n                />\n            </div> */}\n        <Grid>\n          <Row>\n          \n            <Col >\n              {!showInput ? (\n                \n                <h1 style={{wordBreak: 'break-all'}} onDoubleClick={() => setShowInput(true)}>{name}</h1>\n              ) : (\n                props.selectedItem.isLabel ? \n                <textarea\n                style={{height: '200px'}}\n                className=\"darkInput fs-24\"\n                defaultValue={name}\n                onChange={event => handleNameChange(event)}\n                >\n\n                </textarea> :\n                <input\n                  className=\"darkInput fs-24\"\n                  defaultValue={name}\n                  onChange={event => handleNameChange(event)}\n                />\n              )}\n              \n            </Col>\n            \n            {!updatedItem.isLabel ? (\n        <PropertyTable selectedItem={props.selectedItem} diagramEngine={props.diagramEngine} isLogic={props.isLogic}/> \n            ) : null}\n          </Row>\n        </Grid>\n      </div>\n    );\n};\n","import \"./ResultPopup.scss\";\nimport React, { useState, useEffect } from \"react\";\nimport Popup from \"reactjs-popup\";\nimport sqlFormatter from \"sql-formatter\";\nimport FileSaver from \"file-saver\";\n\nclass Props {\n  isOpen: boolean;\n  generateScript?: (name: string) => void;\n  mssqlString: string;\n  mysqlString: string;\n  update: () => void;\n}\n\nexport const ResultPopup = (props: Props) => {\n  const [dbName, setDbName] = useState(\"DatabaseName\");\n  const [mySQLView, setmySQLView] = useState(false);\n\n\n  let formatedMSSQL =\n    props.mssqlString &&\n    sqlFormatter.format(props.mssqlString, {\n      language: \"sql\", // Defaults to \"sql\"\n      indent: \"  \" // Defaults to two spaces\n    });\n\n  let formatedMySQL =\n    props.mysqlString &&\n    sqlFormatter.format(props.mysqlString, {\n      language: \"db2\", // Defaults to \"sql\"\n      indent: \"  \" // Defaults to two spaces\n    });\n\n  // useEffect(() => {\n  //   formatedMSSQL = '';\n  //   formatedMySQL = '';\n  // }, [props.mssqlString, props.mysqlString])\n\n\n\n  const downloadMSSQL = () => {\n    var blob = new Blob([formatedMSSQL], { type: \"text/plain;charset=utf-8\" });\n    FileSaver.saveAs(blob, `${dbName}.sql`);\n    props.update();\n  };\n\n  const downloadMYSQL = () => {\n    var blob = new Blob([formatedMySQL], { type: \"text/plain;charset=utf-8\" });\n    FileSaver.saveAs(blob, `${dbName}.sql`);\n    props.update();\n  };\n\n  return (\n    <Popup modal closeOnDocumentClick open={props.isOpen} closeOnEscape>\n      <div className=\"sql-result-dialog\">\n        <input\n          style={{ marginRight: \"10px\" }}\n          type=\"text\"\n          onChange={event => setDbName(event.target.value)}\n          value={dbName}\n        />\n\n        <button\n         style={{ marginRight: \"10px\" }}\n          onClick={() => {\n            props.generateScript(dbName)\n          }}>\n          Generate\n            </button>\n\n            <button\n            className={`${mySQLView ? '' : 'selected-sql'}`}\n          onClick={() => {\n            setmySQLView(false)\n          }}>\n          MSSQL\n            </button>\n\n            <button\n            className={`${mySQLView ? 'selected-sql' : ''}`}\n\n          onClick={() => {\n            setmySQLView(true)\n\n          }}>\n          MySQL\n            </button>\n\n\n        <textarea\n          style={{ marginTop: \"5px\" }}\n          readOnly={true}\n          value={mySQLView ? formatedMySQL : formatedMSSQL}\n          contentEditable={false}\n        ></textarea>\n\n        <button style={{ marginRight: \"10px\" }} onClick={downloadMSSQL}>\n          Download MSSQL\n        </button>\n        <button style={{ marginRight: \"10px\" }} onClick={downloadMYSQL}>\n          Download mySQL\n        </button>\n      </div>\n    </Popup>\n  );\n};\n","import { ResultPopup } from \"../components/popups/ResultPopup/ResultPopup\";\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { Link } from \"../infrastructure/models/Link\";\n\nclass Props {\n  isUml: boolean;\n  isLogic: boolean;\n  isOpen: boolean;\n  serializeDiagram: any;\n\n  update: () => void;\n}\n\nexport const GenerationHandler = (props: Props) => {\n  const [sqlString, setSqlString] = useState(\"\");\n  const [mysqlString, setMySqlString] = useState(\"\");\n\n\n  useEffect(() => setSqlString(''), [props.isOpen]);\n\n  const generateScript = async (name: string) => {\n    let serDiagram = props.serializeDiagram;\n    let diagram = JSON.stringify(serDiagram, null, 2);\n    let response = await axios.post(\"https://sql-generator.pl/api/setjob/mssql\", {\n\n    // let response = await axios.post(\"https://51.83.185.113/api/setjob/mssql\",\n    // let response = await axios.post(\"http://localhost:5000/api/setjob/mssql\", {\n\n      SerializedModel: diagram,\n      DatabaseName: name,\n      RelationType: props.isUml ? 'UML' : 'CHEN',\n      DiagramType: props.isLogic ? 'Logic' : 'Conceptual'\n    });\n\n    let responseMy = await axios.post(\"https://sql-generator.pl/api/setjob/mysql\", {\n    // let responseMy = await axios.post(\"http://localhost:5000/api/setjob/mysql\", {\n      SerializedModel: diagram,\n      DatabaseName: name,\n      RelationType: props.isUml ? 'UML' : 'CHEN',\n      DiagramType: props.isLogic ? 'Logic' : 'Conceptual'\n    });\n\n    if (response.status === 200 && responseMy.status === 200) {\n      setSqlString(response.data);\n      setMySqlString(responseMy.data);\n    } else {\n      setSqlString('There was an error while processing your request');\n      setMySqlString('There was an error while processing your request');\n\n      console.log(\"there was an error while processing your request\");\n    }\n  };\n\n  return (\n    <ResultPopup\n      update={props.update}\n      mssqlString={sqlString}\n      mysqlString={mysqlString}\n      generateScript={name => generateScript(name)}\n      isOpen={props.isOpen}\n    />\n  );\n};\n","import \"./RelationPopup.scss\";\nimport React, { useState } from \"react\";\nimport Popup from \"reactjs-popup\";\nimport { Link } from \"../../../infrastructure/models/Link\";\nimport { Label } from \"../../../infrastructure/models/Label\";\nimport { Node } from \"../../../infrastructure/models/Node\";\nimport { DiagramModel, DiagramEngine } from \"storm-react-diagrams\";\nimport { Port } from \"../../../infrastructure/models/Port\";\nimport { PropertyType } from \"../../../infrastructure/models/PropertyType\";\nimport { PropertyTable } from \"../../../components/propertyTable/PropertyTable\";\n\nclass Props {\n  isOpen: boolean;\n  link: Link;\n  update: () => void;\n  diagramModel: DiagramModel;\n  diagramEngine: DiagramEngine;\n  isLogic: boolean;\n}\nexport const RelationPopup = (props: Props) => {\n  const [left, setLeft] = useState(\"1, N\");\n\n  const [right, setRight] = useState(\"1, N\");\n\n  const [relationName, setRelationName] = useState(\"relation name\");\n\n  React.useEffect(() => {\n    let leftLabel =\n      props.link &&\n      props.link.labels.length > 0 &&\n      (props.link.labels[0] as Label).label;\n    let relLabel =\n      props.link &&\n      props.link.labels.length > 0 &&\n      (props.link.labels[1] as Label).label;\n    let rightLabel =\n      props.link &&\n      props.link.labels.length > 0 &&\n      (props.link.labels[2] as Label).label;\n\n    setLeft(leftLabel ? leftLabel : \"1, N\");\n    setRelationName(relLabel ? relLabel : \"relation name\");\n    setRight(rightLabel ? rightLabel : \"1, N\");\n  }, [props.link]);\n\n  let update = () => {\n    let labels = props.link.labels as Label[];\n    labels[0].label = left;\n    labels[2].label = right;\n    labels[1].label = relationName;\n    let points = props.link.points;\n    for (let index = 1; index < points.length - 1; index++) {\n      const element = points[index];\n      element.remove();\n    }\n    props.update();\n  };\n\n  const sourcePort =\n    props.link &&\n    props.link.sourcePort &&\n    (props.link.sourcePort.parent as Node);\n  const targetPort =\n    props.link &&\n    props.link.targetPort &&\n    (props.link.targetPort.parent as Node);\n\n  const remove = () => {\n    const sourceP = props.link && props.link.sourcePort;\n    const targetP = props.link && props.link.targetPort;\n    sourceP.removeLink(props.link);\n    targetP.removeLink(props.link);\n\n    props.diagramModel.removeLink(props.link);\n    props.update();\n  };\n\n  const options = (\n    <>\n      <option value=\"0, N\">0, N</option>\n      <option value=\"1, N\">1, N</option>\n      <option value=\"0, 1\">0, 1</option>\n      <option value=\"1, 1\">1, 1</option>\n      <option value=\"N, N\">N, N</option>\n    </>\n  );\n\n  const renderOptionPicker = (side: string) => {\n    return (\n      <div className=\"grid-item\">\n        <select\n          className=\"darkSelect\"\n          onChange={(event) =>\n            side === \"left\"\n              ? setLeft(event.target.value)\n              : setRight(event.target.value)\n          }\n          value={side === \"left\" ? left : right}\n        >\n          {options}\n        </select>\n      </div>\n    );\n  };\n\n  if (props.isLogic) {\n    return (\n      <Popup modal closeOnDocumentClick open={props.isOpen} closeOnEscape>\n        <div className=\"SQLResultDialog\">\n          <div className=\"grid-item\">\n            <button onClick={remove}>Remove</button>\n          </div>\n        </div>\n      </Popup>\n    );\n  } else\n    return (\n      <Popup modal closeOnDocumentClick open={props.isOpen} closeOnEscape>\n        <div className=\"SQLResultDialog\">\n          <div className=\"grid-container\">\n            <div className=\"grid-item\">\n              <p>{sourcePort && sourcePort.name}</p>\n            </div>\n            <div className=\"grid-item\">\n              <input\n                className=\"darkInput\"\n                type=\"text\"\n                defaultValue={relationName}\n                onChange={(event) => setRelationName(event.target.value)}\n              ></input>\n            </div>\n            <div className=\"grid-item\">\n              <p>{targetPort && targetPort.name}</p>\n            </div>\n            {renderOptionPicker(\"left\")}\n            <div className=\"grid-item\">\n              <button onClick={update}>SAVE</button>\n            </div>\n            {renderOptionPicker(\"right\")}\n            {/* <div className=\"grid-item\" /> */}\n            <div className=\"grid-item\"></div>\n            <div className=\"grid-item\">\n              <button onClick={remove}>Remove</button>\n            </div>\n            {/* <div className=\"grid-item\" /> */}\n          </div>\n          {props.link && left.includes(\"N\") && right.includes(\"N\") && (\n            <div>\n              <h3 style={{ margin: 0 }}>Atributes:</h3>\n              <PropertyTable\n                relView={true}\n                diagramEngine={props.diagramEngine}\n                selectedItem={props.link.properties}\n                isLogic={props.isLogic}\n              />\n            </div>\n          )}\n        </div>\n      </Popup>\n    );\n};\n","import \"./LoadFilePopup.scss\";\nimport React, { useState } from \"react\";\nimport Popup from \"reactjs-popup\";\n\nclass Props {\n  isOpen: boolean;\n  loadDiagram?: (name: string) => void;\n  update: () => void;\n}\n\nexport const LoadFilePopup = (props: Props) => {\n  let fileReader: FileReader;\n\n  const [fileContent, setFileContent] = useState(\"\");\n\n  const handleFileRead = (e: any) => {\n    const content = fileReader.result;\n    setFileContent(content as string);\n  };\n\n  const handleFileChosen = (name: any) => {\n    fileReader = new FileReader();\n    fileReader.onloadend = handleFileRead;\n    fileReader.readAsText(name);\n  };\n\n  return (\n    <Popup\n      modal\n      closeOnDocumentClick\n      open={props.isOpen}\n      closeOnEscape\n      onClose={() => props.update()}\n    >\n      <div className=\"sql-result-dialog\">\n        <input\n          type=\"file\"\n          onChange={event => handleFileChosen(event.target.files[0])}\n          accept=\".dbjson\"\n        />\n        <button onClick={() => props.loadDiagram(fileContent)}>Load</button>\n      </div>\n    </Popup>\n  );\n};\n","import { LoadFilePopup } from \"../components/popups/LoadFilePopup/LoadFilePopup\";\nimport React from \"react\";\nimport { Application } from \"../components/dragAndDrop/Application\";\nimport { DiagramModel } from \"storm-react-diagrams\";\n\nclass Props {\n  isOpen: boolean;\n  app: Application;\n  update: () => void;\n  setIsUml: (isUml: boolean) => void;\n  setIsLogic: (isLogic: boolean) => void;\n}\n\nexport const LoadFileHandler = (props: Props) => {\n  const loadDiagram = (name: string) => {\n    let engine = props.app.getDiagramEngine();\n    try {\n      let obj: {diagram: any, isUml: boolean, isLogic: boolean} = JSON.parse(name);\n    \n      props.setIsUml(obj.isUml);\n      obj.isLogic ? props.setIsLogic(obj.isLogic) : props.setIsLogic(false);\n\n  \n      let model2 = new DiagramModel();\n      model2.deSerializeDiagram(obj.diagram, engine);\n      let newLinks: any[] = Object.keys(model2.links).map(x => {\n        return model2.links[x];\n      });\n  \n      newLinks.forEach(link => {\n        link.labels.splice(0, 3);\n      });\n\n      if(obj.isLogic) {\n        props.app.loadLogicModel(model2);\n      } else {\n        props.app.loadConceptualModel(model2);\n      }\n\n      engine.repaintCanvas();\n      props.update();\n    } catch (error) {\n      console.log(error);\n    }\n\n  };\n\n  return (\n    <LoadFilePopup\n      update={props.update}\n      loadDiagram={name => loadDiagram(name)}\n      isOpen={props.isOpen}\n    />\n  );\n};\n","import \"./SaveToFilePopup.scss\";\nimport React, { useState } from \"react\";\nimport Popup from \"reactjs-popup\";\nimport { DiagramModel } from \"storm-react-diagrams\";\nimport FileSaver from \"file-saver\";\n\nclass Props {\n  isUml: boolean;\n  isLogic: boolean;\n\n  isOpen: boolean;\n  diagramModel: DiagramModel;\n  update: () => void;\n}\n\nexport const SaveToFilePopup = (props: Props) => {\n  const [fileName, setFileName] = useState(\"diagram\");\n\n  const download = () => {\n    const diagramJson = JSON.stringify({diagram: props.diagramModel.serializeDiagram(), isUml: props.isUml, isLogic: props.isLogic});\n\n    let blob = new Blob([diagramJson], { type: \"text/plain;charset=utf-8\" });\n    FileSaver.saveAs(blob, `${fileName}.dbjson`);\n    props.update();\n  };\n\n  return (\n    <Popup\n      modal\n      closeOnDocumentClick\n      open={props.isOpen}\n      closeOnEscape\n      onClose={() => props.update()}\n    >\n      <div className=\"sql-result-dialog\">\n        <input\n          type=\"text\"\n          onChange={event => setFileName(event.target.value)}\n          value={fileName}\n        />\n        <button onClick={download}>save</button>\n      </div>\n    </Popup>\n  );\n};\n","import \"./SaveToJpegPopup.scss\";\nimport React, { useState } from \"react\";\nimport Popup from \"reactjs-popup\";\nimport { DiagramModel } from \"storm-react-diagrams\";\nimport domtoimage from \"dom-to-image\";\n\nclass Props {\n  isOpen: boolean;\n  diagramModel: DiagramModel;\n  update: () => void;\n}\n\nexport const SaveToJpegPopup = (props: Props) => {\n  const [fileName, setFileName] = useState(\"diagram\");\n\n  const download = () => {\n    domtoimage\n      .toJpeg(document.getElementById(\"diagram-layer\"), { quality: 0.95 })\n      .then((dataUrl: any) => {\n        let link = document.createElement(\"a\");\n        link.download = `${fileName}.jpeg`;\n        link.href = dataUrl;\n        link.click();\n        props.update();\n      });\n  };\n\n  return (\n    <Popup\n      modal\n      closeOnDocumentClick\n      open={props.isOpen}\n      closeOnEscape\n      onClose={() => props.update()}\n    >\n      <div className=\"sql-result-dialog\">\n        <input\n          type=\"text\"\n          onChange={event => setFileName(event.target.value)}\n          value={fileName}\n        />\n        <button onClick={download}>save</button>\n      </div>\n    </Popup>\n  );\n};\n","import * as React from \"react\";\n\nimport { DiagramWidget, PointModel, LinkModelListener } from \"storm-react-diagrams\";\nimport { TrayItemWidget } from \"./components/dragAndDrop/TrayItemWidget\";\nimport { TrayWidget } from \"./components/dragAndDrop/TrayWidget\";\nimport { Application } from \"./components/dragAndDrop/Application\";\nimport { Node } from \"./infrastructure/models/Node\";\nimport { Link } from \"./infrastructure/models/Link\";\nimport { PropertyType } from \"./infrastructure/models/PropertyType\";\nimport {\n  NodeProperties,\n  useForceUpdate\n} from \"./components/nodeProperties/NodeProperties\";\nimport { GenerationHandler } from \"./handlers/GenerationHandler\";\nimport { RelationPopup } from \"./components/popups/RealtionPopup/RelationPopup\";\nimport { LoadFileHandler } from \"./handlers/LoadFileHandler\";\nimport { SaveToFilePopup } from \"./components/popups/SaveToFilePopup/SaveToFilePopup\";\nimport { CSSProperties } from \"react\";\nimport { SaveToJpegPopup } from \"./components/popups/SaveToJpegPopup/SaveToJpegPopup\";\nimport _ from \"lodash\";\nimport { Label } from \"./infrastructure/models/Label\";\n\nrequire(\"storm-react-diagrams/dist/style.min.css\");\nrequire(\"react-bootstrap-table-next/dist/react-bootstrap-table2.min.css\");\n\ninterface Props {\n  app: Application;\n}\n\nexport const AppView = (props: Props) => {\n  const diagramDiv = React.useRef(null);\n\n\n  const jpegFileTarget: React.RefObject<any> = null;\n\n  const [showDialog, setShowDialog] = React.useState(false);\n  const [showRelationDialog, setShowRelationDialog] = React.useState(false);\n  const [showLoadFileDialog, setShowLoadFileDialog] = React.useState(false);\n  const [showSaveFileDialog, setSaveFileDialog] = React.useState(false);\n  const [showSaveJPEGDialog, setSaveJPEGDialog] = React.useState(false);\n  const [showSaveOptions, setSaveOptions] = React.useState(false);\n\n  const [selectedNode, setSelectedNode] = React.useState(null);\n  const [selectedLink, setSelectedLink] = React.useState(null);\n\n  const [isUml, setIsUml] = React.useState(true);\n\n  const [isLogicModel, setIsLogicModel] = React.useState(false);\n\n\n\n  const forceUpdate = useForceUpdate();\n\n  React.useEffect(() => {\n    setSelectedNode(null);\n    setSelectedLink(null);\n  }, []);\n\n  const changeRelation = () => {\n    let links = props.app.getDiagramEngine().getDiagramModel().getLinks();\n    Object.keys(links).map(id => {\n      let temp = (links[id].labels[0] as Label).label.substring(0,1);\n      let temp2 = (links[id].labels[2] as Label).label.substring(0,1);\n\n      (links[id].labels[0] as Label).label = temp2 + (links[id].labels[0] as Label).label.substring(1);\n      (links[id].labels[2] as Label).label = temp + (links[id].labels[2] as Label).label.substring(1);\n    });\n  }\n\n  const refreshPopups = () => {\n    setSelectedLink(null);\n    setSelectedNode(null);\n\n    setShowDialog(false);\n    setSaveFileDialog(false);\n    setSaveJPEGDialog(false);\n    setSaveOptions(false);\n    setShowLoadFileDialog(false);\n    setShowRelationDialog(false);\n\n\n    let links = props.app.getDiagramEngine().getDiagramModel().getLinks();\n\n    Object.keys(links).map(id => {\n      links[id].targetPort == null && props.app.getDiagramEngine().getDiagramModel().removeLink(id);\n    });\n\n  };\n\n  const containerStyles: CSSProperties = {\n    display: \"flex\",\n    justifyContent: \"space-between\",\n    borderColor: \"rgb(255,123,0)\"\n  };\n  const itemStyles: CSSProperties = {\n    display: \"inline-block\",\n    paddingTop: 3,\n    paddingRight: 5\n  };\n\n  return (\n    <div className=\"body\">\n      <div className=\"header\">\n        <div className=\"title\">DB Diagram Scripter</div>\n      </div>\n      <div className=\"content\" ref={jpegFileTarget}>\n        <TrayWidget>\n          <TrayItemWidget\n            model={{ type: \"table\" }}\n            name=\"Entity\"\n            color=\"rgb(0,192,255)\"\n          />\n          <TrayItemWidget\n            model={{ type: \"label\" }}\n            name=\"Label\"\n            color=\"rgb(192,255,0)\"\n          />\n\n          <div\n            style={{ borderColor: \"rgb(255,123,0)\", marginTop: \"100px\" }}\n            className=\"tray-item\"\n            onClick={() => {\n              props.app.setConceptualModel();\n              setShowLoadFileDialog(true);\n              setSelectedNode(null);\n            }}\n          >\n            Load Diagram\n          </div>\n          <div\n            style={containerStyles}\n            className=\"tray-item\"\n            onClick={() => {\n              setSaveOptions(!showSaveOptions);\n              setSelectedNode(null);\n            }}\n          >\n            Save\n            <span\n              style={itemStyles}\n              className={`mi ${\n                !showSaveOptions ? \"mi-ArrowDown8\" : \"mi-ArrowUp8\"\n                }`}\n            />\n          </div>\n          {showSaveOptions && (\n            <div\n              style={{ borderColor: \"rgb(255,123,0)\" }}\n              className=\"tray-item\"\n              onClick={() => {\n                setSaveFileDialog(true);\n                setSelectedNode(null);\n              }}\n            >\n              File\n            </div>\n          )}\n          {showSaveOptions && (\n            <div\n              style={{ borderColor: \"rgb(255,123,0)\" }}\n              className=\"tray-item\"\n              onClick={() => {\n                setSaveJPEGDialog(true);\n                setSelectedNode(null);\n              }}\n            >\n              JPEG\n            </div>\n          )}\n          <div\n            style={{ borderColor: \"rgb(0,50,100)\", marginTop: \"100px\" }}\n            className={`tray-item ${!isLogicModel ? 'selected' : ''}`}\n            onClick={() => {\n              if(isLogicModel) {\n                props.app.setConceptualModel();\n                setIsLogicModel(false);\n                \n                \n                // diagramDiv.current.click();\n                // refreshPopups();\n\n                //  props.app.getDiagramEngine().getDiagramModel().setOffsetX(100);\n                //  props.app.getDiagramEngine().recalculatePortsVisually();\n                //  props.app.getDiagramEngine().repaintCanvas();\n\n              }\n            }}\n          >\n            Conceptual View\n          </div>\n          <div\n            style={{ borderColor: \"rgb(0,50,100)\" }}\n            className={`tray-item ${isLogicModel ? 'selected' : ''}`}\n            onClick={() => {\n              if(!isLogicModel) {\n                props.app.setLogicModel();\n                setIsLogicModel(true);\n              }\n            }}\n          >\n            Logic View\n          </div>\n          <div\n            style={{ borderColor: \"rgb(152,50,100)\", marginTop: \"100px\" }}\n            className={`tray-item ${isUml ? 'selected' : ''}  ${isLogicModel ? 'disabled' : ''}`}\n            onClick={() => {\n              if(!isLogicModel && !isUml) {\n                changeRelation();\n                setIsUml(true);\n              }\n            }}\n          >\n            UML\n          </div>\n          <div\n            style={{ borderColor: \"rgb(152,50,100)\" }}\n            className={`tray-item ${!isUml ? 'selected' : ''} ${isLogicModel ? 'disabled' : ''}`}\n            onClick={() => {\n              if(!isLogicModel && isUml) {\n                changeRelation();\n                setIsUml(false);\n              }\n            }}\n          >\n            Chen\n          </div>\n          <div\n            style={{ borderColor: \"rgb(255,0,0)\", marginTop: \"100px\" }}\n            className=\"tray-item\"\n            onClick={() => {\n              setShowDialog(true);\n              setSelectedNode(null);\n            }}\n          >\n            Create DB Code\n          </div>\n        </TrayWidget>\n\n        <div\n          ref={diagramDiv}\n          id=\"diagram-layer\"\n          className=\"diagram-layer\"\n          onDrop={event => {\n            event.preventDefault();\n            var data = JSON.parse(\n              event.dataTransfer.getData(\"storm-diagram-node\")\n            );\n\n            let allNodes = props.app\n              .getDiagramEngine()\n              .getDiagramModel()\n              .getNodes() as {\n                [id: string]: Node;\n              };\n            let names = Object.values(allNodes).map(node => allNodes[node.id].name.toLowerCase().trim());\n\n            var nodesCount = _.keys(\n              props.app\n                .getDiagramEngine()\n                .getDiagramModel()\n                .getNodes()\n            ).length;\n\n            let newNodeName = names.includes(`Entity${nodesCount + 1}`.toLowerCase().trim()) ? `Entity${nodesCount + 1}_${nodesCount + 1}` : `Entity${nodesCount + 1}`;\n\n            var node = null;\n            if (data.type === \"table\") {\n              node = new Node(\n                false,\n                newNodeName,\n                \"rgb(0,192,255)\"\n              );\n              node.addInPort(\n                isLogicModel,\n                false,\n                \"Id\",\n                true,\n                false,\n                true,\n                true,\n                true,\n                PropertyType.INT\n              );\n              node.addInPort(\n                isLogicModel,\n                true,\n                \"\",\n                false,\n                false,\n                false,\n                false,\n                false,\n                PropertyType.INT\n              );\n              node.addInPort(\n                isLogicModel,\n                true,\n                \"1\",\n                false,\n                false,\n                false,\n                false,\n                false,\n                PropertyType.INT\n              );\n\n              node.addListener({});\n            } else {\n              node = new Node(\n                true,\n                \"Label \",\n                \"rgb(192,255,0)\"\n              );\n            }\n\n            var points = props.app\n              .getDiagramEngine()\n              .getRelativeMousePoint(event);\n            node.x = points.x;\n            node.y = points.y;\n            props.app\n              .getDiagramEngine()\n              .getDiagramModel()\n              .addNode(node);\n\n            forceUpdate();\n          }}\n          onDragOver={event => {\n            event.preventDefault();\n          }}\n\n          onClick={event => {\n            event.preventDefault();\n            if (event.ctrlKey && props.app\n              .getDiagramEngine()\n              .getDiagramModel()\n              .getSelectedItems()[0] instanceof PointModel) {\n              const pointToRemove = props.app\n                .getDiagramEngine()\n                .getDiagramModel()\n                .getSelectedItems()[0] as PointModel;\n              const pointLink = props.app\n                .getDiagramEngine()\n                .getDiagramModel()\n                .getSelectedItems()[0].parent as Link;\n                \n                pointLink && props.app.getDiagramEngine().getDiagramModel().links[pointLink.id].removePoint(pointToRemove);\n            }\n            refreshPopups();\n          }}\n          onDoubleClick={event => {\n            event.preventDefault();\n            if ( //!isLogicModel &&\n              props.app\n                .getDiagramEngine()\n                .getDiagramModel()\n                .getSelectedItems()[0] instanceof PointModel\n            ) {\n              setSelectedLink(\n                props.app\n                  .getDiagramEngine()\n                  .getDiagramModel()\n                  .getSelectedItems()[0].parent as Link\n              );\n              setShowRelationDialog(true);\n              setSelectedNode(null);\n            } else if (\n              props.app\n                .getDiagramEngine()\n                .getDiagramModel()\n                .getSelectedItems()[0] instanceof Node\n            ) {\n              refreshPopups();\n              setSelectedNode(\n                props.app\n                  .getDiagramEngine()\n                  .getDiagramModel()\n                  .getSelectedItems()[0] as Node\n              );\n            }\n          }}\n        >\n          <DiagramWidget\n            allowLooseLinks={false}\n            deleteKeys={[46]}\n            className=\"srd-demo-canvas\"\n            diagramEngine={props.app.getDiagramEngine()}\n          />\n        </div>\n        {selectedNode != null ? (\n          <NodeProperties\n            isLogic={isLogicModel}\n            selectedItem={selectedNode}\n            diagramEngine={props.app.getDiagramEngine()}\n          />\n        ) : null}\n        <GenerationHandler\n          isUml={isUml}\n          isLogic={isLogicModel}\n          update={refreshPopups}\n          isOpen={showDialog}\n          serializeDiagram={props.app.getDiagramEngine().diagramModel.serializeDiagram()}\n        />\n        <LoadFileHandler\n          update={refreshPopups}\n          isOpen={showLoadFileDialog}\n          app={props.app}\n          setIsUml={setIsUml}\n          setIsLogic={setIsLogicModel}\n        />\n        <SaveToFilePopup\n          isLogic={isLogicModel}\n          update={refreshPopups}\n          diagramModel={props.app.getDiagramEngine().diagramModel}\n          isOpen={showSaveFileDialog}\n          isUml={isUml}\n        />\n        <SaveToJpegPopup\n          update={refreshPopups}\n          diagramModel={props.app.getActiveDiagram()}\n          isOpen={showSaveJPEGDialog}\n        />\n\n        <RelationPopup\n          diagramModel={props.app.getActiveDiagram()}\n          diagramEngine={props.app.getDiagramEngine()}\n\n          update={refreshPopups}\n          isOpen={showRelationDialog}\n          link={selectedLink}\n\n          isLogic={isLogicModel}\n        />\n      </div>\n    </div>\n  );\n};\n","import * as React from \"react\";\nimport { Application } from \"./components/dragAndDrop/Application\";\nimport { AppView } from \"./AppView\";\nrequire(\"react-bootstrap-table-next/dist/react-bootstrap-table2.min.css\");\nrequire(\"storm-react-diagrams/dist/style.min.css\");\n\nexport const App = () => {\n  return <AppView app={new Application()} />;\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import \"./styles/index.scss\";\nimport \"./styles/App.scss\";\nimport \"./styles/dragAndDrop.scss\";\nimport \"./icons/micon/css/micon.min.css\";\nimport \"react-bootstrap-table-next/dist/react-bootstrap-table2.min.css\";\nimport { App } from \"./App\";\nimport * as ReactDOM from \"react-dom\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport * as React from \"react\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}