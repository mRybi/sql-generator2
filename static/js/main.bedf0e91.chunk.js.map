{"version":3,"sources":["infrastructure/models/PropertyType.ts","infrastructure/models/Label.ts","infrastructure/models/Link.ts","infrastructure/models/Port.ts","infrastructure/models/Node.ts","infrastructure/widgets/CustomLabelWidget.tsx","infrastructure/factories/CustomLabelFactory.ts","infrastructure/factories/CustomPortFactory.tsx","infrastructure/widgets/CustomPortLabelWidget.tsx","infrastructure/widgets/CustomNodeWidget.tsx","infrastructure/factories/CustomNodeFactory.tsx","infrastructure/widgets/CustomLinkLabelWidget.tsx","infrastructure/factories/CustomLinkLabelFactory.ts","infrastructure/factories/CustomLinkFactory.tsx","components/dragAndDrop/Application.ts","components/dragAndDrop/TrayItemWidget.tsx","components/dragAndDrop/TrayWidget.tsx","components/grid/Grid.tsx","components/grid/Row.tsx","components/grid/Col.tsx","components/nodeProperties/NodeProperties.tsx","components/popups/ResultPopup/ResultPopup.tsx","handlers/GenerationHandler.tsx","components/popups/RealtionPopup/RelationPopup.tsx","context/appContext/AppContext.ts","components/popups/LoadFilePopup/LoadFilePopup.tsx","handlers/LoadFileHandler.tsx","components/popups/SaveToFilePopup/SaveToFilePopup.tsx","components/popups/SaveToJpegPopup/SaveToJpegPopup.tsx","AppView.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["PropertyType","Label","_LabelModel","label","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","offsetY","inherits","createClass","key","value","ob","engine","get","prototype","_","LabelModel","Link","_LinkModel","type","arguments","length","undefined","width","color","curvyness","addLabel","labelOb","setLabel","iterateListeners","listener","event","widthChanged","objectSpread","colorChanged","LinkModel","Port","_PortModel","diagramEngine","isInput","name","isPrimaryKey","isForeignKey","isNotNull","isAutoincremented","isUnique","propertyType","id","in","links","firstTime","object","port","getParent","link","createLinkModel","setSourcePort","setTargetPort","diagramModel","addLink","PortModel","Node","_NodeModel","isLabel","ports","isPK","isFK","isAuto","addPort","Toolkit","UID","portModel","NodeModel","CustomLabelWidget","_BaseWidget","props","state","react","assign","getProps","style","background","node","className","bem","BaseWidget","CustomLabelFactory","_AbstractNodeFactory","React","initialConfig","AbstractNodeFactory","CustomPortFactory","_AbstractPortFactory","AbstractPortFactory","CustomPortLabelWidget","model","console","log","itemStyles","display","react_default","a","createElement","main","setLocked","paddingLeft","paddingRight","fontWeight","justifyContent","CustomNodeWidget","CustomPortLabelWidget_CustomPortLabelWidget","getPorts","keys","map","p","generatePort","bind","CustomNodeFactory","CustomLinkLabelWidget","CustomLinkLabelFactory","_AbstractLabelFactory","AbstractLabelFactory","CustomLinkFactory","_AbstractLinkFactory","DefaultLinkWidget","widget","selected","path","strokeWidth","stroke","d","AbstractLinkFactory","Application","activeModel","SRD","registerNodeFactory","registerLinkFactory","registerLabelFactory","registerPortFactory","installDefaultFactories","newModel","setDiagramModel","TrayItemWidget","_React$Component","_this2","borderColor","draggable","onDragStart","dataTransfer","setData","JSON","stringify","TrayWidget","children","defaultProps","Grid","buildClassNameString","concat","Row","flex","Col","onDoubleClick","size","config","pull","push","offset","order","hidden","buildGridColConfigClassNames","sm","md","lg","xl","xxl","xxxl","useForceUpdate","_React$useState","_React$useState2","slicedToArray","setValue","NodeProperties","_React$useState3","_React$useState4","updatedItem","setUpdatedItem","_React$useState5","_React$useState6","setName","_React$useState7","_React$useState8","showInput","setShowInput","forceUpdate","selectedItem","columns","dataField","text","formatter","cellContent","row","defaultValue","onChange","persist","getPortFromID","target","handleChangePortLabel","handleChangepRropType","checked","handleChangePK","handleChangeNull","handleChangeAutoInc","handleChangeUnique","onClick","entries","constructor","x","forEach","getDiagramModel","removeLink","removePort","portsTable","Grid_Grid","Row_Row","Col_Col","handleNameChange","lib_default","keyField","data","bordered","newPortNumber","addInPort","INT","ResultPopup","_useState","useState","_useState2","dbName","setDbName","formatedSQL","mssqlString","sqlFormatter","format","language","indent","reactjs_popup_es","modal","closeOnDocumentClick","open","isOpen","closeOnEscape","marginRight","generateScript","marginTop","readOnly","contentEditable","blob","Blob","FileSaver","saveAs","update","GenerationHandler","sqlString","setSqlString","ResultPopup_ResultPopup_ResultPopup","diagram","serializeDiagram","axios","post","SerializedModel","DatabaseName","then","response","catch","error","RelationPopup","left","setLeft","_useState3","_useState4","right","setRight","_useState5","_useState6","relationName","setRelationName","sourcePort","parent","targetPort","options","Fragment","renderOptionPicker","side","labels","points","index","remove","createContext","app","newApplication","LoadFilePopup","fileReader","fileContent","setFileContent","handleFileRead","e","content","result","onClose","files","FileReader","onloadend","readAsText","accept","loadDiagram","LoadFileHandler","LoadFilePopup_LoadFilePopup_LoadFilePopup","getDiagramEngine","obj","parse","model2","DiagramModel","deSerializeDiagram","splice","repaintCanvas","SaveToFilePopup","fileName","setFileName","diagramJson","SaveToJpegPopup","domtoimage","toJpeg","document","getElementById","quality","dataUrl","download","href","click","require","AppView","showDialog","setShowDialog","showRelationDialog","setShowRelationDialog","showLoadFileDialog","setShowLoadFileDialog","showSaveFileDialog","setSaveFileDialog","_React$useState9","_React$useState10","showSaveJPEGDialog","setSaveJPEGDialog","_React$useState11","_React$useState12","showSaveOptions","setSaveOptions","_React$useState13","_React$useState14","selectedNode","setSelectedNode","_React$useState15","_React$useState16","selectedLink","setSelectedLink","refreshPopups","ref","TrayWidget_TrayWidget","TrayItemWidget_TrayItemWidget","paddingTop","onDrop","getData","nodesCount","getNodes","getRelativeMousePoint","y","addNode","onDragOver","preventDefault","getSelectedItems","PointModel","deleteKeys","NodeProperties_NodeProperties","GenerationHandler_GenerationHandler","getActiveDiagram","LoadFileHandler_LoadFileHandler","SaveToFilePopup_SaveToFilePopup_SaveToFilePopup","SaveToJpegPopup_SaveToJpegPopup_SaveToJpegPopup","RelationPopup_RelationPopup","App","application","setApplication","AppContext","Provider","AppView_AppView","Boolean","window","location","hostname","match","ReactDOM","App_App","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.bedf0e91.chunk.js","sourcesContent":["export enum PropertyType {\n    BIT = 'BIT',\n    TINYINT   = 'TINYINT',\n    SMALLINT = 'SMALLINT',\n    INT = 'INT',\n    BIGINT = 'BIGINT',\n    DECIMAL = 'DECIMAL',\n    NUMERIC = 'NUMERIC',\n    FLOAT = 'FLOAT',\n    REAL = 'REAL',\n\n    DATE = 'DATE',\n    TIME = 'TIME',\n    DATETIME = 'DATETIME',\n    TIMESTAMP = 'TIMESTAMP',\n    YEAR = 'YEAR',\n \n    CHAR = 'CHAR',\n    VARCHAR = 'VARCHAR',\n    VARCHARMAX = 'VARCHARMAX',\n    TEXT = 'TEXT',\n\n    NCHAR = 'NCHAR',\n    NVARCHAR = 'NVARCHAR',\n    NVARCHARMAX = 'NVARCHARMAX',\n    NTEXT = 'NTEXT',\n \n    BINARY = 'BINARY',\n    VARBINARY = 'VARBINARY',\n    VARBINARYMAX = 'VARBINARYMAX',\n    IMAGE = 'IMAGE',\n\n    CLOB = 'CLOB',\n    BLOB = 'BLOB',\n    XML = 'XML',\n    JSON = 'JSON'\n} ","\nimport * as _ from \"lodash\";\nimport { LabelModel, DiagramEngine } from \"storm-react-diagrams\";\n\nexport class Label extends LabelModel {\n\tlabel: string;\n\n\tconstructor(label: string) {\n\t\tsuper(\"custom\");\n\t\tthis.label = label;\n\t\tthis.offsetY = -23;\n\t}\n\n\tsetLabel(label: string) {\n\t\tthis.label = label;\n\t}\n\n\tdeSerialize(ob: any, engine: DiagramEngine) {\n\t\tsuper.deSerialize(ob, engine);\n\t\tthis.label = ob.label;\n\t}\n\n\tserialize() {\n\t\treturn _.merge(super.serialize(), {\n\t\t\tlabel: this.label\n\t\t});\n\t}\n}","\nimport * as _ from \"lodash\";\nimport { LinkModelListener, BaseEvent, LinkModel, DefaultLinkModel, DiagramEngine, LabelModel } from \"storm-react-diagrams\";\nimport { Label } from \"./Label\";\n\nexport interface DefaultLinkModelListener extends LinkModelListener {\n\tcolorChanged?(event: BaseEvent<DefaultLinkModel> & { color: null | string }): void;\n\n\twidthChanged?(event: BaseEvent<DefaultLinkModel> & { width: 0 | number }): void;\n}\n\nexport class Link extends LinkModel<DefaultLinkModelListener> {\n\twidth: number;\n\tcolor: string;\n\tcurvyness: number;\n\n\tconstructor(type: string = \"custom\") {\n\t\tsuper(type);\n\t\tthis.color = \"rgba(255,255,255,0.5)\";\n\t\tthis.width = 3;\n\t\tthis.curvyness = 50;\n\t\tthis.addLabel('0,N');\n\t\tthis.addLabel('relation name');\n\t\tthis.addLabel('0,N');\n\t}\n\n\tserialize() {\n\t\treturn _.merge(super.serialize(), {\n\t\t\twidth: this.width,\n\t\t\tcolor: this.color,\n\t\t\tcurvyness: this.curvyness\n\t\t});\n\t}\n\n\tdeSerialize(ob: any, engine: DiagramEngine) {\n\t\tsuper.deSerialize(ob, engine);\n\t\tthis.color = ob.color;\n\t\tthis.width = ob.width;\n\t\tthis.curvyness = ob.curvyness;\n\t}\n\n\taddLabel(label: LabelModel | string) {\n\t\tif (label instanceof LabelModel) {\n\t\t\treturn super.addLabel(label);\n\t\t}\n\t\tlet labelOb = new Label('custom');\n\t\tlabelOb.setLabel(label);\n\t\treturn super.addLabel(labelOb);\n\t}\n\n\tsetWidth(width: number) {\n\t\tthis.width = width;\n\t\tthis.iterateListeners((listener: DefaultLinkModelListener, event: BaseEvent) => {\n\t\t\tif (listener.widthChanged) {\n\t\t\t\tlistener.widthChanged({ ...event, width: width });\n\t\t\t}\n\t\t});\n\t}\n\n\tsetColor(color: string) {\n\t\tthis.color = color;\n\t\tthis.iterateListeners((listener: DefaultLinkModelListener, event: BaseEvent) => {\n\t\t\tif (listener.colorChanged) {\n\t\t\t\tlistener.colorChanged({ ...event, color: color });\n\t\t\t}\n\t\t});\n\t}\n}","import * as _ from \"lodash\";\nimport { Link } from \"./Link\";\nimport { Node } from \"./Node\";\nimport { PortModel, DiagramEngine } from \"storm-react-diagrams\";\nimport { PropertyType } from \"./PropertyType\";\n\nexport class Port extends PortModel {\n\tin: boolean;\n\tlabel: string;\n\tlinks: { [id: string]: Link };\n\tfirstTime: boolean = true;\n\tisPrimaryKey: boolean;\n\tisForeignKey: boolean;\n\tisAutoincremented: boolean;\n\tisNotNull: boolean;\n\tisUnique: boolean;\n\tpropertyType: PropertyType;\n\n\tdiagramEngine: DiagramEngine;\n\n\tconstructor(diagramEngine: DiagramEngine, isInput: boolean, name: string, isPrimaryKey?: boolean, isForeignKey?: boolean, isNotNull?: boolean, isAutoincremented?: boolean, isUnique?: boolean, propertyType?: PropertyType, id?: string) {\n\t\tsuper(name, \"custom\", id);\n\t\tthis.in = isInput;\n\t\tthis.label = name;\n\t\tthis.links = {};\n\n\t\tthis.isPrimaryKey = isPrimaryKey;\n\t\tthis.isForeignKey = isForeignKey;\n\n\t\tthis.isNotNull = isNotNull;\n\t\tthis.isUnique = isUnique;\n\t\tthis.isAutoincremented = isAutoincremented;\n\n\t\tthis.propertyType = propertyType;\n\n\t\tthis.diagramEngine = diagramEngine;\n\t}\n\n\tdeSerialize(object: any, engine: DiagramEngine) {\n\t\tsuper.deSerialize(object, engine);\n\t\tthis.in = object.in;\n\t\tthis.label = object.label;\n\t\t// this.links= object.links; //dziwne jak jest odkomm to nie mozna ruszac diagramem \n\t\t//przetestowac czy serialized json jest ok\n\t\tthis.isPrimaryKey= object.isPrimaryKey;\n\t\tthis.isForeignKey= object.isForeignKey;\n\t\tthis.isNotNull= object.isNotNull;\n\t\tthis.isUnique= object.isUnique;\n\t\tthis.isAutoincremented= object.isAutoincremented;\n\t\tthis.propertyType= object.propertyType;\n\t}\n\n\tserialize() {\n\t\treturn _.merge(super.serialize(), {\n\t\t\tin: this.in,\n\t\t\tlabel: this.label,\n\t\t\tlinks: this.links,\n\t\t\tisPrimaryKey: this.isPrimaryKey,\n\t\t\tisForeignKey: this.isForeignKey,\n\t\t\tisNotNull: this.isNotNull,\n\t\t\tisUnique: this.isUnique,\n\t\t\tisAutoincremented: this.isAutoincremented,\n\t\t\tpropertyType: this.propertyType,\n\t\t});\n\t}\n\n\tlink(port: Port): boolean {\n\t\tlet node = port.getParent() as Node;\n\t\t// let targetPort = node && node.addInPort((this.getParent() as Node).name + 'Id', false, true, false, false, false, PropertyType.INT);\n\t\tlet link = this.createLinkModel();\n\t\tlink.setSourcePort(this);\n\t\t// link.setTargetPort(targetPort);\n\t\tlink.setTargetPort(port);\n\n\t\tthis.diagramEngine.diagramModel.addLink(link);\n\t\t// this.diagramEngine.recalculatePortsVisually();\n\t\treturn false;\n\t}\n\n\tcanLinkToPort(port: Port): boolean {\n\t\t// if (this.firstTime) {\n\t\t\t// this.firstTime = false;\n\t\t\treturn true ;\n\t\t\t// this.link(port);\n\t\t// } else {\n\t\t// \treturn true;\n\t\t// }\n\t}\n\n\tcreateLinkModel(): Link {\n\t\treturn new Link('custom');\n\t}\n}","import * as _ from \"lodash\";\nimport { NodeModel, Toolkit, DiagramEngine } from \"storm-react-diagrams\";\nimport { Port } from \"./Port\";\nimport { PropertyType } from \"./PropertyType\";\n\nexport class Node extends NodeModel {\n\tname: string;\n\tcolor: string;\n\tports: { [s: string]: Port };\n\tengine: DiagramEngine\n\tisLabel: boolean;\n\n\tconstructor(isLabel: boolean, engine: DiagramEngine, name: string = \"Untitled\", color: string = \"rgb(0,192,255)\") {\n\t\tsuper(\"custom\");\n\t\tthis.name = name;\n\t\tthis.color = color;\n\t\tthis.ports = {};\n\t\tthis.engine = engine;\n\t\tthis.isLabel = isLabel;\n\t}\n\n\taddInPort(label: string, isPK: boolean, isFK: boolean, isUnique: boolean, isAuto: boolean, isNotNull: boolean, propertyType: PropertyType): Port {\n\t\treturn this.addPort(new Port(this.engine, true, label, isPK, isFK, isNotNull, isAuto, isUnique, propertyType, Toolkit.UID()));\n\t}\n\n\taddOutPort(label: string, isPK: boolean, isFK: boolean, isUnique: boolean, isAuto: boolean, isNotNull: boolean, propertyType: PropertyType): Port {\n\t\treturn this.addPort(new Port(this.engine, true, label, isPK, isFK, isNotNull, isAuto, isUnique, propertyType, Toolkit.UID()));\n\t}\n\n\tdeSerialize(object: any, engine: DiagramEngine) {\n\t\tsuper.deSerialize(object, engine);\n\t\tthis.name = object.name;\n\t\tthis.color = object.color;\n\t}\n\n\tserialize() {\n\t\treturn _.merge(super.serialize(), {\n\t\t\tname: this.name,\n\t\t\tcolor: this.color\n\t\t});\n\t}\n\n\tgetInPorts(): Port[] {\n\t\treturn _.filter(this.ports, portModel => {\n\t\t\treturn portModel.in;\n\t\t});\n\t}\n\n\tgetOutPorts(): Port[] {\n\t\treturn _.filter(this.ports, portModel => {\n\t\t\treturn !portModel.in;\n\t\t});\n\t}\n}","import { BaseWidgetProps, DiagramEngine, BaseWidget, DefaultPortLabel } from \"storm-react-diagrams\";\nimport { Node } from '../models/Node';\nimport * as React from \"react\";\n\nexport interface NodeProps extends BaseWidgetProps {\n\tnode: Node;\n\tdiagramEngine: DiagramEngine;\n}\n\nexport interface DefaultNodeState {}\n\nexport class CustomLabelWidget extends BaseWidget<NodeProps, DefaultNodeState> {\n\tconstructor(props: NodeProps) {\n\t\tsuper(\"srd-default-node\", props);\n\t\tthis.state = {};\n\t}\n\n\trender() {\n\t\treturn (\n\t\t<div {...this.getProps()} style={{ background: this.props.node.color}}>\n\t\t\t\t<div className={this.bem(\"__title\")}>\n\t\t\t\t\t<div className={this.bem(\"__name\")}>{this.props.node.name}</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}","import { AbstractNodeFactory, DiagramEngine } from \"storm-react-diagrams\";\nimport { Node } from \"../models/Node\";\nimport * as React from \"react\";\nimport { CustomLabelWidget } from \"../widgets/CustomLabelWidget\";\n\nexport class CustomLabelFactory extends AbstractNodeFactory<Node> {\n\tconstructor() {\n\t\tsuper(\"label\");\n\t}\n\n\tgenerateReactWidget(diagramEngine: DiagramEngine, node: Node): JSX.Element {\n\t\treturn React.createElement(CustomLabelWidget, {\n\t\t\tnode: node,\n\t\t\tdiagramEngine: diagramEngine\n\t\t});\n\t}\n\n\tgetNewInstance(initialConfig?: any): Node {\n\t\treturn new Node(false, null, \"label\");\n\t}\n}","import { AbstractPortFactory } from \"storm-react-diagrams\";\nimport { Port } from \"../models/Port\";\n\nexport class CustomPortFactory extends AbstractPortFactory<Port> {\n\tconstructor() {\n\t\tsuper(\"custom\");\n\t}\n\n\tgetNewInstance(initialConfig?: any): Port {\n\t\treturn new Port(null, true, \"custom\");\n\t}\n}","import { Port } from \"../models/Port\";\nimport { BaseWidgetProps, BaseWidget, PortWidget } from \"storm-react-diagrams\";\nimport React, { CSSProperties } from \"react\";\nimport { PropertyType } from \"../models/PropertyType\";\n\nexport interface DefaultPortLabelProps extends BaseWidgetProps {\n\tmodel: Port;\n}\n\nexport interface DefaultPortLabelState {}\n\nexport class CustomPortLabelWidget extends BaseWidget<DefaultPortLabelProps, DefaultPortLabelState> {\n\tconstructor(props: DefaultPortLabelProps) {\n\t\tsuper(\"custom\", props);\n\t}\n\n\tgetClassName() {\n\t\treturn super.getClassName() + (this.props.model.in ? this.bem(\"--in\") : this.bem(\"--in\"));\n\t}\n\n\trender() {\n\t\tconsole.log('QQQQQrenderport')\n\t\tlet port: JSX.Element;\n\t\tconst style: CSSProperties = {\n\t\t\tpaddingLeft: 5, paddingRight: 5, color:'black', fontWeight: 800\n\t\t}\n\t\tconst containerStyles: CSSProperties = {\n\t\t\tdisplay: 'flex',\n\t\t\tjustifyContent: 'flex-end'\n\t\t\t\n\t\t}\n\t\tconst itemStyles : CSSProperties = {\n\t\t\tdisplay: 'inline-block'\n\t\t}\n\t\tif (!this.props.model.isPrimaryKey) {\n\t\t  this.props.model.setLocked();\n\t\t  port = <PortWidget node={this.props.model.getParent()} name={this.props.model.name} />;\n\t\t} else {\n\t\t  port = <PortWidget node={this.props.model.getParent()} name={this.props.model.name} />;\n\t\t}\n\t\n\t\tconst label: JSX.Element = <div className=\"name\">\n\t\t  <div>\n\t\t\t{this.props.model.label} {this.props.model.propertyType !== undefined ? PropertyType[this.props.model.propertyType] : null}\n\t\t  </div>\n\t\t</div>;\n\t\tconst isPrimaryKey = this.props.model.isPrimaryKey ? <span className=\"mi mi-Permissions\" style={style}></span> : null;//<span className=\"mi mi-Permissions green\" /> : null\n\t\tconst isForeignKey = this.props.model.isForeignKey ? <span className=\"mi mi-Permissions red\" /> : null\n\t\tconsole.log('QQQQQrenderportisPrimaryKey',this.props, this.props.model.isPrimaryKey)\n\t\n\t\tif (isForeignKey) return <div>{port}</div>;\n\t\telse\n\t\t  return (\n\t\t\t<div style={containerStyles} {...this.getProps()}>\n\t\t\t  <div style={itemStyles}>\n\t\t\t\t{isPrimaryKey}\n\t\t\t  </div>\n\t\t\t  <div style={itemStyles}>\n\t\t\t\t{label}\n\t\t\t  </div>\n\t\t\t  <div style={itemStyles}>\n\t\t\t\t{port}\n\t\t\t  </div>\n\t\t\t</div>\n\t\t  );\n\t  }\n}","import { CustomPortLabelWidget } from \"./CustomPortLabelWidget\";\nimport React from \"react\";\nimport { BaseWidget, DiagramEngine, BaseWidgetProps } from \"storm-react-diagrams\";\nimport { Port } from \"../models/Port\";\nimport { Node } from \"../models/Node\";\nimport * as _ from \"lodash\";\n\nexport interface DefaultNodeProps extends BaseWidgetProps {\n\tnode: Node;\n\tdiagramEngine: DiagramEngine;\n}\n\nexport interface DefaultNodeState {}\n\nexport class CustomNodeWidget extends BaseWidget<DefaultNodeProps, DefaultNodeState> {\n\tconstructor(props: DefaultNodeProps) {\n\t\tsuper(\"srd-default-node\", props);\n\t\tthis.state = {};\n\t}\n\n\tgeneratePort(port: Port) {\n\t\treturn <CustomPortLabelWidget model={port} key={port.id} />;\n\t}\n\n\trender() {\n\t\tlet ports = this.props.node.getPorts() as { [s: string]: Port };\n\t\tObject.keys(ports).map(p => {\n\t\t\treturn ports[p].isPrimaryKey || ports[p].isForeignKey && ports[p];\n\t\t})\n\t\treturn (\n\t\t\t<div {...this.getProps()} style={{ background: this.props.node.color }}>\n\t\t\t\t<div className={this.bem(\"__title\")}>\n\t\t\t\t\t<div className={this.bem(\"__name\")}>{this.props.node.name}</div>\n\t\t\t\t</div>\n\t\t\t\t<div className={this.bem(\"__ports\")}>\n\t\t\t\t\t<div className={this.bem(\"__in\")}>\n\t\t\t\t\t\t{_.map(this.props.node.getPorts(), this.generatePort.bind(this))}\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}","import { AbstractNodeFactory, DiagramEngine } from \"storm-react-diagrams\";\nimport React from \"react\";\nimport { CustomNodeWidget } from \"../widgets/CustomNodeWidget\";\nimport { Node } from '../models/Node';\n\nexport class CustomNodeFactory extends AbstractNodeFactory<Node> {\n\tconstructor() {\n\t\tsuper(\"custom\");\n\t}\n\n\tgenerateReactWidget(diagramEngine: DiagramEngine, node: Node): JSX.Element {\n\t\treturn React.createElement(CustomNodeWidget, {\n\t\t\tnode: node,\n\t\t\tdiagramEngine: diagramEngine\n\t\t});\n\t}\n\n\tgetNewInstance(initialConfig?: any): Node {\n\t\treturn new Node(false, null, \"custom\");\n\t}\n}","import * as React from \"react\";\nimport { BaseWidgetProps, BaseWidget } from \"storm-react-diagrams\";\nimport { Label } from \"../models/Label\";\n\nexport interface DefaultLabelWidgetProps extends BaseWidgetProps {\n  model: Label;\n}\n\nexport class CustomLinkLabelWidget extends BaseWidget<DefaultLabelWidgetProps> {\n  constructor(props: DefaultLabelWidgetProps) {\n    super(\"srd-default-label\", props);\n  }\n\n  render() {\n    return <div {...this.getProps()}>{this.props.model.label}</div>;\n  }\n}\n","import * as React from \"react\";\nimport { AbstractLabelFactory, DiagramEngine } from \"storm-react-diagrams\";\nimport { Label } from \"../models/Label\";\nimport { CustomLinkLabelWidget } from \"../widgets/CustomLinkLabelWidget\";\n\n\nexport class CustomLinkLabelFactory extends AbstractLabelFactory<Label> {\n\tconstructor() {\n\t\tsuper(\"custom\");\n\t}\n\n\tgenerateReactWidget(diagramEngine: DiagramEngine, label: Label): JSX.Element {\n\t\treturn React.createElement(CustomLinkLabelWidget, {\n\t\t\tmodel: label\n\t\t});\n\t}\n\n\tgetNewInstance(initialConfig?: any): Label {\n\t\treturn new Label('');\n\t}\n}","import * as React from \"react\";\nimport { AbstractLinkFactory, DiagramEngine, DefaultLinkModel, DefaultLinkWidget } from \"storm-react-diagrams\";\nimport { Link } from \"../models/Link\";\n\nexport class CustomLinkFactory extends AbstractLinkFactory<Link> {\n\tconstructor() {\n\t\tsuper(\"custom\");\n\t}\n\n\tgenerateReactWidget(diagramEngine: DiagramEngine, link: DefaultLinkModel): JSX.Element {\n\t\treturn React.createElement(DefaultLinkWidget, {\n\t\t\tlink: link,\n\t\t\tdiagramEngine: diagramEngine\n\t\t});\n\t}\n\n\tgetNewInstance(initialConfig?: any): Link {\n\t\treturn new Link('custom');\n\t}\n\n\tgenerateLinkSegment(model: Link, widget: DefaultLinkWidget, selected: boolean, path: string) {\n\t\treturn (\n\t\t\t<path\n\t\t\t\tclassName={selected ? widget.bem(\"--path-selected\") : \"\"}\n\t\t\t\tstrokeWidth={model.width}\n\t\t\t\tstroke={model.color}\n\t\t\t\td={path}\n\t\t\t/>\n\t\t);\n\t}\n}\n","import * as SRD from \"storm-react-diagrams\";\nimport { CustomLabelFactory } from \"../../infrastructure/factories/CustomLabelFactory\";\nimport { CustomPortFactory } from \"../../infrastructure/factories/CustomPortFactory\";\nimport { CustomNodeFactory } from \"../../infrastructure/factories/CustomNodeFactory\";\nimport { CustomLinkLabelFactory } from \"../../infrastructure/factories/CustomLinkLabelFactory\";\nimport { CustomLinkFactory } from \"../../infrastructure/factories/CustomLinkFactory\";\n\nexport class Application {\n\tprotected activeModel: SRD.DiagramModel;\n\tprotected diagramEngine: SRD.DiagramEngine;\n\n\tconstructor() {\n\t\tthis.diagramEngine = new SRD.DiagramEngine();\n\t\tthis.diagramEngine.registerNodeFactory(new CustomLabelFactory());\n\t\tthis.diagramEngine.registerLinkFactory(new CustomLinkFactory());\n\t\tthis.diagramEngine.registerLabelFactory(new CustomLinkLabelFactory());\n\t\tthis.diagramEngine.registerNodeFactory(new CustomNodeFactory());\n\t\tthis.diagramEngine.registerPortFactory(new CustomPortFactory());\n\n\t\tthis.diagramEngine.installDefaultFactories();\n\t\tthis.newModel();\n\t}\n\n\tpublic newModel() {\n\t\tthis.activeModel = new SRD.DiagramModel();\n\t\tthis.diagramEngine.setDiagramModel(this.activeModel);\n\t}\n\n\tpublic getActiveDiagram(): SRD.DiagramModel {\n\t\treturn this.activeModel;\n\t}\n\n\tpublic getDiagramEngine(): SRD.DiagramEngine {\n\t\treturn this.diagramEngine;\n\t}\n}","import * as React from \"react\";\n\nexport interface TrayItemWidgetProps {\n\tmodel: any;\n\tcolor?: string;\n\tname: string;\n}\n\nexport interface TrayItemWidgetState {}\n\nexport class TrayItemWidget extends React.Component<TrayItemWidgetProps, TrayItemWidgetState> {\n\tconstructor(props: TrayItemWidgetProps) {\n\t\tsuper(props);\n\t\tthis.state = {};\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div\n\t\t\t\tstyle={{ borderColor: this.props.color }}\n\t\t\t\tdraggable={true}\n\t\t\t\tonDragStart={event => {\n\t\t\t\t\tevent.dataTransfer.setData(\"storm-diagram-node\", JSON.stringify(this.props.model));\n\t\t\t\t}}\n\t\t\t\tclassName=\"tray-item\"\n\t\t\t>\n\t\t\t\t{this.props.name}\n\t\t\t</div>\n\t\t);\n\t}\n}\n","import * as React from \"react\";\n\nexport interface TrayWidgetProps {}\n\nexport interface TrayWidgetState {}\n\nexport class TrayWidget extends React.Component<TrayWidgetProps, TrayWidgetState> {\n\tpublic static defaultProps: TrayWidgetProps = {};\n\n\tconstructor(props: TrayWidgetProps) {\n\t\tsuper(props);\n\t\tthis.state = {};\n\t}\n\n\trender() {\n\t\treturn <div className=\"tray\">{this.props.children}</div>;\n\t}\n}\n","import * as React from 'react';\n\nimport { GridProps } from './';\n\nexport default class Grid extends React.Component<GridProps> {\n  render() {\n    return (\n      <div style={this.props.style} className={this.buildClassNameString()}>\n        {this.props.children}\n      </div>\n    );\n  }\n\n  buildClassNameString() {\n    let className = 'ms-Grid';\n\n    if (this.props.className != null) {\n      className += ` ${this.props.className}`;\n    }\n\n    return className;\n  }\n}\n","import * as React from 'react';\n\nimport { GridRowProps } from './';\n\nexport default class Row extends React.Component<GridRowProps> {\n  render() {\n    return <div className={this.buildClassNameString()}>{this.props.children}</div>;\n  }\n\n  buildClassNameString() {\n    let className = 'ms-Grid-row';\n\n    if (this.props.flex) {\n      className += ' grid-row-flex';\n    }\n\n    if (this.props.className != null) {\n      className += ` ${this.props.className}`;\n    }\n\n    return className;\n  }\n}\n","import * as React from 'react';\n\nimport { GridColProps, GridColConfigProp } from './';\n\nexport default class Col extends React.Component<GridColProps> {\n  render() {\n    return <div className={this.buildClassNameString()} onDoubleClick={this.props.onDoubleClick}>{this.props.children}</div>;\n  }\n\n  buildGridColConfigClassNames(size: string, config: GridColConfigProp) {\n    if (config == null) return '';\n\n    let className = ` ms-${size}`;\n\n    if (typeof config === 'string') {\n      className += config;\n    } else {\n      className += config.size;\n\n      if (config.pull != null) {\n        className += ` ms-${size}Pull${config.pull}`;\n      }\n\n      if (config.push != null) {\n        className += ` ms-${size}Push${config.push}`;\n      }\n\n      if (config.offset != null) {\n        className += ` ms-${size}Offset${config.offset}`;\n      }\n\n      if (config.order != null) {\n        className += ` grid-flex-order-${size}-${config.order}`;\n      }\n    }\n\n    return className;\n  }\n\n  buildClassNameString() {\n    let className = 'ms-Grid-col';\n\n    if (this.props.className != null) {\n      className += ` ${this.props.className}`;\n    }\n\n    if (this.props.hidden != null) {\n      className += ` ms-hidden${this.props.hidden}`;\n    }\n\n    if (this.props.order != null) {\n      className += ` grid-flex-order-${this.props.order}`;\n    }\n\n    className += this.buildGridColConfigClassNames('sm', this.props.sm);\n    className += this.buildGridColConfigClassNames('md', this.props.md);\n    className += this.buildGridColConfigClassNames('lg', this.props.lg);\n    className += this.buildGridColConfigClassNames('xl', this.props.xl);\n    className += this.buildGridColConfigClassNames('xxl', this.props.xxl);\n    className += this.buildGridColConfigClassNames('xxxl', this.props.xxxl);\n\n    return className;\n  }\n}\n","import './NodeProperties.scss';\nimport * as React from \"react\";\nimport { DiagramEngine } from 'storm-react-diagrams';\nimport { Link } from '../../infrastructure/models/Link';\nimport { Port } from '../../infrastructure/models/Port';\nimport { Node } from '../../infrastructure/models/Node';\n\nimport BootstrapTable from 'react-bootstrap-table-next';\nimport 'react-bootstrap-table-next/dist/react-bootstrap-table2.min.css';\nimport { PropertyType } from '../../infrastructure/models/PropertyType';\nimport { Col, Row, Grid } from '../grid';\n\nclass OwnProps {\n  selectedItem: Node;\n  diagramEngine: DiagramEngine;\n  selectedLink: Link;\n}\n\ntype Props = OwnProps;\n\nexport function useForceUpdate(){\n  const [value, setValue] = React.useState(0);\n  return () => setValue(value => ++value);\n}\n\nexport const NodeProperties = (props: Props) => {\n  const [updatedItem, setUpdatedItem] = React.useState(null);\n  const [name, setName] = React.useState('');\n  const [showInput, setShowInput] = React.useState(false);\n\n  const forceUpdate = useForceUpdate();\n\n  React.useMemo(() => {\n    setUpdatedItem(props.selectedItem);\n    setName(props.selectedItem.name);\n  }, [props.selectedItem]);\n\n  const handleChangePK = (event: React.ChangeEvent<HTMLInputElement>, row: Port) => {\n    event.persist();\n    (updatedItem.getPortFromID(row.id) as Port).isPrimaryKey = !row.isPrimaryKey;\n    forceUpdate()\n  }\n\n  const handleChangeNull = (event: React.ChangeEvent<HTMLInputElement>, row: Port) => {\n    event.persist();\n    (updatedItem.getPortFromID(row.id) as Port).isNotNull = !row.isNotNull;\n    forceUpdate()\n  }\n\n  const handleChangeUnique = (event: React.ChangeEvent<HTMLInputElement>, row: Port) => {\n    event.persist();\n    (updatedItem.getPortFromID(row.id) as Port).isUnique = !row.isUnique;\n    forceUpdate()\n  }\n\n  const handleChangeAutoInc = (event: React.ChangeEvent<HTMLInputElement>, row: Port) => {\n    event.persist();\n    (updatedItem.getPortFromID(row.id) as Port).isAutoincremented = !row.isAutoincremented;\n    forceUpdate()\n  }\n\n  const handleChangepRropType = (event: React.ChangeEvent<HTMLSelectElement>, row: Port) => {\n    event.persist();\n    (updatedItem.getPortFromID(row.id) as Port).propertyType = event.target.value as PropertyType;\n    forceUpdate()\n  }\n\n  const handleChangePortLabel = (event: React.ChangeEvent<HTMLInputElement>, row: Port) => {\n    event.persist();\n    (updatedItem.getPortFromID(row.id) as Port).label = event.target.value;\n  }\n\n  const handleNameChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    event.persist();\n    updatedItem.name = event.target.value;\n    forceUpdate()\n  }\n\n\n  const addNewPort = (newPortNumber: number) => {\n    updatedItem.addInPort(`new port ${newPortNumber}`, false, false, false, false, false, PropertyType.INT)\n    forceUpdate()\n  }\n\n  const removePort = (port: Port) => {\n    if (Object.entries(port.links).length !== 0 && port.links.constructor === Object) {\n      let portLinks: Link[] = Object.keys(port.links).map(x => {\n        return port.links[x];\n      });\n      portLinks.forEach(p => props.diagramEngine.getDiagramModel().removeLink(p));\n    }\n    updatedItem.removePort(port);\n    forceUpdate()\n  }\n\n  const columns: any[] = [{\n    dataField: 'label',\n    text: 'Property Name',\n    formatter: (cellContent: any, row: Port) => (\n      <div className=\"input\">\n        <input className=\"darkInput\" type=\"text\" defaultValue={row.label} onChange={(event) => handleChangePortLabel(event, row)}></input>\n      </div>\n    )\n  }, {\n    style: { paddingLeft: 0 },\n    dataField: 'propertyType',\n    text: 'Property Type',\n    formatter: (cellContent: any, row: Port) => (\n      <div className=\"checkbox\">\n        <label>\n          <select className=\"darkSelect\" onChange={(event) => handleChangepRropType(event, row)} value={PropertyType[row.propertyType]}>\n            <option value=\"BIT\">BIT</option>\n            <option value=\"TINYINT\">TINYINT</option>\n            <option value=\"SMALLINT\">SMALLINT</option>\n            <option value=\"INT\">INT</option>\n            <option value=\"BIGINT\">BIGINT</option>\n            <option value=\"DECIMAL\">DECIMAL</option>\n            <option value=\"NUMERIC\">NUMERIC</option>\n            <option value=\"FLOAT\">FLOAT</option>\n            <option value=\"REAL\">REAL</option>\n\n            <option value=\"DATE\">DATE</option>\n            <option value=\"TIME\">TIME</option>\n            <option value=\"DATETIME\">DATETIME</option>\n            <option value=\"TIMESTAMP\">TIMESTAMP</option>\n            <option value=\"YEAR\">YEAR</option>\n\n            <option value=\"CHAR\">CHAR</option>\n            <option value=\"VARCHAR\">VARCHAR</option>\n            <option value=\"VARCHARMAX\">VARCHARMAX</option>\n            <option value=\"TEXT\">TEXT</option>\n\n            <option value=\"NCHAR\">NCHAR</option>\n            <option value=\"NVARCHAR\">NVARCHAR</option>\n            <option value=\"NVARCHARMAX\">NVARCHARMAX</option>\n            <option value=\"NTEXT\">NTEXT</option>\n            <option value=\"BINARY\">BINARY</option>\n            <option value=\"VARBINARY\">VARBINARY</option>\n            <option value=\"VARBINARYMAX\">VARBINARYMAX</option>\n            <option value=\"IMAGE\">IMAGE</option>\n            <option value=\"CLOB\">CLOB</option>\n            <option value=\"BLOB\">BLOB</option>\n            <option value=\"XML\">XML</option>\n            <option value=\"JSON\">JSON</option>\n\n          </select>\n        </label>\n      </div>\n    )\n  }, {\n    dataField: 'isPrimaryKey',\n    text: 'Is Primary Key',\n    formatter: (cellContent: any, row: Port) => (\n      <div className=\"checkbox\">\n        <label>\n          <input type=\"checkbox\" checked={row.isPrimaryKey} onChange={(event) => handleChangePK(event, row)} />\n        </label>\n      </div>\n    )\n  }\n    ,\n  {\n    dataField: 'isNotNull',\n    text: 'Is Nullable',\n    formatter: (cellContent: any, row: Port) => (\n      <div className=\"checkbox\">\n        <label>\n          <input type=\"checkbox\" checked={row.isNotNull} onChange={(event) => handleChangeNull(event, row)} />\n        </label>\n      </div>\n    )\n  }, {\n    dataField: 'isAutoincremented',\n    text: 'Is Auto Incremented',\n    formatter: (cellContent: any, row: Port) => (\n      <div className=\"checkbox\">\n        <label>\n          <input type=\"checkbox\" checked={row.isAutoincremented} onChange={(event) => handleChangeAutoInc(event, row)} />\n        </label>\n      </div>\n    )\n  }, {\n    dataField: 'isUnique',\n    text: 'Is Unique',\n    formatter: (cellContent: any, row: Port) => (\n      <div className=\"checkbox\">\n        <label>\n          <input type=\"checkbox\" checked={row.isUnique} onChange={(event) => handleChangeUnique(event, row)} />\n        </label>\n      </div>\n    )\n  }, {\n    dataField: 'remove',\n    text: 'Remove',\n    formatter: (cellContent: any, row: Port) => (\n      <div className=\"checkbox\">\n        <label>\n          <span onClick={() => removePort(row)} className=\"mi mi-Delete red\" />\n        </label>\n      </div>\n    )\n  }];\n\n\n  let ports = updatedItem && updatedItem.ports && updatedItem.ports as { [s: string]: Port };\n  let portsTable: Port[] = ports && Object.keys(ports).map(x => {\n    return ports[x];\n  });\n\n  if (!updatedItem) return null;\n  else\n    return (\n      <div className=\"trayBottom\">\n        <Grid>\n          <Row>\n            <Col>\n              {!showInput ? <h1 onDoubleClick={() => setShowInput(true)}>{name}</h1> : <input className=\"darkInput fs-24\" defaultValue={name} onChange={(event) => handleNameChange(event)} />}\n            </Col>\n            {!updatedItem.isLabel ?\n              <Col className=\"tableFixHead\">\n                <BootstrapTable\n                  keyField=\"id\"\n                  data={portsTable}\n                  columns={columns}\n                  bordered={false}\n                />\n                <p className=\"mouse-cursor\" onClick={() => addNewPort(portsTable.length)}>Add new prop</p>\n              </Col> : null}\n          </Row>\n        </Grid>\n\n      </div>\n    )\n\n\n}","import './ResultPopup.scss';\nimport React, { useState } from 'react'\nimport Popup from 'reactjs-popup'\nimport sqlFormatter from \"sql-formatter\";\nimport FileSaver from 'file-saver';\n\nclass Props {\n  isOpen: boolean;\n  generateScript?: (name: string) => void;\n  mssqlString?: string;\n  update: () => void;\n}\n\nexport const ResultPopup = (props: Props) => {\n  const [dbName, setDbName] = useState(\n    'DatabaseName'\n  );\n\n  const formatedSQL = props.mssqlString && sqlFormatter.format(props.mssqlString, {\n    language: \"sql\", // Defaults to \"sql\"\n    indent: \"  \"   // Defaults to two spaces\n  });\n\n\n  const downloadMSSQL = () => {\n    var blob = new Blob([formatedSQL], {type: \"text/plain;charset=utf-8\"});\n    FileSaver.saveAs(blob, `${dbName}.sql`);\n    props.update();\n  }\n  \n  return (\n    <Popup\n      modal\n      closeOnDocumentClick\n      open={props.isOpen}\n      closeOnEscape\n    >\n      <div className=\"sql-result-dialog\">\n        <input style={{marginRight: '10px'}} type=\"text\" onChange={event => setDbName(event.target.value)} value={dbName}/>\n        <button onClick={() => props.generateScript(dbName)}>Generate</button>\n        <textarea style={{marginTop: '5px'}} readOnly={true} value={formatedSQL} contentEditable={false}></textarea>\n        <button style={{marginRight: '10px'}} onClick={downloadMSSQL}>Download MSSQL</button>\n      </div>\n    </Popup>)\n}","import { ResultPopup } from '../components/popups/ResultPopup/ResultPopup';\nimport React, { useState, useMemo } from 'react'\nimport axios from 'axios';\n\nclass Props {\n  isOpen: boolean;\n  serializeDiagram: any;\n  update: () => void;\n}\n\nexport const GenerationHandler = (props: Props) => {\n  const [sqlString, setSqlString] = useState('');\n\n  const generateScript = (name: string) => {\n    let diagram = JSON.stringify(props.serializeDiagram, null, 2);\n    axios.post('http://localhost:5000/api/setjob', { SerializedModel: diagram, DatabaseName: name })\n      .then((response) => {\n        setSqlString(response.data);\n      })\n      .catch(function (error) {\n        console.log(error);\n      })\n  };\n\n  return (\n    <ResultPopup update={props.update} mssqlString={sqlString} generateScript={(name) => generateScript(name)} isOpen={props.isOpen} />\n  )\n}\n","import './RelationPopup.scss';\nimport React, { useState } from 'react'\nimport Popup from 'reactjs-popup'\nimport { Link } from '../../../infrastructure/models/Link';\nimport { Label } from '../../../infrastructure/models/Label';\nimport { Node } from '../../../infrastructure/models/Node';\nimport { DiagramModel } from 'storm-react-diagrams';\n\nclass Props {\n  isOpen: boolean;\n  link: Link;\n  update: () => void;\n  diagramModel: DiagramModel;\n}\nexport const RelationPopup = (props: Props) => {\n\n  const [left, setLeft] = useState(\n    '0, N'\n  );\n\n  const [right, setRight] = useState(\n    '0, N'\n  );\n\n  const [relationName, setRelationName] = useState(\n    'relation name'\n  );\n\n  let update = () => {\n    let labels = props.link.labels as Label[];\n    labels[0].label = left;\n    labels[2].label = right;\n    labels[1].label = relationName;\n    let points = props.link.points;\n    for (let index = 1; index < points.length - 1; index++) {\n      const element = points[index];\n      element.remove();\n    }\n    props.update()\n  }\n\n  const sourcePort = props.link && props.link.sourcePort && props.link.sourcePort.parent as Node;\n  const targetPort = props.link && props.link.targetPort && props.link.targetPort.parent as Node;\n\n  const remove = () => {\n    props.diagramModel.removeLink(props.link);\n    props.update();\n  }\n\n  const options = <>\n    <option value=\"1, N\">1, N</option>\n    <option value=\"0, N\">0, N</option>\n    <option value=\"0, 1\">0, 1</option>\n    <option value=\"1, 1\">1, 1</option>\n    <option value=\"N, N\">N, N</option>\n  </>;\n\n  const renderOptionPicker = (side: string) => {\n    return (\n      <div className=\"grid-item\"><select className=\"darkSelect\"\n        onChange={(event) => side === 'left' ? setLeft(event.target.value) : setRight(event.target.value)}\n        value={side === 'left' ? left : right}>\n        {options}\n      </select>\n      </div>\n    );\n  }\n\n  return (\n    <Popup\n      modal\n      closeOnDocumentClick\n      open={props.isOpen}\n      closeOnEscape\n    >\n      <div className=\"SQLResultDialog\">\n        <div className=\"grid-container\">\n          <div className=\"grid-item\"><p>{sourcePort && sourcePort.name}</p></div>\n          <div className=\"grid-item\"><input className=\"darkInput\" type=\"text\" defaultValue={relationName} onChange={(event) => setRelationName(event.target.value)}></input></div>\n          <div className=\"grid-item\"><p>{targetPort && targetPort.name}</p></div>\n          {renderOptionPicker('left')}\n          <div className=\"grid-item\"><button onClick={update}>SAVE</button></div>\n          {renderOptionPicker('right')}\n          <div className=\"grid-item\" />\n          <div className=\"grid-item\"><button onClick={remove}>Remove</button></div>\n          <div className=\"grid-item\" />\n        </div>\n      </div>\n    </Popup>)\n}\n","import React from 'react';\n\nexport default React.createContext({\n    app: null,\n    newApplication: () => {}\n});","import './LoadFilePopup.scss';\nimport React, { useState } from 'react'\nimport Popup from 'reactjs-popup'\n\nclass Props {\n  isOpen: boolean;\n  loadDiagram?: (name: string) => void;\n  update: () => void\n}\n\nexport const LoadFilePopup = (props: Props) => {\n  let fileReader: FileReader;\n\n  const [fileContent, setFileContent] = useState(\n    ''\n  );\n\n  const handleFileRead = (e: any) => {\n    const content = fileReader.result\n    setFileContent(content as string);\n  }\n\n  const handleFileChosen = (name: any) => {\n    fileReader = new FileReader()\n    fileReader.onloadend = handleFileRead\n    fileReader.readAsText(name)\n  } \n\n  return (\n    <Popup\n      modal\n      closeOnDocumentClick\n      open={props.isOpen}\n      closeOnEscape\n      onClose={() => props.update()}\n    >\n      <div className=\"sql-result-dialog\">\n        <input type=\"file\" onChange={event => handleFileChosen(event.target.files[0])} accept=\".dbjson\" />\n        <button onClick={() => props.loadDiagram(fileContent)}>Load</button>\n      </div>\n    </Popup>)\n}","import { LoadFilePopup } from '../components/popups/LoadFilePopup/LoadFilePopup';\nimport React from 'react'\nimport { Application } from '../components/dragAndDrop/Application';\nimport { DiagramModel } from 'storm-react-diagrams';\n\nclass Props {\n  isOpen: boolean;\n  app: Application;\n  update: () => void;\n}\n\nexport const LoadFileHandler = (props: Props) =>{\n   const loadDiagram = (name: string) => {\n        let engine  = props.app.getDiagramEngine();\n        let obj: ReturnType<DiagramModel['serialize']> = JSON.parse(name);\n        let model2 = new DiagramModel();\n        model2.deSerializeDiagram(obj, engine);\n        let newLinks: any[] = Object.keys(model2.links).map(x => {\n            return model2.links[x];\n        });\n\n        newLinks.forEach(link => {\n            link.labels.splice(0,3)\n        })\n        engine.setDiagramModel(model2)\n        engine.repaintCanvas()\n        props.update()\n  }\n\n  \n    return (\n      <LoadFilePopup update={props.update} loadDiagram={(name) => loadDiagram(name)} isOpen={props.isOpen} />\n    )\n  \n}\n","import './SaveToFilePopup.scss';\nimport React, { useState } from 'react'\nimport Popup from 'reactjs-popup'\nimport { DiagramModel } from 'storm-react-diagrams';\nimport FileSaver from 'file-saver';\n\nclass Props {\n  isOpen: boolean;\n  diagramModel: DiagramModel;\n  update: () => void;\n}\n\nexport const SaveToFilePopup = (props: Props) => {\n  const [fileName, setFileName] = useState(\n    'diagram'\n  );\n\n  const download = () => {\n    const diagramJson = JSON.stringify(props.diagramModel.serializeDiagram());\n    let blob = new Blob([diagramJson], {type: \"text/plain;charset=utf-8\"});\n    FileSaver.saveAs(blob, `${fileName}.dbjson`);\n    props.update();\n  }\n  \n  return (\n    <Popup\n      modal\n      closeOnDocumentClick\n      open={props.isOpen}\n      closeOnEscape\n      onClose={() => props.update()}\n    >\n      <div className=\"sql-result-dialog\">\n        <input type=\"text\" onChange={event => setFileName(event.target.value)} value={fileName}/>\n        <button onClick={download}>save</button>\n      </div>\n    </Popup>)\n}","import './SaveToJpegPopup.scss';\nimport React, { useState } from 'react'\nimport Popup from 'reactjs-popup'\nimport { DiagramModel } from 'storm-react-diagrams';\nimport domtoimage from 'dom-to-image';\n\nclass Props {\n  isOpen: boolean;\n  diagramModel: DiagramModel;\n  update: () => void;\n}\n\nexport const SaveToJpegPopup = (props: Props) => {\n  const [fileName, setFileName] = useState(\n    'diagram'\n  );\n\n  const download = () => {\n    domtoimage.toJpeg(document.getElementById('diagram-layer'), { quality: 0.95 })\n    .then((dataUrl: any) => {\n        let link = document.createElement('a');\n        link.download = `${fileName}.jpeg`;\n        link.href = dataUrl;\n        link.click();\n        props.update();\n    });\n  }\n  \n  return (\n    <Popup\n      modal\n      closeOnDocumentClick\n      open={props.isOpen}\n      closeOnEscape\n      onClose={() => props.update()}\n    >\n      <div className=\"sql-result-dialog\">\n        <input type=\"text\" onChange={event => setFileName(event.target.value)} value={fileName}/>\n        <button onClick={download}>save</button>\n      </div>\n    </Popup>)\n}","import * as React from \"react\";\n\nimport { DiagramWidget, PointModel } from \"storm-react-diagrams\";\nimport { TrayItemWidget } from \"./components/dragAndDrop/TrayItemWidget\";\nimport { TrayWidget } from \"./components/dragAndDrop/TrayWidget\";\nimport { Application } from \"./components/dragAndDrop/Application\";\nimport { Node } from \"./infrastructure/models/Node\";\nimport { Link } from \"./infrastructure/models/Link\";\nimport { PropertyType } from \"./infrastructure/models/PropertyType\";\nimport { NodeProperties, useForceUpdate } from \"./components/nodeProperties/NodeProperties\";\nimport { GenerationHandler } from \"./handlers/GenerationHandler\";\nimport { RelationPopup } from \"./components/popups/RealtionPopup/RelationPopup\";\nimport AppContext from \"./context/appContext/AppContext\";\nimport { LoadFileHandler } from \"./handlers/LoadFileHandler\";\nimport { SaveToFilePopup } from \"./components/popups/SaveToFilePopup/SaveToFilePopup\";\nimport { CSSProperties } from \"react\";\nimport { SaveToJpegPopup } from \"./components/popups/SaveToJpegPopup/SaveToJpegPopup\";\nimport _ from \"lodash\";\n\nrequire(\"storm-react-diagrams/dist/style.min.css\");\nrequire('react-bootstrap-table-next/dist/react-bootstrap-table2.min.css');\n\ninterface Props {\n  app: Application;\n}\n\nexport const AppView = (props: Props) => {\n  const contextType = AppContext; // co zrobic z kontekstem\n  const jpegFileTarget: React.RefObject<any> = null;\n\n  const [showDialog, setShowDialog] = React.useState(false);\n  const [showRelationDialog, setShowRelationDialog] = React.useState(false);\n  const [showLoadFileDialog, setShowLoadFileDialog] = React.useState(false);\n  const [showSaveFileDialog, setSaveFileDialog] = React.useState(false);\n  const [showSaveJPEGDialog, setSaveJPEGDialog] = React.useState(false);\n  const [showSaveOptions, setSaveOptions] = React.useState(false);\n\n  const [selectedNode, setSelectedNode] = React.useState(null);\n  const [selectedLink, setSelectedLink] = React.useState(null);\n\n  const forceUpdate = useForceUpdate();\n\n  React.useEffect(() => {\n    setSelectedNode(null);\n    setSelectedLink(null);\n  }, []);\n\n  const refreshPopups = () => {\n    setSelectedLink(null);\n    setSelectedNode(null);\n\n    setShowDialog(false);\n    setSaveFileDialog(false);\n    setSaveJPEGDialog(false);\n    setSaveOptions(false);\n    setShowLoadFileDialog(false);\n    setShowRelationDialog(false);\n  }\n\n  // render() {\n  const containerStyles: CSSProperties = {\n    display: 'flex',\n    justifyContent: 'space-between',\n    borderColor: \"rgb(255,123,0)\"\n  }\n  const itemStyles: CSSProperties = {\n    display: 'inline-block',\n    paddingTop: 3,\n    paddingRight: 5\n  }\n\n  return (\n    <div className=\"body\">\n      <div className=\"header\">\n        <div className=\"title\">DB Diagram Scripter</div>\n      </div>\n      <div className=\"content\" ref={jpegFileTarget}>\n        <TrayWidget>\n          <TrayItemWidget model={{ type: \"table\" }} name=\"Entity\" color=\"rgb(0,192,255)\" />\n          <TrayItemWidget model={{ type: \"label\" }} name=\"Label\" color=\"rgb(192,255,0)\" />\n\n          <div\n            style={{ borderColor: \"rgb(255,123,0)\", marginTop: '100px' }}\n            className=\"tray-item\"\n            onClick={() => { \n              setShowLoadFileDialog(true); \n              setSelectedNode(null) \n            }}\n          >\n            Load Diagram\n\t\t\t\t\t\t</div>\n          <div\n            style={containerStyles}\n            className=\"tray-item\"\n            onClick={() => { \n              setSaveOptions(!showSaveOptions); \n              setSelectedNode(null);\n            }}\n          >\n            Save\n\t\t\t\t\t\t\t<span style={itemStyles} className={`mi ${!showSaveOptions ? 'mi-ArrowDown8' : 'mi-ArrowUp8'}`} />\n          </div>\n          {showSaveOptions && <div\n            style={{ borderColor: \"rgb(255,123,0)\" }}\n            className=\"tray-item\"\n            onClick={() => { \n              setSaveFileDialog(true); \n              setSelectedNode(null);\n            }}\n          >\n            File\n\t\t\t\t\t\t</div>}\n          {showSaveOptions && <div\n            style={{ borderColor: \"rgb(255,123,0)\" }}\n            className=\"tray-item\"\n            onClick={() => { \n              setSaveJPEGDialog(true); \n              setSelectedNode(null);\n            }}\n          >\n            JPEG\n\t\t\t\t\t\t</div>}\n          <div\n            style={{ borderColor: \"rgb(255,0,0)\", marginTop: '100px' }}\n            className=\"tray-item\"\n            onClick={() => { \n              setShowDialog(true); \n              setSelectedNode(null);\n            }}\n          >\n            Create DB Code\n\t\t\t\t\t\t</div>\n\n\n        </TrayWidget>\n\n        <div\n          id='diagram-layer'\n          className=\"diagram-layer\"\n          onDrop={event => {\n            var data = JSON.parse(event.dataTransfer.getData(\"storm-diagram-node\"));\n            var nodesCount = _.keys(\n              props.app\n                .getDiagramEngine()\n                .getDiagramModel()\n                .getNodes()\n            ).length;\n\n            var node = null;\n            if (data.type === \"table\") {\n              node = new Node(false, props.app.getDiagramEngine(), `Entity${nodesCount + 1}`, \"rgb(0,192,255)\");\n              node.addInPort(\"Id\", true, false, false, false, false, PropertyType.INT);\n            } else {\n              node = new Node(true, props.app.getDiagramEngine(), \"Label \", \"rgb(192,255,0)\");\n            }\n\n            var points = props.app.getDiagramEngine().getRelativeMousePoint(event);\n            node.x = points.x;\n            node.y = points.y;\n            props.app\n              .getDiagramEngine()\n              .getDiagramModel()\n              .addNode(node);\n            forceUpdate();\n          }}\n          onDragOver={event => {\n            event.preventDefault();\n          }}\n\n          onClick={event => {\n            event.preventDefault();\n            refreshPopups();\n          }}\n          onDoubleClick={event => {\n            console.log('WWWWif', props.app.getDiagramEngine().getDiagramModel().getSelectedItems());\n\n            console.log('WWWWif', props.app.getDiagramEngine().getDiagramModel().getSelectedItems()[0] instanceof Node);\n\n            event.preventDefault();\n            if (props.app.getDiagramEngine().getDiagramModel().getSelectedItems()[0] instanceof PointModel) {\n              setSelectedLink(props.app\n                .getDiagramEngine()\n                .getDiagramModel().getSelectedItems()[0].parent as Link);\n              setShowRelationDialog(true);\n              setSelectedNode(null);\n              \n            } else if (props.app.getDiagramEngine().getDiagramModel().getSelectedItems()[0] instanceof Node) {\n              console.log('WWWWel', props.app.getDiagramEngine().getDiagramModel().getSelectedItems());\n              refreshPopups();\n              setSelectedNode(props.app\n                .getDiagramEngine()\n                .getDiagramModel()\n                .getSelectedItems()[0] as Node);\n            }\n          }}\n        >\n          <DiagramWidget deleteKeys={[46]} className=\"srd-demo-canvas\" diagramEngine={props.app.getDiagramEngine()} />\n        </div>\n        {selectedNode != null ? <NodeProperties selectedLink={selectedLink} selectedItem={selectedNode} diagramEngine={props.app.getDiagramEngine()} /> : null}\n        <GenerationHandler update={refreshPopups} isOpen={showDialog} serializeDiagram={props.app.getActiveDiagram().serializeDiagram()} />\n        <LoadFileHandler update={refreshPopups} isOpen={showLoadFileDialog} app={props.app} />\n        <SaveToFilePopup update={refreshPopups} diagramModel={props.app.getActiveDiagram()} isOpen={showSaveFileDialog} />\n        <SaveToJpegPopup update={refreshPopups} diagramModel={props.app.getActiveDiagram()} isOpen={showSaveJPEGDialog} />\n\n\n        <RelationPopup diagramModel={props.app.getActiveDiagram()} update={refreshPopups} isOpen={showRelationDialog} link={selectedLink} />\n      </div>\n    </div >\n  );\n}\n","\nimport * as React from \"react\";\nimport { Application } from \"./components/dragAndDrop/Application\";\nimport { AppView } from \"./AppView\";\nimport AppContext from \"./context/appContext/AppContext\";\nrequire('react-bootstrap-table-next/dist/react-bootstrap-table2.min.css');\nrequire(\"storm-react-diagrams/dist/style.min.css\");\n\nexport const App = () => {\n  const [application, setApplication] = React.useState(new Application());\n\n  const newApplication = () => {\n    setApplication(new Application());\n  }\n\n  return (\n    <AppContext.Provider\n      value={{\n        app: application,\n        newApplication: newApplication\n      }}\n    >\n      <AppView app={application}  />\n    </AppContext.Provider>\n  );\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import './styles/index.scss';\nimport './styles/App.scss';\nimport './styles/dragAndDrop.scss';\nimport './icons/micon/css/micon.min.css';\nimport 'react-bootstrap-table-next/dist/react-bootstrap-table2.min.css';\nimport { App } from './App';\nimport * as ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\nimport * as React from 'react';\n\n\n\nReactDOM.render(\n        <App />,\ndocument.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}