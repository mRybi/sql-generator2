{"version":3,"sources":["infrastructure/models/PropertyType.ts","infrastructure/models/Label.ts","infrastructure/models/Link.ts","infrastructure/models/Port.ts","infrastructure/models/Node.ts","infrastructure/widgets/CustomLabelWidget.tsx","infrastructure/factories/CustomLabelFactory.ts","infrastructure/factories/CustomPortFactory.tsx","infrastructure/widgets/CustomPortLabelWidget.tsx","infrastructure/widgets/CustomNodeWidget.tsx","infrastructure/factories/CustomNodeFactory.tsx","infrastructure/widgets/CustomLinkLabelWidget.tsx","infrastructure/factories/CustomLinkLabelFactory.ts","infrastructure/factories/CustomLinkFactory.tsx","components/dragAndDrop/Application.ts","components/dragAndDrop/TrayItemWidget.tsx","components/dragAndDrop/TrayWidget.tsx","components/grid/Grid.tsx","components/grid/Row.tsx","components/grid/Col.tsx","components/nodeProperties/NodeProperties.tsx","components/popups/ResultPopup/ResultPopup.tsx","handlers/GenerationHandler.tsx","components/popups/RealtionPopup/RelationPopup.tsx","components/popups/LoadFilePopup/LoadFilePopup.tsx","handlers/LoadFileHandler.tsx","components/popups/SaveToFilePopup/SaveToFilePopup.tsx","components/popups/SaveToJpegPopup/SaveToJpegPopup.tsx","AppView.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["PropertyType","Label","_LabelModel","label","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","offsetY","inherits","createClass","key","value","ob","engine","get","prototype","_","LabelModel","Link","_LinkModel","type","arguments","length","undefined","width","color","curvyness","addLabel","labelOb","setLabel","iterateListeners","listener","event","widthChanged","objectSpread","colorChanged","LinkModel","Port","_PortModel","name","isNamePort","isPrimaryKey","isForeignKey","isNotNull","isAutoincremented","isUnique","propertyType","id","in","links","object","port","PortModel","Node","_NodeModel","isLabel","ports","isNamedPort","isPK","isFK","isAuto","addPort","Toolkit","UID","portModel","NodeModel","CustomLabelWidget","_BaseWidget","props","state","react","assign","getProps","style","background","node","className","bem","BaseWidget","CustomLabelFactory","_AbstractNodeFactory","diagramEngine","React","initialConfig","AbstractNodeFactory","CustomPortFactory","_AbstractPortFactory","AbstractPortFactory","CustomPortLabelWidget","model","itemStyles","display","marginRight","react_default","a","createElement","main","getParent","setLocked","paddingLeft","paddingRight","fontWeight","justifyContent","CustomNodeWidget","CustomPortLabelWidget_CustomPortLabelWidget","getPorts","portsJSX","generatePort","bind","namedPort","filter","p","notNamedPort","marginLeft","CustomNodeFactory","CustomLinkLabelWidget","CustomLinkLabelFactory","_AbstractLabelFactory","AbstractLabelFactory","CustomLinkFactory","_AbstractLinkFactory","link","DefaultLinkWidget","widget","selected","path","strokeWidth","stroke","d","AbstractLinkFactory","Application","activeModel","SRD","registerNodeFactory","registerLinkFactory","registerLabelFactory","registerPortFactory","installDefaultFactories","newModel","setDiagramModel","TrayItemWidget","_React$Component","_this2","borderColor","draggable","onDragStart","dataTransfer","setData","JSON","stringify","TrayWidget","children","defaultProps","Grid","buildClassNameString","concat","Row","flex","Col","onDoubleClick","size","config","pull","push","offset","order","hidden","buildGridColConfigClassNames","sm","md","lg","xl","xxl","xxxl","useForceUpdate","_React$useState","_React$useState2","slicedToArray","setValue","NodeProperties","_React$useState3","_React$useState4","updatedItem","setUpdatedItem","_React$useState5","_React$useState6","setName","_React$useState7","_React$useState8","showInput","setShowInput","forceUpdate","selectedItem","columns","dataField","text","formatter","cellContent","row","defaultValue","onChange","persist","getPortFromID","target","handleChangePortLabel","handleChangepRropType","values","map","obj","checked","handleChangePK","handleChangeNull","handleChangeAutoInc","handleChangeUnique","onClick","entries","constructor","keys","x","forEach","getDiagramModel","removeLink","removePort","portsTable","Grid_Grid","Row_Row","Col_Col","allNodes","diagramModel","getNodes","names","includes","handleNameChange","lib_default","keyField","data","bordered","newPortNumber","addInPort","INT","ResultPopup","_useState","useState","_useState2","dbName","setDbName","formatedSQL","mssqlString","sqlFormatter","format","language","indent","reactjs_popup_es","modal","closeOnDocumentClick","open","isOpen","closeOnEscape","generateScript","marginTop","readOnly","contentEditable","blob","Blob","FileSaver","saveAs","update","GenerationHandler","sqlString","setSqlString","_ref","asyncToGenerator","regenerator_default","mark","_callee","diagram","response","wrap","_context","prev","next","console","log","serializeDiagram","axios","post","SerializedModel","DatabaseName","sent","status","stop","_x","apply","ResultPopup_ResultPopup_ResultPopup","RelationPopup","left","setLeft","_useState3","_useState4","right","setRight","_useState5","_useState6","relationName","setRelationName","sourcePort","parent","targetPort","options","Fragment","renderOptionPicker","side","labels","points","index","remove","LoadFilePopup","fileReader","fileContent","setFileContent","handleFileRead","e","content","result","onClose","files","FileReader","onloadend","readAsText","accept","loadDiagram","LoadFileHandler","LoadFilePopup_LoadFilePopup_LoadFilePopup","app","getDiagramEngine","parse","model2","DiagramModel","deSerializeDiagram","splice","repaintCanvas","SaveToFilePopup","fileName","setFileName","diagramJson","SaveToJpegPopup","domtoimage","toJpeg","document","getElementById","quality","then","dataUrl","download","href","click","require","AppView","showDialog","setShowDialog","showRelationDialog","setShowRelationDialog","showLoadFileDialog","setShowLoadFileDialog","showSaveFileDialog","setSaveFileDialog","_React$useState9","_React$useState10","showSaveJPEGDialog","setSaveJPEGDialog","_React$useState11","_React$useState12","showSaveOptions","setSaveOptions","_React$useState13","_React$useState14","selectedNode","setSelectedNode","_React$useState15","_React$useState16","selectedLink","setSelectedLink","refreshPopups","ref","TrayWidget_TrayWidget","TrayItemWidget_TrayItemWidget","paddingTop","onDrop","preventDefault","getData","nodesCount","addListener","getRelativeMousePoint","y","addNode","onDragOver","getSelectedItems","PointModel","allowLooseLinks","deleteKeys","NodeProperties_NodeProperties","GenerationHandler_GenerationHandler","LoadFileHandler_LoadFileHandler","SaveToFilePopup_SaveToFilePopup_SaveToFilePopup","getActiveDiagram","SaveToJpegPopup_SaveToJpegPopup_SaveToJpegPopup","RelationPopup_RelationPopup","App","AppView_AppView","Boolean","window","location","hostname","match","ReactDOM","App_App","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9ddd2ca9.chunk.js","sourcesContent":["export enum PropertyType {\n  BIT = \"BIT\",\n  TINYINT = \"TINYINT\",\n  SMALLINT = \"SMALLINT\",\n  INT = \"INT\",\n  BIGINT = \"BIGINT\",\n  DECIMAL = \"DECIMAL\",\n  NUMERIC = \"NUMERIC\",\n  FLOAT = \"FLOAT\",\n  REAL = \"REAL\",\n  DATE = \"DATE\",\n  TIME = \"TIME\",\n  DATETIME = \"DATETIME\",\n  TIMESTAMP = \"TIMESTAMP\",\n  YEAR = \"YEAR\",\n  CHAR = \"CHAR\",\n  VARCHAR = \"VARCHAR\",\n  VARCHARMAX = \"VARCHARMAX\",\n  TEXT = \"TEXT\",\n  NCHAR = \"NCHAR\",\n  NVARCHAR = \"NVARCHAR\",\n  NVARCHARMAX = \"NVARCHARMAX\",\n  NTEXT = \"NTEXT\",\n  BINARY = \"BINARY\",\n  VARBINARY = \"VARBINARY\",\n  VARBINARYMAX = \"VARBINARYMAX\",\n  IMAGE = \"IMAGE\",\n  CLOB = \"CLOB\",\n  BLOB = \"BLOB\",\n  XML = \"XML\",\n  JSON = \"JSON\"\n}\n","import * as _ from \"lodash\";\nimport { LabelModel, DiagramEngine } from \"storm-react-diagrams\";\n\nexport class Label extends LabelModel {\n  label: string;\n\n  constructor(label: string) {\n    super(\"custom\");\n    this.label = label;\n    this.offsetY = -23;\n  }\n\n  setLabel(label: string) {\n    this.label = label;\n  }\n\n  deSerialize(ob: any, engine: DiagramEngine) {\n    super.deSerialize(ob, engine);\n    this.label = ob.label;\n  }\n\n  serialize() {\n    return _.merge(super.serialize(), {\n      label: this.label\n    });\n  }\n}\n","import * as _ from \"lodash\";\nimport {\n  LinkModelListener,\n  BaseEvent,\n  LinkModel,\n  DefaultLinkModel,\n  DiagramEngine,\n  LabelModel\n} from \"storm-react-diagrams\";\nimport { Label } from \"./Label\";\n\nexport interface DefaultLinkModelListener extends LinkModelListener {\n  colorChanged?(\n    event: BaseEvent<DefaultLinkModel> & { color: null | string }\n  ): void;\n\n  widthChanged?(\n    event: BaseEvent<DefaultLinkModel> & { width: 0 | number }\n  ): void;\n}\n\nexport class Link extends LinkModel<DefaultLinkModelListener> {\n  width: number;\n  color: string;\n  curvyness: number;\n\n  constructor(type: string = \"custom\") {\n    super(type);\n    this.color = \"rgba(255,255,255,0.5)\";\n    this.width = 3;\n    this.curvyness = 300;\n    this.addLabel(\"0,N\");\n    this.addLabel(\"relation name\");\n    this.addLabel(\"0,N\");\n  }\n\n  serialize() {\n    return _.merge(super.serialize(), {\n      width: this.width,\n      color: this.color,\n      curvyness: this.curvyness\n    });\n  }\n\n  deSerialize(ob: any, engine: DiagramEngine) {\n    super.deSerialize(ob, engine);\n    this.color = ob.color;\n    this.width = ob.width;\n    this.curvyness = ob.curvyness;\n  }\n\n  addLabel(label: LabelModel | string) {\n    if (label instanceof LabelModel) {\n      return super.addLabel(label);\n    }\n    let labelOb = new Label(\"custom\");\n    labelOb.setLabel(label);\n    return super.addLabel(labelOb);\n  }\n\n  setWidth(width: number) {\n    this.width = width;\n    this.iterateListeners(\n      (listener: DefaultLinkModelListener, event: BaseEvent) => {\n        if (listener.widthChanged) {\n          listener.widthChanged({ ...event, width: width });\n        }\n      }\n    );\n  }\n\n  setColor(color: string) {\n    this.color = color;\n    this.iterateListeners(\n      (listener: DefaultLinkModelListener, event: BaseEvent) => {\n        if (listener.colorChanged) {\n          listener.colorChanged({ ...event, color: color });\n        }\n      }\n    );\n  }\n}\n","import * as _ from \"lodash\";\nimport { Link } from \"./Link\";\nimport { PortModel, DiagramEngine } from \"storm-react-diagrams\";\nimport { PropertyType } from \"./PropertyType\";\n\nexport class Port extends PortModel {\n  in: boolean;\n  isNamePort: boolean;\n  label: string;\n  links: { [id: string]: Link };\n  isPrimaryKey: boolean;\n  isForeignKey: boolean;\n  isAutoincremented: boolean;\n  isNotNull: boolean;\n  isUnique: boolean;\n  propertyType: PropertyType;\n\n  constructor(\n    name: string,\n    isNamePort: boolean,\n    isPrimaryKey?: boolean,\n    isForeignKey?: boolean,\n    isNotNull?: boolean,\n    isAutoincremented?: boolean,\n    isUnique?: boolean,\n    propertyType?: PropertyType,\n    id?: string\n  ) {\n    super(name, \"custom\", id);\n    this.label = name;\n    this.isNamePort = isNamePort;\n    this.links = {};\n\n    this.isPrimaryKey = isPrimaryKey;\n    this.isForeignKey = isForeignKey;\n\n    this.isNotNull = isNotNull;\n    this.isUnique = isUnique;\n    this.isAutoincremented = isAutoincremented;\n\n    this.propertyType = propertyType;\n  }\n\n  deSerialize(object: any, engine: DiagramEngine) {\n    super.deSerialize(object, engine);\n    this.label = object.label;\n    this.isNamePort = object.isNamePort;\n\n    this.isPrimaryKey = object.isPrimaryKey;\n    this.isForeignKey = object.isForeignKey;\n    this.isNotNull = object.isNotNull;\n    this.isUnique = object.isUnique;\n    this.isAutoincremented = object.isAutoincremented;\n    this.propertyType = object.propertyType;\n  }\n\n  serialize() {\n    return _.merge(super.serialize(), {\n      label: this.label,\n      links: this.links,\n      isNamePort: this.isNamePort,\n      isPrimaryKey: this.isPrimaryKey,\n      isForeignKey: this.isForeignKey,\n      isNotNull: this.isNotNull,\n      isUnique: this.isUnique,\n      isAutoincremented: this.isAutoincremented,\n      propertyType: this.propertyType\n    });\n  }\n\n  canLinkToPort(port: Port): boolean {\n    return true;\n  }\n\n  createLinkModel(): Link {\n    return new Link(\"custom\");\n  }\n}\n","import * as _ from \"lodash\";\nimport { NodeModel, Toolkit, DiagramEngine } from \"storm-react-diagrams\";\nimport { Port } from \"./Port\";\nimport { PropertyType } from \"./PropertyType\";\n\nexport class Node extends NodeModel {\n\tname: string;\n\tcolor: string;\n\tports: { [s: string]: Port };\n\tisLabel: boolean;\n\n\tconstructor(isLabel: boolean, name: string = \"Untitled\", color: string = \"rgb(0,192,255)\") {\n\t\tsuper(\"custom\");\n\t\tthis.name = name;\n\t\tthis.color = color;\n\t\tthis.ports = {};\n\t\tthis.isLabel = isLabel;\n\t}\n\n\taddInPort(isNamedPort: boolean, label: string, isPK: boolean, isFK: boolean, isUnique: boolean, isAuto: boolean, isNotNull: boolean, propertyType: PropertyType): Port {\n\t\treturn this.addPort(new Port(label, isNamedPort, isPK, isFK, isNotNull, isAuto, isUnique, propertyType, Toolkit.UID()));\n\t}\n\n\taddOutPort(isNamedPort: boolean,label: string, isPK: boolean, isFK: boolean, isUnique: boolean, isAuto: boolean, isNotNull: boolean, propertyType: PropertyType): Port {\n\t\treturn this.addPort(new Port(label, isNamedPort, isPK, isFK, isNotNull, isAuto, isUnique, propertyType, Toolkit.UID()));\n\t}\n\n\tdeSerialize(object: any, engine: DiagramEngine) {\n\t\tsuper.deSerialize(object, engine);\n\t\tthis.name = object.name;\n\t\tthis.color = object.color;\n\t}\n\n\tserialize() {\n\t\treturn _.merge(super.serialize(), {\n\t\t\tname: this.name,\n\t\t\tcolor: this.color\n\t\t});\n\t}\n\n\tgetInPorts(): Port[] {\n\t\treturn _.filter(this.ports, portModel => {\n\t\t\treturn portModel.in;\n\t\t});\n\t}\n\n\tgetOutPorts(): Port[] {\n\t\treturn _.filter(this.ports, portModel => {\n\t\t\treturn !portModel.in;\n\t\t});\n\t}\n}","import {\n  BaseWidgetProps,\n  DiagramEngine,\n  BaseWidget,\n  DefaultPortLabel\n} from \"storm-react-diagrams\";\nimport { Node } from \"../models/Node\";\nimport * as React from \"react\";\n\nexport interface NodeProps extends BaseWidgetProps {\n  node: Node;\n  diagramEngine: DiagramEngine;\n}\n\nexport interface DefaultNodeState {}\n\nexport class CustomLabelWidget extends BaseWidget<NodeProps, DefaultNodeState> {\n  constructor(props: NodeProps) {\n    super(\"srd-default-node\", props);\n    this.state = {};\n  }\n\n  render() {\n    return (\n      <div {...this.getProps()} style={{ background: this.props.node.color }}>\n        <div className={this.bem(\"__title\")}>\n          <div className={this.bem(\"__name\")}>{this.props.node.name}</div>\n        </div>\n      </div>\n    );\n  }\n}\n","import { Node } from \"../models/Node\";\nimport * as React from \"react\";\nimport { CustomLabelWidget } from \"../widgets/CustomLabelWidget\";\nimport { AbstractNodeFactory, DiagramEngine } from \"storm-react-diagrams\";\n\nexport class CustomLabelFactory extends AbstractNodeFactory<Node> {\n  constructor() {\n    super(\"label\");\n  }\n\n  generateReactWidget(diagramEngine: DiagramEngine, node: Node): JSX.Element {\n    return React.createElement(CustomLabelWidget, {\n      node: node,\n      diagramEngine: diagramEngine\n    });\n  }\n\n  getNewInstance(initialConfig?: any): Node {\n    return new Node(false, null, \"label\");\n  }\n}\n","import { AbstractPortFactory } from \"storm-react-diagrams\";\nimport { Port } from \"../models/Port\";\n\nexport class CustomPortFactory extends AbstractPortFactory<Port> {\n  constructor() {\n    super(\"custom\");\n  }\n\n  getNewInstance(initialConfig?: any): Port {\n    return new Port(\"custom\", true, false);\n  }\n}\n","import { Port } from \"../models/Port\";\nimport { BaseWidgetProps, BaseWidget, PortWidget } from \"storm-react-diagrams\";\nimport React, { CSSProperties } from \"react\";\nimport { PropertyType } from \"../models/PropertyType\";\n\nexport interface DefaultPortLabelProps extends BaseWidgetProps {\n  model: Port;\n}\n\nexport interface DefaultPortLabelState {}\n\nexport class CustomPortLabelWidget extends BaseWidget<\n  DefaultPortLabelProps,\n  DefaultPortLabelState\n> {\n  constructor(props: DefaultPortLabelProps) {\n    super(\"custom\", props);\n  }\n\n  getClassName() {\n    return (\n      super.getClassName() +\n      (this.props.model.in ? this.bem(\"--in\") : this.bem(\"--in\"))\n    );\n  }\n\n  render() {\n    let port: JSX.Element;\n    const style: CSSProperties = {\n      paddingLeft: 5,\n      paddingRight: 5,\n      color: \"black\",\n      fontWeight: 800\n\t};\n\t\n    const containerStyles: CSSProperties = {\n      display: \"flex\",\n      justifyContent: \"flex-end\"\n\t};\n\t\n    const itemStyles: CSSProperties = {\n      display: \"inline-block\",\n      marginRight: \"5px\"\n    };\n\n    const portStyles: CSSProperties = {\n      display: \"none\"\n    };\n\n    const namedPortStyles: CSSProperties = {\n      marginRight: \"5px\"\n    };\n\n    if (!this.props.model.isNamePort) {\n      this.props.model.setLocked();\n      port = (\n        <PortWidget\n          node={this.props.model.getParent()}\n          name={this.props.model.name}\n        />\n      );\n    } else {\n      port = (\n        <PortWidget\n          node={this.props.model.getParent()}\n          name={this.props.model.name}\n        />\n      );\n    }\n\n    const label: JSX.Element = (\n      <div className=\"name\">\n        <div>\n          {this.props.model.label}{\" \"}\n          {this.props.model.propertyType !== undefined\n            ? PropertyType[this.props.model.propertyType]\n            : null}\n        </div>\n      </div>\n    );\n    const isPrimaryKey = this.props.model.isPrimaryKey ? (\n      <span className=\"mi mi-Permissions\" style={style}></span>\n    ) : null;\n\n    if (this.props.model.isNamePort) {\n      return <div style={namedPortStyles}>{port}</div>;\n    } else {\n      return (\n        <div style={containerStyles} {...this.getProps()}>\n          <div style={itemStyles}>{isPrimaryKey}</div>\n          <div style={itemStyles}>{label}</div>\n          <div style={portStyles}>{port}</div>\n        </div>\n      );\n    }\n  }\n}\n","import { CustomPortLabelWidget } from \"./CustomPortLabelWidget\";\nimport React, { CSSProperties } from \"react\";\nimport {\n  BaseWidget,\n  DiagramEngine,\n  BaseWidgetProps\n} from \"storm-react-diagrams\";\nimport { Port } from \"../models/Port\";\nimport { Node } from \"../models/Node\";\nimport * as _ from \"lodash\";\n\nexport interface DefaultNodeProps extends BaseWidgetProps {\n  node: Node;\n  diagramEngine: DiagramEngine;\n}\n\nexport interface DefaultNodeState {}\n\nexport class CustomNodeWidget extends BaseWidget<\n  DefaultNodeProps,\n  DefaultNodeState\n> {\n  constructor(props: DefaultNodeProps) {\n    super(\"srd-default-node\", props);\n    this.state = {};\n  }\n\n  generatePort(port: Port) {\n    return <CustomPortLabelWidget model={port} key={port.id} />;\n  }\n\n  render() {\n    const namedPortStyles: CSSProperties = {\n      marginLeft: \"5px\"\n    };\n\n    let ports = this.props.node.getPorts() as { [s: string]: Port };\n    let portsJSX = _.map(ports, this.generatePort.bind(this));\n    let namedPort = portsJSX.filter(p => p.props.model.isNamePort);\n    let notNamedPort = portsJSX.filter(p => !p.props.model.isNamePort);\n\n    return (\n      <div {...this.getProps()} style={{ background: this.props.node.color }}>\n        <div className={this.bem(\"__title\")}>\n          {namedPort.length !== 0 && (\n            <div style={namedPortStyles}>\n              {this.generatePort(namedPort[1].props.model)}\n            </div>\n          )}\n          <div className={this.bem(\"__name\")}>{this.props.node.name}</div>\n          {namedPort.length !== 0 &&\n            this.generatePort(namedPort[0].props.model)}\n        </div>\n        <div className={this.bem(\"__ports\")}>\n          <div className={this.bem(\"__in\")}>{notNamedPort}</div>\n        </div>\n      </div>\n    );\n  }\n}\n","import { AbstractNodeFactory, DiagramEngine } from \"storm-react-diagrams\";\nimport React from \"react\";\nimport { CustomNodeWidget } from \"../widgets/CustomNodeWidget\";\nimport { Node } from \"../models/Node\";\n\nexport class CustomNodeFactory extends AbstractNodeFactory<Node> {\n  constructor() {\n    super(\"custom\");\n  }\n\n  generateReactWidget(diagramEngine: DiagramEngine, node: Node): JSX.Element {\n    return React.createElement(CustomNodeWidget, {\n      node: node,\n      diagramEngine: diagramEngine\n    });\n  }\n\n  getNewInstance(initialConfig?: any): Node {\n    return new Node(false, null, \"custom\");\n  }\n}\n","import * as React from \"react\";\nimport { BaseWidgetProps, BaseWidget } from \"storm-react-diagrams\";\nimport { Label } from \"../models/Label\";\n\nexport interface DefaultLabelWidgetProps extends BaseWidgetProps {\n  model: Label;\n}\n\nexport class CustomLinkLabelWidget extends BaseWidget<DefaultLabelWidgetProps> {\n  constructor(props: DefaultLabelWidgetProps) {\n    super(\"srd-default-label\", props);\n  }\n\n  render() {\n    return <div {...this.getProps()}>{this.props.model.label}</div>;\n  }\n}\n","import * as React from \"react\";\nimport { AbstractLabelFactory, DiagramEngine } from \"storm-react-diagrams\";\nimport { Label } from \"../models/Label\";\nimport { CustomLinkLabelWidget } from \"../widgets/CustomLinkLabelWidget\";\n\nexport class CustomLinkLabelFactory extends AbstractLabelFactory<Label> {\n  constructor() {\n    super(\"custom\");\n  }\n\n  generateReactWidget(diagramEngine: DiagramEngine, label: Label): JSX.Element {\n    return React.createElement(CustomLinkLabelWidget, {\n      model: label\n    });\n  }\n\n  getNewInstance(initialConfig?: any): Label {\n    return new Label(\"\");\n  }\n}\n","import * as React from \"react\";\nimport {\n  AbstractLinkFactory,\n  DiagramEngine,\n  DefaultLinkModel,\n  DefaultLinkWidget\n} from \"storm-react-diagrams\";\nimport { Link } from \"../models/Link\";\n\nexport class CustomLinkFactory extends AbstractLinkFactory<Link> {\n  constructor() {\n    super(\"custom\");\n  }\n\n  generateReactWidget(\n    diagramEngine: DiagramEngine,\n    link: DefaultLinkModel\n  ): JSX.Element {\n    return React.createElement(DefaultLinkWidget, {\n      link: link,\n      diagramEngine: diagramEngine\n    });\n  }\n\n  getNewInstance(initialConfig?: any): Link {\n    return new Link(\"custom\");\n  }\n\n  generateLinkSegment(\n    model: Link,\n    widget: DefaultLinkWidget,\n    selected: boolean,\n    path: string\n  ) {\n    return (\n      <path\n        className={selected ? widget.bem(\"--path-selected\") : \"\"}\n        strokeWidth={model.width}\n        stroke={model.color}\n        d={path}\n      />\n    );\n  }\n}\n","import * as SRD from \"storm-react-diagrams\";\nimport { CustomLabelFactory } from \"../../infrastructure/factories/CustomLabelFactory\";\nimport { CustomPortFactory } from \"../../infrastructure/factories/CustomPortFactory\";\nimport { CustomNodeFactory } from \"../../infrastructure/factories/CustomNodeFactory\";\nimport { CustomLinkLabelFactory } from \"../../infrastructure/factories/CustomLinkLabelFactory\";\nimport { CustomLinkFactory } from \"../../infrastructure/factories/CustomLinkFactory\";\n\nexport class Application {\n  protected activeModel: SRD.DiagramModel;\n  protected diagramEngine: SRD.DiagramEngine;\n\n  constructor() {\n    this.diagramEngine = new SRD.DiagramEngine();\n    this.diagramEngine.registerNodeFactory(new CustomLabelFactory());\n    this.diagramEngine.registerLinkFactory(new CustomLinkFactory());\n    this.diagramEngine.registerLabelFactory(new CustomLinkLabelFactory());\n    this.diagramEngine.registerNodeFactory(new CustomNodeFactory());\n    this.diagramEngine.registerPortFactory(new CustomPortFactory());\n    this.diagramEngine.installDefaultFactories();\n    this.newModel();\n  }\n\n  public newModel() {\n    this.activeModel = new SRD.DiagramModel();\n    this.diagramEngine.setDiagramModel(this.activeModel);\n  }\n\n  public getActiveDiagram(): SRD.DiagramModel {\n    return this.activeModel;\n  }\n\n  public getDiagramEngine(): SRD.DiagramEngine {\n    return this.diagramEngine;\n  }\n}\n","import * as React from \"react\";\n\nexport interface TrayItemWidgetProps {\n  model: any;\n  color?: string;\n  name: string;\n}\n\nexport interface TrayItemWidgetState {}\n\nexport class TrayItemWidget extends React.Component<\n  TrayItemWidgetProps,\n  TrayItemWidgetState\n> {\n  constructor(props: TrayItemWidgetProps) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n    return (\n      <div\n        style={{ borderColor: this.props.color }}\n        draggable={true}\n        onDragStart={event => {\n          event.dataTransfer.setData(\n            \"storm-diagram-node\",\n            JSON.stringify(this.props.model)\n          );\n        }}\n        className=\"tray-item\"\n      >\n        {this.props.name}\n      </div>\n    );\n  }\n}\n","import * as React from \"react\";\n\nexport interface TrayWidgetProps {}\n\nexport interface TrayWidgetState {}\n\nexport class TrayWidget extends React.Component<\n  TrayWidgetProps,\n  TrayWidgetState\n> {\n  public static defaultProps: TrayWidgetProps = {};\n\n  constructor(props: TrayWidgetProps) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n    return <div className=\"tray\">{this.props.children}</div>;\n  }\n}\n","import * as React from \"react\";\n\nimport { GridProps } from \"./\";\n\nexport default class Grid extends React.Component<GridProps> {\n  render() {\n    return (\n      <div style={this.props.style} className={this.buildClassNameString()}>\n        {this.props.children}\n      </div>\n    );\n  }\n\n  buildClassNameString() {\n    let className = \"ms-Grid\";\n\n    if (this.props.className != null) {\n      className += ` ${this.props.className}`;\n    }\n\n    return className;\n  }\n}\n","import * as React from \"react\";\n\nimport { GridRowProps } from \"./\";\n\nexport default class Row extends React.Component<GridRowProps> {\n  render() {\n    return (\n      <div className={this.buildClassNameString()}>{this.props.children}</div>\n    );\n  }\n\n  buildClassNameString() {\n    let className = \"ms-Grid-row\";\n\n    if (this.props.flex) {\n      className += \" grid-row-flex\";\n    }\n\n    if (this.props.className != null) {\n      className += ` ${this.props.className}`;\n    }\n\n    return className;\n  }\n}\n","import * as React from \"react\";\n\nimport { GridColProps, GridColConfigProp } from \"./\";\n\nexport default class Col extends React.Component<GridColProps> {\n  render() {\n    return (\n      <div\n        className={this.buildClassNameString()}\n        onDoubleClick={this.props.onDoubleClick}\n      >\n        {this.props.children}\n      </div>\n    );\n  }\n\n  buildGridColConfigClassNames(size: string, config: GridColConfigProp) {\n    if (config == null) return \"\";\n\n    let className = ` ms-${size}`;\n\n    if (typeof config === \"string\") {\n      className += config;\n    } else {\n      className += config.size;\n\n      if (config.pull != null) {\n        className += ` ms-${size}Pull${config.pull}`;\n      }\n\n      if (config.push != null) {\n        className += ` ms-${size}Push${config.push}`;\n      }\n\n      if (config.offset != null) {\n        className += ` ms-${size}Offset${config.offset}`;\n      }\n\n      if (config.order != null) {\n        className += ` grid-flex-order-${size}-${config.order}`;\n      }\n    }\n\n    return className;\n  }\n\n  buildClassNameString() {\n    let className = \"ms-Grid-col\";\n\n    if (this.props.className != null) {\n      className += ` ${this.props.className}`;\n    }\n\n    if (this.props.hidden != null) {\n      className += ` ms-hidden${this.props.hidden}`;\n    }\n\n    if (this.props.order != null) {\n      className += ` grid-flex-order-${this.props.order}`;\n    }\n\n    className += this.buildGridColConfigClassNames(\"sm\", this.props.sm);\n    className += this.buildGridColConfigClassNames(\"md\", this.props.md);\n    className += this.buildGridColConfigClassNames(\"lg\", this.props.lg);\n    className += this.buildGridColConfigClassNames(\"xl\", this.props.xl);\n    className += this.buildGridColConfigClassNames(\"xxl\", this.props.xxl);\n    className += this.buildGridColConfigClassNames(\"xxxl\", this.props.xxxl);\n\n    return className;\n  }\n}\n","import \"./NodeProperties.scss\";\nimport * as React from \"react\";\nimport { DiagramEngine } from \"storm-react-diagrams\";\nimport { Link } from \"../../infrastructure/models/Link\";\nimport { Port } from \"../../infrastructure/models/Port\";\nimport { Node } from \"../../infrastructure/models/Node\";\n\nimport BootstrapTable from \"react-bootstrap-table-next\";\nimport \"react-bootstrap-table-next/dist/react-bootstrap-table2.min.css\";\nimport { PropertyType } from \"../../infrastructure/models/PropertyType\";\nimport { Col, Row, Grid } from \"../grid\";\n\nclass Props {\n  selectedItem: Node;\n  diagramEngine: DiagramEngine;\n  selectedLink: Link;\n}\n\nexport function useForceUpdate() {\n  const [value, setValue] = React.useState(0);\n  return () => setValue(value => ++value);\n}\n\nexport const NodeProperties = (props: Props) => {\n  const [updatedItem, setUpdatedItem] = React.useState(null);\n  const [name, setName] = React.useState(\"\");\n  const [showInput, setShowInput] = React.useState(false);\n\n  const forceUpdate = useForceUpdate();\n\n  React.useMemo(() => {\n    setUpdatedItem(props.selectedItem);\n    setName(props.selectedItem.name);\n  }, [props.selectedItem]);\n\n  const handleChangePK = (\n    event: React.ChangeEvent<HTMLInputElement>,\n    row: Port\n  ) => {\n    event.persist();\n    (updatedItem.getPortFromID(\n      row.id\n    ) as Port).isPrimaryKey = !row.isPrimaryKey;\n    forceUpdate();\n  };\n\n  const handleChangeNull = (\n    event: React.ChangeEvent<HTMLInputElement>,\n    row: Port\n  ) => {\n    event.persist();\n    (updatedItem.getPortFromID(row.id) as Port).isNotNull = !row.isNotNull;\n    forceUpdate();\n  };\n\n  const handleChangeUnique = (\n    event: React.ChangeEvent<HTMLInputElement>,\n    row: Port\n  ) => {\n    event.persist();\n    (updatedItem.getPortFromID(row.id) as Port).isUnique = !row.isUnique;\n    forceUpdate();\n  };\n\n  const handleChangeAutoInc = (\n    event: React.ChangeEvent<HTMLInputElement>,\n    row: Port\n  ) => {\n    event.persist();\n    (updatedItem.getPortFromID(\n      row.id\n    ) as Port).isAutoincremented = !row.isAutoincremented;\n    forceUpdate();\n  };\n\n  const handleChangepRropType = (\n    event: React.ChangeEvent<HTMLSelectElement>,\n    row: Port\n  ) => {\n    event.persist();\n    (updatedItem.getPortFromID(row.id) as Port).propertyType = event.target\n      .value as PropertyType;\n    forceUpdate();\n  };\n\n  const handleChangePortLabel = (\n    event: React.ChangeEvent<HTMLInputElement>,\n    row: Port\n  ) => {\n    event.persist();\n    (updatedItem.getPortFromID(row.id) as Port).label = event.target.value;\n  };\n\n  const handleNameChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    event.persist();\n    let allNodes = props.diagramEngine.diagramModel.getNodes() as {\n      [id: string]: Node;\n    };\n    let names = Object.values(allNodes).map(node => allNodes[node.id].name);\n\n    updatedItem.name = names.includes(event.target.value)\n      ? event.target.value + \" ALREADY TAKEN!!\"\n      : event.target.value;\n    forceUpdate();\n  };\n\n  const addNewPort = (newPortNumber: number) => {\n    updatedItem.addInPort(\n      false,\n      `new port ${newPortNumber}`,\n      false,\n      false,\n      false,\n      false,\n      false,\n      PropertyType.INT\n    );\n    forceUpdate();\n  };\n\n  const removePort = (port: Port) => {\n    if (\n      Object.entries(port.links).length !== 0 &&\n      port.links.constructor === Object\n    ) {\n      let portLinks: Link[] = Object.keys(port.links).map(x => {\n        return port.links[x];\n      });\n      portLinks.forEach(p =>\n        props.diagramEngine.getDiagramModel().removeLink(p)\n      );\n    }\n    updatedItem.removePort(port);\n    forceUpdate();\n  };\n\n  const preparePropertyTypes = () => {\n    return Object.values(PropertyType).map(obj => (\n      <option key={obj} value={obj}>\n        {obj}\n      </option>\n    ));\n  };\n\n  const columns: any[] = [\n    {\n      dataField: \"label\",\n      text: \"Property Name\",\n      formatter: (cellContent: any, row: Port) => (\n        <div className=\"input\">\n          <input\n            className=\"darkInput\"\n            type=\"text\"\n            defaultValue={row.label}\n            onChange={event => handleChangePortLabel(event, row)}\n          ></input>\n        </div>\n      )\n    },\n    {\n      style: { paddingLeft: 0 },\n      dataField: \"propertyType\",\n      text: \"Property Type\",\n      formatter: (cellContent: any, row: Port) => (\n        <div className=\"checkbox\">\n          <label>\n            <select\n              className=\"darkSelect\"\n              onChange={event => handleChangepRropType(event, row)}\n              value={PropertyType[row.propertyType]}\n            >\n              {preparePropertyTypes()}\n            </select>\n          </label>\n        </div>\n      )\n    },\n    {\n      dataField: \"isPrimaryKey\",\n      text: \"Is Primary Key\",\n      formatter: (cellContent: any, row: Port) => (\n        <div className=\"checkbox\">\n          <label>\n            <input\n              type=\"checkbox\"\n              checked={row.isPrimaryKey}\n              onChange={event => handleChangePK(event, row)}\n            />\n          </label>\n        </div>\n      )\n    },\n    {\n      dataField: \"isNotNull\",\n      text: \"Is Nullable\",\n      formatter: (cellContent: any, row: Port) => (\n        <div className=\"checkbox\">\n          <label>\n            <input\n              type=\"checkbox\"\n              checked={row.isNotNull}\n              onChange={event => handleChangeNull(event, row)}\n            />\n          </label>\n        </div>\n      )\n    },\n    {\n      dataField: \"isAutoincremented\",\n      text: \"Is Auto Incremented\",\n      formatter: (cellContent: any, row: Port) => (\n        <div className=\"checkbox\">\n          <label>\n            <input\n              type=\"checkbox\"\n              checked={row.isAutoincremented}\n              onChange={event => handleChangeAutoInc(event, row)}\n            />\n          </label>\n        </div>\n      )\n    },\n    {\n      dataField: \"isUnique\",\n      text: \"Is Unique\",\n      formatter: (cellContent: any, row: Port) => (\n        <div className=\"checkbox\">\n          <label>\n            <input\n              type=\"checkbox\"\n              checked={row.isUnique}\n              onChange={event => handleChangeUnique(event, row)}\n            />\n          </label>\n        </div>\n      )\n    },\n    {\n      dataField: \"remove\",\n      text: \"Remove\",\n      formatter: (cellContent: any, row: Port) => (\n        <div className=\"checkbox\">\n          <label>\n            <span\n              onClick={() => removePort(row)}\n              className=\"mi mi-Delete red\"\n            />\n          </label>\n        </div>\n      )\n    }\n  ];\n\n  let ports =\n    updatedItem &&\n    updatedItem.ports &&\n    (updatedItem.ports as { [s: string]: Port });\n  let portsTable: Port[] =\n    ports &&\n    Object.keys(ports)\n      .map(x => {\n        return ports[x];\n      })\n      .filter(p => !p.isNamePort);\n\n  if (!updatedItem) return null;\n  else\n    return (\n      <div className=\"trayBottom\">\n        <Grid>\n          <Row>\n            <Col>\n              {!showInput ? (\n                <h1 onDoubleClick={() => setShowInput(true)}>{name}</h1>\n              ) : (\n                <input\n                  className=\"darkInput fs-24\"\n                  defaultValue={name}\n                  onChange={event => handleNameChange(event)}\n                />\n              )}\n            </Col>\n            {!updatedItem.isLabel ? (\n              <Col className=\"tableFixHead\">\n                <BootstrapTable\n                  keyField=\"id\"\n                  data={portsTable}\n                  columns={columns}\n                  bordered={false}\n                />\n                <p\n                  className=\"mouse-cursor\"\n                  onClick={() => addNewPort(portsTable.length)}\n                >\n                  Add new prop\n                </p>\n              </Col>\n            ) : null}\n          </Row>\n        </Grid>\n      </div>\n    );\n};\n","import \"./ResultPopup.scss\";\nimport React, { useState } from \"react\";\nimport Popup from \"reactjs-popup\";\nimport sqlFormatter from \"sql-formatter\";\nimport FileSaver from \"file-saver\";\n\nclass Props {\n  isOpen: boolean;\n  generateScript?: (name: string) => void;\n  mssqlString?: string;\n  update: () => void;\n}\n\nexport const ResultPopup = (props: Props) => {\n  const [dbName, setDbName] = useState(\"DatabaseName\");\n\n  const formatedSQL =\n    props.mssqlString &&\n    sqlFormatter.format(props.mssqlString, {\n      language: \"sql\", // Defaults to \"sql\"\n      indent: \"  \" // Defaults to two spaces\n    });\n\n  const downloadMSSQL = () => {\n    var blob = new Blob([formatedSQL], { type: \"text/plain;charset=utf-8\" });\n    FileSaver.saveAs(blob, `${dbName}.sql`);\n    props.update();\n  };\n\n  return (\n    <Popup modal closeOnDocumentClick open={props.isOpen} closeOnEscape>\n      <div className=\"sql-result-dialog\">\n        <input\n          style={{ marginRight: \"10px\" }}\n          type=\"text\"\n          onChange={event => setDbName(event.target.value)}\n          value={dbName}\n        />\n        <button onClick={() => props.generateScript(dbName)}>Generate</button>\n        <textarea\n          style={{ marginTop: \"5px\" }}\n          readOnly={true}\n          value={formatedSQL}\n          contentEditable={false}\n        ></textarea>\n        <button style={{ marginRight: \"10px\" }} onClick={downloadMSSQL}>\n          Download MSSQL\n        </button>\n      </div>\n    </Popup>\n  );\n};\n","import { ResultPopup } from \"../components/popups/ResultPopup/ResultPopup\";\nimport React, { useState } from \"react\";\nimport axios from \"axios\";\n\nclass Props {\n  isOpen: boolean;\n  serializeDiagram: any;\n  update: () => void;\n}\n\nexport const GenerationHandler = (props: Props) => {\n  const [sqlString, setSqlString] = useState(\"\");\n\n  const generateScript = async (name: string) => {\n    console.log(props.serializeDiagram)\n    let diagram = JSON.stringify(props.serializeDiagram, null, 2);\n    let response = await axios.post(\"http://localhost:5000/api/setjob\", {\n      SerializedModel: diagram,\n      DatabaseName: name\n    });\n\n    if (response.status === 200) {\n      setSqlString(response.data);\n    } else {\n      console.log(\"there was an error while processing your request\");\n    }\n  };\n\n  return (\n    <ResultPopup\n      update={props.update}\n      mssqlString={sqlString}\n      generateScript={name => generateScript(name)}\n      isOpen={props.isOpen}\n    />\n  );\n};\n","import \"./RelationPopup.scss\";\nimport React, { useState } from \"react\";\nimport Popup from \"reactjs-popup\";\nimport { Link } from \"../../../infrastructure/models/Link\";\nimport { Label } from \"../../../infrastructure/models/Label\";\nimport { Node } from \"../../../infrastructure/models/Node\";\nimport { DiagramModel } from \"storm-react-diagrams\";\n\nclass Props {\n  isOpen: boolean;\n  link: Link;\n  update: () => void;\n  diagramModel: DiagramModel;\n}\nexport const RelationPopup = (props: Props) => {\n  const [left, setLeft] = useState(\"0, N\");\n\n  const [right, setRight] = useState(\"0, N\");\n\n  const [relationName, setRelationName] = useState(\"relation name\");\n\n  let update = () => {\n    let labels = props.link.labels as Label[];\n    labels[0].label = left;\n    labels[2].label = right;\n    labels[1].label = relationName;\n    let points = props.link.points;\n    for (let index = 1; index < points.length - 1; index++) {\n      const element = points[index];\n      element.remove();\n    }\n    props.update();\n  };\n\n  const sourcePort =\n    props.link &&\n    props.link.sourcePort &&\n    (props.link.sourcePort.parent as Node);\n  const targetPort =\n    props.link &&\n    props.link.targetPort &&\n    (props.link.targetPort.parent as Node);\n\n  const remove = () => {\n    props.diagramModel.removeLink(props.link);\n    props.update();\n  };\n\n  const options = (\n    <>\n      <option value=\"1, N\">1, N</option>\n      <option value=\"0, N\">0, N</option>\n      <option value=\"0, 1\">0, 1</option>\n      <option value=\"1, 1\">1, 1</option>\n      <option value=\"N, N\">N, N</option>\n    </>\n  );\n\n  const renderOptionPicker = (side: string) => {\n    return (\n      <div className=\"grid-item\">\n        <select\n          className=\"darkSelect\"\n          onChange={event =>\n            side === \"left\"\n              ? setLeft(event.target.value)\n              : setRight(event.target.value)\n          }\n          value={side === \"left\" ? left : right}\n        >\n          {options}\n        </select>\n      </div>\n    );\n  };\n\n  return (\n    <Popup modal closeOnDocumentClick open={props.isOpen} closeOnEscape>\n      <div className=\"SQLResultDialog\">\n        <div className=\"grid-container\">\n          <div className=\"grid-item\">\n            <p>{sourcePort && sourcePort.name}</p>\n          </div>\n          <div className=\"grid-item\">\n            <input\n              className=\"darkInput\"\n              type=\"text\"\n              defaultValue={relationName}\n              onChange={event => setRelationName(event.target.value)}\n            ></input>\n          </div>\n          <div className=\"grid-item\">\n            <p>{targetPort && targetPort.name}</p>\n          </div>\n          {renderOptionPicker(\"left\")}\n          <div className=\"grid-item\">\n            <button onClick={update}>SAVE</button>\n          </div>\n          {renderOptionPicker(\"right\")}\n          <div className=\"grid-item\" />\n          <div className=\"grid-item\">\n            <button onClick={remove}>Remove</button>\n          </div>\n          <div className=\"grid-item\" />\n        </div>\n      </div>\n    </Popup>\n  );\n};\n","import \"./LoadFilePopup.scss\";\nimport React, { useState } from \"react\";\nimport Popup from \"reactjs-popup\";\n\nclass Props {\n  isOpen: boolean;\n  loadDiagram?: (name: string) => void;\n  update: () => void;\n}\n\nexport const LoadFilePopup = (props: Props) => {\n  let fileReader: FileReader;\n\n  const [fileContent, setFileContent] = useState(\"\");\n\n  const handleFileRead = (e: any) => {\n    const content = fileReader.result;\n    setFileContent(content as string);\n  };\n\n  const handleFileChosen = (name: any) => {\n    fileReader = new FileReader();\n    fileReader.onloadend = handleFileRead;\n    fileReader.readAsText(name);\n  };\n\n  return (\n    <Popup\n      modal\n      closeOnDocumentClick\n      open={props.isOpen}\n      closeOnEscape\n      onClose={() => props.update()}\n    >\n      <div className=\"sql-result-dialog\">\n        <input\n          type=\"file\"\n          onChange={event => handleFileChosen(event.target.files[0])}\n          accept=\".dbjson\"\n        />\n        <button onClick={() => props.loadDiagram(fileContent)}>Load</button>\n      </div>\n    </Popup>\n  );\n};\n","import { LoadFilePopup } from \"../components/popups/LoadFilePopup/LoadFilePopup\";\nimport React from \"react\";\nimport { Application } from \"../components/dragAndDrop/Application\";\nimport { DiagramModel } from \"storm-react-diagrams\";\n\nclass Props {\n  isOpen: boolean;\n  app: Application;\n  update: () => void;\n}\n\nexport const LoadFileHandler = (props: Props) => {\n  const loadDiagram = (name: string) => {\n    let engine = props.app.getDiagramEngine();\n    let obj: ReturnType<DiagramModel[\"serialize\"]> = JSON.parse(name);\n    let model2 = new DiagramModel();\n    model2.deSerializeDiagram(obj, engine);\n    let newLinks: any[] = Object.keys(model2.links).map(x => {\n      return model2.links[x];\n    });\n\n    newLinks.forEach(link => {\n      link.labels.splice(0, 3);\n    });\n    engine.setDiagramModel(model2);\n    engine.repaintCanvas();\n    console.log(engine.diagramModel.serializeDiagram());\n    props.update();\n  };\n\n  return (\n    <LoadFilePopup\n      update={props.update}\n      loadDiagram={name => loadDiagram(name)}\n      isOpen={props.isOpen}\n    />\n  );\n};\n","import \"./SaveToFilePopup.scss\";\nimport React, { useState } from \"react\";\nimport Popup from \"reactjs-popup\";\nimport { DiagramModel } from \"storm-react-diagrams\";\nimport FileSaver from \"file-saver\";\n\nclass Props {\n  isOpen: boolean;\n  diagramModel: DiagramModel;\n  update: () => void;\n}\n\nexport const SaveToFilePopup = (props: Props) => {\n  const [fileName, setFileName] = useState(\"diagram\");\n\n  const download = () => {\n    const diagramJson = JSON.stringify(props.diagramModel.serializeDiagram());\n    let blob = new Blob([diagramJson], { type: \"text/plain;charset=utf-8\" });\n    FileSaver.saveAs(blob, `${fileName}.dbjson`);\n    props.update();\n  };\n\n  return (\n    <Popup\n      modal\n      closeOnDocumentClick\n      open={props.isOpen}\n      closeOnEscape\n      onClose={() => props.update()}\n    >\n      <div className=\"sql-result-dialog\">\n        <input\n          type=\"text\"\n          onChange={event => setFileName(event.target.value)}\n          value={fileName}\n        />\n        <button onClick={download}>save</button>\n      </div>\n    </Popup>\n  );\n};\n","import \"./SaveToJpegPopup.scss\";\nimport React, { useState } from \"react\";\nimport Popup from \"reactjs-popup\";\nimport { DiagramModel } from \"storm-react-diagrams\";\nimport domtoimage from \"dom-to-image\";\n\nclass Props {\n  isOpen: boolean;\n  diagramModel: DiagramModel;\n  update: () => void;\n}\n\nexport const SaveToJpegPopup = (props: Props) => {\n  const [fileName, setFileName] = useState(\"diagram\");\n\n  const download = () => {\n    domtoimage\n      .toJpeg(document.getElementById(\"diagram-layer\"), { quality: 0.95 })\n      .then((dataUrl: any) => {\n        let link = document.createElement(\"a\");\n        link.download = `${fileName}.jpeg`;\n        link.href = dataUrl;\n        link.click();\n        props.update();\n      });\n  };\n\n  return (\n    <Popup\n      modal\n      closeOnDocumentClick\n      open={props.isOpen}\n      closeOnEscape\n      onClose={() => props.update()}\n    >\n      <div className=\"sql-result-dialog\">\n        <input\n          type=\"text\"\n          onChange={event => setFileName(event.target.value)}\n          value={fileName}\n        />\n        <button onClick={download}>save</button>\n      </div>\n    </Popup>\n  );\n};\n","import * as React from \"react\";\n\nimport { DiagramWidget, PointModel } from \"storm-react-diagrams\";\nimport { TrayItemWidget } from \"./components/dragAndDrop/TrayItemWidget\";\nimport { TrayWidget } from \"./components/dragAndDrop/TrayWidget\";\nimport { Application } from \"./components/dragAndDrop/Application\";\nimport { Node } from \"./infrastructure/models/Node\";\nimport { Link } from \"./infrastructure/models/Link\";\nimport { PropertyType } from \"./infrastructure/models/PropertyType\";\nimport {\n  NodeProperties,\n  useForceUpdate\n} from \"./components/nodeProperties/NodeProperties\";\nimport { GenerationHandler } from \"./handlers/GenerationHandler\";\nimport { RelationPopup } from \"./components/popups/RealtionPopup/RelationPopup\";\nimport { LoadFileHandler } from \"./handlers/LoadFileHandler\";\nimport { SaveToFilePopup } from \"./components/popups/SaveToFilePopup/SaveToFilePopup\";\nimport { CSSProperties } from \"react\";\nimport { SaveToJpegPopup } from \"./components/popups/SaveToJpegPopup/SaveToJpegPopup\";\nimport _ from \"lodash\";\n\nrequire(\"storm-react-diagrams/dist/style.min.css\");\nrequire(\"react-bootstrap-table-next/dist/react-bootstrap-table2.min.css\");\n\ninterface Props {\n  app: Application;\n}\n\nexport const AppView = (props: Props) => {\n  const jpegFileTarget: React.RefObject<any> = null;\n\n  const [showDialog, setShowDialog] = React.useState(false);\n  const [showRelationDialog, setShowRelationDialog] = React.useState(false);\n  const [showLoadFileDialog, setShowLoadFileDialog] = React.useState(false);\n  const [showSaveFileDialog, setSaveFileDialog] = React.useState(false);\n  const [showSaveJPEGDialog, setSaveJPEGDialog] = React.useState(false);\n  const [showSaveOptions, setSaveOptions] = React.useState(false);\n\n  const [selectedNode, setSelectedNode] = React.useState(null);\n  const [selectedLink, setSelectedLink] = React.useState(null);\n\n  const forceUpdate = useForceUpdate();\n\n  React.useEffect(() => {\n    setSelectedNode(null);\n    setSelectedLink(null);\n  }, []);\n\n  const refreshPopups = () => {\n    setSelectedLink(null);\n    setSelectedNode(null);\n\n    setShowDialog(false);\n    setSaveFileDialog(false);\n    setSaveJPEGDialog(false);\n    setSaveOptions(false);\n    setShowLoadFileDialog(false);\n    setShowRelationDialog(false);\n  };\n\n  const containerStyles: CSSProperties = {\n    display: \"flex\",\n    justifyContent: \"space-between\",\n    borderColor: \"rgb(255,123,0)\"\n  };\n  const itemStyles: CSSProperties = {\n    display: \"inline-block\",\n    paddingTop: 3,\n    paddingRight: 5\n  };\n\n  return (\n    <div className=\"body\">\n      <div className=\"header\">\n        <div className=\"title\">DB Diagram Scripter</div>\n      </div>\n      <div className=\"content\" ref={jpegFileTarget}>\n        <TrayWidget>\n          <TrayItemWidget\n            model={{ type: \"table\" }}\n            name=\"Entity\"\n            color=\"rgb(0,192,255)\"\n          />\n          <TrayItemWidget\n            model={{ type: \"label\" }}\n            name=\"Label\"\n            color=\"rgb(192,255,0)\"\n          />\n\n          <div\n            style={{ borderColor: \"rgb(255,123,0)\", marginTop: \"100px\" }}\n            className=\"tray-item\"\n            onClick={() => {\n              setShowLoadFileDialog(true);\n              setSelectedNode(null);\n            }}\n          >\n            Load Diagram\n          </div>\n          <div\n            style={containerStyles}\n            className=\"tray-item\"\n            onClick={() => {\n              setSaveOptions(!showSaveOptions);\n              setSelectedNode(null);\n            }}\n          >\n            Save\n            <span\n              style={itemStyles}\n              className={`mi ${\n                !showSaveOptions ? \"mi-ArrowDown8\" : \"mi-ArrowUp8\"\n              }`}\n            />\n          </div>\n          {showSaveOptions && (\n            <div\n              style={{ borderColor: \"rgb(255,123,0)\" }}\n              className=\"tray-item\"\n              onClick={() => {\n                setSaveFileDialog(true);\n                setSelectedNode(null);\n              }}\n            >\n              File\n            </div>\n          )}\n          {showSaveOptions && (\n            <div\n              style={{ borderColor: \"rgb(255,123,0)\" }}\n              className=\"tray-item\"\n              onClick={() => {\n                setSaveJPEGDialog(true);\n                setSelectedNode(null);\n              }}\n            >\n              JPEG\n            </div>\n          )}\n          <div\n            style={{ borderColor: \"rgb(255,0,0)\", marginTop: \"100px\" }}\n            className=\"tray-item\"\n            onClick={() => {\n              setShowDialog(true);\n              setSelectedNode(null);\n            }}\n          >\n            Create DB Code\n          </div>\n        </TrayWidget>\n\n        <div\n          id=\"diagram-layer\"\n          className=\"diagram-layer\"\n          onDrop={event => {\n            event.preventDefault();\n            var data = JSON.parse(\n              event.dataTransfer.getData(\"storm-diagram-node\")\n            );\n            var nodesCount = _.keys(\n              props.app\n                .getDiagramEngine()\n                .getDiagramModel()\n                .getNodes()\n            ).length;\n\n            var node = null;\n            if (data.type === \"table\") {\n              node = new Node(\n                false,\n                `Entity${nodesCount + 1}`,\n                \"rgb(0,192,255)\"\n              );\n              node.addInPort(\n                false,\n                \"Id\",\n                true,\n                false,\n                false,\n                false,\n                false,\n                PropertyType.INT\n              );\n              node.addInPort(\n                true,\n                \"\",\n                false,\n                false,\n                false,\n                false,\n                false,\n                PropertyType.INT\n              );\n              node.addInPort(\n                true,\n                \"1\",\n                false,\n                false,\n                false,\n                false,\n                false,\n                PropertyType.INT\n              );\n\n              node.addListener({});\n            } else {\n              node = new Node(\n                true,\n                \"Label \",\n                \"rgb(192,255,0)\"\n              );\n            }\n\n            var points = props.app\n              .getDiagramEngine()\n              .getRelativeMousePoint(event);\n            node.x = points.x;\n            node.y = points.y;\n            props.app\n              .getDiagramEngine()\n              .getDiagramModel()\n              .addNode(node);\n\n            forceUpdate();\n          }}\n          onDragOver={event => {\n            event.preventDefault();\n          }}\n          onClick={event => {\n            event.preventDefault();\n            refreshPopups();\n          }}\n          onDoubleClick={event => {\n            event.preventDefault();\n            if (\n              props.app\n                .getDiagramEngine()\n                .getDiagramModel()\n                .getSelectedItems()[0] instanceof PointModel\n            ) {\n              setSelectedLink(\n                props.app\n                  .getDiagramEngine()\n                  .getDiagramModel()\n                  .getSelectedItems()[0].parent as Link\n              );\n              setShowRelationDialog(true);\n              setSelectedNode(null);\n            } else if (\n              props.app\n                .getDiagramEngine()\n                .getDiagramModel()\n                .getSelectedItems()[0] instanceof Node\n            ) {\n              refreshPopups();\n              setSelectedNode(\n                props.app\n                  .getDiagramEngine()\n                  .getDiagramModel()\n                  .getSelectedItems()[0] as Node\n              );\n            }\n          }}\n        >\n          <DiagramWidget\n            allowLooseLinks={true}\n            deleteKeys={[46]}\n            className=\"srd-demo-canvas\"\n            diagramEngine={props.app.getDiagramEngine()}\n          />\n        </div>\n        {selectedNode != null ? (\n          <NodeProperties\n            selectedLink={selectedLink}\n            selectedItem={selectedNode}\n            diagramEngine={props.app.getDiagramEngine()}\n          />\n        ) : null}\n        <GenerationHandler\n          update={refreshPopups}\n          isOpen={showDialog}\n          // serializeDiagram={props.app.getActiveDiagram().serializeDiagram()}\n          serializeDiagram={props.app.getDiagramEngine().diagramModel.serializeDiagram()}\n\n        />\n        <LoadFileHandler\n          update={refreshPopups}\n          isOpen={showLoadFileDialog}\n          app={props.app}\n        />\n        <SaveToFilePopup\n          update={refreshPopups}\n          diagramModel={props.app.getActiveDiagram()}\n          isOpen={showSaveFileDialog}\n        />\n        <SaveToJpegPopup\n          update={refreshPopups}\n          diagramModel={props.app.getActiveDiagram()}\n          isOpen={showSaveJPEGDialog}\n        />\n\n        <RelationPopup\n          diagramModel={props.app.getActiveDiagram()}\n          update={refreshPopups}\n          isOpen={showRelationDialog}\n          link={selectedLink}\n        />\n      </div>\n    </div>\n  );\n};\n","import * as React from \"react\";\nimport { Application } from \"./components/dragAndDrop/Application\";\nimport { AppView } from \"./AppView\";\nrequire(\"react-bootstrap-table-next/dist/react-bootstrap-table2.min.css\");\nrequire(\"storm-react-diagrams/dist/style.min.css\");\n\nexport const App = () => {\n  return <AppView app={new Application()} />;\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import \"./styles/index.scss\";\nimport \"./styles/App.scss\";\nimport \"./styles/dragAndDrop.scss\";\nimport \"./icons/micon/css/micon.min.css\";\nimport \"react-bootstrap-table-next/dist/react-bootstrap-table2.min.css\";\nimport { App } from \"./App\";\nimport * as ReactDOM from \"react-dom\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport * as React from \"react\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}