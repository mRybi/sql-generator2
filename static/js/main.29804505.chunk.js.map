{"version":3,"sources":["infrastructure/models/Label.ts","infrastructure/models/Link.ts","infrastructure/models/Port.ts","infrastructure/models/LogicLink.ts","infrastructure/models/LogicPort.ts","infrastructure/models/Node.ts","infrastructure/widgets/CustomLabelWidget.tsx","infrastructure/factories/CustomLabelFactory.ts","infrastructure/factories/CustomPortFactory.tsx","infrastructure/widgets/CustomPortLabelWidget.tsx","infrastructure/widgets/CustomNodeWidget.tsx","infrastructure/factories/CustomNodeFactory.tsx","infrastructure/widgets/CustomLinkLabelWidget.tsx","infrastructure/factories/CustomLinkLabelFactory.ts","infrastructure/widgets/PathFinding.ts","infrastructure/widgets/CustomLinkWidget.tsx","infrastructure/factories/CustomLinkFactory.tsx","infrastructure/models/PropertyType.ts","components/dragAndDrop/Application.ts","components/dragAndDrop/TrayItemWidget.tsx","components/dragAndDrop/TrayWidget.tsx","components/grid/Grid.tsx","components/grid/Row.tsx","components/grid/Col.tsx","components/propertyTable/PropertyTable.tsx","components/nodeProperties/NodeProperties.tsx","components/popups/ResultPopup/ResultPopup.tsx","handlers/GenerationHandler.tsx","components/popups/RealtionPopup/RelationPopup.tsx","components/popups/LoadFilePopup/LoadFilePopup.tsx","handlers/LoadFileHandler.tsx","components/popups/SaveToFilePopup/SaveToFilePopup.tsx","components/popups/SaveToJpegPopup/SaveToJpegPopup.tsx","AppView.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Label","_LabelModel","label","_this","Object","classCallCheck","this","console","log","possibleConstructorReturn","getPrototypeOf","call","isFirst","offsetY","inherits","createClass","key","value","ob","engine","get","prototype","_","LabelModel","Link","_LinkModel","type","arguments","length","undefined","width","color","curvyness","properties","addLabel","Node","relPorts","ports","values","map","a","propertyType","isPrimaryKey","isNotNull","isAutoincremented","isUnique","propertiesNode","labelOb","setLabel","iterateListeners","listener","event","widthChanged","objectSpread","colorChanged","LinkModel","Port","_PortModel","name","isNamePort","isForeignKey","id","fkPortId","in","links","isPartialKey","object","port","PortModel","LogicLink","labelF","labelS","LogicPort","thisParent","getParent","portNode","portNodePorts","getPorts","thisParentPorts","czyMaPortZPKjakoFk","keys","filter","czyMaPortZPKjakoFk2","pk","addInPort","_NodeModel","isLabel","logic","isNamedPort","isPK","isFK","isAuto","addPort","Toolkit","UID","portModel","NodeModel","CustomLabelWidget","_BaseWidget","props","state","react","assign","getProps","style","background","node","className","bem","BaseWidget","CustomLabelFactory","_AbstractNodeFactory","diagramEngine","React","initialConfig","AbstractNodeFactory","CustomPortFactory","_AbstractPortFactory","AbstractPortFactory","CustomPortLabelWidget","model","itemStyles","display","marginRight","react_default","createElement","main","setLocked","paddingLeft","paddingRight","fontWeight","justifyContent","CustomNodeWidget","CustomPortLabelWidget_CustomPortLabelWidget","portsJSX","generatePort","bind","namedPort","p","notNamedPort","wordBreak","maxWidth","marginLeft","CustomNodeFactory","CustomLinkLabelWidget","CustomLinkLabelFactory","_AbstractLabelFactory","AbstractLabelFactory","pathFinderInstance","PF","heuristic","manhattan","diagonalMovement","Never","PathFinding","instance","from","to","matrix","getCanvasMatrix","grid","findPath","translateRoutingX","Math","floor","x","translateRoutingY","y","path","startIndex","findIndex","point","endIndex","slice","reverse","pathToStart","pathToEnd","start","end","routingMatrix","dynamicPath","pathCoords","concat","coords","compressPath","CustomLinkWidget","refLabels","refPaths","pathFinding","addPointToLink","index","shiftKey","isModelLocked","link","points","getMaxNumberPointsPerLink","PointModel","getRelativeMousePoint","setSelected","forceUpdate","addPoint","pointAdded","findPathAndRelativePositionToRenderLabel","lengths","getTotalLength","labelPosition","reduce","previousValue","currentValue","labels","pathIndex","position","calculateLabelPosition","_this$findPathAndRela","labelDimensions","offsetWidth","offsetHeight","pathCentre","getPointAtLength","labelCoordinates","offsetX","setAttribute","selected","isSmartRoutingEnabled","_this2","window","requestAnimationFrame","calculateAllLabelPosition","pointIndex","_this3","cx","cy","r","isSelected","onMouseLeave","setState","onMouseEnter","data-id","data-linkid","opacity","_this4","canvas","height","ref","getFactoryForLabel","generateReactWidget","extraProps","_this5","Bottom","getFactoryForLink","generateLinkSegment","push","Top","strokeLinecap","getID","strokeOpacity","strokeWidth","onContextMenu","preventDefault","remove","_this$props","sourcePort","targetPort","_this6","nodesRendered","paths","isSmartRoutingApplicable","directPathCoords","calculateDirectPath","getRoutingMatrix","smartLink","calculateLinkStartEndCoords","simplifiedPath","calculateDynamicPath","generateLink","generateDynamicPath","onMouseDown","abs","pointLeft","pointRight","generateCurvePath","generatePoint","_loop","j","generateLinePath","data-point","i","labelModel","generateLabel","defaultProps","smooth","PropertyType","CustomLinkFactory","_AbstractLinkFactory","widget","stroke","d","AbstractLinkFactory","Application","activeModel","logicModel","SRD","registerNodeFactory","registerLinkFactory","registerLabelFactory","registerPortFactory","installDefaultFactories","newModel","setDiagramModel","getDiagramModel","concNodes","getNodes","k","clone","nodePorts","logicPort","addNode","concLinks","getLinks","logicNodes","sourceNode","sourceNodeId","targetNode","targetNodeId","sourceLabel","targetLabel","includes","relNode","setPosition","sourceP","targetP","setSourcePort","setTargetPort","node2","sourceP2","targetP2","link2","addAll","addLink","activeModelCopy","nodes","TrayItemWidget","_React$Component","borderColor","draggable","onDragStart","dataTransfer","setData","JSON","stringify","TrayWidget","children","Grid","buildClassNameString","Row","flex","Col","onDoubleClick","size","config","pull","offset","order","hidden","buildGridColConfigClassNames","sm","md","lg","xl","xxl","xxxl","PropertyTable","_React$useState3","useState","_React$useState4","slicedToArray","updatedItem","setUpdatedItem","_React$useState","_React$useState2","setValue","useForceUpdate","useMemo","selectedItem","handleChangePK","row","persist","getPortFromID","clearPartialKeys","columns","dataField","text","formatter","cellContent","defaultValue","onChange","target","handleChangePortLabel","list","handleChangepPropType","obj","checked","handleChangeFK","handleChangePartialKey","disabled","handleChangeNull","handleChangeAutoInc","handleChangeUnique","onClick","entries","constructor","forEach","removeLink","removePort","portsTable","cols","find","col","isLogic","c","lib_default","keyField","data","relView","bordered","newPortNumber","INT","NodeProperties","_React$useState5","_React$useState6","defaultName","setDefaultName","_React$useState7","_React$useState8","setName","_React$useState9","_React$useState10","showInput","setShowInput","handleNameChange","allNodes","diagramModel","toLowerCase","trim","Grid_Grid","Row_Row","Col_Col","PropertyTable_PropertyTable","ResultPopup","_useState","_useState2","dbName","setDbName","_useState3","_useState4","mySQLView","setmySQLView","formatedMSSQL","mssqlString","sqlFormatter","format","language","indent","formatedMySQL","mysqlString","reactjs_popup_es","modal","closeOnDocumentClick","open","isOpen","closeOnEscape","generateScript","marginTop","readOnly","contentEditable","blob","Blob","FileSaver","saveAs","update","GenerationHandler","sqlString","setSqlString","setMySqlString","useEffect","_ref","asyncToGenerator","regenerator_default","mark","_callee","serDiagram","diagram","response","responseMy","wrap","_context","prev","next","serializeDiagram","axios","post","SerializedModel","DatabaseName","RelationType","isUml","DiagramType","sent","status","stop","_x","apply","ResultPopup_ResultPopup_ResultPopup","RelationPopup","left","setLeft","right","setRight","_useState5","_useState6","relationName","setRelationName","leftLabel","relLabel","rightLabel","parent","options","Fragment","renderOptionPicker","side","margin","LoadFilePopup","fileReader","fileContent","setFileContent","handleFileRead","e","content","result","onClose","files","FileReader","onloadend","readAsText","accept","loadDiagram","LoadFileHandler","LoadFilePopup_LoadFilePopup_LoadFilePopup","app","getDiagramEngine","parse","setIsUml","setIsLogic","model2","DiagramModel","deSerializeDiagram","splice","loadLogicModel","loadConceptualModel","repaintCanvas","error","SaveToFilePopup","fileName","setFileName","diagramJson","SaveToJpegPopup","domtoimage","toJpeg","document","getElementById","quality","then","dataUrl","download","href","click","require","AppView","diagramDiv","showDialog","setShowDialog","showRelationDialog","setShowRelationDialog","showLoadFileDialog","setShowLoadFileDialog","showSaveFileDialog","setSaveFileDialog","showSaveJPEGDialog","setSaveJPEGDialog","_React$useState11","_React$useState12","showSaveOptions","setSaveOptions","_React$useState13","_React$useState14","selectedNode","setSelectedNode","_React$useState15","_React$useState16","selectedLink","setSelectedLink","_React$useState17","_React$useState18","_React$useState19","_React$useState20","isLogicModel","setIsLogicModel","changeRelation","temp","substring","temp2","refreshPopups","TrayWidget_TrayWidget","TrayItemWidget_TrayItemWidget","setConceptualModel","paddingTop","setLogicModel","onDrop","getData","names","nodesCount","newNodeName","addListener","onDragOver","ctrlKey","getSelectedItems","pointToRemove","pointLink","removePoint","allowLooseLinks","deleteKeys","NodeProperties_NodeProperties","GenerationHandler_GenerationHandler","LoadFileHandler_LoadFileHandler","SaveToFilePopup_SaveToFilePopup_SaveToFilePopup","SaveToJpegPopup_SaveToJpegPopup_SaveToJpegPopup","getActiveDiagram","RelationPopup_RelationPopup","App","AppView_AppView","Boolean","location","hostname","match","ReactDOM","App_App","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.29804505.chunk.js","sourcesContent":["import * as _ from \"lodash\";\nimport { LabelModel, DiagramEngine } from \"storm-react-diagrams\";\n\nexport class Label extends LabelModel {\n  label: string;\n  isFirst: boolean;\n\n  constructor(label: string) {\n    console.log('ctor label')\n    super(\"custom\");\n    this.label = label;\n    this.offsetY = -23;\n  }\n\n  setLabel(label: string) {\n    this.label = label;\n  }\n\n  deSerialize(ob: any, engine: DiagramEngine) {\n    super.deSerialize(ob, engine);\n    this.label = ob.label;\n  }\n\n  serialize() {\n    return _.merge(super.serialize(), {\n      label: this.label\n    });\n  }\n}\n","import * as _ from \"lodash\";\nimport {\n  LinkModelListener,\n  BaseEvent,\n  LinkModel,\n  DefaultLinkModel,\n  DiagramEngine,\n  LabelModel,\n  PortModel\n} from \"storm-react-diagrams\";\nimport { Label } from \"./Label\";\nimport { Node } from \"./Node\";\nimport { PropertyType } from \"./PropertyType\";\n\nexport interface DefaultLinkModelListener extends LinkModelListener {\n  colorChanged?(\n    event: BaseEvent<DefaultLinkModel> & { color: null | string }\n  ): void;\n\n  widthChanged?(\n    event: BaseEvent<DefaultLinkModel> & { width: 0 | number }\n  ): void;\n}\nclass RelationProperties {\n  label: string;\n  isPrimaryKey: boolean;\n  isAutoincremented: boolean;\n  isNotNull: boolean;\n  isUnique: boolean;\n  propertyType: PropertyType\n}\nexport class Link extends LinkModel<DefaultLinkModelListener> {\n  width: number;\n  color: string;\n  curvyness: number;\n  properties: Node;\n\n  constructor(type: string = \"custom\") {\n    super(type);\n    this.color = \"rgba(255,255,255,0.5)\";\n    this.width = 3;\n    this.curvyness = 0;\n    this.addLabel(\"0,N\");\n    this.addLabel(\"relation name\");\n    this.addLabel(\"0,N\");\n    this.properties = new Node(false, 'relNode')\n    \n  }\n\n \n  serialize() {\n    let relPorts = this.properties && this.properties.ports && Object.values(this.properties.ports);\n    let properties = relPorts && relPorts.map(a => {\n      return { label: a.label, \n        propertyType: a.propertyType, \n        isPrimaryKey: a.isPrimaryKey ,\n        isNotNull: a.isNotNull,\n        isAutoincremented: a.isAutoincremented,\n        isUnique: a.isUnique \n      }\n    })\n\n    return _.merge(super.serialize(), {\n      width: this.width,\n      color: this.color,\n      curvyness: this.curvyness,\n      properties\n    });\n  }\n\n  deSerialize(ob: any, engine: DiagramEngine) {\n    let propertiesNode = new Node(false, 'relNode');\n    propertiesNode.ports = ob.properties.map((a: RelationProperties) => {\n      return { label: a.label, \n        propertyType: a.propertyType, \n        isPrimaryKey: a.isPrimaryKey ,\n        isNotNull: a.isNotNull,\n        isAutoincremented: a.isAutoincremented,\n        isUnique: a.isUnique \n      }\n    })\n    console.log('obj', ob.properties)\n    super.deSerialize(ob, engine);\n    this.color = ob.color;\n    this.width = ob.width;\n    this.curvyness = ob.curvyness;\n    this.properties = propertiesNode //ob.properties;\n  }\n\n  addLabel(label: LabelModel | string) {\n    if (label instanceof LabelModel) {\n      return super.addLabel(label);\n    }\n    let labelOb = new Label(\"custom\");\n    labelOb.setLabel(label);\n    return super.addLabel(labelOb);\n  }\n\n  setWidth(width: number) {\n    this.width = width;\n    this.iterateListeners(\n      (listener: DefaultLinkModelListener, event: BaseEvent) => {\n        if (listener.widthChanged) {\n          listener.widthChanged({ ...event, width: width });\n        }\n      }\n    );\n  }\n\n  setColor(color: string) {\n    this.color = color;\n    this.iterateListeners(\n      (listener: DefaultLinkModelListener, event: BaseEvent) => {\n        if (listener.colorChanged) {\n          listener.colorChanged({ ...event, color: color });\n        }\n      }\n    );\n  }\n}\n","import * as _ from \"lodash\";\nimport { Link } from \"./Link\";\nimport { PortModel, DiagramEngine } from \"storm-react-diagrams\";\n\nexport class Port extends PortModel {\n  in: boolean;\n  isNamePort: boolean;\n  label: string;\n  links: { [id: string]: Link };\n  isPrimaryKey: boolean;\n  isPartialKey: boolean;\n  isForeignKey: boolean;\n  isAutoincremented: boolean;\n  isNotNull: boolean;\n  isUnique: boolean;\n  propertyType: string;// PropertyType;\n  fkPortId: string;\n\n  constructor(\n    name: string,\n    isNamePort: boolean,\n    isPrimaryKey?: boolean,\n    isForeignKey?: boolean,\n    isNotNull?: boolean,\n    isAutoincremented?: boolean,\n    isUnique?: boolean,\n    propertyType?:  string, //PropertyType,\n    id?: string,\n    fkPortId?: string\n  ) {\n    super(name, \"custom\", id);\n    this.label = name;\n    this.isNamePort = isNamePort;\n    this.links = {};\n\n    this.isPrimaryKey = isPrimaryKey;\n    this.isForeignKey = isForeignKey;\n    this.isPartialKey = false;\n\n    this.isNotNull = isNotNull;\n    this.isUnique = isUnique;\n    this.isAutoincremented = isAutoincremented;\n\n    this.propertyType = propertyType;\n    this.fkPortId = fkPortId;\n  }\n\n  deSerialize(object: any, engine: DiagramEngine) {\n    super.deSerialize(object, engine);\n    this.label = object.label;\n    this.isNamePort = object.isNamePort;\n\n    this.isPrimaryKey = object.isPrimaryKey;\n    this.isPartialKey = object.isPartialKey;\n\n    this.isForeignKey = object.isForeignKey;\n    this.isNotNull = object.isNotNull;\n    this.isUnique = object.isUnique;\n    this.isAutoincremented = object.isAutoincremented;\n    this.propertyType = object.propertyType;\n    this.fkPortId = object.fkPortId;\n  }\n\n  serialize() {\n    return _.merge(super.serialize(), {\n      label: this.label,\n      links: this.links,\n      isNamePort: this.isNamePort,\n      isPrimaryKey: this.isPrimaryKey,\n      isPartialKey: this.isPartialKey,\n\n      isForeignKey: this.isForeignKey,\n      isNotNull: this.isNotNull,\n      isUnique: this.isUnique,\n      isAutoincremented: this.isAutoincremented,\n      propertyType: this.propertyType,\n      fkPortId: this.fkPortId\n    });\n  }\n\n  canLinkToPort(port: Port): boolean {\n    return true;\n  }\n\n  createLinkModel(): Link {\n    return new Link(\"custom\");\n  }\n}\n","import * as _ from \"lodash\";\nimport {\n  LinkModelListener,\n  BaseEvent,\n  LinkModel,\n  DefaultLinkModel,\n  DiagramEngine,\n  LabelModel,\n  PortModel\n} from \"storm-react-diagrams\";\nimport { Label } from \"./Label\";\nimport { Node } from \"./Node\";\nimport { PropertyType } from \"./PropertyType\";\n\nexport interface DefaultLinkModelListener extends LinkModelListener {\n  colorChanged?(\n    event: BaseEvent<DefaultLinkModel> & { color: null | string }\n  ): void;\n\n  widthChanged?(\n    event: BaseEvent<DefaultLinkModel> & { width: 0 | number }\n  ): void;\n}\nclass RelationProperties {\n  label: string;\n  isPrimaryKey: boolean;\n  isAutoincremented: boolean;\n  isNotNull: boolean;\n  isUnique: boolean;\n  propertyType: PropertyType\n}\nexport class LogicLink extends LinkModel<DefaultLinkModelListener> {\n  width: number;\n  color: string;\n  curvyness: number;\n  properties: Node;\n\n  constructor(type: string = \"custom\", labelF: string, labelS: string) {\n    super(type);\n    this.color = \"rgba(255,255,255,0.5)\";\n    this.width = 3;\n    this.curvyness = 0;\n\n    this.addLabel(labelF);\n    this.addLabel(labelS);\n\n    this.properties = new Node(false, 'relNode')\n  }\n\n  serialize() {\n    let relPorts = this.properties && this.properties.ports && Object.values(this.properties.ports);\n    let properties = relPorts && relPorts.map(a => {\n      return { label: a.label, \n        propertyType: a.propertyType, \n        isPrimaryKey: a.isPrimaryKey ,\n        isNotNull: a.isNotNull,\n        isAutoincremented: a.isAutoincremented,\n        isUnique: a.isUnique \n      }\n    })\n\n    return _.merge(super.serialize(), {\n      width: this.width,\n      color: this.color,\n      curvyness: this.curvyness,\n      properties\n    });\n  }\n\n  deSerialize(ob: any, engine: DiagramEngine) {\n    let propertiesNode = new Node(false, 'relNode');\n    propertiesNode.ports = ob.properties.map((a: RelationProperties) => {\n      return { label: a.label, \n        propertyType: a.propertyType, \n        isPrimaryKey: a.isPrimaryKey ,\n        isNotNull: a.isNotNull,\n        isAutoincremented: a.isAutoincremented,\n        isUnique: a.isUnique \n      }\n    })\n    console.log('obj', ob.properties)\n    super.deSerialize(ob, engine);\n    this.color = ob.color;\n    this.width = ob.width;\n    this.curvyness = ob.curvyness;\n    this.properties = propertiesNode //ob.properties;\n  }\n\n  addLabel(label: LabelModel | string) {\n    if (label instanceof LabelModel) {\n      return super.addLabel(label);\n    }\n    let labelOb = new Label(\"custom\");\n    labelOb.setLabel(label);\n    return super.addLabel(labelOb);\n  }\n\n\n  setWidth(width: number) {\n    this.width = width;\n    this.iterateListeners(\n      (listener: DefaultLinkModelListener, event: BaseEvent) => {\n        if (listener.widthChanged) {\n          listener.widthChanged({ ...event, width: width });\n        }\n      }\n    );\n  }\n\n  setColor(color: string) {\n    this.color = color;\n    this.iterateListeners(\n      (listener: DefaultLinkModelListener, event: BaseEvent) => {\n        if (listener.colorChanged) {\n          listener.colorChanged({ ...event, color: color });\n        }\n      }\n    );\n  }\n}\n","import * as _ from \"lodash\";\nimport { PortModel, DiagramEngine } from \"storm-react-diagrams\";\nimport { LogicLink } from \"./LogicLink\";\nimport { Node } from \"./Node\";\n\n\nexport class LogicPort extends PortModel {\n  in: boolean;\n  isNamePort: boolean;\n  label: string;\n  links: { [id: string]: LogicLink };\n  isPrimaryKey: boolean;\n  isPartialKey: boolean;\n  isForeignKey: boolean;\n  isAutoincremented: boolean;\n  isNotNull: boolean;\n  isUnique: boolean;\n  propertyType: string;// PropertyType;\n  fkPortId: string;\n\n  constructor(\n    name: string,\n    isNamePort: boolean,\n    isPrimaryKey?: boolean,\n    isForeignKey?: boolean,\n    isNotNull?: boolean,\n    isAutoincremented?: boolean,\n    isUnique?: boolean,\n    propertyType?:  string, //PropertyType,\n    id?: string,\n    fkPortId?: string\n  ) {\n    super(name, \"custom\", id);\n    this.label = name;\n    this.isNamePort = isNamePort;\n    this.links = {};\n\n    this.isPrimaryKey = isPrimaryKey;\n    this.isForeignKey = isForeignKey;\n    this.isPartialKey = false;\n\n    this.isNotNull = isNotNull;\n    this.isUnique = isUnique;\n    this.isAutoincremented = isAutoincremented;\n\n    this.propertyType = propertyType;\n    this.fkPortId = fkPortId;\n\n  }\n\n  deSerialize(object: any, engine: DiagramEngine) {\n    super.deSerialize(object, engine);\n    this.label = object.label;\n    this.isNamePort = object.isNamePort;\n\n    this.isPrimaryKey = object.isPrimaryKey;\n    this.isPartialKey = object.isPartialKey;\n\n    this.isForeignKey = object.isForeignKey;\n    this.isNotNull = object.isNotNull;\n    this.isUnique = object.isUnique;\n    this.isAutoincremented = object.isAutoincremented;\n    this.propertyType = object.propertyType;\n    this.fkPortId = object.fkPortId;\n\n  }\n\n  serialize() {\n    return _.merge(super.serialize(), {\n      label: this.label,\n      links: this.links,\n      isNamePort: this.isNamePort,\n      isPrimaryKey: this.isPrimaryKey,\n      isPartialKey: this.isPartialKey,\n\n      isForeignKey: this.isForeignKey,\n      isNotNull: this.isNotNull,\n      isUnique: this.isUnique,\n      isAutoincremented: this.isAutoincremented,\n      propertyType: this.propertyType,\n      fkPortId: this.fkPortId\n    });\n  }\n\n  canLinkToPort(port: LogicPort): boolean {\n    let thisParent = this.getParent() as Node;\n    let portNode = port.getParent() as Node;\n\n    let portNodePorts = portNode.getPorts() as {[s: string]: LogicPort};\n    let thisParentPorts = thisParent.getPorts() as {[s: string]: LogicPort};\n\n    let czyMaPortZPKjakoFk = Object.keys(thisParentPorts).filter(id => thisParentPorts[id].fkPortId === portNode.id)[0];\n    let czyMaPortZPKjakoFk2 = Object.keys(portNodePorts).filter(id => portNodePorts[id].fkPortId === thisParent.id)[0];\n    \n    let pk = Object.keys(thisParentPorts).filter(id => thisParentPorts[id].isPrimaryKey)[0];\n\n    if(!czyMaPortZPKjakoFk && !czyMaPortZPKjakoFk2) {\n      portNode.addInPort(true,false,thisParent.name + thisParentPorts[pk].name, false, true, false,false,true,'INT', thisParent.id)\n    }\n\n    return true;\n  }\n\n  createLinkModel(): LogicLink {\n    return new LogicLink(\"custom\", '1', 'N');\n  }\n}\n","import * as _ from \"lodash\";\nimport { NodeModel, Toolkit, DiagramEngine } from \"storm-react-diagrams\";\nimport { Port } from \"./Port\";\nimport { PropertyType } from \"./PropertyType\";\nimport { LogicPort } from \"./LogicPort\";\n\nexport class Node extends NodeModel {\n\tname: string;\n\tcolor: string;\n\tports: { [s: string]: Port };\n\tisLabel: boolean;\n\n\tconstructor(isLabel: boolean, name: string = \"Untitled\", color: string = \"rgb(0,192,255)\") {\n\t\tsuper(\"custom\");\n\t\tthis.name = name;\n\t\tthis.color = color;\n\t\tthis.ports = {};\n\t\tthis.isLabel = isLabel;\n\t}\n\n\taddInPort(logic: boolean, isNamedPort: boolean, label: string, isPK: boolean, isFK: boolean, isUnique: boolean, isAuto: boolean, isNotNull: boolean, propertyType: string, fkPortId?: string): Port {\n\t\tif(logic) {\n\t\t\treturn this.addPort(new LogicPort(label, isNamedPort, isPK, isFK, isNotNull, isAuto, isUnique, propertyType, Toolkit.UID(), fkPortId));\n\t\t} else {\n\t\t\treturn this.addPort(new Port(label, isNamedPort, isPK, isFK, isNotNull, isAuto, isUnique, propertyType, Toolkit.UID(), fkPortId));\n\t\t}\n\t}\n\n\taddOutPort(isNamedPort: boolean,label: string, isPK: boolean, isFK: boolean, isUnique: boolean, isAuto: boolean, isNotNull: boolean, propertyType: string): Port {\n\t\treturn this.addPort(new Port(label, isNamedPort, isPK, isFK, isNotNull, isAuto, isUnique, propertyType, Toolkit.UID()));\n\t}\n\n\tdeSerialize(object: any, engine: DiagramEngine) {\n\t\tsuper.deSerialize(object, engine);\n\t\tthis.name = object.name;\n\t\tthis.color = object.color;\n\t\tthis.isLabel = object.isLabel;\n\t}\n\n\tserialize() {\n\t\treturn _.merge(super.serialize(), {\n\t\t\tname: this.name,\n\t\t\tcolor: this.color,\n\t\t\tisLabel: this.isLabel\n\t\t});\n\t}\n\n\tgetInPorts(): Port[] {\n\t\treturn _.filter(this.ports, portModel => {\n\t\t\treturn portModel.in;\n\t\t});\n\t}\n\n\tgetOutPorts(): Port[] {\n\t\treturn _.filter(this.ports, portModel => {\n\t\t\treturn !portModel.in;\n\t\t});\n\t}\n\n\n}","import {\n  BaseWidgetProps,\n  DiagramEngine,\n  BaseWidget,\n  DefaultPortLabel\n} from \"storm-react-diagrams\";\nimport { Node } from \"../models/Node\";\nimport * as React from \"react\";\n\nexport interface NodeProps extends BaseWidgetProps {\n  node: Node;\n  diagramEngine: DiagramEngine;\n}\n\nexport interface DefaultNodeState {}\n\nexport class CustomLabelWidget extends BaseWidget<NodeProps, DefaultNodeState> {\n  constructor(props: NodeProps) {\n    super(\"srd-default-node\", props);\n    this.state = {};\n  }\n\n  render() {\n    return (\n      <div {...this.getProps()} style={{ background: this.props.node.color }}>\n        <div className={this.bem(\"__title\")}>\n          <div className={this.bem(\"__name\")}>{this.props.node.name}</div>\n        </div>\n      </div>\n    );\n  }\n}\n","import { Node } from \"../models/Node\";\nimport * as React from \"react\";\nimport { CustomLabelWidget } from \"../widgets/CustomLabelWidget\";\nimport { AbstractNodeFactory, DiagramEngine } from \"storm-react-diagrams\";\n\nexport class CustomLabelFactory extends AbstractNodeFactory<Node> {\n  constructor() {\n    super(\"label\");\n  }\n\n  generateReactWidget(diagramEngine: DiagramEngine, node: Node): JSX.Element {\n    return React.createElement(CustomLabelWidget, {\n      node: node,\n      diagramEngine: diagramEngine\n    });\n  }\n\n  getNewInstance(initialConfig?: any): Node {\n    return new Node(false, null, \"label\");\n  }\n}\n","import { AbstractPortFactory } from \"storm-react-diagrams\";\nimport { Port } from \"../models/Port\";\n\nexport class CustomPortFactory extends AbstractPortFactory<Port> {\n  constructor() {\n    super(\"custom\");\n  }\n\n  getNewInstance(initialConfig?: any): Port {\n    return new Port(\"custom\", true, false);\n  }\n}\n","import { Port } from \"../models/Port\";\nimport { BaseWidgetProps, BaseWidget, PortWidget } from \"storm-react-diagrams\";\nimport React, { CSSProperties } from \"react\";\n\nexport interface DefaultPortLabelProps extends BaseWidgetProps {\n  model: Port;\n}\n\nexport interface DefaultPortLabelState {}\n\nexport class CustomPortLabelWidget extends BaseWidget<\n  DefaultPortLabelProps,\n  DefaultPortLabelState\n> {\n  constructor(props: DefaultPortLabelProps) {\n    super(\"custom\", props);\n  }\n\n  getClassName() {\n    return (\n      super.getClassName() +\n      (this.props.model.in ? this.bem(\"--in\") : this.bem(\"--in\"))\n    );\n  }\n\n  render() {\n    let port: JSX.Element;\n    const style: CSSProperties = {\n      paddingLeft: 5,\n      paddingRight: 5,\n      color: \"black\",\n      fontWeight: 800\n\t};\n\t\n    const containerStyles: CSSProperties = {\n      display: \"flex\",\n      justifyContent: \"flex-end\"\n\t};\n\t\n    const itemStyles: CSSProperties = {\n      display: \"inline-block\",\n      marginRight: \"5px\"\n    };\n\n    const portStyles: CSSProperties = {\n      display: \"none\"\n    };\n\n    const namedPortStyles: CSSProperties = {\n      marginRight: \"5px\"\n    };\n\n    if (!this.props.model.isNamePort) {\n      this.props.model.setLocked();\n      port = (\n        <PortWidget\n          node={this.props.model.getParent()}\n          name={this.props.model.name}\n        />\n      );\n    } else {\n      port = (\n        <PortWidget\n          node={this.props.model.getParent()}\n          name={this.props.model.name}\n        />\n      );\n    }\n\n    const label: JSX.Element = (\n      <div className=\"name\">\n        <div>\n          {this.props.model.label}{\" \"}\n          {this.props.model.propertyType !== undefined\n            ? this.props.model.propertyType\n            : null}\n        </div>\n      </div>\n    );\n    const isPrimaryKey = this.props.model.isPrimaryKey ? (\n      <span className=\"mi mi-Permissions\" style={style}></span>\n    ) : null;\n\n    if (this.props.model.isNamePort) {\n      return <div style={namedPortStyles}>{port}</div>;\n    } else {\n      return (\n        <div style={containerStyles} {...this.getProps()}>\n          <div style={itemStyles}>{isPrimaryKey}</div>\n          <div style={itemStyles}>{label}</div>\n          <div style={portStyles}>{port}</div>\n        </div>\n      );\n    }\n  }\n}\n","import { CustomPortLabelWidget } from \"./CustomPortLabelWidget\";\nimport React, { CSSProperties } from \"react\";\nimport {\n  BaseWidget,\n  DiagramEngine,\n  BaseWidgetProps\n} from \"storm-react-diagrams\";\nimport { Port } from \"../models/Port\";\nimport { Node } from \"../models/Node\";\nimport * as _ from \"lodash\";\n\nexport interface DefaultNodeProps extends BaseWidgetProps {\n  node: Node;\n  diagramEngine: DiagramEngine;\n}\n\nexport interface DefaultNodeState {}\n\nexport class CustomNodeWidget extends BaseWidget<\n  DefaultNodeProps,\n  DefaultNodeState\n> {\n  constructor(props: DefaultNodeProps) {\n    super(\"srd-default-node\", props);\n    this.state = {};\n  }\n\n  generatePort(port: Port) {\n    return <CustomPortLabelWidget model={port} key={port.id} />;\n  }\n\n  render() {\n    const namedPortStyles: CSSProperties = {\n      marginLeft: \"5px\"\n    };\n\n    let ports = this.props.node.getPorts() as { [s: string]: Port };\n    let portsJSX = _.map(ports, this.generatePort.bind(this));\n    let namedPort = portsJSX.filter(p => p.props.model.isNamePort);\n    let notNamedPort = portsJSX.filter(p => !p.props.model.isNamePort);\n\n    return (\n      <div {...this.getProps()} style={{ background: this.props.node.color }}>\n        <div className={this.bem(this.props.node.isLabel ? \"\" : \"__title\")} style={{wordBreak: \"break-word\", maxWidth: '200px'}}>\n          {namedPort.length !== 0 && (\n            <div style={namedPortStyles}>\n              {this.generatePort(namedPort[1].props.model)}\n            </div>\n          )}\n          <div className={this.bem(\"__name\")}>{this.props.node.name}</div>\n          {namedPort.length !== 0 &&\n            this.generatePort(namedPort[0].props.model)}\n        </div>\n        <div className={this.bem(\"__ports\")}>\n          <div className={this.bem(\"__in\")}>{notNamedPort}</div>\n        </div>\n      </div>\n    );\n  }\n}\n","import { AbstractNodeFactory, DiagramEngine } from \"storm-react-diagrams\";\nimport React from \"react\";\nimport { CustomNodeWidget } from \"../widgets/CustomNodeWidget\";\nimport { Node } from \"../models/Node\";\n\nexport class CustomNodeFactory extends AbstractNodeFactory<Node> {\n  constructor() {\n    super(\"custom\");\n  }\n\n  generateReactWidget(diagramEngine: DiagramEngine, node: Node): JSX.Element {\n    return React.createElement(CustomNodeWidget, {\n      node: node,\n      diagramEngine: diagramEngine\n    });\n  }\n\n  getNewInstance(initialConfig?: any): Node {\n    return new Node(false, null, \"custom\");\n  }\n}\n","import * as React from \"react\";\nimport { BaseWidgetProps, BaseWidget } from \"storm-react-diagrams\";\nimport { Label } from \"../models/Label\";\n\nexport interface DefaultLabelWidgetProps extends BaseWidgetProps {\n  model: Label;\n}\n\nexport class CustomLinkLabelWidget extends BaseWidget<DefaultLabelWidgetProps> {\n  constructor(props: DefaultLabelWidgetProps) {\n    super(\"srd-default-label\", props);\n  }\n\n  render() {\n    return <div {...this.getProps()}>{this.props.model.label}</div>;\n  }\n}\n","import * as React from \"react\";\nimport { AbstractLabelFactory, DiagramEngine } from \"storm-react-diagrams\";\nimport { Label } from \"../models/Label\";\nimport { CustomLinkLabelWidget } from \"../widgets/CustomLinkLabelWidget\";\n\nexport class CustomLinkLabelFactory extends AbstractLabelFactory<Label> {\n  constructor() {\n    super(\"custom\");\n  }\n\n  generateReactWidget(diagramEngine: DiagramEngine, label: Label): JSX.Element {\n    return React.createElement(CustomLinkLabelWidget, {\n      model: label\n    });\n  }\n\n  getNewInstance(initialConfig?: any): Label {\n    return new Label(\"\");\n  }\n}\n","import * as PF from \"pathfinding\";\nimport { DiagramEngine } from \"storm-react-diagrams\";\n\n/*\nit can be very expensive to calculate routes when every single pixel on the canvas\nis individually represented. Using the factor below, we combine values in order\nto achieve the best trade-off between accuracy and performance.\n*/\nexport const ROUTING_SCALING_FACTOR = 5;\n\nconst pathFinderInstance = PF.JumpPointFinder({\theuristic: PF.Heuristic.manhattan,\n\tdiagonalMovement: PF.DiagonalMovement.Never});\n\nexport default class PathFinding {\n\tinstance: any;\n\tdiagramEngine: DiagramEngine;\n\n\tconstructor(diagramEngine: DiagramEngine) {\n\t\tthis.instance = pathFinderInstance;\n\t\tthis.diagramEngine = diagramEngine;\n\t}\n\n\t/**\n\t * Taking as argument a fully unblocked walking matrix, this method\n\t * finds a direct path from point A to B.\n\t */\n\tcalculateDirectPath(\n\t\tfrom: {\n\t\t\tx: number;\n\t\t\ty: number;\n\t\t},\n\t\tto: {\n\t\t\tx: number;\n\t\t\ty: number;\n\t\t}\n\t): number[][] {\n\t\tconst matrix = this.diagramEngine.getCanvasMatrix();\n\t\tconst grid = new PF.Grid(matrix);\n\n\t\treturn pathFinderInstance.findPath(\n\t\t\tthis.diagramEngine.translateRoutingX(Math.floor(from.x / ROUTING_SCALING_FACTOR)),\n\t\t\tthis.diagramEngine.translateRoutingY(Math.floor(from.y / ROUTING_SCALING_FACTOR)),\n\t\t\tthis.diagramEngine.translateRoutingX(Math.floor(to.x / ROUTING_SCALING_FACTOR)),\n\t\t\tthis.diagramEngine.translateRoutingY(Math.floor(to.y / ROUTING_SCALING_FACTOR)),\n\t\t\tgrid\n\t\t);\n\t}\n\n\t/**\n\t * Using @link{#calculateDirectPath}'s result as input, we here\n\t * determine the first walkable point found in the matrix that includes\n\t * blocked paths.\n\t */\n\tcalculateLinkStartEndCoords(\n\t\tmatrix: number[][],\n\t\tpath: number[][]\n\t): {\n\t\tstart: {\n\t\t\tx: number;\n\t\t\ty: number;\n\t\t};\n\t\tend: {\n\t\t\tx: number;\n\t\t\ty: number;\n\t\t};\n\t\tpathToStart: number[][];\n\t\tpathToEnd: number[][];\n\t} {\n\t\tconst startIndex = path.findIndex(point => matrix[point[1]][point[0]] === 0);\n\t\tconst endIndex =\n\t\t\tpath.length -\n\t\t\t1 -\n\t\t\tpath\n\t\t\t\t.slice()\n\t\t\t\t.reverse()\n\t\t\t\t.findIndex(point => matrix[point[1]][point[0]] === 0);\n\n\t\t// are we trying to create a path exclusively through blocked areas?\n\t\t// if so, let's fallback to the linear routing\n\t\tif (startIndex === -1 || endIndex === -1) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tconst pathToStart = path.slice(0, startIndex);\n\t\tconst pathToEnd = path.slice(endIndex);\n\n\t\treturn {\n\t\t\tstart: {\n\t\t\t\tx: path[startIndex][0],\n\t\t\t\ty: path[startIndex][1]\n\t\t\t},\n\t\t\tend: {\n\t\t\t\tx: path[endIndex][0],\n\t\t\t\ty: path[endIndex][1]\n\t\t\t},\n\t\t\tpathToStart,\n\t\t\tpathToEnd\n\t\t};\n\t}\n\n\t/**\n\t * Puts everything together: merges the paths from/to the centre of the ports,\n\t * with the path calculated around other elements.\n\t */\n\tcalculateDynamicPath(\n\t\troutingMatrix: number[][],\n\t\tstart: {\n\t\t\tx: number;\n\t\t\ty: number;\n\t\t},\n\t\tend: {\n\t\t\tx: number;\n\t\t\ty: number;\n\t\t},\n\t\tpathToStart: number[][],\n\t\tpathToEnd: number[][]\n\t) {\n\t\t// generate the path based on the matrix with obstacles\n\t\tconst grid = new PF.Grid(routingMatrix);\n\t\tconst dynamicPath = pathFinderInstance.findPath(start.x, start.y, end.x, end.y, grid);\n\n\t\t// aggregate everything to have the calculated path ready for rendering\n\t\tconst pathCoords = pathToStart\n\t\t\t.concat(dynamicPath, pathToEnd)\n\t\t\t.map(coords => [\n\t\t\t\tthis.diagramEngine.translateRoutingX(coords[0], true),\n\t\t\t\tthis.diagramEngine.translateRoutingY(coords[1], true)\n\t\t\t]);\n\t\treturn PF.Util.compressPath(pathCoords);\n\t}\n}\n","import * as React from \"react\";\nimport * as _ from \"lodash\";\nimport { DiagramEngine, BaseWidgetProps, BaseWidget, LabelModel, PointModel, DefaultLinkModel, DefaultLinkFactory, Toolkit } from \"storm-react-diagrams\";\nimport PathFinding from \"./PathFinding\";\nimport { Label } from \"../models/Label\";\n\nexport interface DefaultLinkProps extends BaseWidgetProps {\n\tcolor?: string;\n\twidth?: number;\n\tsmooth?: boolean;\n\tlink: DefaultLinkModel;\n\tdiagramEngine: DiagramEngine;\n\tpointAdded?: (point: PointModel, event: MouseEvent) => any;\n}\n\nexport interface DefaultLinkState {\n\tselected: boolean;\n}\n\nexport class CustomLinkWidget extends BaseWidget<DefaultLinkProps, DefaultLinkState> {\n\tpublic static defaultProps: DefaultLinkProps = {\n\t\tcolor: \"black\",\n\t\twidth: 3,\n\t\tlink: null,\n\t\tsmooth: false,\n\t\tdiagramEngine: null\n\t};\n\n\t// DOM references to the label and paths (if label is given), used to calculate dynamic positioning\n\trefLabels: { [id: string]: HTMLElement };\n\trefPaths: SVGPathElement[];\n\n\tpathFinding: PathFinding; // only set when smart routing is active\n\n\tconstructor(props: DefaultLinkProps) {\n\t\tsuper(\"srd-default-link\", props);\n\n\t\tthis.refLabels = {};\n\t\tthis.refPaths = [];\n\t\tthis.state = {\n\t\t\tselected: false\n\t\t};\n\n\t\tif (props.diagramEngine.isSmartRoutingEnabled()) {\n\t\t\tthis.pathFinding = new PathFinding(this.props.diagramEngine);\n\t\t}\n\t}\n\n\tcalculateAllLabelPosition() {\n\t\t_.forEach(this.props.link.labels, (label, index) => {\n\t\t\tthis.calculateLabelPosition(label, index + 1);\n\t\t});\n\t}\n\n\tcomponentDidUpdate() {\n\t\tif (this.props.link.labels.length > 0) {\n\t\t\twindow.requestAnimationFrame(this.calculateAllLabelPosition.bind(this));\n\t\t}\n\t}\n\n\tcomponentDidMount() {\n\t\tif (this.props.link.labels.length > 0) {\n\t\t\twindow.requestAnimationFrame(this.calculateAllLabelPosition.bind(this));\n\t\t}\n\t}\n\n\taddPointToLink = (event: MouseEvent, index: number): void => {\n\t\tif (\n\t\t\t!event.shiftKey &&\n\t\t\t!this.props.diagramEngine.isModelLocked(this.props.link) &&\n\t\t\tthis.props.link.points.length - 1 <= this.props.diagramEngine.getMaxNumberPointsPerLink()\n\t\t) {\n\t\t\tconst point = new PointModel(this.props.link, this.props.diagramEngine.getRelativeMousePoint(event));\n\t\t\tpoint.setSelected(true);\n\t\t\tthis.forceUpdate();\n\t\t\tthis.props.link.addPoint(point, index);\n\t\t\tthis.props.pointAdded(point, event);\n\t\t}\n\t};\n\n\tgeneratePoint(pointIndex: number): JSX.Element {\n\t\tlet x = this.props.link.points[pointIndex].x;\n\t\tlet y = this.props.link.points[pointIndex].y;\n\n\t\treturn (\n\t\t\t<g key={\"point-\" + this.props.link.points[pointIndex].id}>\n\t\t\t\t<circle\n\t\t\t\t\tcx={x}\n\t\t\t\t\tcy={y}\n\t\t\t\t\tr={5}\n\t\t\t\t\tclassName={\n\t\t\t\t\t\t\"point \" +\n\t\t\t\t\t\tthis.bem(\"__point\") +\n\t\t\t\t\t\t(this.props.link.points[pointIndex].isSelected() ? this.bem(\"--point-selected\") : \"\")\n\t\t\t\t\t}\n\t\t\t\t/>\n\t\t\t\t<circle\n\t\t\t\t\tonMouseLeave={() => {\n\t\t\t\t\t\tthis.setState({ selected: false });\n\t\t\t\t\t}}\n\t\t\t\t\tonMouseEnter={() => {\n\t\t\t\t\t\tthis.setState({ selected: true });\n\t\t\t\t\t}}\n\t\t\t\t\tdata-id={this.props.link.points[pointIndex].id}\n\t\t\t\t\tdata-linkid={this.props.link.id}\n\t\t\t\t\tcx={x}\n\t\t\t\t\tcy={y}\n\t\t\t\t\tr={15}\n\t\t\t\t\topacity={0}\n\t\t\t\t\tclassName={\"point \" + this.bem(\"__point\")}\n\t\t\t\t/>\n\t\t\t</g>\n\t\t);\n\t}\n\n\tgenerateLabel(label: LabelModel) {\n        const canvas = this.props.diagramEngine.canvas as HTMLElement;\n\n        return (\n\t\t\t<foreignObject\n\t\t\t\tkey={label.id}\n\t\t\t\tclassName={this.bem(\"__label\")}\n\t\t\t\twidth={canvas.offsetWidth}\n\t\t\t\theight={canvas.offsetHeight}\n\t\t\t>\n\t\t\t\t<div ref={ref => (this.refLabels[label.id] = ref)}>\n\t\t\t\t\t{this.props.diagramEngine\n\t\t\t\t\t\t.getFactoryForLabel(label)\n\t\t\t\t\t\t.generateReactWidget(this.props.diagramEngine, label)}\n\t\t\t\t</div>\n\t\t\t</foreignObject>\n\t\t);\n\t}\n\n\tgenerateLink(path: string, extraProps: any, id: string | number): JSX.Element {\n\t\tvar props = this.props;\n\n\t\tvar Bottom = React.cloneElement(\n\t\t\t(props.diagramEngine.getFactoryForLink(this.props.link) as DefaultLinkFactory).generateLinkSegment(\n\t\t\t\tthis.props.link,\n\t\t\t\tthis,\n\t\t\t\tthis.state.selected || this.props.link.isSelected(),\n\t\t\t\tpath\n\t\t\t),\n\t\t\t{\n\t\t\t\tref: (ref: any) => ref && this.refPaths.push(ref)\n\t\t\t}\n\t\t);\n\n\t\tvar Top = React.cloneElement(Bottom, {\n\t\t\t...extraProps,\n\t\t\tstrokeLinecap: \"round\",\n\t\t\tonMouseLeave: () => {\n\t\t\t\tthis.setState({ selected: false });\n\t\t\t},\n\t\t\tonMouseEnter: () => {\n\t\t\t\tthis.setState({ selected: true });\n\t\t\t},\n\t\t\tref: null,\n\t\t\t\"data-linkid\": this.props.link.getID(),\n\t\t\tstrokeOpacity: this.state.selected ? 0.1 : 0,\n\t\t\tstrokeWidth: 20,\n\t\t\tonContextMenu: () => {\n\t\t\t\tif (!this.props.diagramEngine.isModelLocked(this.props.link)) {\n\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\tthis.props.link.remove();\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\treturn (\n\t\t\t<g key={\"link-\" + id}>\n\t\t\t\t{Bottom}\n\t\t\t\t{Top}\n\t\t\t</g>\n\t\t);\n\t}\n\n\tfindPathAndRelativePositionToRenderLabel = (index: number): any => {\n\t\t// an array to hold all path lengths, making sure we hit the DOM only once to fetch this information\n\t\tconst lengths = this.refPaths.map(path => path.getTotalLength());\n\n\t\t// calculate the point where we want to display the label\n\t\tlet labelPosition =\n\t\t\tlengths.reduce((previousValue, currentValue) => previousValue + currentValue, 0) *\n\t\t\t(index / (this.props.link.labels.length + 1));\n\n\t\t// find the path where the label will be rendered and calculate the relative position\n\t\tlet pathIndex = 0;\n\t\twhile (pathIndex < this.refPaths.length) {\n\t\t\tif (labelPosition - lengths[pathIndex] < 0) {\n\t\t\t\treturn {\n\t\t\t\t\tpath: this.refPaths[pathIndex],\n\t\t\t\t\tposition: labelPosition\n\t\t\t\t};\n\t\t\t}\n\n\t\t\t// keep searching\n\t\t\tlabelPosition -= lengths[pathIndex];\n\t\t\tpathIndex++;\n\t\t}\n\t};\n\n\tcalculateLabelPosition = (label: LabelModel, index: number) => {\n\t\tif (!this.refLabels[label.id]) {\n\t\t\t// no label? nothing to do here\n\t\t\treturn;\n\t\t}\n\n        const { path, position } = this.findPathAndRelativePositionToRenderLabel(index);\n        \n\n\t\tconst labelDimensions = {\n\t\t\twidth: this.refLabels[label.id].offsetWidth,\n\t\t\theight: this.refLabels[label.id].offsetHeight\n\t\t};\n\n\t\tconst pathCentre = path.getPointAtLength(position);\n\n\t\tconst labelCoordinates = {\n\t\t\tx: pathCentre.x - labelDimensions.width / 2 + label.offsetX,\n\t\t\ty: pathCentre.y - labelDimensions.height / 2 + label.offsetY\n        };\n\n        \n\t\tthis.refLabels[label.id].setAttribute(\n\t\t\t\"style\",\n\t\t\t`transform: translate(${labelCoordinates.x}px, ${labelCoordinates.y}px);`\n\t\t);\n\t};\n\n\t/**\n\t * Smart routing is only applicable when all conditions below are true:\n\t * - smart routing is set to true on the engine\n\t * - current link is between two nodes (not between a node and an empty point)\n\t * - no custom points exist along the line\n\t */\n\tisSmartRoutingApplicable(): boolean {\n\t\tconst { diagramEngine, link } = this.props;\n\n\t\tif (!diagramEngine.isSmartRoutingEnabled()) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (link.points.length !== 2) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (link.sourcePort === null || link.targetPort === null) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\trender() {\n\t\tconst { diagramEngine } = this.props;\n\t\tif (!diagramEngine.nodesRendered) {\n\t\t\treturn null;\n\t\t}\n\n\t\t//ensure id is present for all points on the path\n\t\tvar points = this.props.link.points;\n\t\tvar paths = [];\n\n\t\tif (this.isSmartRoutingApplicable()) {\n\t\t\t// first step: calculate a direct path between the points being linked\n\t\t\tconst directPathCoords = this.pathFinding.calculateDirectPath(_.first(points), _.last(points));\n\n\t\t\tconst routingMatrix = diagramEngine.getRoutingMatrix();\n\t\t\t// now we need to extract, from the routing matrix, the very first walkable points\n\t\t\t// so they can be used as origin and destination of the link to be created\n\t\t\tconst smartLink = this.pathFinding.calculateLinkStartEndCoords(routingMatrix, directPathCoords);\n\n\t\t\tif (smartLink) {\n\t\t\t\tconst { start, end, pathToStart, pathToEnd } = smartLink;\n\n\t\t\t\t// second step: calculate a path avoiding hitting other elements\n\t\t\t\tconst simplifiedPath = this.pathFinding.calculateDynamicPath(\n\t\t\t\t\troutingMatrix,\n\t\t\t\t\tstart,\n\t\t\t\t\tend,\n\t\t\t\t\tpathToStart,\n\t\t\t\t\tpathToEnd\n\t\t\t\t);\n\n\t\t\t\tpaths.push(\n\t\t\t\t\t//smooth: boolean, extraProps: any, id: string | number, firstPoint: PointModel, lastPoint: PointModel\n\t\t\t\t\tthis.generateLink(\n\t\t\t\t\t\tToolkit.generateDynamicPath(simplifiedPath),\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tonMouseDown: (event: any) => {\n\t\t\t\t\t\t\t\tthis.addPointToLink(event, 1);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"0\"\n\t\t\t\t\t)\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\t// true when smart routing was skipped or not enabled.\n\t\t// See @link{#isSmartRoutingApplicable()}.\n\t\tif (paths.length === 0) {\n\t\t\tif (points.length === 2) {\n\t\t\t\tvar isHorizontal = Math.abs(points[0].x - points[1].x) > Math.abs(points[0].y - points[1].y);\n\t\t\t\tvar xOrY = isHorizontal ? \"x\" : \"y\";\n\n\t\t\t\t//draw the smoothing\n\t\t\t\t//if the points are too close, just draw a straight line\n\t\t\t\tvar margin = 50;\n\t\t\t\tif (Math.abs((points[0].x as number) - points[1]['x']) < 50) {\n\t\t\t\t\tmargin = 5;\n\t\t\t\t}\n\n\t\t\t\tvar pointLeft = points[0];\n\t\t\t\tvar pointRight = points[1];\n\n\t\t\t\t//some defensive programming to make sure the smoothing is\n\t\t\t\t//always in the right direction\n\t\t\t\tif (pointLeft['x'] > pointRight['x']) {\n\t\t\t\t\tpointLeft = points[1];\n\t\t\t\t\tpointRight = points[0];\n\t\t\t\t}\n\n\t\t\t\tpaths.push(\n\t\t\t\t\tthis.generateLink(\n\t\t\t\t\t\tToolkit.generateCurvePath(pointLeft, pointRight, this.props.link.curvyness),\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tonMouseDown: (event: any) => {\n\t\t\t\t\t\t\t\tthis.addPointToLink(event, 1);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"0\"\n\t\t\t\t\t)\n\t\t\t\t);\n\n\t\t\t\t// draw the link as dangeling\n\t\t\t\tif (this.props.link.targetPort === null) {\n\t\t\t\t\tpaths.push(this.generatePoint(1));\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t//draw the multiple anchors and complex line instead\n\t\t\t\tfor (let j = 0; j < points.length - 1; j++) {\n\t\t\t\t\tpaths.push(\n\t\t\t\t\t\tthis.generateLink(\n\t\t\t\t\t\t\tToolkit.generateLinePath(points[j], points[j + 1]),\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\"data-linkid\": this.props.link.id,\n\t\t\t\t\t\t\t\t\"data-point\": j,\n\t\t\t\t\t\t\t\tonMouseDown: (event: MouseEvent) => {\n\t\t\t\t\t\t\t\t\tthis.addPointToLink(event, j + 1);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tj\n\t\t\t\t\t\t)\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\t//render the circles\n\t\t\t\tfor (var i = 1; i < points.length - 1; i++) {\n\t\t\t\t\tpaths.push(this.generatePoint(i));\n\t\t\t\t}\n\n\t\t\t\tif (this.props.link.targetPort === null) {\n\t\t\t\t\tpaths.push(this.generatePoint(points.length - 1));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n        this.refPaths = [];\n        let labels = (this.props.link.labels as Label[]);\n\n\t\treturn (\n\t\t\t<g {...this.getProps()}>\n\t\t\t\t{paths}\n\t\t\t\t{labels.map(labelModel => {\n\t\t\t\t\treturn this.generateLabel(labelModel);\n\t\t\t\t})}\n\t\t\t</g>\n\t\t);\n\t}\n}\n","import * as React from \"react\";\nimport {\n  AbstractLinkFactory,\n  DiagramEngine,\n  DefaultLinkModel,\n  DefaultLinkWidget\n} from \"storm-react-diagrams\";\nimport { Link } from \"../models/Link\";\nimport { CustomLinkWidget } from \"../widgets/CustomLinkWidget\";\n\n\nexport class CustomLinkFactory extends AbstractLinkFactory<Link> {\n  constructor() {\n    super(\"custom\");\n  }\n\n  generateReactWidget(\n    diagramEngine: DiagramEngine,\n    link: DefaultLinkModel\n  ): JSX.Element {\n    return React.createElement(CustomLinkWidget, {\n      link: link,\n      diagramEngine: diagramEngine\n    });\n  }\n\n  getNewInstance(initialConfig?: any): Link {\n    return new Link(\"custom\");\n  }\n\n  generateLinkSegment(\n    model: Link,\n    widget: CustomLinkWidget,\n    selected: boolean,\n    path: string\n  ) {\n    return (\n      <path\n        className={selected ? widget.bem(\"--path-selected\") : \"\"}\n        strokeWidth={model.width}\n        stroke={model.color}\n        d={path}\n      />\n    );\n  }\n}\n","export enum PropertyType {\n  BIT = \"BIT\",\n  TINYINT = \"TINYINT\",\n  SMALLINT = \"SMALLINT\",\n  INT = \"INT\",\n  BIGINT = \"BIGINT\",\n  'DECIMAL()' = \"DECIMAL()\",\n  'NUMERIC()' = \"NUMERIC()\",\n  'FLOAT()' = \"FLOAT()\",\n  REAL = \"REAL\",\n  DATE = \"DATE\",\n  TIME = \"TIME\",\n  DATETIME = \"DATETIME\",\n  TIMESTAMP = \"TIMESTAMP\",\n  YEAR = \"YEAR\",\n  'CHAR()' = \"CHAR()\",\n  'VARCHAR()' = \"VARCHAR()\",\n  TEXT = \"TEXT\",\n  'NCHAR()' = \"NCHAR()\",\n  'NVARCHAR()' = \"NVARCHAR()\",\n  NTEXT = \"NTEXT\",\n  'BINARY()' = \"BINARY()\",\n  'VARBINARY()' = \"VARBINARY()\",\n  IMAGE = \"IMAGE\",\n  CLOB = \"CLOB\",\n  BLOB = \"BLOB\",\n  XML = \"XML\",\n  JSON = \"JSON\",\n  MONEY = \"MONEY\"\n}\n","import * as SRD from \"storm-react-diagrams\";\nimport { CustomLabelFactory } from \"../../infrastructure/factories/CustomLabelFactory\";\nimport { CustomPortFactory } from \"../../infrastructure/factories/CustomPortFactory\";\nimport { CustomNodeFactory } from \"../../infrastructure/factories/CustomNodeFactory\";\nimport { CustomLinkLabelFactory } from \"../../infrastructure/factories/CustomLinkLabelFactory\";\nimport { CustomLinkFactory } from \"../../infrastructure/factories/CustomLinkFactory\";\nimport { Node } from \"../../infrastructure/models/Node\";\nimport { LogicLink } from \"../../infrastructure/models/LogicLink\";\nimport { LogicPort } from \"../../infrastructure/models/LogicPort\";\nimport { Label } from \"../../infrastructure/models/Label\";\nimport { NodeModel } from \"storm-react-diagrams\";\nimport { Link } from \"../../infrastructure/models/Link\";\nimport { Port } from \"../../infrastructure/models/Port\";\n\nexport class Application {\n  protected activeModel: SRD.DiagramModel;\n  protected logicModel: SRD.DiagramModel;\n\n  protected diagramEngine: SRD.DiagramEngine;\n\n  constructor() {\n    this.diagramEngine = new SRD.DiagramEngine();\n    this.diagramEngine.registerNodeFactory(new CustomLabelFactory());\n    this.diagramEngine.registerLinkFactory(new CustomLinkFactory());\n    this.diagramEngine.registerLabelFactory(new CustomLinkLabelFactory());\n    this.diagramEngine.registerNodeFactory(new CustomNodeFactory());\n    this.diagramEngine.registerPortFactory(new CustomPortFactory());\n    this.diagramEngine.installDefaultFactories();\n    this.newModel();\n  }\n\n  public newModel() {\n    this.activeModel = new SRD.DiagramModel();\n    this.logicModel = new SRD.DiagramModel();\n\n    this.diagramEngine.setDiagramModel(this.activeModel);\n  }\n\n  public getActiveDiagram(): SRD.DiagramModel {\n    return this.diagramEngine.getDiagramModel();\n  }\n\n  public getDiagramEngine(): SRD.DiagramEngine {\n    return this.diagramEngine;\n  }\n\n  public setLogicModel() {\n\n    let concNodes = this.activeModel.getNodes();\n\n    Object.keys(concNodes).map((k) => {\n      let node = concNodes[k].clone() as Node;\n\n      let nodePorts = concNodes[k].getPorts();\n\n      Object.keys(nodePorts).map(k => {\n        let port = nodePorts[k] as Port;\n        let logicPort = new LogicPort(port.name, port.isNamePort, port.isPrimaryKey, port.isForeignKey, port.isNotNull, port.isAutoincremented, port.isUnique, port.propertyType);\n        node.addPort(logicPort);\n      })\n\n\n      this.logicModel.addNode(node);\n    });\n\n    let concLinks = this.activeModel.getLinks();\n\n    Object.keys(concLinks).map((k) => {\n      let logicNodes = this.logicModel.getNodes() as {\n        [s: string]: Node;\n      };\n\n      let sourceNode = concLinks[k].sourcePort.getParent() as Node;\n      let sourceNodeId = Object.keys(logicNodes).filter(\n        (k) => (logicNodes[k] as Node).name == sourceNode.name\n      )[0];\n\n      let targetNode = concLinks[k].targetPort.getParent() as Node;\n      let targetNodeId = Object.keys(logicNodes).filter(\n        (k) => (logicNodes[k] as Node).name == targetNode.name\n      )[0];\n\n      // let targetPorts = targetNode.getPorts() as {[s: string]: LogicPort}\n\n      // let targetPK = Object.keys(targetPorts).filter(p => targetPorts[p].isPrimaryKey)[0];\n\n      let sourceLabel = (concLinks[k].labels[0] as Label).label;\n      let targetLabel = (concLinks[k].labels[2] as Label).label;\n\n      if (sourceLabel.includes(\"N\") && targetLabel.includes(\"N\")) {\n        let relNode = ((concLinks[k] as Link).properties as Node).clone() as Node;\n        relNode.name = (concLinks[k].labels[1] as Label).label;\n        relNode.setPosition(sourceNode.x + 150, sourceNode.y - 100);\n        relNode.addInPort(\n          true,\n          true,\n          \"\",\n          false,\n          false,\n          false,\n          false,\n          false,\n          \"INT\"\n        );\n        relNode.addInPort(\n          true,\n          true,\n          \"1\",\n          false,\n          false,\n          false,\n          false,\n          false,\n          \"INT\"\n        );\n\n        relNode.addInPort(\n          true,\n          false,\n          \"Id\",\n          true,\n          false,\n          true,\n          true,\n          true,\n          \"INT\"\n        );\n\n        relNode.addInPort(\n          true,\n          false,\n          sourceNode.name + \"Id\",\n          false,\n          true,\n          false,\n          false,\n          true,\n          \"INT\",\n          sourceNodeId // add\n        );\n\n        relNode.addInPort(\n          true,\n          false,\n          targetNode.name + \"Id\",\n          false,\n          true,\n          false,\n          false,\n          true,\n          \"INT\",\n          targetNodeId\n        );\n\n        this.logicModel.addNode(relNode);\n\n        //dodaj link\n        let node = logicNodes[sourceNodeId];\n        let sourceP = node.ports[\"1\"];\n        let targetP = relNode.ports[\"\"];\n\n        let link = new LogicLink(\"custom\", 'N', '1');\n        \n        link.setSourcePort(sourceP);\n        link.setTargetPort(targetP);\n\n        //dodaj link\n        let node2 = logicNodes[targetNodeId];\n        let sourceP2 = relNode.ports[\"1\"];\n        let targetP2 = node2.ports[\"\"];\n\n        let link2 = new LogicLink(\"custom\", '1', 'N');\n\n        link2.setSourcePort(sourceP2);\n        link2.setTargetPort(targetP2);\n\n        this.logicModel.addAll(link, link2);\n      } else if (sourceLabel.includes(\"N\")) {\n        //dodaj FK\n        logicNodes[sourceNodeId].addInPort(\n          true,\n          false,\n          targetNode.name + \"Id\",\n          false,\n          true,\n          false,\n          false,\n          true,\n          \"INT\",\n          targetNodeId\n        );\n        //dodaj link\n        let node = logicNodes[sourceNodeId];\n        let sourceP = node.ports[\"1\"];\n        let targetP = logicNodes[targetNodeId].ports[\"\"];\n\n        let link = new LogicLink(\"custom\", '1', 'N');\n        \n        link.setSourcePort(sourceP);\n        link.setTargetPort(targetP);\n        this.logicModel.addLink(link);\n      } else if (targetLabel.includes(\"N\")) {\n        //dodaj FK\n        logicNodes[targetNodeId].addInPort(\n          true,\n          false,\n          sourceNode.name + \"Id\",\n          false,\n          true,\n          false,\n          false,\n          true,\n          \"INT\",\n          sourceNodeId\n        );\n        //dodaj link\n        let node = logicNodes[targetNodeId];\n        let sourceP = node.ports[\"1\"];\n        let targetP = logicNodes[sourceNodeId].ports[\"\"];\n\n        let link = new LogicLink(\"custom\", 'N', '1');\n\n        link.setSourcePort(sourceP);\n        link.setTargetPort(targetP);\n        this.logicModel.addLink(link);\n      } else {\n\n        //dodaj FK\n        logicNodes[sourceNodeId].addInPort(\n          true,\n          false,\n          targetNode.name + \"Id\",\n          false,\n          true,\n          false,\n          false,\n          true,\n          \"INT\",\n          targetNodeId\n        );\n        //dodaj link\n        let node = logicNodes[sourceNodeId];\n        let sourceP = node.ports[\"1\"];\n        let targetP = logicNodes[targetNodeId].ports[\"\"];\n\n        let link = new LogicLink(\"custom\", '1', 'N');\n\n        link.setSourcePort(sourceP);\n        link.setTargetPort(targetP);\n        this.logicModel.addLink(link);\n      }\n    });\n\n    this.diagramEngine.setDiagramModel(this.logicModel);\n  }\n\n  public setConceptualModel() {\n    this.logicModel = null;\n    this.logicModel = new SRD.DiagramModel();\n\n    let activeModelCopy = new SRD.DiagramModel();\n\n    let nodes = this.activeModel.getNodes();\n\n    Object.keys(nodes).map(k => {\n      activeModelCopy.addNode(nodes[k]);\n    })\n\n    let links = this.activeModel.getLinks();\n\n    Object.keys(links).map(k => {\n      activeModelCopy.addLink(links[k]);\n    })\n\n    this.activeModel = activeModelCopy;\n\n    this.diagramEngine.setDiagramModel(this.activeModel);\n  }\n\n  public loadConceptualModel(model :SRD.DiagramModel) {\n    this.activeModel = model;\n\n    this.diagramEngine.setDiagramModel(this.activeModel);\n  }\n\n  public loadLogicModel(model :SRD.DiagramModel) {\n    this.logicModel = model;\n\n    this.diagramEngine.setDiagramModel(this.logicModel);\n  }\n}\n","import * as React from \"react\";\n\nexport interface TrayItemWidgetProps {\n  model: any;\n  color?: string;\n  name: string;\n}\n\nexport interface TrayItemWidgetState {}\n\nexport class TrayItemWidget extends React.Component<\n  TrayItemWidgetProps,\n  TrayItemWidgetState\n> {\n  constructor(props: TrayItemWidgetProps) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n    return (\n      <div\n        style={{ borderColor: this.props.color }}\n        draggable={true}\n        onDragStart={event => {\n          event.dataTransfer.setData(\n            \"storm-diagram-node\",\n            JSON.stringify(this.props.model)\n          );\n        }}\n        className=\"tray-item\"\n      >\n        {this.props.name}\n      </div>\n    );\n  }\n}\n","import * as React from \"react\";\n\nexport interface TrayWidgetProps {}\n\nexport interface TrayWidgetState {}\n\nexport class TrayWidget extends React.Component<\n  TrayWidgetProps,\n  TrayWidgetState\n> {\n  public static defaultProps: TrayWidgetProps = {};\n\n  constructor(props: TrayWidgetProps) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n    return <div className=\"tray\">{this.props.children}</div>;\n  }\n}\n","import * as React from \"react\";\n\nimport { GridProps } from \"./\";\n\nexport default class Grid extends React.Component<GridProps> {\n  render() {\n    return (\n      <div style={this.props.style} className={this.buildClassNameString()}>\n        {this.props.children}\n      </div>\n    );\n  }\n\n  buildClassNameString() {\n    let className = \"ms-Grid\";\n\n    if (this.props.className != null) {\n      className += ` ${this.props.className}`;\n    }\n\n    return className;\n  }\n}\n","import * as React from \"react\";\n\nimport { GridRowProps } from \"./\";\n\nexport default class Row extends React.Component<GridRowProps> {\n  render() {\n    return (\n      <div className={this.buildClassNameString()}>{this.props.children}</div>\n    );\n  }\n\n  buildClassNameString() {\n    let className = \"ms-Grid-row\";\n\n    if (this.props.flex) {\n      className += \" grid-row-flex\";\n    }\n\n    if (this.props.className != null) {\n      className += ` ${this.props.className}`;\n    }\n\n    return className;\n  }\n}\n","import * as React from \"react\";\n\nimport { GridColProps, GridColConfigProp } from \"./\";\n\nexport default class Col extends React.Component<GridColProps> {\n  render() {\n    return (\n      <div\n        className={this.buildClassNameString()}\n        onDoubleClick={this.props.onDoubleClick}\n      >\n        {this.props.children}\n      </div>\n    );\n  }\n\n  buildGridColConfigClassNames(size: string, config: GridColConfigProp) {\n    if (config == null) return \"\";\n\n    let className = ` ms-${size}`;\n\n    if (typeof config === \"string\") {\n      className += config;\n    } else {\n      className += config.size;\n\n      if (config.pull != null) {\n        className += ` ms-${size}Pull${config.pull}`;\n      }\n\n      if (config.push != null) {\n        className += ` ms-${size}Push${config.push}`;\n      }\n\n      if (config.offset != null) {\n        className += ` ms-${size}Offset${config.offset}`;\n      }\n\n      if (config.order != null) {\n        className += ` grid-flex-order-${size}-${config.order}`;\n      }\n    }\n\n    return className;\n  }\n\n  buildClassNameString() {\n    let className = \"ms-Grid-col\";\n\n    if (this.props.className != null) {\n      className += ` ${this.props.className}`;\n    }\n\n    if (this.props.hidden != null) {\n      className += ` ms-hidden${this.props.hidden}`;\n    }\n\n    if (this.props.order != null) {\n      className += ` grid-flex-order-${this.props.order}`;\n    }\n\n    className += this.buildGridColConfigClassNames(\"sm\", this.props.sm);\n    className += this.buildGridColConfigClassNames(\"md\", this.props.md);\n    className += this.buildGridColConfigClassNames(\"lg\", this.props.lg);\n    className += this.buildGridColConfigClassNames(\"xl\", this.props.xl);\n    className += this.buildGridColConfigClassNames(\"xxl\", this.props.xxl);\n    className += this.buildGridColConfigClassNames(\"xxxl\", this.props.xxxl);\n\n    return className;\n  }\n}\n","import \"./PropertyTable.scss\";\nimport React, { useState } from \"react\";\nimport { PropertyType } from \"../../infrastructure/models/PropertyType\";\nimport { Port } from \"../../infrastructure/models/Port\";\nimport BootstrapTable from \"react-bootstrap-table-next\";\nimport { DiagramEngine } from \"storm-react-diagrams\";\nimport { Link } from \"../../infrastructure/models/Link\";\nimport { Node } from \"../../infrastructure/models/Node\";\nimport \"react-bootstrap-table-next/dist/react-bootstrap-table2.min.css\";\n\nclass Props {\n\tselectedItem: Node;\n\tdiagramEngine: DiagramEngine;\n\trelView?: boolean;\n\tisLogic: boolean;\n}\n\nexport function useForceUpdate() {\n\tconst [value, setValue] = React.useState(0);\n\treturn () => setValue(value => ++value);\n}\n\nexport const PropertyTable = (props: Props) => {\n\tconst [updatedItem, setUpdatedItem] = React.useState(null);\n\n\tconst forceUpdate = useForceUpdate();\n\n\tReact.useMemo(() => {\n\t\tsetUpdatedItem(props.selectedItem);\n\t}, [props.selectedItem]);\n\n\tconst clearPartialKeys = () => {\n\t\tlet ports =\n\t\tupdatedItem &&\n\t\tupdatedItem.ports &&\n\t\t(updatedItem.ports as { [s: string]: Port });\n\n\t\tObject.keys(ports).map(p => console.log(ports[p].isPartialKey = false));\n\t}\n\n\tconst handleChangePK = (\n\t\tevent: React.ChangeEvent<HTMLInputElement>,\n\t\trow: Port\n\t) => {\n\t\tevent.persist();\n\t\t(updatedItem.getPortFromID(\n\t\t\trow.id\n\t\t) as Port).isPrimaryKey = !row.isPrimaryKey;\n\n\t\t(updatedItem.getPortFromID(\n\t\t\trow.id\n\t\t) as Port).isNotNull = row.isPrimaryKey ? true : false;\n\n\t\t(updatedItem.getPortFromID(\n\t\t\trow.id\n\t\t) as Port).isAutoincremented = row.isPrimaryKey ? true : false;\n\n\t\t(updatedItem.getPortFromID(\n\t\t\trow.id\n\t\t) as Port).isUnique = row.isPrimaryKey ? true : false;\n\n\t\tclearPartialKeys();\n\t\tforceUpdate();\n\t};\n\n\tconst handleChangeFK = (\n\t\tevent: React.ChangeEvent<HTMLInputElement>,\n\t\trow: Port\n\t) => {\n\t\tevent.persist();\n\t\t(updatedItem.getPortFromID(\n\t\t\trow.id\n\t\t) as Port).isForeignKey = !row.isForeignKey;\n\n\t\t(updatedItem.getPortFromID(\n\t\t\trow.id\n\t\t) as Port).isNotNull = row.isForeignKey ? true : false;\n\n\t\tforceUpdate();\n\t};\n\n\tconst handleChangeNull = (\n\t\tevent: React.ChangeEvent<HTMLInputElement>,\n\t\trow: Port\n\t) => {\n\t\tevent.persist();\n\t\t(updatedItem.getPortFromID(row.id) as Port).isNotNull = !row.isNotNull;\n\t\tforceUpdate();\n\t};\n\n\tconst handleChangePartialKey = (\n\t\tevent: React.ChangeEvent<HTMLInputElement>,\n\t\trow: Port\n\t) => {\n\t\tevent.persist();\n\t\t(updatedItem.getPortFromID(row.id) as Port).isPartialKey = !row.isPartialKey;\n\t\tforceUpdate();\n\t};\n\n\tconst handleChangeUnique = (\n\t\tevent: React.ChangeEvent<HTMLInputElement>,\n\t\trow: Port\n\t) => {\n\t\tevent.persist();\n\t\t(updatedItem.getPortFromID(row.id) as Port).isUnique = !row.isUnique;\n\t\tforceUpdate();\n\t};\n\n\tconst handleChangeAutoInc = (\n\t\tevent: React.ChangeEvent<HTMLInputElement>,\n\t\trow: Port\n\t) => {\n\t\tevent.persist();\n\t\t(updatedItem.getPortFromID(\n\t\t\trow.id\n\t\t) as Port).isAutoincremented = !row.isAutoincremented;\n\t\tforceUpdate();\n\t};\n\n\tconst handleChangepPropType = (\n\t\tevent: React.ChangeEvent<HTMLInputElement>,\n\t\trow: Port\n\t) => {\n\t\tevent.persist();\n\t\t(updatedItem.getPortFromID(row.id) as Port).propertyType = event.target\n\t\t\t.value;\n\t};\n\n\tconst handleChangePortLabel = (\n\t\tevent: React.ChangeEvent<HTMLInputElement>,\n\t\trow: Port\n\t) => {\n\t\tevent.persist();\n\t\t(updatedItem.getPortFromID(row.id) as Port).label = event.target.value;\n\t};\n\n\tconst addNewPort = (newPortNumber: number) => {\n\t\tupdatedItem.addInPort(\n\t\t\tprops.isLogic,\n\t\t\tfalse,\n\t\t\t`new atribute ${newPortNumber}`,\n\t\t\tfalse,\n\t\t\tfalse,\n\t\t\tfalse,\n\t\t\tfalse,\n\t\t\tfalse,\n\t\t\tPropertyType.INT\n\t\t);\n\t\tforceUpdate();\n\t};\n\n\tconst removePort = (port: Port) => {\n\t\tif (\n\t\t\tObject.entries(port.links).length !== 0 &&\n\t\t\tport.links.constructor === Object\n\t\t) {\n\t\t\tlet portLinks: Link[] = Object.keys(port.links).map(x => {\n\t\t\t\treturn port.links[x];\n\t\t\t});\n\t\t\tportLinks.forEach(p =>\n\t\t\t\tprops.diagramEngine.getDiagramModel().removeLink(p)\n\t\t\t);\n\t\t}\n\t\tupdatedItem.removePort(port);\n\t\tforceUpdate();\n\t};\n\n\tconst preparePropertyTypes = () => {\n\t\treturn Object.values(PropertyType).map(obj => (\n\t\t\t<option key={obj} value={obj}>\n\t\t\t\t{obj}\n\t\t\t</option>\n\t\t));\n\t};\n\n\tconst columns: any[] = [\n\t\t{\n\t\t\tdataField: \"label\",\n\t\t\ttext: \"Property Name\",\n\t\t\tformatter: (cellContent: any, row: Port) => (\n\t\t\t\t<div className=\"input\">\n\t\t\t\t\t<input\n\t\t\t\t\t\tstyle={{ width: '100px' }}\n\t\t\t\t\t\tclassName=\"darkInput\"\n\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\tdefaultValue={row.label}\n\t\t\t\t\t\tonChange={event => handleChangePortLabel(event, row)}\n\t\t\t\t\t></input>\n\t\t\t\t</div>\n\t\t\t)\n\t\t},\n\t\t{\n\t\t\tstyle: { paddingLeft: 0 },\n\t\t\tdataField: \"propertyType\",\n\t\t\ttext: \"Property Type\",\n\t\t\tformatter: (cellContent: any, row: Port) => (\n\t\t\t\t<div className=\"input\">\n\t\t\t\t\t<input\n\t\t\t\t\t\tstyle={{ width: '100px' }}\n\n\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\tlist=\"types\"\n\t\t\t\t\t\tclassName=\"darkInput\"\n\t\t\t\t\t\tonChange={event => handleChangepPropType(event, row)}\n\t\t\t\t\t\tdefaultValue={row.propertyType}\n\n\t\t\t\t\t/>\n\t\t\t\t\t<datalist id=\"types\">\n\t\t\t\t\t\t{preparePropertyTypes()}\n\t\t\t\t\t</datalist>\n\n\t\t\t\t</div>\n\t\t\t)\n\t\t},\n\t\t{\n\t\t\tdataField: \"isPrimaryKey\",\n\t\t\ttext: \"Is Primary Key\",\n\t\t\tformatter: (cellContent: any, row: Port) => (\n\t\t\t\t<div className=\"checkbox\">\n\t\t\t\t\t<label>\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\ttype=\"checkbox\"\n\t\t\t\t\t\t\tchecked={row.isPrimaryKey}\n\t\t\t\t\t\t\tonChange={event => handleChangePK(event, row)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</label>\n\t\t\t\t</div>\n\t\t\t)\n\t\t},\n\t\t{\n\t\t\tdataField: \"isForeignKey\",\n\t\t\ttext: \"Is Foreign Key\",\n\t\t\tformatter: (cellContent: any, row: Port) => (\n\t\t\t\t<div className=\"checkbox\">\n\t\t\t\t\t<label>\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\ttype=\"checkbox\"\n\t\t\t\t\t\t\tchecked={row.isForeignKey}\n\t\t\t\t\t\t\tonChange={event => handleChangeFK(event, row)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</label>\n\t\t\t\t</div>\n\t\t\t)\n\t\t},\n\t\t{\n\t\t\tdataField: \"isPartialKey\",\n\t\t\ttext: \"Is Partial Key\",\n\t\t\tformatter: (cellContent: any, row: Port) => (\n\t\t\t\t<div className=\"checkbox\">\n\t\t\t\t\t<label>\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\ttype=\"checkbox\"\n\t\t\t\t\t\tchecked={row.isPartialKey}\n\t\t\t\t\t\tonChange={event => handleChangePartialKey(event, row)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</label>\n\t\t\t\t</div>\n\t\t\t)\n\t\t},\n\t\t{\n\t\t\tdataField: \"isNotNull\",\n\t\t\ttext: \"Not Null\",\n\t\t\tformatter: (cellContent: any, row: Port) => (\n\t\t\t\t<div className=\"checkbox\">\n\t\t\t\t\t<label>\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\tdisabled={row.isPrimaryKey || row.isForeignKey}\n\t\t\t\t\t\t\ttype=\"checkbox\"\n\t\t\t\t\t\t\tchecked={row.isNotNull}\n\t\t\t\t\t\t\tonChange={event => handleChangeNull(event, row)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</label>\n\t\t\t\t</div>\n\t\t\t)\n\t\t},\n\t\t{\n\t\t\tdataField: \"isAutoincremented\",\n\t\t\ttext: \"Is Auto Incremented\",\n\t\t\tformatter: (cellContent: any, row: Port) => (\n\t\t\t\t<div className=\"checkbox\">\n\t\t\t\t\t<label>\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\tdisabled={row.isPrimaryKey}\n\t\t\t\t\t\t\ttype=\"checkbox\"\n\t\t\t\t\t\t\tchecked={row.isAutoincremented}\n\t\t\t\t\t\t\tonChange={event => handleChangeAutoInc(event, row)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</label>\n\t\t\t\t</div>\n\t\t\t)\n\t\t},\n\t\t{\n\t\t\tdataField: \"isUnique\",\n\t\t\ttext: \"Is Unique\",\n\t\t\tformatter: (cellContent: any, row: Port) => (\n\t\t\t\t<div className=\"checkbox\">\n\t\t\t\t\t<label>\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\tdisabled={row.isPrimaryKey}\n\t\t\t\t\t\t\ttype=\"checkbox\"\n\t\t\t\t\t\t\tchecked={row.isUnique}\n\t\t\t\t\t\t\tonChange={event => handleChangeUnique(event, row)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</label>\n\t\t\t\t</div>\n\t\t\t)\n\t\t},\n\t\t{\n\t\t\tdataField: \"remove\",\n\t\t\ttext: \"Remove\",\n\t\t\tformatter: (cellContent: any, row: Port) => (\n\t\t\t\t<div className=\"checkbox\">\n\t\t\t\t\t<label>\n\t\t\t\t\t\t<span\n\t\t\t\t\t\t\tonClick={() => removePort(row)}\n\t\t\t\t\t\t\tclassName=\"mi mi-Delete red\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t</label>\n\t\t\t\t</div>\n\t\t\t)\n\t\t}\n\t];\n\n\n\tlet ports =\n\t\tupdatedItem &&\n\t\tupdatedItem.ports &&\n\t\t(updatedItem.ports as { [s: string]: Port });\n\n\tlet portsTable: Port[] =\n\t\tports &&\n\t\tObject.keys(ports)\n\t\t\t.map(x => {\n\t\t\t\treturn ports[x];\n\t\t\t})\n\t\t\t.filter(p => !p.isNamePort);\n\n\tlet ispk = portsTable && portsTable.find(p => p.isPrimaryKey) ? true : false;\n\n\tlet cols = columns;\n\n\tif (ispk) {\n\t\tcols = cols.filter(col => col.dataField !== 'isPartialKey')\n\t}\n\n\tif(!props.isLogic) {\n\t\tcols = cols.filter(c => c.dataField !== 'isForeignKey')\n\t}\n\n\treturn (\n\t\t<div>\n\t\t\t<BootstrapTable\n\t\t\t\tkeyField=\"id\"\n\t\t\t\tdata={portsTable}\n\t\t\t\tcolumns={props.relView ? cols.filter(col => col.dataField !== 'isPrimaryKey' && col.dataField !== 'isPartialKey') : cols}\n\t\t\t\tbordered={false}\n\t\t\t/>\n\t\t\t<p\n\t\t\t\tclassName=\"mouse-cursor\"\n\t\t\t\tonClick={() => addNewPort(portsTable.length)}\n\t\t\t>\n\t\t\t\tAdd new atribute\n      </p>\n\t\t</div>\n\t);\n};\n","import \"./NodeProperties.scss\";\nimport * as React from \"react\";\nimport { DiagramEngine } from \"storm-react-diagrams\";\nimport { Node } from \"../../infrastructure/models/Node\";\n\nimport { Col, Row, Grid } from \"../grid\";\nimport { PropertyTable } from \"../propertyTable/PropertyTable\";\n\nclass Props {\n  selectedItem: Node;\n  isLogic: boolean;\n  diagramEngine: DiagramEngine;\n}\n\nexport function useForceUpdate() {\n  const [value, setValue] = React.useState(0);\n  return () => setValue(value => ++value);\n}\n\nexport const NodeProperties = (props: Props) => {\n  const [updatedItem, setUpdatedItem] = React.useState(null);\n  const [defaultName, setDefaultName] = React.useState(\"\");\n\n  const [name, setName] = React.useState(\"\");\n  const [showInput, setShowInput] = React.useState(false);\n\n  const forceUpdate = useForceUpdate();\n\n  React.useMemo(() => {\n    setUpdatedItem(props.selectedItem);\n    setName(props.selectedItem.name);\n    setDefaultName(props.selectedItem.name);\n  }, [props.selectedItem]);\n\n\n  const handleNameChange = (event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement >) => {\n    event.persist();\n    let allNodes = props.diagramEngine.diagramModel.getNodes() as {\n      [id: string]: Node;\n    };\n    let names = Object.values(allNodes).map(node => allNodes[node.id].name.toLowerCase().trim());\n    \n    names.includes(event.target.value.toLowerCase().trim())\n      ? updatedItem.name = defaultName\n      : updatedItem.name = event.target.value.trim();\n    forceUpdate();\n  };\n\n      const iconStyles: React.CSSProperties = {\n        display: \"flex\",\n        flexDirection: 'row',\n        flexFlow: 'row-reverse',\n        position: 'absolute',\n        right: '0',\n        top: '10px',\n        zIndex: 9999\n      };\n\n\n      const acceptStyle: React.CSSProperties = {\n        marginRight: 5,\n        backgroundColor: 'green',\n        borderRadius: '90px',\n        padding: '10px',\n      };\n\n      const declineStyle: React.CSSProperties = {\n        marginRight: '20px',\n        backgroundColor: 'red',\n        borderRadius: '90px',\n        padding: '10px',\n      };\n\n  if (!updatedItem) return null;\n  else\n    return (\n      <div className=\"trayBottom\">\n        {/* <div style={iconStyles}>\n              <span\n                style={declineStyle}\n                className={`mi ${\n                  \"mi-Cancel\"\n                }`}\n              />\n                <span\n                  style={acceptStyle}\n                  className={`mi ${\n                    \"mi-Accept\"\n                  }`}\n                />\n            </div> */}\n        <Grid>\n          <Row>\n          \n            <Col >\n              {!showInput ? (\n                \n                <h1 style={{wordBreak: 'break-all'}} onDoubleClick={() => setShowInput(true)}>{name}</h1>\n              ) : (\n                props.selectedItem.isLabel ? \n                <textarea\n                style={{height: '200px'}}\n                className=\"darkInput fs-24\"\n                defaultValue={name}\n                onChange={event => handleNameChange(event)}\n                >\n\n                </textarea> :\n                <input\n                  className=\"darkInput fs-24\"\n                  defaultValue={name}\n                  onChange={event => handleNameChange(event)}\n                />\n              )}\n              \n            </Col>\n            \n            {!updatedItem.isLabel ? (\n        <PropertyTable selectedItem={props.selectedItem} diagramEngine={props.diagramEngine} isLogic={props.isLogic}/> \n            ) : null}\n          </Row>\n        </Grid>\n      </div>\n    );\n};\n","import \"./ResultPopup.scss\";\nimport React, { useState, useEffect } from \"react\";\nimport Popup from \"reactjs-popup\";\nimport sqlFormatter from \"sql-formatter\";\nimport FileSaver from \"file-saver\";\n\nclass Props {\n  isOpen: boolean;\n  generateScript?: (name: string) => void;\n  mssqlString: string;\n  mysqlString: string;\n  update: () => void;\n}\n\nexport const ResultPopup = (props: Props) => {\n  const [dbName, setDbName] = useState(\"DatabaseName\");\n  const [mySQLView, setmySQLView] = useState(false);\n\n\n  let formatedMSSQL =\n    props.mssqlString &&\n    sqlFormatter.format(props.mssqlString, {\n      language: \"sql\", // Defaults to \"sql\"\n      indent: \"  \" // Defaults to two spaces\n    });\n\n  let formatedMySQL =\n    props.mysqlString &&\n    sqlFormatter.format(props.mysqlString, {\n      language: \"db2\", // Defaults to \"sql\"\n      indent: \"  \" // Defaults to two spaces\n    });\n\n  // useEffect(() => {\n  //   formatedMSSQL = '';\n  //   formatedMySQL = '';\n  // }, [props.mssqlString, props.mysqlString])\n\n\n\n  const downloadMSSQL = () => {\n    var blob = new Blob([formatedMSSQL], { type: \"text/plain;charset=utf-8\" });\n    FileSaver.saveAs(blob, `${dbName}.sql`);\n    props.update();\n  };\n\n  const downloadMYSQL = () => {\n    var blob = new Blob([formatedMySQL], { type: \"text/plain;charset=utf-8\" });\n    FileSaver.saveAs(blob, `${dbName}.sql`);\n    props.update();\n  };\n\n  return (\n    <Popup modal closeOnDocumentClick open={props.isOpen} closeOnEscape>\n      <div className=\"sql-result-dialog\">\n        <input\n          style={{ marginRight: \"10px\" }}\n          type=\"text\"\n          onChange={event => setDbName(event.target.value)}\n          value={dbName}\n        />\n\n        <button\n         style={{ marginRight: \"10px\" }}\n          onClick={() => {\n            props.generateScript(dbName)\n          }}>\n          Generate\n            </button>\n\n            <button\n            className={`${mySQLView ? '' : 'selected-sql'}`}\n          onClick={() => {\n            setmySQLView(false)\n          }}>\n          MSSQL\n            </button>\n\n            <button\n            className={`${mySQLView ? 'selected-sql' : ''}`}\n\n          onClick={() => {\n            setmySQLView(true)\n\n          }}>\n          MySQL\n            </button>\n\n\n        <textarea\n          style={{ marginTop: \"5px\" }}\n          readOnly={true}\n          value={mySQLView ? formatedMySQL : formatedMSSQL}\n          contentEditable={false}\n        ></textarea>\n\n        <button style={{ marginRight: \"10px\" }} onClick={downloadMSSQL}>\n          Download MSSQL\n        </button>\n        <button style={{ marginRight: \"10px\" }} onClick={downloadMYSQL}>\n          Download mySQL\n        </button>\n      </div>\n    </Popup>\n  );\n};\n","import { ResultPopup } from \"../components/popups/ResultPopup/ResultPopup\";\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { Link } from \"../infrastructure/models/Link\";\n\nclass Props {\n  isUml: boolean;\n  isLogic: boolean;\n  isOpen: boolean;\n  serializeDiagram: any;\n\n  update: () => void;\n}\n\nexport const GenerationHandler = (props: Props) => {\n  const [sqlString, setSqlString] = useState(\"\");\n  const [mysqlString, setMySqlString] = useState(\"\");\n\n\n  useEffect(() => setSqlString(''), [props.isOpen]);\n\n  const generateScript = async (name: string) => {\n    let serDiagram = props.serializeDiagram;\n    let diagram = JSON.stringify(serDiagram, null, 2);\n    console.log('diagram: ', serDiagram);\n    // let response = await axios.post(\"https://sql-generator.pl/api/setjob/mssql\", {\n\n    // let response = await axios.post(\"https://51.83.185.113/api/setjob/mssql\",\n    let response = await axios.post(\"http://localhost:5000/api/setjob/mssql\", {\n\n      SerializedModel: diagram,\n      DatabaseName: name,\n      RelationType: props.isUml ? 'UML' : 'CHEN',\n      DiagramType: props.isLogic ? 'Logic' : 'Conceptual'\n    });\n\n    // let responseMy = await axios.post(\"https://sql-generator.pl/api/setjob/mysql\", {\n    let responseMy = await axios.post(\"http://localhost:5000/api/setjob/mysql\", {\n      SerializedModel: diagram,\n      DatabaseName: name,\n      RelationType: props.isUml ? 'UML' : 'CHEN',\n      DiagramType: props.isLogic ? 'Logic' : 'Conceptual'\n    });\n\n    if (response.status === 200 && responseMy.status === 200) {\n      setSqlString(response.data);\n      setMySqlString(responseMy.data);\n    } else {\n      setSqlString('There was an error while processing your request');\n      setMySqlString('There was an error while processing your request');\n\n      console.log(\"there was an error while processing your request\");\n    }\n  };\n\n  return (\n    <ResultPopup\n      update={props.update}\n      mssqlString={sqlString}\n      mysqlString={mysqlString}\n      generateScript={name => generateScript(name)}\n      isOpen={props.isOpen}\n    />\n  );\n};\n","import \"./RelationPopup.scss\";\nimport React, { useState } from \"react\";\nimport Popup from \"reactjs-popup\";\nimport { Link } from \"../../../infrastructure/models/Link\";\nimport { Label } from \"../../../infrastructure/models/Label\";\nimport { Node } from \"../../../infrastructure/models/Node\";\nimport { DiagramModel, DiagramEngine } from \"storm-react-diagrams\";\nimport { Port } from \"../../../infrastructure/models/Port\";\nimport { PropertyType } from \"../../../infrastructure/models/PropertyType\";\nimport { PropertyTable } from \"../../../components/propertyTable/PropertyTable\";\nimport { LogicPort } from \"../../../infrastructure/models/LogicPort\";\n\nclass Props {\n  isOpen: boolean;\n  link: Link;\n  update: () => void;\n  diagramModel: DiagramModel;\n  diagramEngine: DiagramEngine;\n  isLogic: boolean;\n}\nexport const RelationPopup = (props: Props) => {\n  const [left, setLeft] = useState(\"1, N\");\n\n  const [right, setRight] = useState(\"1, N\");\n\n  const [relationName, setRelationName] = useState(\"relation name\");\n\n  React.useEffect(() => {\n    let leftLabel =\n      props.link &&\n      props.link.labels.length > 2 &&\n      (props.link.labels[0] as Label).label;\n    let relLabel =\n      props.link &&\n      props.link.labels.length > 2 &&\n      (props.link.labels[1] as Label).label;\n    let rightLabel =\n      props.link &&\n      props.link.labels.length > 2 &&\n      (props.link.labels[2] as Label).label;\n\n    setLeft(leftLabel ? leftLabel : \"1, N\");\n    setRelationName(relLabel ? relLabel : \"relation name\");\n    setRight(rightLabel ? rightLabel : \"1, N\");\n  }, [props.link]);\n\n  let update = () => {\n    let labels = props.link.labels as Label[];\n    labels[0].label = left;\n    labels[2].label = right;\n    labels[1].label = relationName;\n    let points = props.link.points;\n    for (let index = 1; index < points.length - 1; index++) {\n      const element = points[index];\n      element.remove();\n    }\n    props.update();\n  };\n\n  const sourcePort =\n    props.link &&\n    props.link.sourcePort &&\n    (props.link.sourcePort.parent as Node);\n  const targetPort =\n    props.link &&\n    props.link.targetPort &&\n    (props.link.targetPort.parent as Node);\n\n  const remove = () => {\n    const sourceP = props.link && props.link.sourcePort;\n    const targetP = props.link && props.link.targetPort;\n    sourceP.removeLink(props.link);\n    targetP.removeLink(props.link);\n\n    props.diagramModel.removeLink(props.link);\n\n    if(props.isLogic) {\n      let thisParent = props.link.targetPort.getParent() as Node;\n      let portNode = props.link.sourcePort.getParent() as Node;\n  \n      let portNodePorts = portNode.getPorts() as {[s: string]: LogicPort};\n      let thisParentPorts = thisParent.getPorts() as {[s: string]: LogicPort};\n  \n      let czyMaPortZPKjakoFk = Object.keys(thisParentPorts).filter(id => thisParentPorts[id].fkPortId === portNode.id)[0];\n      let czyMaPortZPKjakoFk2 = Object.keys(portNodePorts).filter(id => portNodePorts[id].fkPortId === thisParent.id)[0];\n      \n      if(czyMaPortZPKjakoFk) {\n        thisParent.removePort(thisParentPorts[czyMaPortZPKjakoFk]);\n      } else {\n        portNode.removePort(portNodePorts[czyMaPortZPKjakoFk2]);\n      }\n    }\n\n    props.update();\n  };\n\n  const options = (\n    <>\n      <option value=\"0, N\">0, N</option>\n      <option value=\"1, N\">1, N</option>\n      <option value=\"0, 1\">0, 1</option>\n      <option value=\"1, 1\">1, 1</option>\n      <option value=\"N, N\">N, N</option>\n    </>\n  );\n\n  const renderOptionPicker = (side: string) => {\n    return (\n      <div className=\"grid-item\">\n        <select\n          className=\"darkSelect\"\n          onChange={(event) =>\n            side === \"left\"\n              ? setLeft(event.target.value)\n              : setRight(event.target.value)\n          }\n          value={side === \"left\" ? left : right}\n        >\n          {options}\n        </select>\n      </div>\n    );\n  };\n\n  const reverseLink = () => {\n    let thisParent = props.link.targetPort.getParent() as Node;\n    let portNode = props.link.sourcePort.getParent() as Node;\n\n    let portNodePorts = portNode.getPorts() as {[s: string]: LogicPort};\n    let thisParentPorts = thisParent.getPorts() as {[s: string]: LogicPort};\n\n    let czyMaPortZPKjakoFk = Object.keys(thisParentPorts).filter(id => thisParentPorts[id].fkPortId === portNode.id)[0];\n    let czyMaPortZPKjakoFk2 = Object.keys(portNodePorts).filter(id => portNodePorts[id].fkPortId === thisParent.id)[0];\n    \n\n    if(czyMaPortZPKjakoFk) {\n      let labels = props.link.labels as Label[];\n      labels[0].label = '1';\n      labels[1].label = 'N';\n\n      thisParent.removePort(thisParentPorts[czyMaPortZPKjakoFk]);\n\n      let pk = Object.keys(thisParentPorts).filter(id => thisParentPorts[id].isPrimaryKey)[0];\n      portNode.addInPort(true,false,thisParent.name + thisParentPorts[pk].name, false, true, false,false,true,'INT', thisParent.id)\n    } else {\n      let labels = props.link.labels as Label[];\n      labels[0].label = 'N';\n      labels[1].label = '1';\n\n      portNode.removePort(portNodePorts[czyMaPortZPKjakoFk2]);\n\n      let pk = Object.keys(portNodePorts).filter(id => portNodePorts[id].isPrimaryKey)[0];\n      thisParent.addInPort(true,false,portNode.name + portNodePorts[pk].name, false, true, false,false,true,'INT', thisParent.id)\n    }\n    \n    props.update();\n  }\n\n  if (props.isLogic) {\n    return (\n      <Popup modal closeOnDocumentClick open={props.isOpen} closeOnEscape>\n        <div className=\"SQLResultDialog\">\n          <div className=\"grid-item\">\n            <button onClick={remove}>Remove</button>\n          </div>\n          <div className=\"grid-item\">\n            <button onClick={reverseLink}>Reverse</button>\n          </div>\n        </div>\n      </Popup>\n    );\n  } else\n    return (\n      <Popup modal closeOnDocumentClick open={props.isOpen} closeOnEscape>\n        <div className=\"SQLResultDialog\">\n          <div className=\"grid-container\">\n            <div className=\"grid-item\">\n              <p>{sourcePort && sourcePort.name}</p>\n            </div>\n            <div className=\"grid-item\">\n              <input\n                className=\"darkInput\"\n                type=\"text\"\n                defaultValue={relationName}\n                onChange={(event) => setRelationName(event.target.value)}\n              ></input>\n            </div>\n            <div className=\"grid-item\">\n              <p>{targetPort && targetPort.name}</p>\n            </div>\n            {renderOptionPicker(\"left\")}\n            <div className=\"grid-item\">\n              <button onClick={update}>SAVE</button>\n            </div>\n            {renderOptionPicker(\"right\")}\n            {/* <div className=\"grid-item\" /> */}\n            <div className=\"grid-item\"></div>\n            <div className=\"grid-item\">\n              <button onClick={remove}>Remove</button>\n            </div>\n            {/* <div className=\"grid-item\" /> */}\n          </div>\n          {props.link && left.includes(\"N\") && right.includes(\"N\") && (\n            <div>\n              <h3 style={{ margin: 0 }}>Atributes:</h3>\n              <PropertyTable\n                relView={true}\n                diagramEngine={props.diagramEngine}\n                selectedItem={props.link.properties}\n                isLogic={props.isLogic}\n              />\n            </div>\n          )}\n        </div>\n      </Popup>\n    );\n};\n","import \"./LoadFilePopup.scss\";\nimport React, { useState } from \"react\";\nimport Popup from \"reactjs-popup\";\n\nclass Props {\n  isOpen: boolean;\n  loadDiagram?: (name: string) => void;\n  update: () => void;\n}\n\nexport const LoadFilePopup = (props: Props) => {\n  let fileReader: FileReader;\n\n  const [fileContent, setFileContent] = useState(\"\");\n\n  const handleFileRead = (e: any) => {\n    const content = fileReader.result;\n    setFileContent(content as string);\n  };\n\n  const handleFileChosen = (name: any) => {\n    fileReader = new FileReader();\n    fileReader.onloadend = handleFileRead;\n    fileReader.readAsText(name);\n  };\n\n  return (\n    <Popup\n      modal\n      closeOnDocumentClick\n      open={props.isOpen}\n      closeOnEscape\n      onClose={() => props.update()}\n    >\n      <div className=\"sql-result-dialog\">\n        <input\n          type=\"file\"\n          onChange={event => handleFileChosen(event.target.files[0])}\n          accept=\".dbjson\"\n        />\n        <button onClick={() => props.loadDiagram(fileContent)}>Load</button>\n      </div>\n    </Popup>\n  );\n};\n","import { LoadFilePopup } from \"../components/popups/LoadFilePopup/LoadFilePopup\";\nimport React from \"react\";\nimport { Application } from \"../components/dragAndDrop/Application\";\nimport { DiagramModel } from \"storm-react-diagrams\";\n\nclass Props {\n  isOpen: boolean;\n  app: Application;\n  update: () => void;\n  setIsUml: (isUml: boolean) => void;\n  setIsLogic: (isLogic: boolean) => void;\n}\n\nexport const LoadFileHandler = (props: Props) => {\n  const loadDiagram = (name: string) => {\n    let engine = props.app.getDiagramEngine();\n    try {\n      let obj: {diagram: any, isUml: boolean, isLogic: boolean} = JSON.parse(name);\n    \n      props.setIsUml(obj.isUml);\n      obj.isLogic ? props.setIsLogic(obj.isLogic) : props.setIsLogic(false);\n\n  \n      let model2 = new DiagramModel();\n      model2.deSerializeDiagram(obj.diagram, engine);\n      let newLinks: any[] = Object.keys(model2.links).map(x => {\n        return model2.links[x];\n      });\n  \n      newLinks.forEach(link => {\n        link.labels.splice(0, 3);\n      });\n\n      if(obj.isLogic) {\n        props.app.loadLogicModel(model2);\n      } else {\n        props.app.loadConceptualModel(model2);\n      }\n\n      engine.repaintCanvas();\n      props.update();\n    } catch (error) {\n      console.log(error);\n    }\n\n  };\n\n  return (\n    <LoadFilePopup\n      update={props.update}\n      loadDiagram={name => loadDiagram(name)}\n      isOpen={props.isOpen}\n    />\n  );\n};\n","import \"./SaveToFilePopup.scss\";\nimport React, { useState } from \"react\";\nimport Popup from \"reactjs-popup\";\nimport { DiagramModel } from \"storm-react-diagrams\";\nimport FileSaver from \"file-saver\";\n\nclass Props {\n  isUml: boolean;\n  isLogic: boolean;\n\n  isOpen: boolean;\n  diagramModel: DiagramModel;\n  update: () => void;\n}\n\nexport const SaveToFilePopup = (props: Props) => {\n  const [fileName, setFileName] = useState(\"diagram\");\n\n  const download = () => {\n    const diagramJson = JSON.stringify({diagram: props.diagramModel.serializeDiagram(), isUml: props.isUml, isLogic: props.isLogic});\n\n    let blob = new Blob([diagramJson], { type: \"text/plain;charset=utf-8\" });\n    FileSaver.saveAs(blob, `${fileName}.dbjson`);\n    props.update();\n  };\n\n  return (\n    <Popup\n      modal\n      closeOnDocumentClick\n      open={props.isOpen}\n      closeOnEscape\n      onClose={() => props.update()}\n    >\n      <div className=\"sql-result-dialog\">\n        <input\n          type=\"text\"\n          onChange={event => setFileName(event.target.value)}\n          value={fileName}\n        />\n        <button onClick={download}>save</button>\n      </div>\n    </Popup>\n  );\n};\n","import \"./SaveToJpegPopup.scss\";\nimport React, { useState } from \"react\";\nimport Popup from \"reactjs-popup\";\nimport { DiagramModel } from \"storm-react-diagrams\";\nimport domtoimage from \"dom-to-image\";\n\nclass Props {\n  isOpen: boolean;\n  diagramModel: DiagramModel;\n  update: () => void;\n}\n\nexport const SaveToJpegPopup = (props: Props) => {\n  const [fileName, setFileName] = useState(\"diagram\");\n\n  const download = () => {\n    domtoimage\n      .toJpeg(document.getElementById(\"diagram-layer\"), { quality: 0.95 })\n      .then((dataUrl: any) => {\n        let link = document.createElement(\"a\");\n        link.download = `${fileName}.jpeg`;\n        link.href = dataUrl;\n        link.click();\n        props.update();\n      });\n  };\n\n  return (\n    <Popup\n      modal\n      closeOnDocumentClick\n      open={props.isOpen}\n      closeOnEscape\n      onClose={() => props.update()}\n    >\n      <div className=\"sql-result-dialog\">\n        <input\n          type=\"text\"\n          onChange={event => setFileName(event.target.value)}\n          value={fileName}\n        />\n        <button onClick={download}>save</button>\n      </div>\n    </Popup>\n  );\n};\n","import * as React from \"react\";\n\nimport { DiagramWidget, PointModel, LinkModelListener } from \"storm-react-diagrams\";\nimport { TrayItemWidget } from \"./components/dragAndDrop/TrayItemWidget\";\nimport { TrayWidget } from \"./components/dragAndDrop/TrayWidget\";\nimport { Application } from \"./components/dragAndDrop/Application\";\nimport { Node } from \"./infrastructure/models/Node\";\nimport { Link } from \"./infrastructure/models/Link\";\nimport { PropertyType } from \"./infrastructure/models/PropertyType\";\nimport {\n  NodeProperties,\n  useForceUpdate\n} from \"./components/nodeProperties/NodeProperties\";\nimport { GenerationHandler } from \"./handlers/GenerationHandler\";\nimport { RelationPopup } from \"./components/popups/RealtionPopup/RelationPopup\";\nimport { LoadFileHandler } from \"./handlers/LoadFileHandler\";\nimport { SaveToFilePopup } from \"./components/popups/SaveToFilePopup/SaveToFilePopup\";\nimport { CSSProperties } from \"react\";\nimport { SaveToJpegPopup } from \"./components/popups/SaveToJpegPopup/SaveToJpegPopup\";\nimport _ from \"lodash\";\nimport { Label } from \"./infrastructure/models/Label\";\n\nrequire(\"storm-react-diagrams/dist/style.min.css\");\nrequire(\"react-bootstrap-table-next/dist/react-bootstrap-table2.min.css\");\n\ninterface Props {\n  app: Application;\n}\n\nexport const AppView = (props: Props) => {\n  const diagramDiv = React.useRef(null);\n\n\n  const jpegFileTarget: React.RefObject<any> = null;\n\n  const [showDialog, setShowDialog] = React.useState(false);\n  const [showRelationDialog, setShowRelationDialog] = React.useState(false);\n  const [showLoadFileDialog, setShowLoadFileDialog] = React.useState(false);\n  const [showSaveFileDialog, setSaveFileDialog] = React.useState(false);\n  const [showSaveJPEGDialog, setSaveJPEGDialog] = React.useState(false);\n  const [showSaveOptions, setSaveOptions] = React.useState(false);\n\n  const [selectedNode, setSelectedNode] = React.useState(null);\n  const [selectedLink, setSelectedLink] = React.useState(null);\n\n  const [isUml, setIsUml] = React.useState(true);\n\n  const [isLogicModel, setIsLogicModel] = React.useState(false);\n\n\n\n  const forceUpdate = useForceUpdate();\n\n  React.useEffect(() => {\n    setSelectedNode(null);\n    setSelectedLink(null);\n  }, []);\n\n  const changeRelation = () => {\n    let links = props.app.getDiagramEngine().getDiagramModel().getLinks();\n    Object.keys(links).map(id => {\n      let temp = (links[id].labels[0] as Label).label.substring(0,1);\n      let temp2 = (links[id].labels[2] as Label).label.substring(0,1);\n\n      (links[id].labels[0] as Label).label = temp2 + (links[id].labels[0] as Label).label.substring(1);\n      (links[id].labels[2] as Label).label = temp + (links[id].labels[2] as Label).label.substring(1);\n    });\n  }\n\n  const refreshPopups = () => {\n    setSelectedLink(null);\n    setSelectedNode(null);\n\n    setShowDialog(false);\n    setSaveFileDialog(false);\n    setSaveJPEGDialog(false);\n    setSaveOptions(false);\n    setShowLoadFileDialog(false);\n    setShowRelationDialog(false);\n\n\n    let links = props.app.getDiagramEngine().getDiagramModel().getLinks();\n\n    Object.keys(links).map(id => {\n      links[id].targetPort == null && props.app.getDiagramEngine().getDiagramModel().removeLink(id);\n    });\n\n  };\n\n  const containerStyles: CSSProperties = {\n    display: \"flex\",\n    justifyContent: \"space-between\",\n    borderColor: \"rgb(255,123,0)\"\n  };\n  const itemStyles: CSSProperties = {\n    display: \"inline-block\",\n    paddingTop: 3,\n    paddingRight: 5\n  };\n\n  return (\n    <div className=\"body\">\n      <div className=\"header\">\n        <div className=\"title\">DB Diagram Scripter</div>\n      </div>\n      <div className=\"content\" ref={jpegFileTarget}>\n        <TrayWidget>\n          <TrayItemWidget\n            model={{ type: \"table\" }}\n            name=\"Entity\"\n            color=\"rgb(0,192,255)\"\n          />\n          <TrayItemWidget\n            model={{ type: \"label\" }}\n            name=\"Label\"\n            color=\"rgb(192,255,0)\"\n          />\n\n          <div\n            style={{ borderColor: \"rgb(255,123,0)\", marginTop: \"100px\" }}\n            className=\"tray-item\"\n            onClick={() => {\n              props.app.setConceptualModel();\n              setShowLoadFileDialog(true);\n              setSelectedNode(null);\n            }}\n          >\n            Load Diagram\n          </div>\n          <div\n            style={containerStyles}\n            className=\"tray-item\"\n            onClick={() => {\n              setSaveOptions(!showSaveOptions);\n              setSelectedNode(null);\n            }}\n          >\n            Save\n            <span\n              style={itemStyles}\n              className={`mi ${\n                !showSaveOptions ? \"mi-ArrowDown8\" : \"mi-ArrowUp8\"\n                }`}\n            />\n          </div>\n          {showSaveOptions && (\n            <div\n              style={{ borderColor: \"rgb(255,123,0)\" }}\n              className=\"tray-item\"\n              onClick={() => {\n                setSaveFileDialog(true);\n                setSelectedNode(null);\n              }}\n            >\n              File\n            </div>\n          )}\n          {showSaveOptions && (\n            <div\n              style={{ borderColor: \"rgb(255,123,0)\" }}\n              className=\"tray-item\"\n              onClick={() => {\n                setSaveJPEGDialog(true);\n                setSelectedNode(null);\n              }}\n            >\n              JPEG\n            </div>\n          )}\n          <div\n            style={{ borderColor: \"rgb(0,50,100)\", marginTop: \"100px\" }}\n            className={`tray-item ${!isLogicModel ? 'selected' : ''}`}\n            onClick={() => {\n              if(isLogicModel) {\n                props.app.setConceptualModel();\n                setIsLogicModel(false);\n                \n                \n                // diagramDiv.current.click();\n                // refreshPopups();\n\n                //  props.app.getDiagramEngine().getDiagramModel().setOffsetX(100);\n                //  props.app.getDiagramEngine().recalculatePortsVisually();\n                //  props.app.getDiagramEngine().repaintCanvas();\n\n              }\n            }}\n          >\n            Conceptual View\n          </div>\n          <div\n            style={{ borderColor: \"rgb(0,50,100)\" }}\n            className={`tray-item ${isLogicModel ? 'selected' : ''}`}\n            onClick={() => {\n              if(!isLogicModel) {\n                props.app.setLogicModel();\n                setIsLogicModel(true);\n              }\n            }}\n          >\n            Logic View\n          </div>\n          <div\n            style={{ borderColor: \"rgb(152,50,100)\", marginTop: \"100px\" }}\n            className={`tray-item ${isUml ? 'selected' : ''}  ${isLogicModel ? 'disabled' : ''}`}\n            onClick={() => {\n              if(!isLogicModel && !isUml) {\n                changeRelation();\n                setIsUml(true);\n              }\n            }}\n          >\n            UML\n          </div>\n          <div\n            style={{ borderColor: \"rgb(152,50,100)\" }}\n            className={`tray-item ${!isUml ? 'selected' : ''} ${isLogicModel ? 'disabled' : ''}`}\n            onClick={() => {\n              if(!isLogicModel && isUml) {\n                changeRelation();\n                setIsUml(false);\n              }\n            }}\n          >\n            Chen\n          </div>\n          <div\n            style={{ borderColor: \"rgb(255,0,0)\", marginTop: \"100px\" }}\n            className=\"tray-item\"\n            onClick={() => {\n              setShowDialog(true);\n              setSelectedNode(null);\n            }}\n          >\n            Create DB Code\n          </div>\n        </TrayWidget>\n\n        <div\n          ref={diagramDiv}\n          id=\"diagram-layer\"\n          className=\"diagram-layer\"\n          onDrop={event => {\n            event.preventDefault();\n            var data = JSON.parse(\n              event.dataTransfer.getData(\"storm-diagram-node\")\n            );\n\n            let allNodes = props.app\n              .getDiagramEngine()\n              .getDiagramModel()\n              .getNodes() as {\n                [id: string]: Node;\n              };\n            let names = Object.values(allNodes).map(node => allNodes[node.id].name.toLowerCase().trim());\n\n            var nodesCount = _.keys(\n              props.app\n                .getDiagramEngine()\n                .getDiagramModel()\n                .getNodes()\n            ).length;\n\n            let newNodeName = names.includes(`Entity${nodesCount + 1}`.toLowerCase().trim()) ? `Entity${nodesCount + 1}_${nodesCount + 1}` : `Entity${nodesCount + 1}`;\n\n            var node = null;\n            if (data.type === \"table\") {\n              node = new Node(\n                false,\n                newNodeName,\n                \"rgb(0,192,255)\"\n              );\n              node.addInPort(\n                isLogicModel,\n                false,\n                \"Id\",\n                true,\n                false,\n                true,\n                true,\n                true,\n                PropertyType.INT\n              );\n              node.addInPort(\n                isLogicModel,\n                true,\n                \"\",\n                false,\n                false,\n                false,\n                false,\n                false,\n                PropertyType.INT\n              );\n              node.addInPort(\n                isLogicModel,\n                true,\n                \"1\",\n                false,\n                false,\n                false,\n                false,\n                false,\n                PropertyType.INT\n              );\n\n              node.addListener({});\n            } else {\n              node = new Node(\n                true,\n                \"Label \",\n                \"rgb(192,255,0)\"\n              );\n            }\n\n            var points = props.app\n              .getDiagramEngine()\n              .getRelativeMousePoint(event);\n            node.x = points.x;\n            node.y = points.y;\n            props.app\n              .getDiagramEngine()\n              .getDiagramModel()\n              .addNode(node);\n\n            forceUpdate();\n          }}\n          onDragOver={event => {\n            event.preventDefault();\n          }}\n\n          onClick={event => {\n            event.preventDefault();\n            if (event.ctrlKey && props.app\n              .getDiagramEngine()\n              .getDiagramModel()\n              .getSelectedItems()[0] instanceof PointModel) {\n              const pointToRemove = props.app\n                .getDiagramEngine()\n                .getDiagramModel()\n                .getSelectedItems()[0] as PointModel;\n              const pointLink = props.app\n                .getDiagramEngine()\n                .getDiagramModel()\n                .getSelectedItems()[0].parent as Link;\n                \n                pointLink && props.app.getDiagramEngine().getDiagramModel().links[pointLink.id].removePoint(pointToRemove);\n            }\n            refreshPopups();\n          }}\n          onDoubleClick={event => {\n            event.preventDefault();\n            if ( //!isLogicModel &&\n              props.app\n                .getDiagramEngine()\n                .getDiagramModel()\n                .getSelectedItems()[0] instanceof PointModel\n            ) {\n              setSelectedLink(\n                props.app\n                  .getDiagramEngine()\n                  .getDiagramModel()\n                  .getSelectedItems()[0].parent as Link\n              );\n              setShowRelationDialog(true);\n              setSelectedNode(null);\n            } else if (\n              props.app\n                .getDiagramEngine()\n                .getDiagramModel()\n                .getSelectedItems()[0] instanceof Node\n            ) {\n              refreshPopups();\n              setSelectedNode(\n                props.app\n                  .getDiagramEngine()\n                  .getDiagramModel()\n                  .getSelectedItems()[0] as Node\n              );\n            }\n          }}\n        >\n          <DiagramWidget\n            allowLooseLinks={false}\n            deleteKeys={[selectedNode ? null : 46]}\n            className=\"srd-demo-canvas\"\n            diagramEngine={props.app.getDiagramEngine()}\n          />\n        </div>\n        {selectedNode != null ? (\n          <NodeProperties\n            isLogic={isLogicModel}\n            selectedItem={selectedNode}\n            diagramEngine={props.app.getDiagramEngine()}\n          />\n        ) : null}\n        <GenerationHandler\n          isUml={isUml}\n          isLogic={isLogicModel}\n          update={refreshPopups}\n          isOpen={showDialog}\n          serializeDiagram={props.app.getDiagramEngine().diagramModel.serializeDiagram()}\n        />\n        <LoadFileHandler\n          update={refreshPopups}\n          isOpen={showLoadFileDialog}\n          app={props.app}\n          setIsUml={setIsUml}\n          setIsLogic={setIsLogicModel}\n        />\n        <SaveToFilePopup\n          isLogic={isLogicModel}\n          update={refreshPopups}\n          diagramModel={props.app.getDiagramEngine().diagramModel}\n          isOpen={showSaveFileDialog}\n          isUml={isUml}\n        />\n        <SaveToJpegPopup\n          update={refreshPopups}\n          diagramModel={props.app.getActiveDiagram()}\n          isOpen={showSaveJPEGDialog}\n        />\n\n        <RelationPopup\n          diagramModel={props.app.getActiveDiagram()}\n          diagramEngine={props.app.getDiagramEngine()}\n\n          update={refreshPopups}\n          isOpen={showRelationDialog}\n          link={selectedLink}\n\n          isLogic={isLogicModel}\n        />\n      </div>\n    </div>\n  );\n};\n","import * as React from \"react\";\nimport { Application } from \"./components/dragAndDrop/Application\";\nimport { AppView } from \"./AppView\";\nrequire(\"react-bootstrap-table-next/dist/react-bootstrap-table2.min.css\");\nrequire(\"storm-react-diagrams/dist/style.min.css\");\n\nexport const App = () => {\n  return <AppView app={new Application()} />;\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import \"./styles/index.scss\";\nimport \"./styles/App.scss\";\nimport \"./styles/dragAndDrop.scss\";\nimport \"./icons/micon/css/micon.min.css\";\nimport \"react-bootstrap-table-next/dist/react-bootstrap-table2.min.css\";\nimport { App } from \"./App\";\nimport * as ReactDOM from \"react-dom\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport * as React from \"react\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}